<?xml version="1.0" encoding="utf-8"?>
<xs:schema
	targetNamespace="http://schemas.orm.net/DIL/DCIL"
	xmlns:dcl="http://schemas.orm.net/DIL/DCIL"
	xmlns:dil="http://schemas.orm.net/DIL/DIL"
	xmlns:ddt="http://schemas.orm.net/DIL/DILDT"
	xmlns:dep="http://schemas.orm.net/DIL/DILEP"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	elementFormDefault="qualified"
	attributeFormDefault="unqualified"
	version="0.9">

	<xs:annotation>
		<xs:appinfo>
			<rdf:RDF
				xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
				xmlns:dc="http://purl.org/dc/elements/1.1/"
				xmlns:dcterms="http://purl.org/dc/terms/">
				<rdf:Description rdf:about="http://schemas.orm.net/DIL/DCIL">
					<dcterms:isPartOf rdf:resource="http://schemas.orm.net/DIL"/>
					<dcterms:requires rdf:resource="http://schemas.orm.net/DIL/DIL"/>
					<dcterms:requires rdf:resource="http://schemas.orm.net/DIL/DILDT"/>
					<dcterms:requires rdf:resource="http://schemas.orm.net/DIL/DILEP"/>
					<dc:title>Database Conceptual Intermediate Language</dc:title>
					<dc:creator>Kevin M. Owen</dc:creator>
					<dc:creator>Corey Kaylor</dc:creator>
					<dc:contributor>Korvyn Dornseif</dc:contributor>
					<dc:contributor>Rolando Sanidad</dc:contributor>
					<dc:contributor>Jeremy Robertson</dc:contributor>
					<dc:contributor>Noah Langenwalter</dc:contributor>
					<dc:contributor>Jason Barnes</dc:contributor>
					<dc:rights>Copyright © Neumont University. All rights reserved.</dc:rights>
					<dcterms:rightsHolder>Neumont University</dcterms:rightsHolder>
					<dcterms:license>
						This software is provided 'as-is', without any express or implied warranty. In no event will the authors be held liable for any damages arising from the use of this software.
						Permission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions:
						1. The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required.
						2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.
						3. This notice may not be removed or altered from any source distribution.
					</dcterms:license>
				</rdf:Description>
			</rdf:RDF>
		</xs:appinfo>
	</xs:annotation>

	<xs:import namespace="http://schemas.orm.net/DIL/DIL"/>
	<xs:import namespace="http://schemas.orm.net/DIL/DILDT"/>
	<xs:import namespace="http://schemas.orm.net/DIL/DILEP"/>

	<xs:element name="root">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="dcl:catalog" minOccurs="1" maxOccurs="unbounded"/>
			</xs:sequence>
		</xs:complexType>
		<xs:key name="catalogNameKey">
			<xs:selector xpath="dcl:catalog"/>
			<xs:field xpath="@name"/>
		</xs:key>
	</xs:element>

	<xs:element name="catalog">
		<xs:annotation>
			<xs:documentation>A named collection of schemas (commonly referred to as a database). Equivalent to a 'CATALOG' in the SQL Standard.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="dcl:schema" maxOccurs="unbounded"/>
			</xs:sequence>
			<xs:attribute name="name" use="required" type="ddt:identifier">
				<xs:annotation>
					<xs:documentation>The name of the catalog.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
		<xs:key name="schemaNameKey">
			<xs:selector xpath="dcl:schema"/>
			<xs:field xpath="@name"/>
		</xs:key>
	</xs:element>

	<xs:element name="schema">
		<xs:annotation>
			<xs:documentation>Equivalent to a 'SCHEMA' in the SQL Standard.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:choice maxOccurs="unbounded">
				<xs:element ref="dcl:table"/>
				<xs:element ref="dcl:domain"/>
				<xs:element ref="dcl:trigger"/>
				<xs:element ref="dcl:procedure"/>
			</xs:choice>
			<xs:attribute name="name" use="required" type="ddt:identifier">
				<xs:annotation>
					<xs:documentation>The name of the schema.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attributeGroup ref="dcl:requestedNameAttribute"/>
		</xs:complexType>
		<xs:key name="tableNameKey">
			<xs:selector xpath="dcl:table"/>
			<xs:field xpath="@name"/>
		</xs:key>
		<xs:key name="domainNameKey">
			<xs:selector xpath="dcl:domain"/>
			<xs:field xpath="@name"/>
		</xs:key>
		<xs:key name="triggerNameKey">
			<xs:selector xpath="dcl:trigger"/>
			<xs:field xpath="@name"/>
		</xs:key>
		<xs:key name="procedureNameKey">
			<xs:selector xpath="dcl:procedure"/>
			<xs:field xpath="@name"/>
		</xs:key>
	</xs:element>

	<xs:element name="table">
		<xs:annotation>
			<xs:documentation>Equivalent to a 'TABLE' in the SQL Standard.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:choice maxOccurs="unbounded">
				<xs:element ref="dcl:column"/>
				<xs:group ref="dcl:constraint"/>
			</xs:choice>
			<xs:attribute name="name" use="required" type="ddt:identifier">
				<xs:annotation>
					<xs:documentation>The name of the table.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attributeGroup ref="dcl:requestedNameAttribute"/>
		</xs:complexType>
		<xs:key name="tableChildNameKey">
			<xs:selector xpath="dcl:table/*"/>
			<xs:field xpath="@name"/>
		</xs:key>
		<xs:key name="columnNameKey">
			<xs:selector xpath="dcl:column"/>
			<xs:field xpath="@name"/>
		</xs:key>
	</xs:element>

	<xs:complexType name="predefinedDataType">
		<xs:attribute name="name" use="required" type="ddt:predefinedTypes"/>
		<xs:attribute name="length" use="optional" type="ddt:stringLength">
			<xs:annotation>
				<xs:documentation>The number of characters in a CHARACTER, CHARACTER VARYING, or CHARACTER LARGE OBJECT, or the number of bytes in a BINARY, BINARY VARYING, or BINARY LARGE OBJECT.</xs:documentation>
				<xs:documentation>If this is any other data type, a value for this attribute must not be specified.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="precision" use="optional" type="ddt:numericPrecision">
			<xs:annotation>
				<xs:documentation>The maximum number of decimal digits in a NUMERIC or DECIMAL, or the maximum number of binary digits in the significand (mantissa) of a FLOAT.</xs:documentation>
				<xs:documentation>If this is any other data type, a value for this attribute must not be specified.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="scale" use="optional" type="ddt:numericScale">
			<xs:annotation>
				<xs:documentation>The maximum number of decimal digits after the decimal point in a NUMERIC or DECIMAL.</xs:documentation>
				<xs:documentation>If this is any other data type, a value for this attribute must not be specified.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>

	<xs:element name="column">
		<xs:annotation>
			<xs:documentation>Equivalent to a 'COLUMN' in the SQL Standard.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:choice minOccurs="1" maxOccurs="1">
					<xs:element name="domainRef">
						<xs:annotation>
							<xs:documentation>A reference to a user-defined data domain.</xs:documentation>
						</xs:annotation>
						<xs:complexType>
							<xs:attribute name="name" type="ddt:identifier">
								<xs:annotation>
									<xs:documentation>The name of the data domain being referenced.</xs:documentation>
								</xs:annotation>
							</xs:attribute>
							<xs:attribute name="schemaName" type="ddt:identifier">
								<xs:annotation>
									<xs:documentation>The name of the external schema for the referenced domain.</xs:documentation>
								</xs:annotation>
							</xs:attribute>
						</xs:complexType>
						<!-- UNDONE: This is invalid if the targetSchema is set. The key needs to be defined
						at the catalog level, but we currently generate files with just a schema element, so
						there is no good way to enforce this key. -->
						<!--<xs:keyref name="domainRef" refer="dcl:domainNameKey">
							<xs:selector xpath="."/>
							<xs:field xpath="@name"/>
						</xs:keyref>-->
					</xs:element>
					<xs:element name="predefinedDataType" type="dcl:predefinedDataType"/>
				</xs:choice>
				<xs:element name="generationCode" type="dep:valueExpression" minOccurs="0" maxOccurs="1">
					<xs:annotation>
						<xs:documentation>The code used in the generation / computation of this column.</xs:documentation>
						<xs:documentation>This element may only be present if @isIdentity is false.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element ref="dil:defaultClause" minOccurs="0" maxOccurs="1"/>
			</xs:sequence>
			<xs:attribute name="name" use="required" type="ddt:identifier">
				<xs:annotation>
					<xs:documentation>The name of the column.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attributeGroup ref="dcl:requestedNameAttribute"/>
			<xs:attribute name="isNullable" use="required" type="xs:boolean">
				<xs:annotation>
					<xs:documentation>Is NULL a valid value for this column?</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="isIdentity" use="optional" type="xs:boolean" default="false">
				<xs:annotation>
					<xs:documentation>Is this an IDENTITY column?</xs:documentation>
					<xs:documentation>If 'true' is specified for this attribute, the generationCode element must not be present.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>

	</xs:element>

	<xs:element name="domain">
		<xs:annotation>
			<xs:documentation>A user-defined data domain, which can have custom restrictions on it.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="predefinedDataType" type="dcl:predefinedDataType"/>
				<xs:element ref="dcl:checkConstraint" maxOccurs="unbounded">
					<xs:annotation>
						<xs:documentation>A check constraint on this data domain.</xs:documentation>
					</xs:annotation>
				</xs:element>
			</xs:sequence>
			<xs:attribute name="name" use="required" type="ddt:identifier">
				<xs:annotation>
					<xs:documentation>The name of the data domain.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attributeGroup ref="dcl:requestedNameAttribute"/>
		</xs:complexType>
	</xs:element>

	<xs:group name="constraint">
		<xs:choice>
			<xs:element ref="dcl:uniquenessConstraint"/>
			<xs:element ref="dcl:referenceConstraint"/>
			<xs:element ref="dcl:checkConstraint"/>
		</xs:choice>
	</xs:group>
	<xs:complexType name="constraintType" abstract="true">
		<xs:annotation>
			<xs:documentation>A constraint on a table or a data domain.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="name" use="required" type="ddt:identifier">
			<xs:annotation>
				<xs:documentation>The name of the constraint.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attributeGroup ref="dcl:requestedNameAttribute"/>
	</xs:complexType>

	<xs:element name="uniquenessConstraint">
		<xs:annotation>
			<xs:documentation>A constraint on the uniqueness of a collection of columns. Equivalent to a 'UNIQUE' or 'PRIMARY KEY' in the SQL Standard.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="dcl:constraintType">
					<xs:sequence>
						<xs:element name="columnRef" minOccurs="1" maxOccurs="unbounded">
							<xs:annotation>
								<xs:documentation>A reference to a column.</xs:documentation>
							</xs:annotation>
							<xs:complexType>
								<xs:attribute name="name" use="required" type="ddt:identifier">
									<xs:annotation>
										<xs:documentation>The name of the column being referenced.</xs:documentation>
									</xs:annotation>
								</xs:attribute>
							</xs:complexType>
							<xs:keyref name="uniquenessConstraintColumnRef" refer="dcl:columnNameKey">
								<xs:selector xpath="."/>
								<xs:field xpath="@name"/>
							</xs:keyref>
						</xs:element>
					</xs:sequence>
					<xs:attribute name="isPrimary" use="required" type="xs:boolean">
						<xs:annotation>
							<xs:documentation>Is this uniqueness constraint a PRIMARY KEY?</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>

	<xs:element name="referenceConstraint">
		<xs:annotation>
			<xs:documentation>A reference to a key in another table. Equivalent to a 'FOREIGN KEY' in the SQL Standard.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="dcl:constraintType">
					<xs:sequence>
						<xs:element name="columnRef" minOccurs="1" maxOccurs="unbounded">
							<xs:annotation>
								<xs:documentation>A reference from a column in this table to a column in the target table.</xs:documentation>
							</xs:annotation>
							<xs:complexType>
								<xs:attribute name="sourceName" use="required" type="ddt:identifier">
									<xs:annotation>
										<xs:documentation>The name of the referencing column in this table.</xs:documentation>
									</xs:annotation>
								</xs:attribute>
								<xs:attribute name="targetName" use="required" type="ddt:identifier">
									<xs:annotation>
										<xs:documentation>The name of the referenced column in the target table.</xs:documentation>
									</xs:annotation>
								</xs:attribute>
							</xs:complexType>
							<xs:keyref name="referenceConstraintColumnRef" refer="dcl:columnNameKey">
								<xs:selector xpath="dcl:columnRef"/>
								<xs:field xpath="@sourceName"/>
							</xs:keyref>
						</xs:element>
					</xs:sequence>
					<xs:attribute name="targetTable" use="required" type="ddt:identifier">
						<xs:annotation>
							<xs:documentation>The name of the table being referenced.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="targetSchema" type="ddt:identifier">
						<xs:annotation>
							<xs:documentation>The name of the external target schema.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
		<!-- UNDONE: This is invalid if the targetSchema is set. The key needs to be defined
		at the catalog level, but we currently generate files with just a schema element, so
		there is no good way to enforce this key. -->
		<!-- <xs:keyref name="referenceConstraintTargetTableRef" refer="dcl:tableNameKey">
			<xs:selector xpath="."/>
			<xs:field xpath="@targetTable"/>
		</xs:keyref> -->
	</xs:element>

	<xs:element name="checkConstraint">
		<xs:annotation>
			<xs:documentation>Equivalent to a table-level or domain 'CHECK' clause in the SQL Standard.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="dcl:constraintType">
					<xs:group ref="dep:booleanValueExpression"/>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>

	<xs:element name="trigger">
		<xs:annotation>
			<xs:documentation>Equivalent to a 'TRIGGER' in the SQL Standard.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="columns" minOccurs="0" maxOccurs="1">
					<xs:annotation>
						<xs:documentation>The columns that will cause this trigger to fire.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:element name="columnRef" minOccurs="1" maxOccurs="unbounded">
								<xs:annotation>
									<xs:documentation>A reference to a column.</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:attribute name="name" use="required" type="ddt:identifier">
										<xs:annotation>
											<xs:documentation>The name of the column being referenced.</xs:documentation>
										</xs:annotation>
									</xs:attribute>
								</xs:complexType>
								<xs:keyref name="triggerColumnRef" refer="dcl:columnNameKey">
									<xs:selector xpath="."/>
									<xs:field xpath="@name"/>
								</xs:keyref>
							</xs:element>
						</xs:sequence>
					</xs:complexType>
					<xs:key name="triggerColumnRefNameKey">
						<xs:selector xpath="dcl:columnRef"/>
						<xs:field xpath="@name"/>
					</xs:key>
				</xs:element>
				<xs:element name="referencing" minOccurs="0" maxOccurs="4">
					<xs:annotation>
						<xs:documentation>Equivalent to the 'REFERENCING' clause in the SQL Standard.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:attribute name="target" use="required">
							<xs:simpleType>
								<xs:restriction base="xs:token">
									<xs:enumeration value="OLD ROW"/>
									<xs:enumeration value="NEW ROW"/>
									<xs:enumeration value="OLD TABLE"/>
									<xs:enumeration value="NEW TABLE"/>
								</xs:restriction>
							</xs:simpleType>
						</xs:attribute>
						<xs:attribute name="name" use="required" type="ddt:identifier">
							<xs:annotation>
								<xs:documentation>The name of the transition variable or table.</xs:documentation>
							</xs:annotation>
						</xs:attribute>
					</xs:complexType>
				</xs:element>
				<xs:element name="when" minOccurs="0" maxOccurs="1" type="dep:booleanValueExpression">
					<xs:annotation>
						<xs:documentation>Equivalent to a search condition in the SQL Standard.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="atomicBlock">
					<xs:complexType>
						<xs:group ref="dil:sqlProcedureStatement" maxOccurs="unbounded"/>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
			<xs:attribute name="name" use="required" type="ddt:identifier">
				<xs:annotation>
					<xs:documentation>The name of the trigger.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attributeGroup ref="dcl:requestedNameAttribute"/>
			<xs:attribute name="targetTable" use="required" type="ddt:identifier">
				<xs:annotation>
					<xs:documentation>The name of the table being referenced.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="actionTime" use="required">
				<xs:annotation>
					<xs:documentation>When the trigger fires.</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:NMTOKEN">
						<xs:enumeration value="BEFORE"/>
						<xs:enumeration value="AFTER"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="event" use="required">
				<xs:annotation>
					<xs:documentation>The event that causes trigger to fire.</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:NMTOKEN">
						<xs:enumeration value="INSERT"/>
						<xs:enumeration value="DELETE"/>
						<xs:enumeration value="UPDATE"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="forEach" use="required">
				<xs:annotation>
					<xs:documentation>The level of the trigger.</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:NMTOKEN">
						<xs:enumeration value="STATEMENT"/>
						<xs:enumeration value="ROW"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
		<xs:key name="referencingTargetKey">
			<xs:selector xpath="dcl:referencing"/>
			<xs:field xpath="@target"/>
		</xs:key>
		<xs:key name="referencingNameKey">
			<xs:selector xpath="dcl:referencing"/>
			<xs:field xpath="@name"/>
			</xs:key>
		<xs:keyref name="triggerTargetTableRef" refer="dcl:tableNameKey">
			<xs:selector xpath="."/>
			<xs:field xpath="@targetTable"/>
		</xs:keyref>
	</xs:element>

	<xs:element name="procedure">
		<xs:annotation>
			<xs:documentation>Equivalent to a 'PROCEDURE' in the SQL standard.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="parameter" minOccurs="0" maxOccurs="unbounded">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="predefinedDataType" type="dcl:predefinedDataType"/>
						</xs:sequence>
						<xs:attribute name="mode" use="required">
							<xs:simpleType>
								<xs:restriction base="xs:string">
									<xs:enumeration value="IN"/>
									<xs:enumeration value="OUT"/>
									<xs:enumeration value="INOUT"/>
								</xs:restriction>
							</xs:simpleType>
						</xs:attribute>
						<xs:attribute name="name" use="required" type="ddt:identifier">
							<xs:annotation>
								<xs:documentation>The name of the parameter.</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attributeGroup ref="dcl:requestedNameAttribute"/>
					</xs:complexType>
				</xs:element>
				<xs:group ref="dil:sqlProcedureStatement"/>
			</xs:sequence>
			<xs:attribute name="name" use="required" type="ddt:identifier">
				<xs:annotation>
					<xs:documentation>The name of the procedure.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attributeGroup ref="dcl:requestedNameAttribute"/>
			<xs:attribute name="sqlDataAccessIndication" use="required">
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="NO SQL"/>
						<xs:enumeration value="CONTAINS SQL"/>
						<xs:enumeration value="READS SQL DATA"/>
						<xs:enumeration value="MODIFIES SQL DATA"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
		<xs:key name="procedureParameterNameKey">
			<xs:selector xpath="dcl:parameter"/>
			<xs:field xpath="@name"/>
		</xs:key>
	</xs:element>
	<xs:attributeGroup name="requestedNameAttribute">
		<xs:attribute name="requestedName" type="xs:string">
			<xs:annotation>
				<xs:documentation>If specified, then the name was modified to satisfy SQL standards. This is the original name that was automatically modified.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:attributeGroup>
</xs:schema>
