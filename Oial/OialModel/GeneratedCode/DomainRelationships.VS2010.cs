#region Common Public License Copyright Notice
/**************************************************************************\
* Natural Object-Role Modeling Architect for Visual Studio                 *
*                                                                          *
* Copyright © Neumont University. All rights reserved.                     *
* Copyright © ORM Solutions, LLC. All rights reserved.                     *
*                                                                          *
* The use and distribution terms for this software are covered by the      *
* Common Public License 1.0 (http://opensource.org/licenses/cpl) which     *
* can be found in the file CPL.txt at the root of this distribution.       *
* By using this software in any fashion, you are agreeing to be bound by   *
* the terms of this license.                                               *
*                                                                          *
* You must not remove this notice, or any other, from this software.       *
\**************************************************************************/
#endregion
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace ORMSolutions.ORMArchitect.ORMAbstraction
{
	/// <summary>
	/// DomainRelationship AbstractionModelHasConceptType
	/// Description for
	/// ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasConceptType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasConceptType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasConceptType.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("35e02e9e-24db-4def-b1cc-c8051f0e44a7")]
	public sealed partial class AbstractionModelHasConceptType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AbstractionModelHasConceptType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x35e02e9e, 0x24db, 0x4def, 0xb1, 0xcc, 0xc8, 0x05, 0x1f, 0x0e, 0x44, 0xa7);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AbstractionModelHasConceptType link in the same Partition as the given AbstractionModel
		/// </summary>
		/// <param name="source">AbstractionModel to use as the source of the relationship.</param>
		/// <param name="target">ConceptType to use as the target of the relationship.</param>
		public AbstractionModelHasConceptType(AbstractionModel source, ConceptType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AbstractionModelHasConceptType.ModelDomainRoleId, source), new DslModeling::RoleAssignment(AbstractionModelHasConceptType.ConceptTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AbstractionModelHasConceptType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AbstractionModelHasConceptType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AbstractionModelHasConceptType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AbstractionModelHasConceptType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x1bc6d220, 0xdddd, 0x4c8f, 0xbf, 0xbd, 0x94, 0x4a, 0x84, 0xaf, 0x31, 0x1f);
		
		/// <summary>
		/// DomainRole Model
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasConceptType.Model
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasConceptType/Model.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasConceptType/Model.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ConceptTypeCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasConceptType/Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("1bc6d220-dddd-4c8f-bfbd-944a84af311f")]
		public AbstractionModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AbstractionModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a ConceptType
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AbstractionModel GetModel(ConceptType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConceptTypeDomainRoleId) as AbstractionModel;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(ConceptType element, AbstractionModel newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConceptTypeDomainRoleId, newModel);
		}
		#endregion
		#region ConceptType domain role code
		
		/// <summary>
		/// ConceptType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConceptTypeDomainRoleId = new global::System.Guid(0x3502b0a1, 0xab2b, 0x4c6c, 0x8d, 0x2e, 0xc2, 0x84, 0xe4, 0xf4, 0x79, 0x2a);
		
		/// <summary>
		/// DomainRole ConceptType
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasConceptType.ConceptType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasConceptType/ConceptType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasConceptType/ConceptType.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasConceptType/ConceptType.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("3502b0a1-ab2b-4c6c-8d2e-c284e4f4792a")]
		public ConceptType ConceptType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConceptType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConceptTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConceptTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConceptTypeCollection of a AbstractionModel
		/// <summary>
		/// Gets a list of ConceptTypeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ConceptType> GetConceptTypeCollection(AbstractionModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ConceptType>, ConceptType>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of AbstractionModelHasConceptType links to a AbstractionModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasConceptType> GetLinksToConceptTypeCollection ( global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasConceptType>(modelInstance, global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasConceptType.ModelDomainRoleId);
		}
		#endregion
		#region ConceptType link accessor
		/// <summary>
		/// Get the AbstractionModelHasConceptType link to a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasConceptType GetLinkToModel (global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType conceptTypeInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasConceptType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasConceptType>(conceptTypeInstance, global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasConceptType.ConceptTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ConceptType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AbstractionModelHasConceptType instance accessors
		
		/// <summary>
		/// Get any AbstractionModelHasConceptType links between a given AbstractionModel and a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasConceptType> GetLinks( global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel source, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasConceptType> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasConceptType>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasConceptType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasConceptType>(source, global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasConceptType.ModelDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasConceptType link in links )
			{
				if ( target.Equals(link.ConceptType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AbstractionModelHasConceptType link between a given AbstractionModeland a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasConceptType GetLink( global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel source, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasConceptType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasConceptType>(source, global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasConceptType.ModelDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasConceptType link in links )
			{
				if ( target.Equals(link.ConceptType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.ORMAbstraction
{
	/// <summary>
	/// DomainRelationship AbstractionModelHasInformationTypeFormat
	/// Description for
	/// ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasInformationTypeFormat
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasInformationTypeFormat.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasInformationTypeFormat.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("2cdba90a-2059-48a7-b272-21cee9119c55")]
	public sealed partial class AbstractionModelHasInformationTypeFormat : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AbstractionModelHasInformationTypeFormat domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2cdba90a, 0x2059, 0x48a7, 0xb2, 0x72, 0x21, 0xce, 0xe9, 0x11, 0x9c, 0x55);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AbstractionModelHasInformationTypeFormat link in the same Partition as the given AbstractionModel
		/// </summary>
		/// <param name="source">AbstractionModel to use as the source of the relationship.</param>
		/// <param name="target">InformationTypeFormat to use as the target of the relationship.</param>
		public AbstractionModelHasInformationTypeFormat(AbstractionModel source, InformationTypeFormat target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AbstractionModelHasInformationTypeFormat.ModelDomainRoleId, source), new DslModeling::RoleAssignment(AbstractionModelHasInformationTypeFormat.InformationTypeFormatDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AbstractionModelHasInformationTypeFormat(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AbstractionModelHasInformationTypeFormat(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AbstractionModelHasInformationTypeFormat(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AbstractionModelHasInformationTypeFormat(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x0e93bb32, 0x8dde, 0x4ac6, 0xa1, 0x7a, 0x25, 0x9f, 0x42, 0x26, 0x0f, 0xed);
		
		/// <summary>
		/// DomainRole Model
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasInformationTypeFormat.Model
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasInformationTypeFormat/Model.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasInformationTypeFormat/Model.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "InformationTypeFormatCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasInformationTypeFormat/Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0e93bb32-8dde-4ac6-a17a-259f42260fed")]
		public AbstractionModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AbstractionModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a InformationTypeFormat
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AbstractionModel GetModel(InformationTypeFormat element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, InformationTypeFormatDomainRoleId) as AbstractionModel;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(InformationTypeFormat element, AbstractionModel newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, InformationTypeFormatDomainRoleId, newModel);
		}
		#endregion
		#region InformationTypeFormat domain role code
		
		/// <summary>
		/// InformationTypeFormat domain role Id.
		/// </summary>
		public static readonly global::System.Guid InformationTypeFormatDomainRoleId = new global::System.Guid(0x4be4be54, 0xfe23, 0x4445, 0x9d, 0xe2, 0x15, 0x58, 0x8d, 0x86, 0xb5, 0xe6);
		
		/// <summary>
		/// DomainRole InformationTypeFormat
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasInformationTypeFormat.InformationTypeFormat
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasInformationTypeFormat/InformationTypeFormat.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasInformationTypeFormat/InformationTypeFormat.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasInformationTypeFormat/InformationTypeFormat.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("4be4be54-fe23-4445-9de2-15588d86b5e6")]
		public InformationTypeFormat InformationTypeFormat
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (InformationTypeFormat)DslModeling::DomainRoleInfo.GetRolePlayer(this, InformationTypeFormatDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InformationTypeFormatDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InformationTypeFormatCollection of a AbstractionModel
		/// <summary>
		/// Gets a list of InformationTypeFormatCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<InformationTypeFormat> GetInformationTypeFormatCollection(AbstractionModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<InformationTypeFormat>, InformationTypeFormat>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of AbstractionModelHasInformationTypeFormat links to a AbstractionModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasInformationTypeFormat> GetLinksToInformationTypeFormatCollection ( global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasInformationTypeFormat>(modelInstance, global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasInformationTypeFormat.ModelDomainRoleId);
		}
		#endregion
		#region InformationTypeFormat link accessor
		/// <summary>
		/// Get the AbstractionModelHasInformationTypeFormat link to a InformationTypeFormat.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasInformationTypeFormat GetLinkToModel (global::ORMSolutions.ORMArchitect.ORMAbstraction.InformationTypeFormat informationTypeFormatInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasInformationTypeFormat> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasInformationTypeFormat>(informationTypeFormatInstance, global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasInformationTypeFormat.InformationTypeFormatDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of InformationTypeFormat not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AbstractionModelHasInformationTypeFormat instance accessors
		
		/// <summary>
		/// Get any AbstractionModelHasInformationTypeFormat links between a given AbstractionModel and a InformationTypeFormat.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasInformationTypeFormat> GetLinks( global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel source, global::ORMSolutions.ORMArchitect.ORMAbstraction.InformationTypeFormat target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasInformationTypeFormat> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasInformationTypeFormat>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasInformationTypeFormat> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasInformationTypeFormat>(source, global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasInformationTypeFormat.ModelDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasInformationTypeFormat link in links )
			{
				if ( target.Equals(link.InformationTypeFormat) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AbstractionModelHasInformationTypeFormat link between a given AbstractionModeland a InformationTypeFormat.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasInformationTypeFormat GetLink( global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel source, global::ORMSolutions.ORMArchitect.ORMAbstraction.InformationTypeFormat target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasInformationTypeFormat> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasInformationTypeFormat>(source, global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasInformationTypeFormat.ModelDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasInformationTypeFormat link in links )
			{
				if ( target.Equals(link.InformationTypeFormat) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.ORMAbstraction
{
	/// <summary>
	/// DomainRelationship AbstractionModelHasPositiveUnaryInformationTypeFormat
	/// Description for
	/// ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasPositiveUnaryInformationTypeFormat
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasPositiveUnaryInformationTypeFormat.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasPositiveUnaryInformationTypeFormat.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("e73b7add-537c-49ca-a22a-e37e94458fd1")]
	public sealed partial class AbstractionModelHasPositiveUnaryInformationTypeFormat : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AbstractionModelHasPositiveUnaryInformationTypeFormat domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe73b7add, 0x537c, 0x49ca, 0xa2, 0x2a, 0xe3, 0x7e, 0x94, 0x45, 0x8f, 0xd1);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AbstractionModelHasPositiveUnaryInformationTypeFormat link in the same Partition as the given AbstractionModel
		/// </summary>
		/// <param name="source">AbstractionModel to use as the source of the relationship.</param>
		/// <param name="target">PositiveUnaryInformationTypeFormat to use as the target of the relationship.</param>
		public AbstractionModelHasPositiveUnaryInformationTypeFormat(AbstractionModel source, PositiveUnaryInformationTypeFormat target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AbstractionModelHasPositiveUnaryInformationTypeFormat.ModelDomainRoleId, source), new DslModeling::RoleAssignment(AbstractionModelHasPositiveUnaryInformationTypeFormat.InformationTypeFormatDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AbstractionModelHasPositiveUnaryInformationTypeFormat(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AbstractionModelHasPositiveUnaryInformationTypeFormat(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AbstractionModelHasPositiveUnaryInformationTypeFormat(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AbstractionModelHasPositiveUnaryInformationTypeFormat(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x2c8bba6b, 0xebfe, 0x410b, 0xba, 0x13, 0xdb, 0xb5, 0x87, 0x20, 0x45, 0xa1);
		
		/// <summary>
		/// DomainRole Model
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasPositiveUnaryInformationTypeFormat.Model
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasPositiveUnaryInformationTypeFormat/Model.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasPositiveUnaryInformationTypeFormat/Model.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "PositiveUnaryInformationTypeFormat", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasPositiveUnaryInformationTypeFormat/Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("2c8bba6b-ebfe-410b-ba13-dbb5872045a1")]
		public AbstractionModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AbstractionModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a PositiveUnaryInformationTypeFormat
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AbstractionModel GetModel(PositiveUnaryInformationTypeFormat element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, InformationTypeFormatDomainRoleId) as AbstractionModel;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(PositiveUnaryInformationTypeFormat element, AbstractionModel newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, InformationTypeFormatDomainRoleId, newModel);
		}
		#endregion
		#region InformationTypeFormat domain role code
		
		/// <summary>
		/// InformationTypeFormat domain role Id.
		/// </summary>
		public static readonly global::System.Guid InformationTypeFormatDomainRoleId = new global::System.Guid(0x3e40f442, 0xbc82, 0x47da, 0x84, 0xcd, 0x04, 0x24, 0xdf, 0x77, 0xcb, 0xd8);
		
		/// <summary>
		/// DomainRole InformationTypeFormat
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasPositiveUnaryInformationTypeFormat.InformationTypeFormat
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasPositiveUnaryInformationTypeFormat/InformationTypeFormat.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasPositiveUnaryInformationTypeFormat/InformationTypeFormat.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasPositiveUnaryInformationTypeFormat/InformationTypeFormat.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("3e40f442-bc82-47da-84cd-0424df77cbd8")]
		public PositiveUnaryInformationTypeFormat InformationTypeFormat
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PositiveUnaryInformationTypeFormat)DslModeling::DomainRoleInfo.GetRolePlayer(this, InformationTypeFormatDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InformationTypeFormatDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PositiveUnaryInformationTypeFormat of a AbstractionModel
		/// <summary>
		/// Gets PositiveUnaryInformationTypeFormat.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static PositiveUnaryInformationTypeFormat GetPositiveUnaryInformationTypeFormat(AbstractionModel element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ModelDomainRoleId) as PositiveUnaryInformationTypeFormat;
		}
		
		/// <summary>
		/// Sets PositiveUnaryInformationTypeFormat.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetPositiveUnaryInformationTypeFormat(AbstractionModel element, PositiveUnaryInformationTypeFormat newInformationTypeFormat)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ModelDomainRoleId, newInformationTypeFormat);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the AbstractionModelHasPositiveUnaryInformationTypeFormat link to a AbstractionModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasPositiveUnaryInformationTypeFormat GetLinkToPositiveUnaryInformationTypeFormat (global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel modelInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasPositiveUnaryInformationTypeFormat> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasPositiveUnaryInformationTypeFormat>(modelInstance, global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasPositiveUnaryInformationTypeFormat.ModelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Model not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region InformationTypeFormat link accessor
		/// <summary>
		/// Get the AbstractionModelHasPositiveUnaryInformationTypeFormat link to a PositiveUnaryInformationTypeFormat.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasPositiveUnaryInformationTypeFormat GetLinkToModel (global::ORMSolutions.ORMArchitect.ORMAbstraction.PositiveUnaryInformationTypeFormat informationTypeFormatInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasPositiveUnaryInformationTypeFormat> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasPositiveUnaryInformationTypeFormat>(informationTypeFormatInstance, global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasPositiveUnaryInformationTypeFormat.InformationTypeFormatDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of InformationTypeFormat not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AbstractionModelHasPositiveUnaryInformationTypeFormat instance accessors
		
		/// <summary>
		/// Get any AbstractionModelHasPositiveUnaryInformationTypeFormat links between a given AbstractionModel and a PositiveUnaryInformationTypeFormat.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasPositiveUnaryInformationTypeFormat> GetLinks( global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel source, global::ORMSolutions.ORMArchitect.ORMAbstraction.PositiveUnaryInformationTypeFormat target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasPositiveUnaryInformationTypeFormat> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasPositiveUnaryInformationTypeFormat>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasPositiveUnaryInformationTypeFormat> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasPositiveUnaryInformationTypeFormat>(source, global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasPositiveUnaryInformationTypeFormat.ModelDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasPositiveUnaryInformationTypeFormat link in links )
			{
				if ( target.Equals(link.InformationTypeFormat) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AbstractionModelHasPositiveUnaryInformationTypeFormat link between a given AbstractionModeland a PositiveUnaryInformationTypeFormat.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasPositiveUnaryInformationTypeFormat GetLink( global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel source, global::ORMSolutions.ORMArchitect.ORMAbstraction.PositiveUnaryInformationTypeFormat target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasPositiveUnaryInformationTypeFormat> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasPositiveUnaryInformationTypeFormat>(source, global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasPositiveUnaryInformationTypeFormat.ModelDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasPositiveUnaryInformationTypeFormat link in links )
			{
				if ( target.Equals(link.InformationTypeFormat) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.ORMAbstraction
{
	/// <summary>
	/// DomainRelationship AbstractionModelHasNegativeUnaryInformationTypeFormat
	/// Description for
	/// ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasNegativeUnaryInformationTypeFormat
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasNegativeUnaryInformationTypeFormat.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasNegativeUnaryInformationTypeFormat.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("a3ad6338-ddde-4dfe-8cae-7acd93061219")]
	public sealed partial class AbstractionModelHasNegativeUnaryInformationTypeFormat : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AbstractionModelHasNegativeUnaryInformationTypeFormat domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa3ad6338, 0xddde, 0x4dfe, 0x8c, 0xae, 0x7a, 0xcd, 0x93, 0x06, 0x12, 0x19);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AbstractionModelHasNegativeUnaryInformationTypeFormat link in the same Partition as the given AbstractionModel
		/// </summary>
		/// <param name="source">AbstractionModel to use as the source of the relationship.</param>
		/// <param name="target">NegativeUnaryInformationTypeFormat to use as the target of the relationship.</param>
		public AbstractionModelHasNegativeUnaryInformationTypeFormat(AbstractionModel source, NegativeUnaryInformationTypeFormat target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AbstractionModelHasNegativeUnaryInformationTypeFormat.ModelDomainRoleId, source), new DslModeling::RoleAssignment(AbstractionModelHasNegativeUnaryInformationTypeFormat.InformationTypeFormatDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AbstractionModelHasNegativeUnaryInformationTypeFormat(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AbstractionModelHasNegativeUnaryInformationTypeFormat(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AbstractionModelHasNegativeUnaryInformationTypeFormat(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AbstractionModelHasNegativeUnaryInformationTypeFormat(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x5dfbc582, 0xc72f, 0x4a41, 0x98, 0x2f, 0xd6, 0x89, 0x8f, 0x7b, 0x61, 0xd8);
		
		/// <summary>
		/// DomainRole Model
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasNegativeUnaryInformationTypeFormat.Model
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasNegativeUnaryInformationTypeFormat/Model.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasNegativeUnaryInformationTypeFormat/Model.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "NegativeUnaryInformationTypeFormat", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasNegativeUnaryInformationTypeFormat/Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("5dfbc582-c72f-4a41-982f-d6898f7b61d8")]
		public AbstractionModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AbstractionModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a NegativeUnaryInformationTypeFormat
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AbstractionModel GetModel(NegativeUnaryInformationTypeFormat element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, InformationTypeFormatDomainRoleId) as AbstractionModel;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(NegativeUnaryInformationTypeFormat element, AbstractionModel newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, InformationTypeFormatDomainRoleId, newModel);
		}
		#endregion
		#region InformationTypeFormat domain role code
		
		/// <summary>
		/// InformationTypeFormat domain role Id.
		/// </summary>
		public static readonly global::System.Guid InformationTypeFormatDomainRoleId = new global::System.Guid(0xf81f8223, 0x72b4, 0x4917, 0x9b, 0x54, 0x0e, 0xd8, 0xa5, 0x93, 0x35, 0xec);
		
		/// <summary>
		/// DomainRole InformationTypeFormat
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasNegativeUnaryInformationTypeFormat.InformationTypeFormat
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasNegativeUnaryInformationTypeFormat/InformationTypeFormat.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasNegativeUnaryInformationTypeFormat/InformationTypeFormat.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasNegativeUnaryInformationTypeFormat/InformationTypeFormat.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("f81f8223-72b4-4917-9b54-0ed8a59335ec")]
		public NegativeUnaryInformationTypeFormat InformationTypeFormat
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (NegativeUnaryInformationTypeFormat)DslModeling::DomainRoleInfo.GetRolePlayer(this, InformationTypeFormatDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InformationTypeFormatDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access NegativeUnaryInformationTypeFormat of a AbstractionModel
		/// <summary>
		/// Gets NegativeUnaryInformationTypeFormat.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static NegativeUnaryInformationTypeFormat GetNegativeUnaryInformationTypeFormat(AbstractionModel element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ModelDomainRoleId) as NegativeUnaryInformationTypeFormat;
		}
		
		/// <summary>
		/// Sets NegativeUnaryInformationTypeFormat.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetNegativeUnaryInformationTypeFormat(AbstractionModel element, NegativeUnaryInformationTypeFormat newInformationTypeFormat)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ModelDomainRoleId, newInformationTypeFormat);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the AbstractionModelHasNegativeUnaryInformationTypeFormat link to a AbstractionModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasNegativeUnaryInformationTypeFormat GetLinkToNegativeUnaryInformationTypeFormat (global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel modelInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasNegativeUnaryInformationTypeFormat> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasNegativeUnaryInformationTypeFormat>(modelInstance, global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasNegativeUnaryInformationTypeFormat.ModelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Model not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region InformationTypeFormat link accessor
		/// <summary>
		/// Get the AbstractionModelHasNegativeUnaryInformationTypeFormat link to a NegativeUnaryInformationTypeFormat.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasNegativeUnaryInformationTypeFormat GetLinkToModel (global::ORMSolutions.ORMArchitect.ORMAbstraction.NegativeUnaryInformationTypeFormat informationTypeFormatInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasNegativeUnaryInformationTypeFormat> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasNegativeUnaryInformationTypeFormat>(informationTypeFormatInstance, global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasNegativeUnaryInformationTypeFormat.InformationTypeFormatDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of InformationTypeFormat not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AbstractionModelHasNegativeUnaryInformationTypeFormat instance accessors
		
		/// <summary>
		/// Get any AbstractionModelHasNegativeUnaryInformationTypeFormat links between a given AbstractionModel and a NegativeUnaryInformationTypeFormat.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasNegativeUnaryInformationTypeFormat> GetLinks( global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel source, global::ORMSolutions.ORMArchitect.ORMAbstraction.NegativeUnaryInformationTypeFormat target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasNegativeUnaryInformationTypeFormat> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasNegativeUnaryInformationTypeFormat>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasNegativeUnaryInformationTypeFormat> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasNegativeUnaryInformationTypeFormat>(source, global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasNegativeUnaryInformationTypeFormat.ModelDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasNegativeUnaryInformationTypeFormat link in links )
			{
				if ( target.Equals(link.InformationTypeFormat) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AbstractionModelHasNegativeUnaryInformationTypeFormat link between a given AbstractionModeland a NegativeUnaryInformationTypeFormat.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasNegativeUnaryInformationTypeFormat GetLink( global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel source, global::ORMSolutions.ORMArchitect.ORMAbstraction.NegativeUnaryInformationTypeFormat target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasNegativeUnaryInformationTypeFormat> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasNegativeUnaryInformationTypeFormat>(source, global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasNegativeUnaryInformationTypeFormat.ModelDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModelHasNegativeUnaryInformationTypeFormat link in links )
			{
				if ( target.Equals(link.InformationTypeFormat) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.ORMAbstraction
{
	/// <summary>
	/// DomainRelationship ConceptTypeHasUniqueness
	/// Description for
	/// ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasUniqueness
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasUniqueness.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasUniqueness.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("356bcea9-13e0-406d-bc0c-404909856a8f")]
	public sealed partial class ConceptTypeHasUniqueness : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConceptTypeHasUniqueness domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x356bcea9, 0x13e0, 0x406d, 0xbc, 0x0c, 0x40, 0x49, 0x09, 0x85, 0x6a, 0x8f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConceptTypeHasUniqueness link in the same Partition as the given ConceptType
		/// </summary>
		/// <param name="source">ConceptType to use as the source of the relationship.</param>
		/// <param name="target">Uniqueness to use as the target of the relationship.</param>
		public ConceptTypeHasUniqueness(ConceptType source, Uniqueness target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConceptTypeHasUniqueness.ConceptTypeDomainRoleId, source), new DslModeling::RoleAssignment(ConceptTypeHasUniqueness.UniquenessDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConceptTypeHasUniqueness(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConceptTypeHasUniqueness(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConceptTypeHasUniqueness(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConceptTypeHasUniqueness(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ConceptType domain role code
		
		/// <summary>
		/// ConceptType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConceptTypeDomainRoleId = new global::System.Guid(0xb425bc77, 0x4990, 0x40f6, 0x8c, 0x6f, 0xb6, 0x70, 0xb1, 0x34, 0xad, 0x88);
		
		/// <summary>
		/// DomainRole ConceptType
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasUniqueness.ConceptType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasUniqueness/ConceptType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasUniqueness/ConceptType.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "UniquenessCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasUniqueness/ConceptType.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b425bc77-4990-40f6-8c6f-b670b134ad88")]
		public ConceptType ConceptType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConceptType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConceptTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConceptTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConceptType of a Uniqueness
		/// <summary>
		/// Gets ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ConceptType GetConceptType(Uniqueness element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, UniquenessDomainRoleId) as ConceptType;
		}
		
		/// <summary>
		/// Sets ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetConceptType(Uniqueness element, ConceptType newConceptType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, UniquenessDomainRoleId, newConceptType);
		}
		#endregion
		#region Uniqueness domain role code
		
		/// <summary>
		/// Uniqueness domain role Id.
		/// </summary>
		public static readonly global::System.Guid UniquenessDomainRoleId = new global::System.Guid(0xf10ef991, 0xa973, 0x4ad4, 0xa7, 0x9c, 0x8c, 0x52, 0xe6, 0x00, 0x18, 0x1b);
		
		/// <summary>
		/// DomainRole Uniqueness
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasUniqueness.Uniqueness
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasUniqueness/Uniqueness.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasUniqueness/Uniqueness.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ConceptType", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasUniqueness/Uniqueness.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("f10ef991-a973-4ad4-a79c-8c52e600181b")]
		public Uniqueness Uniqueness
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Uniqueness)DslModeling::DomainRoleInfo.GetRolePlayer(this, UniquenessDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, UniquenessDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access UniquenessCollection of a ConceptType
		/// <summary>
		/// Gets a list of UniquenessCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Uniqueness> GetUniquenessCollection(ConceptType element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Uniqueness>, Uniqueness>(element, ConceptTypeDomainRoleId);
		}
		#endregion
		#region ConceptType link accessor
		/// <summary>
		/// Get the list of ConceptTypeHasUniqueness links to a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasUniqueness> GetLinksToUniquenessCollection ( global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType conceptTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasUniqueness>(conceptTypeInstance, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasUniqueness.ConceptTypeDomainRoleId);
		}
		#endregion
		#region Uniqueness link accessor
		/// <summary>
		/// Get the ConceptTypeHasUniqueness link to a Uniqueness.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasUniqueness GetLinkToConceptType (global::ORMSolutions.ORMArchitect.ORMAbstraction.Uniqueness uniquenessInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasUniqueness> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasUniqueness>(uniquenessInstance, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasUniqueness.UniquenessDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Uniqueness not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ConceptTypeHasUniqueness instance accessors
		
		/// <summary>
		/// Get any ConceptTypeHasUniqueness links between a given ConceptType and a Uniqueness.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasUniqueness> GetLinks( global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType source, global::ORMSolutions.ORMArchitect.ORMAbstraction.Uniqueness target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasUniqueness> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasUniqueness>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasUniqueness> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasUniqueness>(source, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasUniqueness.ConceptTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasUniqueness link in links )
			{
				if ( target.Equals(link.Uniqueness) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConceptTypeHasUniqueness link between a given ConceptTypeand a Uniqueness.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasUniqueness GetLink( global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType source, global::ORMSolutions.ORMArchitect.ORMAbstraction.Uniqueness target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasUniqueness> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasUniqueness>(source, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasUniqueness.ConceptTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasUniqueness link in links )
			{
				if ( target.Equals(link.Uniqueness) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.ORMAbstraction
{
	/// <summary>
	/// DomainRelationship ConceptTypeChild
	/// Description for ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("96afb439-e314-4d49-9011-18362f78d724")]
	public abstract partial class ConceptTypeChild : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConceptTypeChild domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x96afb439, 0xe314, 0x4d49, 0x90, 0x11, 0x18, 0x36, 0x2f, 0x78, 0xd7, 0x24);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">The Partition instance containing this ElementLink</param>
		/// <param name="roleAssignments">A set of role assignments for roleplayer initialization</param>
		/// <param name="propertyAssignments">A set of attribute assignments for attribute initialization</param>
		protected ConceptTypeChild(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Parent domain role code
		
		/// <summary>
		/// Parent domain role Id.
		/// </summary>
		public static readonly global::System.Guid ParentDomainRoleId = new global::System.Guid(0x05b3a784, 0x8bc2, 0x43b0, 0x8a, 0x07, 0xff, 0x5e, 0xee, 0x0b, 0x50, 0x24);
		
		/// <summary>
		/// DomainRole Parent
		/// Description for ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild.Parent
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild/Parent.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild/Parent.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TargetCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild/Parent.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("05b3a784-8bc2-43b0-8a07-ff5eee0b5024")]
		public abstract ConceptType Parent
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access Parent of a ModelElement
		/// <summary>
		/// Gets a list of Parent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<ConceptType> GetParent(global::Microsoft.VisualStudio.Modeling.ModelElement element)
		{
			return GetRoleCollection<DslModeling::ReadOnlyLinkedElementCollection<ConceptType>, ConceptType>(element, TargetDomainRoleId);
		}
		#endregion
		#region Target domain role code
		
		/// <summary>
		/// Target domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetDomainRoleId = new global::System.Guid(0xb00473b0, 0x6e23, 0x481d, 0x9a, 0xee, 0x37, 0x85, 0xee, 0xc3, 0x57, 0x86);
		
		/// <summary>
		/// DomainRole Target
		/// Description for ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild.Target
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild/Target.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild/Target.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Parent", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild/Target.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b00473b0-6e23-481d-9aee-3785eec35786")]
		public abstract global::Microsoft.VisualStudio.Modeling.ModelElement Target
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access TargetCollection of a ConceptType
		/// <summary>
		/// Gets a list of TargetCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<global::Microsoft.VisualStudio.Modeling.ModelElement> GetTargetCollection(ConceptType element)
		{
			return GetRoleCollection<DslModeling::ReadOnlyLinkedElementCollection<global::Microsoft.VisualStudio.Modeling.ModelElement>, global::Microsoft.VisualStudio.Modeling.ModelElement>(element, ParentDomainRoleId);
		}
		#endregion
		#region IsMandatory domain property code
		
		/// <summary>
		/// IsMandatory domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsMandatoryDomainPropertyId = new global::System.Guid(0x72de4b58, 0x8890, 0x4d57, 0xa5, 0xa1, 0xfb, 0xee, 0x31, 0x4a, 0x01, 0x1f);
		
		/// <summary>
		/// Storage for IsMandatory
		/// </summary>
		private global::System.Boolean isMandatoryPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsMandatory domain property.
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild.IsMandatory
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild/IsMandatory.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild/IsMandatory.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslModeling::DomainObjectId("72de4b58-8890-4d57-a5a1-fbee314a011f")]
		public global::System.Boolean IsMandatory
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isMandatoryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsMandatoryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ConceptTypeChild.IsMandatory domain property.
		/// </summary>
		internal sealed partial class IsMandatoryPropertyHandler : DslModeling::DomainPropertyValueHandler<ConceptTypeChild, global::System.Boolean>
		{
			private IsMandatoryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ConceptTypeChild.IsMandatory domain property value handler.
			/// </summary>
			public static readonly IsMandatoryPropertyHandler Instance = new IsMandatoryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ConceptTypeChild.IsMandatory domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsMandatoryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ConceptTypeChild element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isMandatoryPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ConceptTypeChild element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isMandatoryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xde8f10c3, 0xdac2, 0x434e, 0x8d, 0xba, 0x66, 0x4a, 0x00, 0x67, 0x6d, 0x94);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild.Name
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild/Name.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild/Name.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("de8f10c3-dac2-434e-8dba-664a00676d94")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ConceptTypeChild.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<ConceptTypeChild, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ConceptTypeChild.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ConceptTypeChild.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ConceptTypeChild element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ConceptTypeChild element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Accessors for roles that this REL plays in other RELs
		#region NegativeInverseChild opposite domain role accessor
		/// <summary>
		/// Gets or sets NegativeInverseChild.
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMAbstraction.InverseConceptTypeChild.PositiveChild
		/// </summary>
		public ConceptTypeChild NegativeInverseChild
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.ORMAbstraction.InverseConceptTypeChild.PositiveChildDomainRoleId) as ConceptTypeChild;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.ORMAbstraction.InverseConceptTypeChild.NegativeChildDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.ORMAbstraction.InverseConceptTypeChild.NegativeChildDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.ORMAbstraction.InverseConceptTypeChild.PositiveChildDomainRoleId, value);
				}
			}
		}
		#endregion
		#region PositiveInverseChild opposite domain role accessor
		/// <summary>
		/// Gets or sets PositiveInverseChild.
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMAbstraction.InverseConceptTypeChild.NegativeChild
		/// </summary>
		public ConceptTypeChild PositiveInverseChild
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.ORMAbstraction.InverseConceptTypeChild.NegativeChildDomainRoleId) as ConceptTypeChild;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.ORMAbstraction.InverseConceptTypeChild.PositiveChildDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.ORMAbstraction.InverseConceptTypeChild.PositiveChildDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.ORMAbstraction.InverseConceptTypeChild.NegativeChildDomainRoleId, value);
				}
			}
		}
		#endregion
		#endregion
		#region Parent link accessor
		/// <summary>
		/// Get the list of ConceptTypeChild links to a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild> GetLinksToTargetCollection ( global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType parentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild>(parentInstance, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild.ParentDomainRoleId);
		}
		#endregion
		#region Target link accessor
		/// <summary>
		/// Get the list of ConceptTypeChild links to a ModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild> GetLinksToParent ( global::Microsoft.VisualStudio.Modeling.ModelElement targetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild>(targetInstance, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild.TargetDomainRoleId);
		}
		#endregion
		#region ConceptTypeChild instance accessors
		
		/// <summary>
		/// Get any ConceptTypeChild links between a given ConceptType and a ModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild> GetLinks( global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType source, global::Microsoft.VisualStudio.Modeling.ModelElement target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild>(source, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild.ParentDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild link in links )
			{
				if ( target.Equals(link.Target) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.ORMAbstraction
{
	/// <summary>
	/// DomainRelationship InverseConceptTypeChild
	/// Description for ORMSolutions.ORMArchitect.ORMAbstraction.InverseConceptTypeChild
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstraction.InverseConceptTypeChild.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstraction.InverseConceptTypeChild.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("5e2de8e5-c5b7-46a5-8582-7ce031d1341d")]
	public sealed partial class InverseConceptTypeChild : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// InverseConceptTypeChild domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5e2de8e5, 0xc5b7, 0x46a5, 0x85, 0x82, 0x7c, 0xe0, 0x31, 0xd1, 0x34, 0x1d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a InverseConceptTypeChild link in the same Partition as the given ConceptTypeChild
		/// </summary>
		/// <param name="source">ConceptTypeChild to use as the source of the relationship.</param>
		/// <param name="target">ConceptTypeChild to use as the target of the relationship.</param>
		public InverseConceptTypeChild(ConceptTypeChild source, ConceptTypeChild target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(InverseConceptTypeChild.PositiveChildDomainRoleId, source), new DslModeling::RoleAssignment(InverseConceptTypeChild.NegativeChildDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public InverseConceptTypeChild(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public InverseConceptTypeChild(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public InverseConceptTypeChild(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public InverseConceptTypeChild(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region PositiveChild domain role code
		
		/// <summary>
		/// PositiveChild domain role Id.
		/// </summary>
		public static readonly global::System.Guid PositiveChildDomainRoleId = new global::System.Guid(0x918008ac, 0x1307, 0x446f, 0xaa, 0x29, 0x41, 0xc3, 0xbd, 0xda, 0x20, 0x90);
		
		/// <summary>
		/// DomainRole PositiveChild
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMAbstraction.InverseConceptTypeChild.PositiveChild
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstraction.InverseConceptTypeChild/PositiveChild.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstraction.InverseConceptTypeChild/PositiveChild.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "NegativeInverseChild", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstraction.InverseConceptTypeChild/PositiveChild.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("918008ac-1307-446f-aa29-41c3bdda2090")]
		public ConceptTypeChild PositiveChild
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConceptTypeChild)DslModeling::DomainRoleInfo.GetRolePlayer(this, PositiveChildDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PositiveChildDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PositiveInverseChild of a ConceptTypeChild
		/// <summary>
		/// Gets PositiveInverseChild.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ConceptTypeChild GetPositiveInverseChild(ConceptTypeChild element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, NegativeChildDomainRoleId) as ConceptTypeChild;
		}
		
		/// <summary>
		/// Sets PositiveInverseChild.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetPositiveInverseChild(ConceptTypeChild element, ConceptTypeChild newPositiveChild)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, NegativeChildDomainRoleId, newPositiveChild);
		}
		#endregion
		#region NegativeChild domain role code
		
		/// <summary>
		/// NegativeChild domain role Id.
		/// </summary>
		public static readonly global::System.Guid NegativeChildDomainRoleId = new global::System.Guid(0x13b23b26, 0x78cd, 0x4121, 0xa2, 0xec, 0x5a, 0xf2, 0x5c, 0xe8, 0x01, 0x03);
		
		/// <summary>
		/// DomainRole NegativeChild
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMAbstraction.InverseConceptTypeChild.NegativeChild
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstraction.InverseConceptTypeChild/NegativeChild.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstraction.InverseConceptTypeChild/NegativeChild.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "PositiveInverseChild", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstraction.InverseConceptTypeChild/NegativeChild.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("13b23b26-78cd-4121-a2ec-5af25ce80103")]
		public ConceptTypeChild NegativeChild
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConceptTypeChild)DslModeling::DomainRoleInfo.GetRolePlayer(this, NegativeChildDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, NegativeChildDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access NegativeInverseChild of a ConceptTypeChild
		/// <summary>
		/// Gets NegativeInverseChild.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ConceptTypeChild GetNegativeInverseChild(ConceptTypeChild element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PositiveChildDomainRoleId) as ConceptTypeChild;
		}
		
		/// <summary>
		/// Sets NegativeInverseChild.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetNegativeInverseChild(ConceptTypeChild element, ConceptTypeChild newNegativeChild)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PositiveChildDomainRoleId, newNegativeChild);
		}
		#endregion
		#region PairIsMandatory domain property code
		
		/// <summary>
		/// PairIsMandatory domain property Id.
		/// </summary>
		public static readonly global::System.Guid PairIsMandatoryDomainPropertyId = new global::System.Guid(0x64897a7f, 0x49e6, 0x40c7, 0x8f, 0xa0, 0xa3, 0xdd, 0x18, 0xab, 0x13, 0x53);
		
		/// <summary>
		/// Storage for PairIsMandatory
		/// </summary>
		private global::System.Boolean pairIsMandatoryPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of PairIsMandatory domain property.
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMAbstraction.InverseConceptTypeChild.PairIsMandatory
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstraction.InverseConceptTypeChild/PairIsMandatory.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstraction.InverseConceptTypeChild/PairIsMandatory.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslModeling::DomainObjectId("64897a7f-49e6-40c7-8fa0-a3dd18ab1353")]
		public global::System.Boolean PairIsMandatory
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return pairIsMandatoryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				PairIsMandatoryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the InverseConceptTypeChild.PairIsMandatory domain property.
		/// </summary>
		internal sealed partial class PairIsMandatoryPropertyHandler : DslModeling::DomainPropertyValueHandler<InverseConceptTypeChild, global::System.Boolean>
		{
			private PairIsMandatoryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the InverseConceptTypeChild.PairIsMandatory domain property value handler.
			/// </summary>
			public static readonly PairIsMandatoryPropertyHandler Instance = new PairIsMandatoryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the InverseConceptTypeChild.PairIsMandatory domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PairIsMandatoryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(InverseConceptTypeChild element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.pairIsMandatoryPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(InverseConceptTypeChild element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.pairIsMandatoryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region PositiveChild link accessor
		/// <summary>
		/// Get the InverseConceptTypeChild link to a ConceptTypeChild.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstraction.InverseConceptTypeChild GetLinkToNegativeInverseChild (global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild positiveChildInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstraction.InverseConceptTypeChild> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstraction.InverseConceptTypeChild>(positiveChildInstance, global::ORMSolutions.ORMArchitect.ORMAbstraction.InverseConceptTypeChild.PositiveChildDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of PositiveChild not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region NegativeChild link accessor
		/// <summary>
		/// Get the InverseConceptTypeChild link to a ConceptTypeChild.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstraction.InverseConceptTypeChild GetLinkToPositiveInverseChild (global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild negativeChildInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstraction.InverseConceptTypeChild> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstraction.InverseConceptTypeChild>(negativeChildInstance, global::ORMSolutions.ORMArchitect.ORMAbstraction.InverseConceptTypeChild.NegativeChildDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of NegativeChild not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region InverseConceptTypeChild instance accessors
		
		/// <summary>
		/// Get any InverseConceptTypeChild links between a given ConceptTypeChild and a ConceptTypeChild.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstraction.InverseConceptTypeChild> GetLinks( global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild source, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstraction.InverseConceptTypeChild> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstraction.InverseConceptTypeChild>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstraction.InverseConceptTypeChild> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstraction.InverseConceptTypeChild>(source, global::ORMSolutions.ORMArchitect.ORMAbstraction.InverseConceptTypeChild.PositiveChildDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstraction.InverseConceptTypeChild link in links )
			{
				if ( target.Equals(link.NegativeChild) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one InverseConceptTypeChild link between a given ConceptTypeChildand a ConceptTypeChild.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstraction.InverseConceptTypeChild GetLink( global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild source, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstraction.InverseConceptTypeChild> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstraction.InverseConceptTypeChild>(source, global::ORMSolutions.ORMArchitect.ORMAbstraction.InverseConceptTypeChild.PositiveChildDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstraction.InverseConceptTypeChild link in links )
			{
				if ( target.Equals(link.NegativeChild) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.ORMAbstraction
{
	/// <summary>
	/// DomainRelationship ConceptTypeHasChildAsPartOfAssociation
	/// Description for
	/// ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasChildAsPartOfAssociation
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasChildAsPartOfAssociation.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasChildAsPartOfAssociation.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("0b5b8d09-e72b-484c-9a57-d4068fed9d65")]
	public sealed partial class ConceptTypeHasChildAsPartOfAssociation : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConceptTypeHasChildAsPartOfAssociation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0b5b8d09, 0xe72b, 0x484c, 0x9a, 0x57, 0xd4, 0x06, 0x8f, 0xed, 0x9d, 0x65);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConceptTypeHasChildAsPartOfAssociation link in the same Partition as the given ConceptType
		/// </summary>
		/// <param name="source">ConceptType to use as the source of the relationship.</param>
		/// <param name="target">ConceptTypeChild to use as the target of the relationship.</param>
		public ConceptTypeHasChildAsPartOfAssociation(ConceptType source, ConceptTypeChild target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConceptTypeHasChildAsPartOfAssociation.ParentDomainRoleId, source), new DslModeling::RoleAssignment(ConceptTypeHasChildAsPartOfAssociation.TargetDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConceptTypeHasChildAsPartOfAssociation(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConceptTypeHasChildAsPartOfAssociation(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConceptTypeHasChildAsPartOfAssociation(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConceptTypeHasChildAsPartOfAssociation(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Parent domain role code
		
		/// <summary>
		/// Parent domain role Id.
		/// </summary>
		public static readonly global::System.Guid ParentDomainRoleId = new global::System.Guid(0xb6f725e8, 0x2fe3, 0x43b4, 0xaa, 0x79, 0xc8, 0x8b, 0x1c, 0xe0, 0xb5, 0x71);
		
		/// <summary>
		/// DomainRole Parent
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasChildAsPartOfAssociation.Parent
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasChildAsPartOfAssociation/Parent.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasChildAsPartOfAssociation/Parent.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TargetCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasChildAsPartOfAssociation/Parent.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b6f725e8-2fe3-43b4-aa79-c88b1ce0b571")]
		public ConceptType Parent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConceptType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ParentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ParentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Parent of a ConceptTypeChild
		/// <summary>
		/// Gets Parent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ConceptType GetParent(ConceptTypeChild element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TargetDomainRoleId) as ConceptType;
		}
		
		/// <summary>
		/// Sets Parent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetParent(ConceptTypeChild element, ConceptType newParent)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TargetDomainRoleId, newParent);
		}
		#endregion
		#region Target domain role code
		
		/// <summary>
		/// Target domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetDomainRoleId = new global::System.Guid(0x7ce7d4d7, 0xd68c, 0x464a, 0xbe, 0xd8, 0x3b, 0x47, 0x96, 0x52, 0x3e, 0x80);
		
		/// <summary>
		/// DomainRole Target
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasChildAsPartOfAssociation.Target
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasChildAsPartOfAssociation/Target.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasChildAsPartOfAssociation/Target.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Parent", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasChildAsPartOfAssociation/Target.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("7ce7d4d7-d68c-464a-bed8-3b4796523e80")]
		public ConceptTypeChild Target
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConceptTypeChild)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetCollection of a ConceptType
		/// <summary>
		/// Gets a list of TargetCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ConceptTypeChild> GetTargetCollection(ConceptType element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ConceptTypeChild>, ConceptTypeChild>(element, ParentDomainRoleId);
		}
		#endregion
		#region Parent link accessor
		/// <summary>
		/// Get the list of ConceptTypeHasChildAsPartOfAssociation links to a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasChildAsPartOfAssociation> GetLinksToTargetCollection ( global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType parentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasChildAsPartOfAssociation>(parentInstance, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasChildAsPartOfAssociation.ParentDomainRoleId);
		}
		#endregion
		#region Target link accessor
		/// <summary>
		/// Get the ConceptTypeHasChildAsPartOfAssociation link to a ConceptTypeChild.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasChildAsPartOfAssociation GetLinkToParent (global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild targetInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasChildAsPartOfAssociation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasChildAsPartOfAssociation>(targetInstance, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasChildAsPartOfAssociation.TargetDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Target not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ConceptTypeHasChildAsPartOfAssociation instance accessors
		
		/// <summary>
		/// Get any ConceptTypeHasChildAsPartOfAssociation links between a given ConceptType and a ConceptTypeChild.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasChildAsPartOfAssociation> GetLinks( global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType source, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasChildAsPartOfAssociation> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasChildAsPartOfAssociation>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasChildAsPartOfAssociation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasChildAsPartOfAssociation>(source, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasChildAsPartOfAssociation.ParentDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasChildAsPartOfAssociation link in links )
			{
				if ( target.Equals(link.Target) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConceptTypeHasChildAsPartOfAssociation link between a given ConceptTypeand a ConceptTypeChild.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasChildAsPartOfAssociation GetLink( global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType source, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasChildAsPartOfAssociation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasChildAsPartOfAssociation>(source, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasChildAsPartOfAssociation.ParentDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeHasChildAsPartOfAssociation link in links )
			{
				if ( target.Equals(link.Target) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.ORMAbstraction
{
	/// <summary>
	/// DomainRelationship InformationType
	/// Description for ORMSolutions.ORMArchitect.ORMAbstraction.InformationType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstraction.InformationType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstraction.InformationType.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("10dbc480-9dd5-47fb-8533-982c27985ee5")]
	public sealed partial class InformationType : ConceptTypeChild
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// InformationType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x10dbc480, 0x9dd5, 0x47fb, 0x85, 0x33, 0x98, 0x2c, 0x27, 0x98, 0x5e, 0xe5);
	
				
		/// <summary>
		/// Constructor
		/// Creates a InformationType link in the same Partition as the given ConceptType
		/// </summary>
		/// <param name="source">ConceptType to use as the source of the relationship.</param>
		/// <param name="target">InformationTypeFormat to use as the target of the relationship.</param>
		public InformationType(ConceptType source, InformationTypeFormat target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(InformationType.ConceptTypeDomainRoleId, source), new DslModeling::RoleAssignment(InformationType.InformationTypeFormatDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public InformationType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public InformationType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public InformationType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public InformationType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ConceptType domain role code
		
		/// <summary>
		/// ConceptType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConceptTypeDomainRoleId = new global::System.Guid(0x88eca698, 0xb81f, 0x49a5, 0x99, 0x45, 0xe3, 0xa3, 0x66, 0x97, 0x17, 0x7b);
		
		/// <summary>
		/// DomainRole ConceptType
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMAbstraction.InformationType.ConceptType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstraction.InformationType/ConceptType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstraction.InformationType/ConceptType.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "InformationTypeFormatCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstraction.InformationType/ConceptType.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("88eca698-b81f-49a5-9945-e3a36697177b")]
		public ConceptType ConceptType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConceptType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConceptTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConceptTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConceptTypeCollection of a InformationTypeFormat
		/// <summary>
		/// Gets a list of ConceptTypeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ConceptType> GetConceptTypeCollection(InformationTypeFormat element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ConceptType>, ConceptType>(element, InformationTypeFormatDomainRoleId);
		}
		#endregion
		#region Parent domain role override
		
		/// <summary>
		/// Gets the element playing ConceptType domain role.
		/// Description for ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild.Parent
		/// </summary>
		public override sealed ConceptType Parent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ConceptType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ConceptType = value;
			}
		}
		
		#endregion
		#region InformationTypeFormat domain role code
		
		/// <summary>
		/// InformationTypeFormat domain role Id.
		/// </summary>
		public static readonly global::System.Guid InformationTypeFormatDomainRoleId = new global::System.Guid(0x62728bca, 0xc004, 0x461f, 0xac, 0xc5, 0x85, 0x21, 0x3e, 0xe0, 0x59, 0xdd);
		
		/// <summary>
		/// DomainRole InformationTypeFormat
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMAbstraction.InformationType.InformationTypeFormat
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstraction.InformationType/InformationTypeFormat.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstraction.InformationType/InformationTypeFormat.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ConceptTypeCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstraction.InformationType/InformationTypeFormat.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("62728bca-c004-461f-acc5-85213ee059dd")]
		public InformationTypeFormat InformationTypeFormat
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (InformationTypeFormat)DslModeling::DomainRoleInfo.GetRolePlayer(this, InformationTypeFormatDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InformationTypeFormatDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InformationTypeFormatCollection of a ConceptType
		/// <summary>
		/// Gets a list of InformationTypeFormatCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<InformationTypeFormat> GetInformationTypeFormatCollection(ConceptType element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<InformationTypeFormat>, InformationTypeFormat>(element, ConceptTypeDomainRoleId);
		}
		#endregion
		#region Target domain role override
		
		/// <summary>
		/// Gets the element playing InformationTypeFormat domain role.
		/// Description for ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild.Target
		/// </summary>
		public override sealed global::Microsoft.VisualStudio.Modeling.ModelElement Target
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.InformationTypeFormat;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.InformationTypeFormat = (InformationTypeFormat)value;
			}
		}
		
		#endregion
		#region ConceptType link accessor
		/// <summary>
		/// Get the list of InformationType links to a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstraction.InformationType> GetLinksToInformationTypeFormatCollection ( global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType conceptTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstraction.InformationType>(conceptTypeInstance, global::ORMSolutions.ORMArchitect.ORMAbstraction.InformationType.ConceptTypeDomainRoleId);
		}
		#endregion
		#region InformationTypeFormat link accessor
		/// <summary>
		/// Get the list of InformationType links to a InformationTypeFormat.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstraction.InformationType> GetLinksToConceptTypeCollection ( global::ORMSolutions.ORMArchitect.ORMAbstraction.InformationTypeFormat informationTypeFormatInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstraction.InformationType>(informationTypeFormatInstance, global::ORMSolutions.ORMArchitect.ORMAbstraction.InformationType.InformationTypeFormatDomainRoleId);
		}
		#endregion
		#region InformationType instance accessors
		
		/// <summary>
		/// Get any InformationType links between a given ConceptType and a InformationTypeFormat.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstraction.InformationType> GetLinks( global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType source, global::ORMSolutions.ORMArchitect.ORMAbstraction.InformationTypeFormat target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstraction.InformationType> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstraction.InformationType>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstraction.InformationType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstraction.InformationType>(source, global::ORMSolutions.ORMArchitect.ORMAbstraction.InformationType.ConceptTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstraction.InformationType link in links )
			{
				if ( target.Equals(link.InformationTypeFormat) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.ORMAbstraction
{
	/// <summary>
	/// DomainRelationship ConceptTypeReferencesConceptType
	/// Description for
	/// ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeReferencesConceptType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeReferencesConceptType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeReferencesConceptType.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("f003a8da-4cd5-4208-b3d3-a51e98c5b962")]
	public abstract partial class ConceptTypeReferencesConceptType : ConceptTypeChild
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConceptTypeReferencesConceptType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf003a8da, 0x4cd5, 0x4208, 0xb3, 0xd3, 0xa5, 0x1e, 0x98, 0xc5, 0xb9, 0x62);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">The Partition instance containing this ElementLink</param>
		/// <param name="roleAssignments">A set of role assignments for roleplayer initialization</param>
		/// <param name="propertyAssignments">A set of attribute assignments for attribute initialization</param>
		protected ConceptTypeReferencesConceptType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ReferencingConceptType domain role code
		
		/// <summary>
		/// ReferencingConceptType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReferencingConceptTypeDomainRoleId = new global::System.Guid(0x9f3e40be, 0x1efa, 0x4161, 0x96, 0x27, 0xe0, 0x7d, 0x86, 0x03, 0xf3, 0x4a);
		
		/// <summary>
		/// DomainRole ReferencingConceptType
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeReferencesConceptType.ReferencingConceptType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeReferencesConceptType/ReferencingConceptType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeReferencesConceptType/ReferencingConceptType.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ReferencedConceptTypeCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeReferencesConceptType/ReferencingConceptType.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("9f3e40be-1efa-4161-9627-e07d8603f34a")]
		public abstract ConceptType ReferencingConceptType
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access ReferencingConceptTypeCollection of a ConceptType
		/// <summary>
		/// Gets a list of ReferencingConceptTypeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<ConceptType> GetReferencingConceptTypeCollection(ConceptType element)
		{
			return GetRoleCollection<DslModeling::ReadOnlyLinkedElementCollection<ConceptType>, ConceptType>(element, ReferencedConceptTypeDomainRoleId);
		}
		#endregion
		#region Parent domain role override
		
		/// <summary>
		/// Gets the element playing ReferencingConceptType domain role.
		/// Description for ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild.Parent
		/// </summary>
		public override ConceptType Parent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ReferencingConceptType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ReferencingConceptType = value;
			}
		}
		
		#endregion
		#region ReferencedConceptType domain role code
		
		/// <summary>
		/// ReferencedConceptType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReferencedConceptTypeDomainRoleId = new global::System.Guid(0x0541cdbd, 0x87f7, 0x4774, 0xa4, 0xed, 0xda, 0x61, 0xe0, 0x60, 0x63, 0xad);
		
		/// <summary>
		/// DomainRole ReferencedConceptType
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeReferencesConceptType.ReferencedConceptType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeReferencesConceptType/ReferencedConceptType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeReferencesConceptType/ReferencedConceptType.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ReferencingConceptTypeCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeReferencesConceptType/ReferencedConceptType.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0541cdbd-87f7-4774-a4ed-da61e06063ad")]
		public abstract ConceptType ReferencedConceptType
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access ReferencedConceptTypeCollection of a ConceptType
		/// <summary>
		/// Gets a list of ReferencedConceptTypeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<ConceptType> GetReferencedConceptTypeCollection(ConceptType element)
		{
			return GetRoleCollection<DslModeling::ReadOnlyLinkedElementCollection<ConceptType>, ConceptType>(element, ReferencingConceptTypeDomainRoleId);
		}
		#endregion
		#region Target domain role override
		
		/// <summary>
		/// Gets the element playing ReferencedConceptType domain role.
		/// Description for ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild.Target
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement Target
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ReferencedConceptType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ReferencedConceptType = (ConceptType)value;
			}
		}
		
		#endregion
		#region OppositeName domain property code
		
		/// <summary>
		/// OppositeName domain property Id.
		/// </summary>
		public static readonly global::System.Guid OppositeNameDomainPropertyId = new global::System.Guid(0xc83405d5, 0xc96c, 0x4b05, 0x8a, 0x62, 0x50, 0x2f, 0xf5, 0xa8, 0x2f, 0x10);
		
		/// <summary>
		/// Storage for OppositeName
		/// </summary>
		private global::System.String oppositeNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of OppositeName domain property.
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeReferencesConceptType.OppositeName
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeReferencesConceptType/OppositeName.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeReferencesConceptType/OppositeName.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslModeling::DomainObjectId("c83405d5-c96c-4b05-8a62-502ff5a82f10")]
		public global::System.String OppositeName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return oppositeNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				OppositeNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ConceptTypeReferencesConceptType.OppositeName domain property.
		/// </summary>
		internal sealed partial class OppositeNamePropertyHandler : DslModeling::DomainPropertyValueHandler<ConceptTypeReferencesConceptType, global::System.String>
		{
			private OppositeNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ConceptTypeReferencesConceptType.OppositeName domain property value handler.
			/// </summary>
			public static readonly OppositeNamePropertyHandler Instance = new OppositeNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ConceptTypeReferencesConceptType.OppositeName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OppositeNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ConceptTypeReferencesConceptType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.oppositeNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ConceptTypeReferencesConceptType element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.oppositeNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ReferencingConceptType link accessor
		/// <summary>
		/// Get the list of ConceptTypeReferencesConceptType links to a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeReferencesConceptType> GetLinksToReferencedConceptTypeCollection ( global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType referencingConceptTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeReferencesConceptType>(referencingConceptTypeInstance, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeReferencesConceptType.ReferencingConceptTypeDomainRoleId);
		}
		#endregion
		#region ReferencedConceptType link accessor
		/// <summary>
		/// Get the list of ConceptTypeReferencesConceptType links to a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeReferencesConceptType> GetLinksToReferencingConceptTypeCollection ( global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType referencedConceptTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeReferencesConceptType>(referencedConceptTypeInstance, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeReferencesConceptType.ReferencedConceptTypeDomainRoleId);
		}
		#endregion
		#region ConceptTypeReferencesConceptType instance accessors
		
		/// <summary>
		/// Get any ConceptTypeReferencesConceptType links between a given ConceptType and a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeReferencesConceptType> GetLinks( global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType source, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeReferencesConceptType> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeReferencesConceptType>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeReferencesConceptType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeReferencesConceptType>(source, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeReferencesConceptType.ReferencingConceptTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeReferencesConceptType link in links )
			{
				if ( target.Equals(link.ReferencedConceptType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.ORMAbstraction
{
	/// <summary>
	/// DomainRelationship ConceptTypeRelatesToConceptType
	/// Description for
	/// ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeRelatesToConceptType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeRelatesToConceptType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeRelatesToConceptType.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("d8f2cbcd-1eb4-420a-9d18-5759d46b8af3")]
	public sealed partial class ConceptTypeRelatesToConceptType : ConceptTypeReferencesConceptType
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConceptTypeRelatesToConceptType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd8f2cbcd, 0x1eb4, 0x420a, 0x9d, 0x18, 0x57, 0x59, 0xd4, 0x6b, 0x8a, 0xf3);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConceptTypeRelatesToConceptType link in the same Partition as the given ConceptType
		/// </summary>
		/// <param name="source">ConceptType to use as the source of the relationship.</param>
		/// <param name="target">ConceptType to use as the target of the relationship.</param>
		public ConceptTypeRelatesToConceptType(ConceptType source, ConceptType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConceptTypeRelatesToConceptType.RelatingConceptTypeDomainRoleId, source), new DslModeling::RoleAssignment(ConceptTypeRelatesToConceptType.RelatedConceptTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConceptTypeRelatesToConceptType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConceptTypeRelatesToConceptType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConceptTypeRelatesToConceptType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConceptTypeRelatesToConceptType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region RelatingConceptType domain role code
		
		/// <summary>
		/// RelatingConceptType domain role Id.
		/// </summary>
		public static readonly global::System.Guid RelatingConceptTypeDomainRoleId = new global::System.Guid(0xa6b9687e, 0x87bb, 0x4696, 0xbc, 0x23, 0xaf, 0x7c, 0xb4, 0x04, 0x69, 0x94);
		
		/// <summary>
		/// DomainRole RelatingConceptType
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeRelatesToConceptType.RelatingConceptType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeRelatesToConceptType/RelatingConceptType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeRelatesToConceptType/RelatingConceptType.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "RelatedConceptTypeCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeRelatesToConceptType/RelatingConceptType.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a6b9687e-87bb-4696-bc23-af7cb4046994")]
		public ConceptType RelatingConceptType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConceptType)DslModeling::DomainRoleInfo.GetRolePlayer(this, RelatingConceptTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RelatingConceptTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RelatingConceptTypeCollection of a ConceptType
		/// <summary>
		/// Gets a list of RelatingConceptTypeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ConceptType> GetRelatingConceptTypeCollection(ConceptType element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ConceptType>, ConceptType>(element, RelatedConceptTypeDomainRoleId);
		}
		#endregion
		#region ReferencingConceptType domain role override
		
		/// <summary>
		/// Gets the element playing RelatingConceptType domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeReferencesConceptType.ReferencingConceptType
		/// </summary>
		public override sealed ConceptType ReferencingConceptType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.RelatingConceptType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.RelatingConceptType = value;
			}
		}
		
		#endregion
		#region RelatedConceptType domain role code
		
		/// <summary>
		/// RelatedConceptType domain role Id.
		/// </summary>
		public static readonly global::System.Guid RelatedConceptTypeDomainRoleId = new global::System.Guid(0xcfedc9cb, 0xc50b, 0x41d6, 0xac, 0xe8, 0x43, 0x2e, 0x67, 0xbd, 0x4b, 0x95);
		
		/// <summary>
		/// DomainRole RelatedConceptType
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeRelatesToConceptType.RelatedConceptType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeRelatesToConceptType/RelatedConceptType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeRelatesToConceptType/RelatedConceptType.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "RelatingConceptTypeCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeRelatesToConceptType/RelatedConceptType.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("cfedc9cb-c50b-41d6-ace8-432e67bd4b95")]
		public ConceptType RelatedConceptType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConceptType)DslModeling::DomainRoleInfo.GetRolePlayer(this, RelatedConceptTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RelatedConceptTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RelatedConceptTypeCollection of a ConceptType
		/// <summary>
		/// Gets a list of RelatedConceptTypeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ConceptType> GetRelatedConceptTypeCollection(ConceptType element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ConceptType>, ConceptType>(element, RelatingConceptTypeDomainRoleId);
		}
		#endregion
		#region ReferencedConceptType domain role override
		
		/// <summary>
		/// Gets the element playing RelatedConceptType domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeReferencesConceptType.ReferencedConceptType
		/// </summary>
		public override sealed ConceptType ReferencedConceptType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.RelatedConceptType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.RelatedConceptType = value;
			}
		}
		
		#endregion
		#region RelatingConceptType link accessor
		/// <summary>
		/// Get the list of ConceptTypeRelatesToConceptType links to a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeRelatesToConceptType> GetLinksToRelatedConceptTypeCollection ( global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType relatingConceptTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeRelatesToConceptType>(relatingConceptTypeInstance, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeRelatesToConceptType.RelatingConceptTypeDomainRoleId);
		}
		#endregion
		#region RelatedConceptType link accessor
		/// <summary>
		/// Get the list of ConceptTypeRelatesToConceptType links to a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeRelatesToConceptType> GetLinksToRelatingConceptTypeCollection ( global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType relatedConceptTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeRelatesToConceptType>(relatedConceptTypeInstance, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeRelatesToConceptType.RelatedConceptTypeDomainRoleId);
		}
		#endregion
		#region ConceptTypeRelatesToConceptType instance accessors
		
		/// <summary>
		/// Get any ConceptTypeRelatesToConceptType links between a given ConceptType and a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeRelatesToConceptType> GetLinks( global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType source, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeRelatesToConceptType> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeRelatesToConceptType>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeRelatesToConceptType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeRelatesToConceptType>(source, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeRelatesToConceptType.RelatingConceptTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeRelatesToConceptType link in links )
			{
				if ( target.Equals(link.RelatedConceptType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.ORMAbstraction
{
	/// <summary>
	/// DomainRelationship ConceptTypeAssimilatesConceptType
	/// Description for
	/// ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeAssimilatesConceptType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeAssimilatesConceptType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeAssimilatesConceptType.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("a342df5a-7426-4a9c-8263-3e24cba2cf60")]
	public sealed partial class ConceptTypeAssimilatesConceptType : ConceptTypeReferencesConceptType
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConceptTypeAssimilatesConceptType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa342df5a, 0x7426, 0x4a9c, 0x82, 0x63, 0x3e, 0x24, 0xcb, 0xa2, 0xcf, 0x60);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConceptTypeAssimilatesConceptType link in the same Partition as the given ConceptType
		/// </summary>
		/// <param name="source">ConceptType to use as the source of the relationship.</param>
		/// <param name="target">ConceptType to use as the target of the relationship.</param>
		public ConceptTypeAssimilatesConceptType(ConceptType source, ConceptType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConceptTypeAssimilatesConceptType.AssimilatorConceptTypeDomainRoleId, source), new DslModeling::RoleAssignment(ConceptTypeAssimilatesConceptType.AssimilatedConceptTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConceptTypeAssimilatesConceptType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConceptTypeAssimilatesConceptType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConceptTypeAssimilatesConceptType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConceptTypeAssimilatesConceptType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region AssimilatorConceptType domain role code
		
		/// <summary>
		/// AssimilatorConceptType domain role Id.
		/// </summary>
		public static readonly global::System.Guid AssimilatorConceptTypeDomainRoleId = new global::System.Guid(0x0985da17, 0xc1f4, 0x4c51, 0xa5, 0x20, 0x5d, 0x8d, 0x9d, 0x1c, 0x66, 0x95);
		
		/// <summary>
		/// DomainRole AssimilatorConceptType
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeAssimilatesConceptType.AssimilatorConceptType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeAssimilatesConceptType/AssimilatorConceptType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeAssimilatesConceptType/AssimilatorConceptType.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AssimilatedConceptTypeCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeAssimilatesConceptType/AssimilatorConceptType.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0985da17-c1f4-4c51-a520-5d8d9d1c6695")]
		public ConceptType AssimilatorConceptType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConceptType)DslModeling::DomainRoleInfo.GetRolePlayer(this, AssimilatorConceptTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AssimilatorConceptTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AssimilatorConceptTypeCollection of a ConceptType
		/// <summary>
		/// Gets a list of AssimilatorConceptTypeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ConceptType> GetAssimilatorConceptTypeCollection(ConceptType element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ConceptType>, ConceptType>(element, AssimilatedConceptTypeDomainRoleId);
		}
		#endregion
		#region ReferencingConceptType domain role override
		
		/// <summary>
		/// Gets the element playing AssimilatorConceptType domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeReferencesConceptType.ReferencingConceptType
		/// </summary>
		public override sealed ConceptType ReferencingConceptType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.AssimilatorConceptType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.AssimilatorConceptType = value;
			}
		}
		
		#endregion
		#region AssimilatedConceptType domain role code
		
		/// <summary>
		/// AssimilatedConceptType domain role Id.
		/// </summary>
		public static readonly global::System.Guid AssimilatedConceptTypeDomainRoleId = new global::System.Guid(0x556c4dd3, 0x245a, 0x4283, 0xa8, 0x18, 0x1f, 0x98, 0xbd, 0xa4, 0x63, 0x0d);
		
		/// <summary>
		/// DomainRole AssimilatedConceptType
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeAssimilatesConceptType.AssimilatedConceptType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeAssimilatesConceptType/AssimilatedConceptType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeAssimilatesConceptType/AssimilatedConceptType.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "AssimilatorConceptTypeCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeAssimilatesConceptType/AssimilatedConceptType.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("556c4dd3-245a-4283-a818-1f98bda4630d")]
		public ConceptType AssimilatedConceptType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConceptType)DslModeling::DomainRoleInfo.GetRolePlayer(this, AssimilatedConceptTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AssimilatedConceptTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AssimilatedConceptTypeCollection of a ConceptType
		/// <summary>
		/// Gets a list of AssimilatedConceptTypeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ConceptType> GetAssimilatedConceptTypeCollection(ConceptType element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ConceptType>, ConceptType>(element, AssimilatorConceptTypeDomainRoleId);
		}
		#endregion
		#region ReferencedConceptType domain role override
		
		/// <summary>
		/// Gets the element playing AssimilatedConceptType domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeReferencesConceptType.ReferencedConceptType
		/// </summary>
		public override sealed ConceptType ReferencedConceptType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.AssimilatedConceptType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.AssimilatedConceptType = value;
			}
		}
		
		#endregion
		#region RefersToSubtype domain property code
		
		/// <summary>
		/// RefersToSubtype domain property Id.
		/// </summary>
		public static readonly global::System.Guid RefersToSubtypeDomainPropertyId = new global::System.Guid(0x34102ae8, 0x807a, 0x4a5a, 0x89, 0x41, 0x61, 0xc4, 0x9a, 0xbd, 0xbc, 0xe8);
		
		/// <summary>
		/// Storage for RefersToSubtype
		/// </summary>
		private global::System.Boolean refersToSubtypePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of RefersToSubtype domain property.
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeAssimilatesConceptType.RefersToSubtype
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeAssimilatesConceptType/RefersToSubtype.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeAssimilatesConceptType/RefersToSubtype.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslModeling::DomainObjectId("34102ae8-807a-4a5a-8941-61c49abdbce8")]
		public global::System.Boolean RefersToSubtype
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return refersToSubtypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				RefersToSubtypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ConceptTypeAssimilatesConceptType.RefersToSubtype domain property.
		/// </summary>
		internal sealed partial class RefersToSubtypePropertyHandler : DslModeling::DomainPropertyValueHandler<ConceptTypeAssimilatesConceptType, global::System.Boolean>
		{
			private RefersToSubtypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ConceptTypeAssimilatesConceptType.RefersToSubtype domain property value handler.
			/// </summary>
			public static readonly RefersToSubtypePropertyHandler Instance = new RefersToSubtypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ConceptTypeAssimilatesConceptType.RefersToSubtype domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return RefersToSubtypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ConceptTypeAssimilatesConceptType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.refersToSubtypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ConceptTypeAssimilatesConceptType element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.refersToSubtypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsPreferredForTarget domain property code
		
		/// <summary>
		/// IsPreferredForTarget domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsPreferredForTargetDomainPropertyId = new global::System.Guid(0x88fb045a, 0x7458, 0x440d, 0x8b, 0x4c, 0x64, 0x05, 0x6e, 0x93, 0x52, 0xd0);
		
		/// <summary>
		/// Storage for IsPreferredForTarget
		/// </summary>
		private global::System.Boolean isPreferredForTargetPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsPreferredForTarget domain property.
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeAssimilatesConceptType.IsPreferredForTarget
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeAssimilatesConceptType/IsPreferredForTarget.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeAssimilatesConceptType/IsPreferredForTarget.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslModeling::DomainObjectId("88fb045a-7458-440d-8b4c-64056e9352d0")]
		public global::System.Boolean IsPreferredForTarget
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isPreferredForTargetPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsPreferredForTargetPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ConceptTypeAssimilatesConceptType.IsPreferredForTarget domain property.
		/// </summary>
		internal sealed partial class IsPreferredForTargetPropertyHandler : DslModeling::DomainPropertyValueHandler<ConceptTypeAssimilatesConceptType, global::System.Boolean>
		{
			private IsPreferredForTargetPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ConceptTypeAssimilatesConceptType.IsPreferredForTarget domain property value handler.
			/// </summary>
			public static readonly IsPreferredForTargetPropertyHandler Instance = new IsPreferredForTargetPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ConceptTypeAssimilatesConceptType.IsPreferredForTarget domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsPreferredForTargetDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ConceptTypeAssimilatesConceptType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isPreferredForTargetPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ConceptTypeAssimilatesConceptType element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isPreferredForTargetPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsPreferredForParent domain property code
		
		/// <summary>
		/// IsPreferredForParent domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsPreferredForParentDomainPropertyId = new global::System.Guid(0x14f831e4, 0xda73, 0x426b, 0x9b, 0x5f, 0xb0, 0x26, 0xbe, 0x23, 0x55, 0x05);
		
		/// <summary>
		/// Storage for IsPreferredForParent
		/// </summary>
		private global::System.Boolean isPreferredForParentPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsPreferredForParent domain property.
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeAssimilatesConceptType.IsPreferredForParent
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeAssimilatesConceptType/IsPreferredForParent.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeAssimilatesConceptType/IsPreferredForParent.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslModeling::DomainObjectId("14f831e4-da73-426b-9b5f-b026be235505")]
		public global::System.Boolean IsPreferredForParent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isPreferredForParentPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsPreferredForParentPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ConceptTypeAssimilatesConceptType.IsPreferredForParent domain property.
		/// </summary>
		internal sealed partial class IsPreferredForParentPropertyHandler : DslModeling::DomainPropertyValueHandler<ConceptTypeAssimilatesConceptType, global::System.Boolean>
		{
			private IsPreferredForParentPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ConceptTypeAssimilatesConceptType.IsPreferredForParent domain property value handler.
			/// </summary>
			public static readonly IsPreferredForParentPropertyHandler Instance = new IsPreferredForParentPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ConceptTypeAssimilatesConceptType.IsPreferredForParent domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsPreferredForParentDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ConceptTypeAssimilatesConceptType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isPreferredForParentPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ConceptTypeAssimilatesConceptType element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isPreferredForParentPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region AssimilatorConceptType link accessor
		/// <summary>
		/// Get the list of ConceptTypeAssimilatesConceptType links to a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeAssimilatesConceptType> GetLinksToAssimilatedConceptTypeCollection ( global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType assimilatorConceptTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeAssimilatesConceptType>(assimilatorConceptTypeInstance, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeAssimilatesConceptType.AssimilatorConceptTypeDomainRoleId);
		}
		#endregion
		#region AssimilatedConceptType link accessor
		/// <summary>
		/// Get the list of ConceptTypeAssimilatesConceptType links to a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeAssimilatesConceptType> GetLinksToAssimilatorConceptTypeCollection ( global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType assimilatedConceptTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeAssimilatesConceptType>(assimilatedConceptTypeInstance, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeAssimilatesConceptType.AssimilatedConceptTypeDomainRoleId);
		}
		#endregion
		#region ConceptTypeAssimilatesConceptType instance accessors
		
		/// <summary>
		/// Get any ConceptTypeAssimilatesConceptType links between a given ConceptType and a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeAssimilatesConceptType> GetLinks( global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType source, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeAssimilatesConceptType> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeAssimilatesConceptType>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeAssimilatesConceptType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeAssimilatesConceptType>(source, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeAssimilatesConceptType.AssimilatorConceptTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeAssimilatesConceptType link in links )
			{
				if ( target.Equals(link.AssimilatedConceptType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConceptTypeAssimilatesConceptType link between a given ConceptTypeand a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeAssimilatesConceptType GetLink( global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType source, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeAssimilatesConceptType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeAssimilatesConceptType>(source, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeAssimilatesConceptType.AssimilatorConceptTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeAssimilatesConceptType link in links )
			{
				if ( target.Equals(link.AssimilatedConceptType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.ORMAbstraction
{
	/// <summary>
	/// DomainRelationship UniquenessIncludesConceptTypeChild
	/// Description for
	/// ORMSolutions.ORMArchitect.ORMAbstraction.UniquenessIncludesConceptTypeChild
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstraction.UniquenessIncludesConceptTypeChild.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstraction.UniquenessIncludesConceptTypeChild.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("c06e9c7d-89d3-433f-8b8a-fc80e3878dd5")]
	public sealed partial class UniquenessIncludesConceptTypeChild : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// UniquenessIncludesConceptTypeChild domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc06e9c7d, 0x89d3, 0x433f, 0x8b, 0x8a, 0xfc, 0x80, 0xe3, 0x87, 0x8d, 0xd5);
	
				
		/// <summary>
		/// Constructor
		/// Creates a UniquenessIncludesConceptTypeChild link in the same Partition as the given Uniqueness
		/// </summary>
		/// <param name="source">Uniqueness to use as the source of the relationship.</param>
		/// <param name="target">ConceptTypeChild to use as the target of the relationship.</param>
		public UniquenessIncludesConceptTypeChild(Uniqueness source, ConceptTypeChild target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(UniquenessIncludesConceptTypeChild.UniquenessDomainRoleId, source), new DslModeling::RoleAssignment(UniquenessIncludesConceptTypeChild.ConceptTypeChildDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UniquenessIncludesConceptTypeChild(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UniquenessIncludesConceptTypeChild(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UniquenessIncludesConceptTypeChild(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UniquenessIncludesConceptTypeChild(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Uniqueness domain role code
		
		/// <summary>
		/// Uniqueness domain role Id.
		/// </summary>
		public static readonly global::System.Guid UniquenessDomainRoleId = new global::System.Guid(0x8596e430, 0xaafb, 0x47cf, 0x9a, 0xa2, 0xfe, 0x6a, 0xbe, 0x50, 0x46, 0x8d);
		
		/// <summary>
		/// DomainRole Uniqueness
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMAbstraction.UniquenessIncludesConceptTypeChild.Uniqueness
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstraction.UniquenessIncludesConceptTypeChild/Uniqueness.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstraction.UniquenessIncludesConceptTypeChild/Uniqueness.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ConceptTypeChildCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstraction.UniquenessIncludesConceptTypeChild/Uniqueness.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("8596e430-aafb-47cf-9aa2-fe6abe50468d")]
		public Uniqueness Uniqueness
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Uniqueness)DslModeling::DomainRoleInfo.GetRolePlayer(this, UniquenessDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, UniquenessDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access UniquenessCollection of a ConceptTypeChild
		/// <summary>
		/// Gets a list of UniquenessCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Uniqueness> GetUniquenessCollection(ConceptTypeChild element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Uniqueness>, Uniqueness>(element, ConceptTypeChildDomainRoleId);
		}
		#endregion
		#region ConceptTypeChild domain role code
		
		/// <summary>
		/// ConceptTypeChild domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConceptTypeChildDomainRoleId = new global::System.Guid(0x2a135454, 0xe3b4, 0x44b1, 0xbd, 0x75, 0xa5, 0xff, 0xb5, 0xaa, 0xff, 0x7a);
		
		/// <summary>
		/// DomainRole ConceptTypeChild
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMAbstraction.UniquenessIncludesConceptTypeChild.ConceptTypeChild
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstraction.UniquenessIncludesConceptTypeChild/ConceptTypeChild.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstraction.UniquenessIncludesConceptTypeChild/ConceptTypeChild.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionDomainModel), "ORMSolutions.ORMArchitect.ORMAbstraction.GeneratedCode.AbstractionDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "UniquenessCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstraction.UniquenessIncludesConceptTypeChild/ConceptTypeChild.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("2a135454-e3b4-44b1-bd75-a5ffb5aaff7a")]
		public ConceptTypeChild ConceptTypeChild
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConceptTypeChild)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConceptTypeChildDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConceptTypeChildDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConceptTypeChildCollection of a Uniqueness
		/// <summary>
		/// Gets a list of ConceptTypeChildCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ConceptTypeChild> GetConceptTypeChildCollection(Uniqueness element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ConceptTypeChild>, ConceptTypeChild>(element, UniquenessDomainRoleId);
		}
		#endregion
		#region Uniqueness link accessor
		/// <summary>
		/// Get the list of UniquenessIncludesConceptTypeChild links to a Uniqueness.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstraction.UniquenessIncludesConceptTypeChild> GetLinksToConceptTypeChildCollection ( global::ORMSolutions.ORMArchitect.ORMAbstraction.Uniqueness uniquenessInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstraction.UniquenessIncludesConceptTypeChild>(uniquenessInstance, global::ORMSolutions.ORMArchitect.ORMAbstraction.UniquenessIncludesConceptTypeChild.UniquenessDomainRoleId);
		}
		#endregion
		#region ConceptTypeChild link accessor
		/// <summary>
		/// Get the list of UniquenessIncludesConceptTypeChild links to a ConceptTypeChild.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstraction.UniquenessIncludesConceptTypeChild> GetLinksToUniquenessCollection ( global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild conceptTypeChildInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstraction.UniquenessIncludesConceptTypeChild>(conceptTypeChildInstance, global::ORMSolutions.ORMArchitect.ORMAbstraction.UniquenessIncludesConceptTypeChild.ConceptTypeChildDomainRoleId);
		}
		#endregion
		#region UniquenessIncludesConceptTypeChild instance accessors
		
		/// <summary>
		/// Get any UniquenessIncludesConceptTypeChild links between a given Uniqueness and a ConceptTypeChild.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstraction.UniquenessIncludesConceptTypeChild> GetLinks( global::ORMSolutions.ORMArchitect.ORMAbstraction.Uniqueness source, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstraction.UniquenessIncludesConceptTypeChild> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstraction.UniquenessIncludesConceptTypeChild>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstraction.UniquenessIncludesConceptTypeChild> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstraction.UniquenessIncludesConceptTypeChild>(source, global::ORMSolutions.ORMArchitect.ORMAbstraction.UniquenessIncludesConceptTypeChild.UniquenessDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstraction.UniquenessIncludesConceptTypeChild link in links )
			{
				if ( target.Equals(link.ConceptTypeChild) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one UniquenessIncludesConceptTypeChild link between a given Uniquenessand a ConceptTypeChild.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstraction.UniquenessIncludesConceptTypeChild GetLink( global::ORMSolutions.ORMArchitect.ORMAbstraction.Uniqueness source, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstraction.UniquenessIncludesConceptTypeChild> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstraction.UniquenessIncludesConceptTypeChild>(source, global::ORMSolutions.ORMArchitect.ORMAbstraction.UniquenessIncludesConceptTypeChild.UniquenessDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstraction.UniquenessIncludesConceptTypeChild link in links )
			{
				if ( target.Equals(link.ConceptTypeChild) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
