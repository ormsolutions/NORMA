#region Common Public License Copyright Notice
/**************************************************************************\
* Natural Object-Role Modeling Architect for Visual Studio                 *
*                                                                          *
* Copyright © Neumont University. All rights reserved.                     *
* Copyright © ORM Solutions, LLC. All rights reserved.                     *
*                                                                          *
* The use and distribution terms for this software are covered by the      *
* Common Public License 1.0 (http://opensource.org/licenses/cpl) which     *
* can be found in the file CPL.txt at the root of this distribution.       *
* By using this software in any fashion, you are agreeing to be bound by   *
* the terms of this license.                                               *
*                                                                          *
* You must not remove this notice, or any other, from this software.       *
\**************************************************************************/
#endregion
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge
{
	/// <summary>
	/// DomainRelationship FactTypeMapsTowardsRole
	/// Description for
	/// ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.FactTypeMapsTowardsRole
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.FactTypeMapsTowardsRole.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GeneratedCode.ORMToORMAbstractionBridgeDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.FactTypeMapsTowardsRole.Description", typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GeneratedCode.ORMToORMAbstractionBridgeDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("98abb729-f2f0-4629-bfa7-801b6615137d")]
	public partial class FactTypeMapsTowardsRole : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FactTypeMapsTowardsRole domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x98abb729, 0xf2f0, 0x4629, 0xbf, 0xa7, 0x80, 0x1b, 0x66, 0x15, 0x13, 0x7d);
	
		// Constructors were not generated for this relationship because it had HasCustomConstructor
		// set to true. Please provide the constructors below in a partial class.
		//		
		///// <summary>
		///// Constructor
		///// Creates a FactTypeMapsTowardsRole link in the same Partition as the given FactType
		///// </summary>
		///// <param name="source">FactType to use as the source of the relationship.</param>
		///// <param name="target">RoleBase to use as the target of the relationship.</param>
		//public FactTypeMapsTowardsRole(global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleBase target)
		//	: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FactTypeMapsTowardsRole.FactTypeDomainRoleId, source), new DslModeling::RoleAssignment(FactTypeMapsTowardsRole.TowardsRoleDomainRoleId, target)}, null)
		//{
		//}
		//
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="store">Store where new link is to be created.</param>
		///// <param name="roleAssignments">List of relationship role assignments.</param>
		//public FactTypeMapsTowardsRole(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
		//	: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		//{
		//}
		//
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="store">Store where new link is to be created.</param>
		///// <param name="roleAssignments">List of relationship role assignments.</param>
		///// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		//public FactTypeMapsTowardsRole(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
		//	: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		//{
		//}
		//
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="partition">Partition where new link is to be created.</param>
		///// <param name="roleAssignments">List of relationship role assignments.</param>
		//public FactTypeMapsTowardsRole(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
		//	: base(partition, roleAssignments, null)
		//{
		//}
		//
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="partition">Partition where new link is to be created.</param>
		///// <param name="roleAssignments">List of relationship role assignments.</param>
		///// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		//public FactTypeMapsTowardsRole(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
		//	: base(partition, roleAssignments, propertyAssignments)
		//{
		//}
		#endregion
		#region FactType domain role code
		
		/// <summary>
		/// FactType domain role Id.
		/// </summary>
		public static readonly global::System.Guid FactTypeDomainRoleId = new global::System.Guid(0x05abb37c, 0x0363, 0x4bd5, 0xbe, 0x02, 0xf6, 0x88, 0xbf, 0xdb, 0x55, 0xa5);
		
		/// <summary>
		/// DomainRole FactType
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.FactTypeMapsTowardsRole.FactType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.FactTypeMapsTowardsRole/FactType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GeneratedCode.ORMToORMAbstractionBridgeDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.FactTypeMapsTowardsRole/FactType.Description", typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GeneratedCode.ORMToORMAbstractionBridgeDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TowardsRole", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.FactTypeMapsTowardsRole/FactType.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("05abb37c-0363-4bd5-be02-f688bfdb55a5")]
		public virtual global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType FactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType)DslModeling::DomainRoleInfo.GetRolePlayer(this, FactTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FactTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FactType of a RoleBase
		/// <summary>
		/// Gets FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType GetFactType(global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleBase element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TowardsRoleDomainRoleId) as global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType;
		}
		
		/// <summary>
		/// Sets FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFactType(global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleBase element, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType newFactType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TowardsRoleDomainRoleId, newFactType);
		}
		#endregion
		#region TowardsRole domain role code
		
		/// <summary>
		/// TowardsRole domain role Id.
		/// </summary>
		public static readonly global::System.Guid TowardsRoleDomainRoleId = new global::System.Guid(0x89ebc0d2, 0x380d, 0x4434, 0x9e, 0x1e, 0xf5, 0xe9, 0xc6, 0xb7, 0xeb, 0x16);
		
		/// <summary>
		/// DomainRole TowardsRole
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.FactTypeMapsTowardsRole.TowardsRole
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.FactTypeMapsTowardsRole/TowardsRole.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GeneratedCode.ORMToORMAbstractionBridgeDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.FactTypeMapsTowardsRole/TowardsRole.Description", typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GeneratedCode.ORMToORMAbstractionBridgeDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FactType", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.FactTypeMapsTowardsRole/TowardsRole.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("89ebc0d2-380d-4434-9e1e-f5e9c6b7eb16")]
		public virtual global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleBase TowardsRole
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleBase)DslModeling::DomainRoleInfo.GetRolePlayer(this, TowardsRoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TowardsRoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TowardsRole of a FactType
		/// <summary>
		/// Gets TowardsRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleBase GetTowardsRole(global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FactTypeDomainRoleId) as global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleBase;
		}
		
		/// <summary>
		/// Sets TowardsRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTowardsRole(global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType element, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleBase newTowardsRole)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FactTypeDomainRoleId, newTowardsRole);
		}
		#endregion
		#region Depth domain property code
		
		/// <summary>
		/// Depth domain property Id.
		/// </summary>
		public static readonly global::System.Guid DepthDomainPropertyId = new global::System.Guid(0x720b9285, 0xcc59, 0x48e2, 0x8b, 0x33, 0xd9, 0x94, 0x4a, 0x9e, 0xd4, 0x00);
		
		/// <summary>
		/// Storage for Depth
		/// </summary>
		private MappingDepth depthPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Depth domain property.
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.FactTypeMapsTowardsRole.Depth
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.FactTypeMapsTowardsRole/Depth.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GeneratedCode.ORMToORMAbstractionBridgeDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.FactTypeMapsTowardsRole/Depth.Description", typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GeneratedCode.ORMToORMAbstractionBridgeDomainModelResx")]
		[DslModeling::DomainObjectId("720b9285-cc59-48e2-8b33-d9944a9ed400")]
		public MappingDepth Depth
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return depthPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DepthPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FactTypeMapsTowardsRole.Depth domain property.
		/// </summary>
		internal sealed partial class DepthPropertyHandler : DslModeling::DomainPropertyValueHandler<FactTypeMapsTowardsRole, MappingDepth>
		{
			private DepthPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FactTypeMapsTowardsRole.Depth domain property value handler.
			/// </summary>
			public static readonly DepthPropertyHandler Instance = new DepthPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FactTypeMapsTowardsRole.Depth domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DepthDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed MappingDepth GetValue(FactTypeMapsTowardsRole element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.depthPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FactTypeMapsTowardsRole element, MappingDepth newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				MappingDepth oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.depthPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region UniquenessPattern domain property code
		
		/// <summary>
		/// UniquenessPattern domain property Id.
		/// </summary>
		public static readonly global::System.Guid UniquenessPatternDomainPropertyId = new global::System.Guid(0x8789b1d0, 0x9be1, 0x4c7a, 0xb6, 0x3b, 0xd8, 0xd4, 0x31, 0xaf, 0x5a, 0x47);
		
		/// <summary>
		/// Storage for UniquenessPattern
		/// </summary>
		private MappingUniquenessPattern uniquenessPatternPropertyStorage = MappingUniquenessPattern.None;
		
		/// <summary>
		/// Gets or sets the value of UniquenessPattern domain property.
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.FactTypeMapsTowardsRole.UniquenessPattern
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.FactTypeMapsTowardsRole/UniquenessPattern.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GeneratedCode.ORMToORMAbstractionBridgeDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.FactTypeMapsTowardsRole/UniquenessPattern.Description", typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GeneratedCode.ORMToORMAbstractionBridgeDomainModelResx")]
		[global::System.ComponentModel.DefaultValue(MappingUniquenessPattern.None)]
		[DslModeling::DomainObjectId("8789b1d0-9be1-4c7a-b63b-d8d431af5a47")]
		public MappingUniquenessPattern UniquenessPattern
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return uniquenessPatternPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				UniquenessPatternPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FactTypeMapsTowardsRole.UniquenessPattern domain property.
		/// </summary>
		internal sealed partial class UniquenessPatternPropertyHandler : DslModeling::DomainPropertyValueHandler<FactTypeMapsTowardsRole, MappingUniquenessPattern>
		{
			private UniquenessPatternPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FactTypeMapsTowardsRole.UniquenessPattern domain property value handler.
			/// </summary>
			public static readonly UniquenessPatternPropertyHandler Instance = new UniquenessPatternPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FactTypeMapsTowardsRole.UniquenessPattern domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return UniquenessPatternDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed MappingUniquenessPattern GetValue(FactTypeMapsTowardsRole element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.uniquenessPatternPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FactTypeMapsTowardsRole element, MappingUniquenessPattern newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				MappingUniquenessPattern oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.uniquenessPatternPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region MandatoryPattern domain property code
		
		/// <summary>
		/// MandatoryPattern domain property Id.
		/// </summary>
		public static readonly global::System.Guid MandatoryPatternDomainPropertyId = new global::System.Guid(0x1bee0f25, 0x5e38, 0x4c51, 0x87, 0x44, 0x1b, 0xcb, 0x5f, 0xeb, 0x20, 0xcc);
		
		/// <summary>
		/// Storage for MandatoryPattern
		/// </summary>
		private MappingMandatoryPattern mandatoryPatternPropertyStorage = MappingMandatoryPattern.None;
		
		/// <summary>
		/// Gets or sets the value of MandatoryPattern domain property.
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.FactTypeMapsTowardsRole.MandatoryPattern
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.FactTypeMapsTowardsRole/MandatoryPattern.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GeneratedCode.ORMToORMAbstractionBridgeDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.FactTypeMapsTowardsRole/MandatoryPattern.Description", typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GeneratedCode.ORMToORMAbstractionBridgeDomainModelResx")]
		[global::System.ComponentModel.DefaultValue(MappingMandatoryPattern.None)]
		[DslModeling::DomainObjectId("1bee0f25-5e38-4c51-8744-1bcb5feb20cc")]
		public MappingMandatoryPattern MandatoryPattern
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return mandatoryPatternPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MandatoryPatternPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FactTypeMapsTowardsRole.MandatoryPattern domain property.
		/// </summary>
		internal sealed partial class MandatoryPatternPropertyHandler : DslModeling::DomainPropertyValueHandler<FactTypeMapsTowardsRole, MappingMandatoryPattern>
		{
			private MandatoryPatternPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FactTypeMapsTowardsRole.MandatoryPattern domain property value handler.
			/// </summary>
			public static readonly MandatoryPatternPropertyHandler Instance = new MandatoryPatternPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FactTypeMapsTowardsRole.MandatoryPattern domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MandatoryPatternDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed MappingMandatoryPattern GetValue(FactTypeMapsTowardsRole element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.mandatoryPatternPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FactTypeMapsTowardsRole element, MappingMandatoryPattern newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				MappingMandatoryPattern oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.mandatoryPatternPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region FactType link accessor
		/// <summary>
		/// Get the FactTypeMapsTowardsRole link to a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.FactTypeMapsTowardsRole GetLinkToTowardsRole (global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType factTypeInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.FactTypeMapsTowardsRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.FactTypeMapsTowardsRole>(factTypeInstance, global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.FactTypeMapsTowardsRole.FactTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of FactType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TowardsRole link accessor
		/// <summary>
		/// Get the FactTypeMapsTowardsRole link to a RoleBase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.FactTypeMapsTowardsRole GetLinkToFactType (global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleBase towardsRoleInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.FactTypeMapsTowardsRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.FactTypeMapsTowardsRole>(towardsRoleInstance, global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.FactTypeMapsTowardsRole.TowardsRoleDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TowardsRole not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FactTypeMapsTowardsRole instance accessors
		
		/// <summary>
		/// Get any FactTypeMapsTowardsRole links between a given FactType and a RoleBase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.FactTypeMapsTowardsRole> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleBase target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.FactTypeMapsTowardsRole> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.FactTypeMapsTowardsRole>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.FactTypeMapsTowardsRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.FactTypeMapsTowardsRole>(source, global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.FactTypeMapsTowardsRole.FactTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.FactTypeMapsTowardsRole link in links )
			{
				if ( target.Equals(link.TowardsRole) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FactTypeMapsTowardsRole link between a given FactTypeand a RoleBase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.FactTypeMapsTowardsRole GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleBase target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.FactTypeMapsTowardsRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.FactTypeMapsTowardsRole>(source, global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.FactTypeMapsTowardsRole.FactTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.FactTypeMapsTowardsRole link in links )
			{
				if ( target.Equals(link.TowardsRole) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge
{
	/// <summary>
	/// DomainRelationship AbstractionModelIsForORMModel
	/// Description for
	/// ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.AbstractionModelIsForORMModel
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.AbstractionModelIsForORMModel.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GeneratedCode.ORMToORMAbstractionBridgeDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.AbstractionModelIsForORMModel.Description", typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GeneratedCode.ORMToORMAbstractionBridgeDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("02969205-dc37-4d83-acf2-506a6a3fe02c")]
	public partial class AbstractionModelIsForORMModel : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AbstractionModelIsForORMModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x02969205, 0xdc37, 0x4d83, 0xac, 0xf2, 0x50, 0x6a, 0x6a, 0x3f, 0xe0, 0x2c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AbstractionModelIsForORMModel link in the same Partition as the given AbstractionModel
		/// </summary>
		/// <param name="source">AbstractionModel to use as the source of the relationship.</param>
		/// <param name="target">ORMModel to use as the target of the relationship.</param>
		public AbstractionModelIsForORMModel(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AbstractionModelIsForORMModel.AbstractionModelDomainRoleId, source), new DslModeling::RoleAssignment(AbstractionModelIsForORMModel.ORMModelDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AbstractionModelIsForORMModel(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AbstractionModelIsForORMModel(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AbstractionModelIsForORMModel(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AbstractionModelIsForORMModel(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region AbstractionModel domain role code
		
		/// <summary>
		/// AbstractionModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid AbstractionModelDomainRoleId = new global::System.Guid(0xfdb675b5, 0xbfe3, 0x4c5c, 0x8b, 0x22, 0xc5, 0xcf, 0xb0, 0x33, 0x38, 0x11);
		
		/// <summary>
		/// DomainRole AbstractionModel
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.AbstractionModelIsForORMModel.AbstractionModel
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.AbstractionModelIsForORMModel/AbstractionModel.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GeneratedCode.ORMToORMAbstractionBridgeDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.AbstractionModelIsForORMModel/AbstractionModel.Description", typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GeneratedCode.ORMToORMAbstractionBridgeDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ORMModel", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.AbstractionModelIsForORMModel/AbstractionModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("fdb675b5-bfe3-4c5c-8b22-c5cfb0333811")]
		public virtual global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel AbstractionModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, AbstractionModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AbstractionModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AbstractionModel of a ORMModel
		/// <summary>
		/// Gets AbstractionModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel GetAbstractionModel(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ORMModelDomainRoleId) as global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel;
		}
		
		/// <summary>
		/// Sets AbstractionModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAbstractionModel(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel element, global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel newAbstractionModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ORMModelDomainRoleId, newAbstractionModel);
		}
		#endregion
		#region ORMModel domain role code
		
		/// <summary>
		/// ORMModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid ORMModelDomainRoleId = new global::System.Guid(0x5021fd0a, 0xc82f, 0x4319, 0xac, 0x52, 0xf9, 0x9b, 0xdf, 0x7b, 0x98, 0x82);
		
		/// <summary>
		/// DomainRole ORMModel
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.AbstractionModelIsForORMModel.ORMModel
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.AbstractionModelIsForORMModel/ORMModel.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GeneratedCode.ORMToORMAbstractionBridgeDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.AbstractionModelIsForORMModel/ORMModel.Description", typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GeneratedCode.ORMToORMAbstractionBridgeDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "AbstractionModel", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.AbstractionModelIsForORMModel/ORMModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("5021fd0a-c82f-4319-ac52-f99bdf7b9882")]
		public virtual global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel ORMModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ORMModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ORMModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ORMModel of a AbstractionModel
		/// <summary>
		/// Gets ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel GetORMModel(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AbstractionModelDomainRoleId) as global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel;
		}
		
		/// <summary>
		/// Sets ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetORMModel(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel element, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel newORMModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AbstractionModelDomainRoleId, newORMModel);
		}
		#endregion
		#region AbstractionModel link accessor
		/// <summary>
		/// Get the AbstractionModelIsForORMModel link to a AbstractionModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.AbstractionModelIsForORMModel GetLinkToORMModel (global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel abstractionModelInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.AbstractionModelIsForORMModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.AbstractionModelIsForORMModel>(abstractionModelInstance, global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.AbstractionModelIsForORMModel.AbstractionModelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of AbstractionModel not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ORMModel link accessor
		/// <summary>
		/// Get the AbstractionModelIsForORMModel link to a ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.AbstractionModelIsForORMModel GetLinkToAbstractionModel (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel oRMModelInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.AbstractionModelIsForORMModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.AbstractionModelIsForORMModel>(oRMModelInstance, global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.AbstractionModelIsForORMModel.ORMModelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ORMModel not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AbstractionModelIsForORMModel instance accessors
		
		/// <summary>
		/// Get any AbstractionModelIsForORMModel links between a given AbstractionModel and a ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.AbstractionModelIsForORMModel> GetLinks( global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.AbstractionModelIsForORMModel> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.AbstractionModelIsForORMModel>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.AbstractionModelIsForORMModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.AbstractionModelIsForORMModel>(source, global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.AbstractionModelIsForORMModel.AbstractionModelDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.AbstractionModelIsForORMModel link in links )
			{
				if ( target.Equals(link.ORMModel) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AbstractionModelIsForORMModel link between a given AbstractionModeland a ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.AbstractionModelIsForORMModel GetLink( global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.AbstractionModelIsForORMModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.AbstractionModelIsForORMModel>(source, global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.AbstractionModelIsForORMModel.AbstractionModelDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.AbstractionModelIsForORMModel link in links )
			{
				if ( target.Equals(link.ORMModel) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge
{
	/// <summary>
	/// DomainRelationship ConceptTypeIsForObjectType
	/// Description for
	/// ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeIsForObjectType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeIsForObjectType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GeneratedCode.ORMToORMAbstractionBridgeDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeIsForObjectType.Description", typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GeneratedCode.ORMToORMAbstractionBridgeDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("494ee309-435b-4dd1-b2dd-c7e794f768db")]
	public partial class ConceptTypeIsForObjectType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConceptTypeIsForObjectType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x494ee309, 0x435b, 0x4dd1, 0xb2, 0xdd, 0xc7, 0xe7, 0x94, 0xf7, 0x68, 0xdb);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConceptTypeIsForObjectType link in the same Partition as the given ConceptType
		/// </summary>
		/// <param name="source">ConceptType to use as the source of the relationship.</param>
		/// <param name="target">ObjectType to use as the target of the relationship.</param>
		public ConceptTypeIsForObjectType(global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConceptTypeIsForObjectType.ConceptTypeDomainRoleId, source), new DslModeling::RoleAssignment(ConceptTypeIsForObjectType.ObjectTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConceptTypeIsForObjectType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConceptTypeIsForObjectType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConceptTypeIsForObjectType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConceptTypeIsForObjectType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ConceptType domain role code
		
		/// <summary>
		/// ConceptType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConceptTypeDomainRoleId = new global::System.Guid(0xee5f768c, 0xb308, 0x480e, 0xa4, 0x44, 0xf8, 0x6f, 0x81, 0xb0, 0x2f, 0x46);
		
		/// <summary>
		/// DomainRole ConceptType
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeIsForObjectType.ConceptType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeIsForObjectType/ConceptType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GeneratedCode.ORMToORMAbstractionBridgeDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeIsForObjectType/ConceptType.Description", typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GeneratedCode.ORMToORMAbstractionBridgeDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ObjectType", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeIsForObjectType/ConceptType.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("ee5f768c-b308-480e-a444-f86f81b02f46")]
		public virtual global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType ConceptType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConceptTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConceptTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConceptType of a ObjectType
		/// <summary>
		/// Gets ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType GetConceptType(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ObjectTypeDomainRoleId) as global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType;
		}
		
		/// <summary>
		/// Sets ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetConceptType(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType element, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType newConceptType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ObjectTypeDomainRoleId, newConceptType);
		}
		#endregion
		#region ObjectType domain role code
		
		/// <summary>
		/// ObjectType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ObjectTypeDomainRoleId = new global::System.Guid(0x02c44e70, 0xf770, 0x42a3, 0x80, 0xe8, 0xc2, 0x33, 0x9a, 0x49, 0x68, 0x7c);
		
		/// <summary>
		/// DomainRole ObjectType
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeIsForObjectType.ObjectType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeIsForObjectType/ObjectType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GeneratedCode.ORMToORMAbstractionBridgeDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeIsForObjectType/ObjectType.Description", typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GeneratedCode.ORMToORMAbstractionBridgeDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ConceptType", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeIsForObjectType/ObjectType.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("02c44e70-f770-42a3-80e8-c2339a49687c")]
		public virtual global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType ObjectType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjectTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjectTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ObjectType of a ConceptType
		/// <summary>
		/// Gets ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType GetObjectType(global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConceptTypeDomainRoleId) as global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType;
		}
		
		/// <summary>
		/// Sets ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetObjectType(global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType element, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType newObjectType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConceptTypeDomainRoleId, newObjectType);
		}
		#endregion
		#region ConceptType link accessor
		/// <summary>
		/// Get the ConceptTypeIsForObjectType link to a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeIsForObjectType GetLinkToObjectType (global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType conceptTypeInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeIsForObjectType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeIsForObjectType>(conceptTypeInstance, global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeIsForObjectType.ConceptTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ConceptType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ObjectType link accessor
		/// <summary>
		/// Get the ConceptTypeIsForObjectType link to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeIsForObjectType GetLinkToConceptType (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType objectTypeInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeIsForObjectType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeIsForObjectType>(objectTypeInstance, global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeIsForObjectType.ObjectTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ObjectType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ConceptTypeIsForObjectType instance accessors
		
		/// <summary>
		/// Get any ConceptTypeIsForObjectType links between a given ConceptType and a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeIsForObjectType> GetLinks( global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeIsForObjectType> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeIsForObjectType>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeIsForObjectType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeIsForObjectType>(source, global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeIsForObjectType.ConceptTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeIsForObjectType link in links )
			{
				if ( target.Equals(link.ObjectType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConceptTypeIsForObjectType link between a given ConceptTypeand a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeIsForObjectType GetLink( global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeIsForObjectType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeIsForObjectType>(source, global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeIsForObjectType.ConceptTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeIsForObjectType link in links )
			{
				if ( target.Equals(link.ObjectType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge
{
	/// <summary>
	/// DomainRelationship ConceptTypeChildHasPathFactType
	/// Description for
	/// ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeChildHasPathFactType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeChildHasPathFactType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GeneratedCode.ORMToORMAbstractionBridgeDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeChildHasPathFactType.Description", typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GeneratedCode.ORMToORMAbstractionBridgeDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("a7d4ff78-1217-41c4-9c63-559ffbf2af4b")]
	public partial class ConceptTypeChildHasPathFactType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConceptTypeChildHasPathFactType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa7d4ff78, 0x1217, 0x41c4, 0x9c, 0x63, 0x55, 0x9f, 0xfb, 0xf2, 0xaf, 0x4b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConceptTypeChildHasPathFactType link in the same Partition as the given ConceptTypeChild
		/// </summary>
		/// <param name="source">ConceptTypeChild to use as the source of the relationship.</param>
		/// <param name="target">FactType to use as the target of the relationship.</param>
		public ConceptTypeChildHasPathFactType(global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConceptTypeChildHasPathFactType.ConceptTypeChildDomainRoleId, source), new DslModeling::RoleAssignment(ConceptTypeChildHasPathFactType.PathFactTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConceptTypeChildHasPathFactType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConceptTypeChildHasPathFactType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConceptTypeChildHasPathFactType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConceptTypeChildHasPathFactType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ConceptTypeChild domain role code
		
		/// <summary>
		/// ConceptTypeChild domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConceptTypeChildDomainRoleId = new global::System.Guid(0x309ecb8e, 0x8840, 0x48fb, 0x95, 0x91, 0xef, 0x74, 0xcc, 0x1b, 0x80, 0x5c);
		
		/// <summary>
		/// DomainRole ConceptTypeChild
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeChildHasPathFactType.ConceptTypeChild
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeChildHasPathFactType/ConceptTypeChild.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GeneratedCode.ORMToORMAbstractionBridgeDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeChildHasPathFactType/ConceptTypeChild.Description", typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GeneratedCode.ORMToORMAbstractionBridgeDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "PathFactTypeCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeChildHasPathFactType/ConceptTypeChild.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("309ecb8e-8840-48fb-9591-ef74cc1b805c")]
		public virtual global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild ConceptTypeChild
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConceptTypeChildDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConceptTypeChildDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConceptTypeChild of a FactType
		/// <summary>
		/// Gets a list of ConceptTypeChild.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild> GetConceptTypeChild(global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild>, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild>(element, PathFactTypeDomainRoleId);
		}
		#endregion
		#region PathFactType domain role code
		
		/// <summary>
		/// PathFactType domain role Id.
		/// </summary>
		public static readonly global::System.Guid PathFactTypeDomainRoleId = new global::System.Guid(0xa8ead929, 0xe0a5, 0x4dc3, 0x82, 0x84, 0x08, 0x13, 0x17, 0x3b, 0xe9, 0x08);
		
		/// <summary>
		/// DomainRole PathFactType
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeChildHasPathFactType.PathFactType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeChildHasPathFactType/PathFactType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GeneratedCode.ORMToORMAbstractionBridgeDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeChildHasPathFactType/PathFactType.Description", typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GeneratedCode.ORMToORMAbstractionBridgeDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ConceptTypeChild", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeChildHasPathFactType/PathFactType.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a8ead929-e0a5-4dc3-8284-0813173be908")]
		public virtual global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType PathFactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType)DslModeling::DomainRoleInfo.GetRolePlayer(this, PathFactTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PathFactTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PathFactTypeCollection of a ConceptTypeChild
		/// <summary>
		/// Gets a list of PathFactTypeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType> GetPathFactTypeCollection(global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType>, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType>(element, ConceptTypeChildDomainRoleId);
		}
		#endregion
		#region ConceptTypeChild link accessor
		/// <summary>
		/// Get the list of ConceptTypeChildHasPathFactType links to a ConceptTypeChild.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeChildHasPathFactType> GetLinksToPathFactTypeCollection ( global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild conceptTypeChildInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeChildHasPathFactType>(conceptTypeChildInstance, global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeChildHasPathFactType.ConceptTypeChildDomainRoleId);
		}
		#endregion
		#region PathFactType link accessor
		/// <summary>
		/// Get the list of ConceptTypeChildHasPathFactType links to a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeChildHasPathFactType> GetLinksToConceptTypeChild ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType pathFactTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeChildHasPathFactType>(pathFactTypeInstance, global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeChildHasPathFactType.PathFactTypeDomainRoleId);
		}
		#endregion
		#region ConceptTypeChildHasPathFactType instance accessors
		
		/// <summary>
		/// Get any ConceptTypeChildHasPathFactType links between a given ConceptTypeChild and a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeChildHasPathFactType> GetLinks( global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeChildHasPathFactType> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeChildHasPathFactType>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeChildHasPathFactType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeChildHasPathFactType>(source, global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeChildHasPathFactType.ConceptTypeChildDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeChildHasPathFactType link in links )
			{
				if ( target.Equals(link.PathFactType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConceptTypeChildHasPathFactType link between a given ConceptTypeChildand a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeChildHasPathFactType GetLink( global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeChildHasPathFactType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeChildHasPathFactType>(source, global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeChildHasPathFactType.ConceptTypeChildDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ConceptTypeChildHasPathFactType link in links )
			{
				if ( target.Equals(link.PathFactType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge
{
	/// <summary>
	/// DomainRelationship InformationTypeFormatIsForValueType
	/// Description for
	/// ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.InformationTypeFormatIsForValueType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.InformationTypeFormatIsForValueType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GeneratedCode.ORMToORMAbstractionBridgeDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.InformationTypeFormatIsForValueType.Description", typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GeneratedCode.ORMToORMAbstractionBridgeDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("fb9fcda4-030c-4f2f-8201-5287f79c25af")]
	public partial class InformationTypeFormatIsForValueType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// InformationTypeFormatIsForValueType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfb9fcda4, 0x030c, 0x4f2f, 0x82, 0x01, 0x52, 0x87, 0xf7, 0x9c, 0x25, 0xaf);
	
				
		/// <summary>
		/// Constructor
		/// Creates a InformationTypeFormatIsForValueType link in the same Partition as the given InformationTypeFormat
		/// </summary>
		/// <param name="source">InformationTypeFormat to use as the source of the relationship.</param>
		/// <param name="target">ObjectType to use as the target of the relationship.</param>
		public InformationTypeFormatIsForValueType(global::ORMSolutions.ORMArchitect.ORMAbstraction.InformationTypeFormat source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(InformationTypeFormatIsForValueType.InformationTypeFormatDomainRoleId, source), new DslModeling::RoleAssignment(InformationTypeFormatIsForValueType.ValueTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public InformationTypeFormatIsForValueType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public InformationTypeFormatIsForValueType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public InformationTypeFormatIsForValueType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public InformationTypeFormatIsForValueType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region InformationTypeFormat domain role code
		
		/// <summary>
		/// InformationTypeFormat domain role Id.
		/// </summary>
		public static readonly global::System.Guid InformationTypeFormatDomainRoleId = new global::System.Guid(0xe7453c11, 0x962f, 0x4d37, 0x9e, 0x69, 0xf0, 0x1e, 0x83, 0x81, 0x0c, 0xc8);
		
		/// <summary>
		/// DomainRole InformationTypeFormat
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.InformationTypeFormatIsForValueType.InformationTypeFormat
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.InformationTypeFormatIsForValueType/InformationTypeFormat.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GeneratedCode.ORMToORMAbstractionBridgeDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.InformationTypeFormatIsForValueType/InformationTypeFormat.Description", typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GeneratedCode.ORMToORMAbstractionBridgeDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ValueType", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.InformationTypeFormatIsForValueType/InformationTypeFormat.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("e7453c11-962f-4d37-9e69-f01e83810cc8")]
		public virtual global::ORMSolutions.ORMArchitect.ORMAbstraction.InformationTypeFormat InformationTypeFormat
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.ORMAbstraction.InformationTypeFormat)DslModeling::DomainRoleInfo.GetRolePlayer(this, InformationTypeFormatDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InformationTypeFormatDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InformationTypeFormat of a ObjectType
		/// <summary>
		/// Gets InformationTypeFormat.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstraction.InformationTypeFormat GetInformationTypeFormat(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ValueTypeDomainRoleId) as global::ORMSolutions.ORMArchitect.ORMAbstraction.InformationTypeFormat;
		}
		
		/// <summary>
		/// Sets InformationTypeFormat.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetInformationTypeFormat(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType element, global::ORMSolutions.ORMArchitect.ORMAbstraction.InformationTypeFormat newInformationTypeFormat)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ValueTypeDomainRoleId, newInformationTypeFormat);
		}
		#endregion
		#region ValueType domain role code
		
		/// <summary>
		/// ValueType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ValueTypeDomainRoleId = new global::System.Guid(0xee9cf583, 0xcd1b, 0x4df1, 0xba, 0xfb, 0xc4, 0xc2, 0x20, 0xb6, 0xd6, 0x85);
		
		/// <summary>
		/// DomainRole ValueType
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.InformationTypeFormatIsForValueType.ValueType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.InformationTypeFormatIsForValueType/ValueType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GeneratedCode.ORMToORMAbstractionBridgeDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.InformationTypeFormatIsForValueType/ValueType.Description", typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GeneratedCode.ORMToORMAbstractionBridgeDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "InformationTypeFormat", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.InformationTypeFormatIsForValueType/ValueType.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("ee9cf583-cd1b-4df1-bafb-c4c220b6d685")]
		public virtual global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType ValueType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ValueTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ValueTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ValueType of a InformationTypeFormat
		/// <summary>
		/// Gets ValueType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType GetValueType(global::ORMSolutions.ORMArchitect.ORMAbstraction.InformationTypeFormat element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, InformationTypeFormatDomainRoleId) as global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType;
		}
		
		/// <summary>
		/// Sets ValueType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetValueType(global::ORMSolutions.ORMArchitect.ORMAbstraction.InformationTypeFormat element, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType newValueType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, InformationTypeFormatDomainRoleId, newValueType);
		}
		#endregion
		#region InformationTypeFormat link accessor
		/// <summary>
		/// Get the InformationTypeFormatIsForValueType link to a InformationTypeFormat.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.InformationTypeFormatIsForValueType GetLinkToValueType (global::ORMSolutions.ORMArchitect.ORMAbstraction.InformationTypeFormat informationTypeFormatInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.InformationTypeFormatIsForValueType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.InformationTypeFormatIsForValueType>(informationTypeFormatInstance, global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.InformationTypeFormatIsForValueType.InformationTypeFormatDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of InformationTypeFormat not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ValueType link accessor
		/// <summary>
		/// Get the InformationTypeFormatIsForValueType link to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.InformationTypeFormatIsForValueType GetLinkToInformationTypeFormat (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType valueTypeInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.InformationTypeFormatIsForValueType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.InformationTypeFormatIsForValueType>(valueTypeInstance, global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.InformationTypeFormatIsForValueType.ValueTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ValueType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region InformationTypeFormatIsForValueType instance accessors
		
		/// <summary>
		/// Get any InformationTypeFormatIsForValueType links between a given InformationTypeFormat and a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.InformationTypeFormatIsForValueType> GetLinks( global::ORMSolutions.ORMArchitect.ORMAbstraction.InformationTypeFormat source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.InformationTypeFormatIsForValueType> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.InformationTypeFormatIsForValueType>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.InformationTypeFormatIsForValueType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.InformationTypeFormatIsForValueType>(source, global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.InformationTypeFormatIsForValueType.InformationTypeFormatDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.InformationTypeFormatIsForValueType link in links )
			{
				if ( target.Equals(link.ValueType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one InformationTypeFormatIsForValueType link between a given InformationTypeFormatand a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.InformationTypeFormatIsForValueType GetLink( global::ORMSolutions.ORMArchitect.ORMAbstraction.InformationTypeFormat source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.InformationTypeFormatIsForValueType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.InformationTypeFormatIsForValueType>(source, global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.InformationTypeFormatIsForValueType.InformationTypeFormatDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.InformationTypeFormatIsForValueType link in links )
			{
				if ( target.Equals(link.ValueType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge
{
	/// <summary>
	/// DomainRelationship UniquenessIsForUniquenessConstraint
	/// Description for
	/// ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.UniquenessIsForUniquenessConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.UniquenessIsForUniquenessConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GeneratedCode.ORMToORMAbstractionBridgeDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.UniquenessIsForUniquenessConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GeneratedCode.ORMToORMAbstractionBridgeDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("e61822c1-04ee-4ae3-a28e-f45879c8fe41")]
	public partial class UniquenessIsForUniquenessConstraint : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// UniquenessIsForUniquenessConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe61822c1, 0x04ee, 0x4ae3, 0xa2, 0x8e, 0xf4, 0x58, 0x79, 0xc8, 0xfe, 0x41);
	
				
		/// <summary>
		/// Constructor
		/// Creates a UniquenessIsForUniquenessConstraint link in the same Partition as the given Uniqueness
		/// </summary>
		/// <param name="source">Uniqueness to use as the source of the relationship.</param>
		/// <param name="target">UniquenessConstraint to use as the target of the relationship.</param>
		public UniquenessIsForUniquenessConstraint(global::ORMSolutions.ORMArchitect.ORMAbstraction.Uniqueness source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraint target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(UniquenessIsForUniquenessConstraint.UniquenessDomainRoleId, source), new DslModeling::RoleAssignment(UniquenessIsForUniquenessConstraint.UniquenessConstraintDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UniquenessIsForUniquenessConstraint(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UniquenessIsForUniquenessConstraint(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UniquenessIsForUniquenessConstraint(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UniquenessIsForUniquenessConstraint(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Uniqueness domain role code
		
		/// <summary>
		/// Uniqueness domain role Id.
		/// </summary>
		public static readonly global::System.Guid UniquenessDomainRoleId = new global::System.Guid(0x4c49f284, 0x81c1, 0x41e8, 0x8a, 0x23, 0x13, 0x7d, 0xef, 0x1d, 0x22, 0x9f);
		
		/// <summary>
		/// DomainRole Uniqueness
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.UniquenessIsForUniquenessConstraint.Uniqueness
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.UniquenessIsForUniquenessConstraint/Uniqueness.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GeneratedCode.ORMToORMAbstractionBridgeDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.UniquenessIsForUniquenessConstraint/Uniqueness.Description", typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GeneratedCode.ORMToORMAbstractionBridgeDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "UniquenessConstraint", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.UniquenessIsForUniquenessConstraint/Uniqueness.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("4c49f284-81c1-41e8-8a23-137def1d229f")]
		public virtual global::ORMSolutions.ORMArchitect.ORMAbstraction.Uniqueness Uniqueness
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.ORMAbstraction.Uniqueness)DslModeling::DomainRoleInfo.GetRolePlayer(this, UniquenessDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, UniquenessDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Uniqueness of a UniquenessConstraint
		/// <summary>
		/// Gets Uniqueness.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstraction.Uniqueness GetUniqueness(global::ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, UniquenessConstraintDomainRoleId) as global::ORMSolutions.ORMArchitect.ORMAbstraction.Uniqueness;
		}
		
		/// <summary>
		/// Sets Uniqueness.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetUniqueness(global::ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraint element, global::ORMSolutions.ORMArchitect.ORMAbstraction.Uniqueness newUniqueness)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, UniquenessConstraintDomainRoleId, newUniqueness);
		}
		#endregion
		#region UniquenessConstraint domain role code
		
		/// <summary>
		/// UniquenessConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid UniquenessConstraintDomainRoleId = new global::System.Guid(0x6d7dd635, 0x6b8d, 0x4ea7, 0xa2, 0xa5, 0x00, 0x3a, 0xda, 0x32, 0xaf, 0xd0);
		
		/// <summary>
		/// DomainRole UniquenessConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.UniquenessIsForUniquenessConstraint.UniquenessConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.UniquenessIsForUniquenessConstraint/UniquenessConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GeneratedCode.ORMToORMAbstractionBridgeDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.UniquenessIsForUniquenessConstraint/UniquenessConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GeneratedCode.ORMToORMAbstractionBridgeDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Uniqueness", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.UniquenessIsForUniquenessConstraint/UniquenessConstraint.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("6d7dd635-6b8d-4ea7-a2a5-003ada32afd0")]
		public virtual global::ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraint UniquenessConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, UniquenessConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, UniquenessConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access UniquenessConstraint of a Uniqueness
		/// <summary>
		/// Gets UniquenessConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraint GetUniquenessConstraint(global::ORMSolutions.ORMArchitect.ORMAbstraction.Uniqueness element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, UniquenessDomainRoleId) as global::ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraint;
		}
		
		/// <summary>
		/// Sets UniquenessConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetUniquenessConstraint(global::ORMSolutions.ORMArchitect.ORMAbstraction.Uniqueness element, global::ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraint newUniquenessConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, UniquenessDomainRoleId, newUniquenessConstraint);
		}
		#endregion
		#region Uniqueness link accessor
		/// <summary>
		/// Get the UniquenessIsForUniquenessConstraint link to a Uniqueness.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.UniquenessIsForUniquenessConstraint GetLinkToUniquenessConstraint (global::ORMSolutions.ORMArchitect.ORMAbstraction.Uniqueness uniquenessInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.UniquenessIsForUniquenessConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.UniquenessIsForUniquenessConstraint>(uniquenessInstance, global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.UniquenessIsForUniquenessConstraint.UniquenessDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Uniqueness not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region UniquenessConstraint link accessor
		/// <summary>
		/// Get the UniquenessIsForUniquenessConstraint link to a UniquenessConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.UniquenessIsForUniquenessConstraint GetLinkToUniqueness (global::ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraint uniquenessConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.UniquenessIsForUniquenessConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.UniquenessIsForUniquenessConstraint>(uniquenessConstraintInstance, global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.UniquenessIsForUniquenessConstraint.UniquenessConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of UniquenessConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region UniquenessIsForUniquenessConstraint instance accessors
		
		/// <summary>
		/// Get any UniquenessIsForUniquenessConstraint links between a given Uniqueness and a UniquenessConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.UniquenessIsForUniquenessConstraint> GetLinks( global::ORMSolutions.ORMArchitect.ORMAbstraction.Uniqueness source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraint target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.UniquenessIsForUniquenessConstraint> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.UniquenessIsForUniquenessConstraint>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.UniquenessIsForUniquenessConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.UniquenessIsForUniquenessConstraint>(source, global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.UniquenessIsForUniquenessConstraint.UniquenessDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.UniquenessIsForUniquenessConstraint link in links )
			{
				if ( target.Equals(link.UniquenessConstraint) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one UniquenessIsForUniquenessConstraint link between a given Uniquenessand a UniquenessConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.UniquenessIsForUniquenessConstraint GetLink( global::ORMSolutions.ORMArchitect.ORMAbstraction.Uniqueness source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraint target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.UniquenessIsForUniquenessConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.UniquenessIsForUniquenessConstraint>(source, global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.UniquenessIsForUniquenessConstraint.UniquenessDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.UniquenessIsForUniquenessConstraint link in links )
			{
				if ( target.Equals(link.UniquenessConstraint) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge
{
	/// <summary>
	/// DomainRelationship ExcludedORMModelElement
	/// Description for
	/// ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ExcludedORMModelElement
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ExcludedORMModelElement.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GeneratedCode.ORMToORMAbstractionBridgeDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ExcludedORMModelElement.Description", typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GeneratedCode.ORMToORMAbstractionBridgeDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("6a9a8efb-4db5-49a2-8818-d66bed21d590")]
	public partial class ExcludedORMModelElement : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ExcludedORMModelElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6a9a8efb, 0x4db5, 0x49a2, 0x88, 0x18, 0xd6, 0x6b, 0xed, 0x21, 0xd5, 0x90);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ExcludedORMModelElement link in the same Partition as the given ORMModelElement
		/// </summary>
		/// <param name="source">ORMModelElement to use as the source of the relationship.</param>
		/// <param name="target">AbstractionModel to use as the target of the relationship.</param>
		public ExcludedORMModelElement(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElement source, global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ExcludedORMModelElement.ExcludedElementDomainRoleId, source), new DslModeling::RoleAssignment(ExcludedORMModelElement.AbstractionModelDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExcludedORMModelElement(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExcludedORMModelElement(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExcludedORMModelElement(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExcludedORMModelElement(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ExcludedElement domain role code
		
		/// <summary>
		/// ExcludedElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid ExcludedElementDomainRoleId = new global::System.Guid(0x7dccca8c, 0x9283, 0x4167, 0x9c, 0xc2, 0x79, 0xca, 0xea, 0x5d, 0xa0, 0x08);
		
		/// <summary>
		/// DomainRole ExcludedElement
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ExcludedORMModelElement.ExcludedElement
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ExcludedORMModelElement/ExcludedElement.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GeneratedCode.ORMToORMAbstractionBridgeDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ExcludedORMModelElement/ExcludedElement.Description", typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GeneratedCode.ORMToORMAbstractionBridgeDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AbstractionModel", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ExcludedORMModelElement/ExcludedElement.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("7dccca8c-9283-4167-9cc2-79caea5da008")]
		public virtual global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElement ExcludedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, ExcludedElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ExcludedElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ExcludedElement of a AbstractionModel
		/// <summary>
		/// Gets a list of ExcludedElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElement> GetExcludedElement(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElement>, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElement>(element, AbstractionModelDomainRoleId);
		}
		#endregion
		#region AbstractionModel domain role code
		
		/// <summary>
		/// AbstractionModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid AbstractionModelDomainRoleId = new global::System.Guid(0xafbd0d81, 0x5ef6, 0x4d0e, 0xa4, 0xcb, 0x01, 0x45, 0xf8, 0xea, 0x93, 0x9b);
		
		/// <summary>
		/// DomainRole AbstractionModel
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ExcludedORMModelElement.AbstractionModel
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ExcludedORMModelElement/AbstractionModel.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GeneratedCode.ORMToORMAbstractionBridgeDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ExcludedORMModelElement/AbstractionModel.Description", typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GeneratedCode.ORMToORMAbstractionBridgeDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ExcludedElement", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ExcludedORMModelElement/AbstractionModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("afbd0d81-5ef6-4d0e-a4cb-0145f8ea939b")]
		public virtual global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel AbstractionModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, AbstractionModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AbstractionModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AbstractionModel of a ORMModelElement
		/// <summary>
		/// Gets AbstractionModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel GetAbstractionModel(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElement element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ExcludedElementDomainRoleId) as global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel;
		}
		
		/// <summary>
		/// Sets AbstractionModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAbstractionModel(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElement element, global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel newAbstractionModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ExcludedElementDomainRoleId, newAbstractionModel);
		}
		#endregion
		#region ExcludedElement link accessor
		/// <summary>
		/// Get the ExcludedORMModelElement link to a ORMModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ExcludedORMModelElement GetLinkToAbstractionModel (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElement excludedElementInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ExcludedORMModelElement> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ExcludedORMModelElement>(excludedElementInstance, global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ExcludedORMModelElement.ExcludedElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ExcludedElement not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AbstractionModel link accessor
		/// <summary>
		/// Get the list of ExcludedORMModelElement links to a AbstractionModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ExcludedORMModelElement> GetLinksToExcludedElement ( global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel abstractionModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ExcludedORMModelElement>(abstractionModelInstance, global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ExcludedORMModelElement.AbstractionModelDomainRoleId);
		}
		#endregion
		#region ExcludedORMModelElement instance accessors
		
		/// <summary>
		/// Get any ExcludedORMModelElement links between a given ORMModelElement and a AbstractionModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ExcludedORMModelElement> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElement source, global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ExcludedORMModelElement> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ExcludedORMModelElement>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ExcludedORMModelElement> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ExcludedORMModelElement>(source, global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ExcludedORMModelElement.ExcludedElementDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ExcludedORMModelElement link in links )
			{
				if ( target.Equals(link.AbstractionModel) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ExcludedORMModelElement link between a given ORMModelElementand a AbstractionModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ExcludedORMModelElement GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElement source, global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ExcludedORMModelElement> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ExcludedORMModelElement>(source, global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ExcludedORMModelElement.ExcludedElementDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ExcludedORMModelElement link in links )
			{
				if ( target.Equals(link.AbstractionModel) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge
{
	/// <summary>
	/// DomainRelationship GenerationSettingTargetsAbstractionModel
	/// Description for
	/// ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GenerationSettingTargetsAbstractionModel
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GenerationSettingTargetsAbstractionModel.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GeneratedCode.ORMToORMAbstractionBridgeDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GenerationSettingTargetsAbstractionModel.Description", typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GeneratedCode.ORMToORMAbstractionBridgeDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("890c6aaf-a4b8-42a7-bc0e-89beae1b8d7f")]
	public partial class GenerationSettingTargetsAbstractionModel : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// GenerationSettingTargetsAbstractionModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x890c6aaf, 0xa4b8, 0x42a7, 0xbc, 0x0e, 0x89, 0xbe, 0xae, 0x1b, 0x8d, 0x7f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a GenerationSettingTargetsAbstractionModel link in the same Partition as the given AbstractionModelGenerationSetting
		/// </summary>
		/// <param name="source">AbstractionModelGenerationSetting to use as the source of the relationship.</param>
		/// <param name="target">AbstractionModel to use as the target of the relationship.</param>
		public GenerationSettingTargetsAbstractionModel(AbstractionModelGenerationSetting source, global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(GenerationSettingTargetsAbstractionModel.GenerationSettingDomainRoleId, source), new DslModeling::RoleAssignment(GenerationSettingTargetsAbstractionModel.GeneratedAbstractionModelDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public GenerationSettingTargetsAbstractionModel(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public GenerationSettingTargetsAbstractionModel(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public GenerationSettingTargetsAbstractionModel(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public GenerationSettingTargetsAbstractionModel(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region GenerationSetting domain role code
		
		/// <summary>
		/// GenerationSetting domain role Id.
		/// </summary>
		public static readonly global::System.Guid GenerationSettingDomainRoleId = new global::System.Guid(0x6b876d00, 0x4e9a, 0x42e9, 0xb9, 0x84, 0x03, 0xf6, 0x10, 0xfa, 0x52, 0x27);
		
		/// <summary>
		/// DomainRole GenerationSetting
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GenerationSettingTargetsAbstractionModel.GenerationSetting
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GenerationSettingTargetsAbstractionModel/GenerationSetting.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GeneratedCode.ORMToORMAbstractionBridgeDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GenerationSettingTargetsAbstractionModel/GenerationSetting.Description", typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GeneratedCode.ORMToORMAbstractionBridgeDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "GeneratedAbstractionModel", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GenerationSettingTargetsAbstractionModel/GenerationSetting.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("6b876d00-4e9a-42e9-b984-03f610fa5227")]
		public virtual AbstractionModelGenerationSetting GenerationSetting
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AbstractionModelGenerationSetting)DslModeling::DomainRoleInfo.GetRolePlayer(this, GenerationSettingDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, GenerationSettingDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access GenerationSetting of a AbstractionModel
		/// <summary>
		/// Gets GenerationSetting.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AbstractionModelGenerationSetting GetGenerationSetting(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, GeneratedAbstractionModelDomainRoleId) as AbstractionModelGenerationSetting;
		}
		
		/// <summary>
		/// Sets GenerationSetting.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetGenerationSetting(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel element, AbstractionModelGenerationSetting newGenerationSetting)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, GeneratedAbstractionModelDomainRoleId, newGenerationSetting);
		}
		#endregion
		#region GeneratedAbstractionModel domain role code
		
		/// <summary>
		/// GeneratedAbstractionModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid GeneratedAbstractionModelDomainRoleId = new global::System.Guid(0x16f8ffd5, 0x2997, 0x475c, 0xa2, 0xaa, 0x61, 0xc3, 0xb1, 0xa6, 0x2d, 0xd2);
		
		/// <summary>
		/// DomainRole GeneratedAbstractionModel
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GenerationSettingTargetsAbstractionModel.GeneratedAbstractionModel
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GenerationSettingTargetsAbstractionModel/GeneratedAbstractionModel.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GeneratedCode.ORMToORMAbstractionBridgeDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GenerationSettingTargetsAbstractionModel/GeneratedAbstractionModel.Description", typeof(global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.ORMToORMAbstractionBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GeneratedCode.ORMToORMAbstractionBridgeDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "GenerationSetting", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GenerationSettingTargetsAbstractionModel/GeneratedAbstractionModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("16f8ffd5-2997-475c-a2aa-61c3b1a62dd2")]
		public virtual global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel GeneratedAbstractionModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, GeneratedAbstractionModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, GeneratedAbstractionModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access GeneratedAbstractionModel of a AbstractionModelGenerationSetting
		/// <summary>
		/// Gets GeneratedAbstractionModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel GetGeneratedAbstractionModel(AbstractionModelGenerationSetting element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, GenerationSettingDomainRoleId) as global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel;
		}
		
		/// <summary>
		/// Sets GeneratedAbstractionModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetGeneratedAbstractionModel(AbstractionModelGenerationSetting element, global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel newGeneratedAbstractionModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, GenerationSettingDomainRoleId, newGeneratedAbstractionModel);
		}
		#endregion
		#region GenerationSetting link accessor
		/// <summary>
		/// Get the GenerationSettingTargetsAbstractionModel link to a AbstractionModelGenerationSetting.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GenerationSettingTargetsAbstractionModel GetLinkToGeneratedAbstractionModel (global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.AbstractionModelGenerationSetting generationSettingInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GenerationSettingTargetsAbstractionModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GenerationSettingTargetsAbstractionModel>(generationSettingInstance, global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GenerationSettingTargetsAbstractionModel.GenerationSettingDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of GenerationSetting not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region GeneratedAbstractionModel link accessor
		/// <summary>
		/// Get the GenerationSettingTargetsAbstractionModel link to a AbstractionModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GenerationSettingTargetsAbstractionModel GetLinkToGenerationSetting (global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel generatedAbstractionModelInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GenerationSettingTargetsAbstractionModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GenerationSettingTargetsAbstractionModel>(generatedAbstractionModelInstance, global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GenerationSettingTargetsAbstractionModel.GeneratedAbstractionModelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of GeneratedAbstractionModel not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region GenerationSettingTargetsAbstractionModel instance accessors
		
		/// <summary>
		/// Get any GenerationSettingTargetsAbstractionModel links between a given AbstractionModelGenerationSetting and a AbstractionModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GenerationSettingTargetsAbstractionModel> GetLinks( global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.AbstractionModelGenerationSetting source, global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GenerationSettingTargetsAbstractionModel> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GenerationSettingTargetsAbstractionModel>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GenerationSettingTargetsAbstractionModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GenerationSettingTargetsAbstractionModel>(source, global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GenerationSettingTargetsAbstractionModel.GenerationSettingDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GenerationSettingTargetsAbstractionModel link in links )
			{
				if ( target.Equals(link.GeneratedAbstractionModel) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one GenerationSettingTargetsAbstractionModel link between a given AbstractionModelGenerationSettingand a AbstractionModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GenerationSettingTargetsAbstractionModel GetLink( global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.AbstractionModelGenerationSetting source, global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GenerationSettingTargetsAbstractionModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GenerationSettingTargetsAbstractionModel>(source, global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GenerationSettingTargetsAbstractionModel.GenerationSettingDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMToORMAbstractionBridge.GenerationSettingTargetsAbstractionModel link in links )
			{
				if ( target.Equals(link.GeneratedAbstractionModel) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
