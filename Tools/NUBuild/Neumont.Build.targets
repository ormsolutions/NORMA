<?xml version="1.0" encoding="utf-8"?>
<!--
	Neumont Build System

	Copyright © Neumont University. All rights reserved.

	This software is provided 'as-is', without any express or implied warranty. In no event will the authors be held liable for any damages arising from the use of this software.
	Permission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions:
	1. The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required.
	2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.
	3. This notice may not be removed or altered from any source distribution.
-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<!--
		This .targets file provides various general-purpose tasks and targets.
		It should be imported after Microsoft.Common.targets is imported.
		(Note: Microsoft.Common.targets is typically imported indirectly via language-specific .targets files, such as Microsoft.CSharp.targets or Microsoft.VisualBasic.targets.)
	-->

	<PropertyGroup>
		 <!-- The name of the assembly that contains the NUBuild tasks. -->
		<NUBuildTasksAssemblyName>Neumont.Build$(ProjectToolsAssemblySuffix), Version=$(ProjectToolsAssemblyVersion), Culture=neutral, PublicKeyToken=957d5b7d5e79e25f</NUBuildTasksAssemblyName>
	</PropertyGroup>

	<!-- VS2019 is not finding assemblies in the subdirectory. The helper assembly is in the
	same directory as the .targets file, so a bare file name will load. -->
	<UsingTask Condition="$(TargetVisualStudioNumericVersion) &gt;= 16.0" TaskName="Gacutil" AssemblyFile="Neumont.Build.Core.dll"/>
	<UsingTask Condition="$(TargetVisualStudioNumericVersion) &gt;= 16.0" TaskName="Ngen" AssemblyFile="Neumont.Build.Core.dll"/>
	<UsingTask Condition="$(TargetVisualStudioNumericVersion) &gt;= 16.0" TaskName="CopyWithPreprocessing" AssemblyFile="Neumont.Build.Core.dll"/>
	<UsingTask Condition="$(TargetVisualStudioNumericVersion) &gt;= 16.0" TaskName="ResourceMergeTargetResolver" AssemblyFile="Neumont.Build.Core.dll"/>
	<UsingTask Condition="$(TargetVisualStudioNumericVersion) &gt;= 16.0" TaskName="ResourceMerger" AssemblyFile="Neumont.Build.Core.dll"/>
	<UsingTask Condition="$(TargetVisualStudioNumericVersion) &gt;= 16.0" TaskName="RegexCompiler" AssemblyFile="Neumont.Build.Core.dll"/>

	<UsingTask Condition="$(TargetVisualStudioNumericVersion) &lt; 16.0" TaskName="Gacutil" AssemblyName="$(NUBuildTasksAssemblyName)"/>
	<UsingTask Condition="$(TargetVisualStudioNumericVersion) &lt; 16.0" TaskName="Ngen" AssemblyName="$(NUBuildTasksAssemblyName)"/>
	<UsingTask Condition="$(TargetVisualStudioNumericVersion) &lt; 16.0" TaskName="CopyWithPreprocessing" AssemblyName="$(NUBuildTasksAssemblyName)"/>
	<UsingTask Condition="$(TargetVisualStudioNumericVersion) &lt; 16.0" TaskName="ResourceMergeTargetResolver" AssemblyName="$(NUBuildTasksAssemblyName)"/>
	<UsingTask Condition="$(TargetVisualStudioNumericVersion) &lt; 16.0" TaskName="ResourceMerger" AssemblyName="$(NUBuildTasksAssemblyName)"/>
	<UsingTask Condition="$(TargetVisualStudioNumericVersion) &lt; 16.0" TaskName="RegexCompiler" AssemblyName="$(NUBuildTasksAssemblyName)"/>

	<PropertyGroup Condition="Exists('$(MSBuildExtensionsPath)\Neumont\Neumont.Build.targets')">
		 <!-- This forces a rebuild of a project if it references this targets file and this targets file changes. -->
		<MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildExtensionsPath)\Neumont\Neumont.Build.targets</MSBuildAllProjects>
	</PropertyGroup>


	<!-- InstallInGac and GenerateNativeImage -->
	<PropertyGroup>
		<CoreBuildDependsOn>
			$(CoreBuildDependsOn);
			InstallInGac;
			GenerateNativeImage
		</CoreBuildDependsOn>
		<PostBuildEventDependsOn>
			$(PostBuildEventDependsOn);
			InstallInGac;
			GenerateNativeImage
		</PostBuildEventDependsOn>
		<InstallInGacDependsOn>
			$(InstallInGacDependsOn)
		</InstallInGacDependsOn>
		<GenerateNativeImageDependsOn>
			$(GenerateNativeImageDependsOn);
			InstallInGac
		</GenerateNativeImageDependsOn>

		<!-- Default to false -->
		<InstallInGac Condition="'$(InstallInGac)'==''">false</InstallInGac>
		<!-- Default to true if $(InstallInGac) is true -->
		<ForceInstallInGac Condition="'$(ForceInstallInGac)'==''">$(InstallInGac)</ForceInstallInGac>

		<!-- Default to false -->
		<GenerateNativeImage Condition="'$(GenerateNativeImage)'==''">false</GenerateNativeImage>
		<!-- Default to true if $(GenerateNativeImage) is true -->
		<NativeImageExcludeDependencies Condition="'$(NativeImageExcludeDependencies)'==''">$(GenerateNativeImage)</NativeImageExcludeDependencies>
	</PropertyGroup>

	<Target
		Name="InstallInGac"
		DependsOnTargets="$(InstallInGacDependsOn)"
		Inputs="@(MainAssembly)"
		Outputs="$(IntermediateOutputPath)%(MainAssembly.FileName)%(MainAssembly.Extension).InstallInGac.cache"
		Condition="'@(MainAssembly)'!='' and '$(InstallInGac)'=='true'">

		<Gacutil
			Assembly="%(MainAssembly.FullPath)"
			Force="$(ForceInstallInGac)"
			Uninstall="false"
		/>

		<Touch
			AlwaysCreate="true"
			Files="$(IntermediateOutputPath)%(MainAssembly.FileName)%(MainAssembly.Extension).InstallInGac.cache">
			<Output TaskParameter="TouchedFiles" ItemName="FileWrites"/>
		</Touch>
		
	</Target>

	<Target
		Name="GenerateNativeImage"
		DependsOnTargets="$(GenerateNativeImagesDependsOn)"
		Inputs="@(MainAssembly)"
		Outputs="$(IntermediateOutputPath)%(MainAssembly.FileName)%(MainAssembly.Extension).GenerateNativeImage.cache"
		Condition="'@(MainAssembly)'!='' and '$(GenerateNativeImage)'=='true'">

		<GetAssemblyIdentity AssemblyFiles="@(MainAssembly)">
			<Output TaskParameter="Assemblies" ItemName="_MainAssemblyIdentity"/>
		</GetAssemblyIdentity>

		<Ngen
			AssemblyName="@(_MainAssemblyIdentity)"
			NoDependencies="$(NativeImageExcludeDependencies)"
			Uninstall="false"
		/>

		<Touch
			AlwaysCreate="true"
			Files="$(IntermediateOutputPath)%(MainAssembly.FileName)%(MainAssembly.Extension).GenerateNativeImage.cache">
			<Output TaskParameter="TouchedFiles" ItemName="FileWrites"/>
		</Touch>

	</Target>



	<!-- CopyWithPreprocessing -->
	<PropertyGroup>
		<DisableAllPreprocessing Condition="'$(DisableAllPreprocessing)'==''">false</DisableAllPreprocessing>
		<XmlFileExtensionsToPreprocess>
			.xml;
			.xsd;
			.xsl;
			.xslt;
			$(XmlFileExtensionsToPreprocess)
		</XmlFileExtensionsToPreprocess>
	</PropertyGroup>
	<!-- Override _CopyNonResxEmbeddedResources to in order to preprocess XML files. -->
	<Target
		Name="_CopyNonResxEmbeddedResources"
		Condition="'@(NonResxWithNoCulture)'!='' or '@(NonResxWithCulture)'!='' or '@(ManifestNonResxWithNoCulture)'!='' or '@(ManifestNonResxWithCulture)'!=''">

		<CopyWithPreprocessing
			DisableAllPreprocessing="$(DisableAllPreprocessing)"
			XmlFileExtensionsToPreprocess="$(XmlFileExtensionsToPreprocess)"
			SourceFiles="@(NonResxWithNoCulture)"
			DestinationFiles="@(ManifestNonResxWithNoCulture->'$(IntermediateOutputPath)%(Identity)')"
			SkipUnchangedFiles="true">
			<Output TaskParameter="DestinationFiles" ItemName="ManifestNonResxWithNoCultureOnDisk"/>
			<Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>
		</CopyWithPreprocessing>

		<MakeDir Directories="$(IntermediateOutputPath)%(ManifestNonResxWithCulture.Culture)"/>

		<CopyWithPreprocessing
			DisableAllPreprocessing="$(DisableAllPreprocessing)"
			XmlFileExtensionsToPreprocess="$(XmlFileExtensionsToPreprocess)"
			SourceFiles="@(NonResxWithCulture)"
			DestinationFiles="@(ManifestNonResxWithCulture->'$(IntermediateOutputPath)%(Identity)')"
			SkipUnchangedFiles="true">
			<Output TaskParameter="DestinationFiles" ItemName="ManifestNonResxWithCultureOnDisk"/>
			<Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>
		</CopyWithPreprocessing>

	</Target>



	<!--
		This section supports merging one or more resource items into a compiled .resources file.
		Items to be merged must have the following:
			- an item name of MergeResource
			- a metadata value for ResourceName, which indicates the name that the new resource should have
			- a metadata value for MergeTarget, which indicates the ItemSpec for the file to which the new resource should be added
		If the value specified for MergeTarget is a .resources file, the new resource will be added to that file.
		If the value specified for MergeTarget is NOT a .resources file, the new resource will be added to the .resources file generated from the specified file.
	-->
	<PropertyGroup>
		<PrepareResourcesDependsOn>
			$(PrepareResourcesDependsOn);
			MergeResources;
			_MergeResourcesRecordCacheFileWrites
		</PrepareResourcesDependsOn>
		<MergeResourcesDependsOn>
			$(MergeResourcesDependsOn);
			ResGen;
			_ResolveResourceMergeTargets
		</MergeResourcesDependsOn>
		<_ResolveResourceMergeTargetsDependsOn>
			$(_ResolveResourceMergeTargetsDependsOn);
			ResGen
		</_ResolveResourceMergeTargetsDependsOn>
		<_MergeResourcesRecordCacheFileWritesDependsOn>
			$(_MergeResourcesRecordCacheFileWritesDependsOn);
			MergeResources
		</_MergeResourcesRecordCacheFileWritesDependsOn>
	</PropertyGroup>

	<Target
		Name="_ResolveResourceMergeTargets"
		DependsOnTargets="$(_ResolveResourceMergeTargetsDependsOn)"
		Condition="'@(MergeResource)'!=''">

		<!-- In MSBuild v3.5, _CoreCompileResourceInputs and _SatelliteAssemblyResourceInputs replace ManifestResourceWithNoCulture and ManifestResourceWithCulture, respectively.-->
		<ResourceMergeTargetResolver
			MergeResources="@(MergeResource)" 
			ManifestResources="@(ManifestResourceWithCulture);@(ManifestResourceWithNoCulture);@(_CoreCompileResourceInputs);@(_SatelliteAssemblyResourceInputs)">
			<Output TaskParameter="MergeResourcesWithResolvedTargets" ItemName="_MergeResourceWithResolvedTarget"/>
		</ResourceMergeTargetResolver>

	</Target>

	<Target
		Name="MergeResources"
		DependsOnTargets="$(MergeResourcesDependsOn)"
		Inputs="@(_MergeResourceWithResolvedTarget);%(MergeTarget)"
		Outputs="%(MergeTarget).cache"
		Condition="'@(MergeResource)'!=''">

		<ResourceMerger
			MergeResources="@(_MergeResourceWithResolvedTarget)"
			TargetManifestResource="%(MergeTarget)">
			<Output TaskParameter="OutputResource" ItemName="FileWrites"/>
		</ResourceMerger>

		<Touch
			AlwaysCreate="true"
			Files="%(_MergeResourceWithResolvedTarget.MergeTarget).cache">
			<Output TaskParameter="TouchedFiles" ItemName="FileWrites"/>
		</Touch>

	</Target>

	<!-- This adds the .cache file to FileWrites regardless of whether MergeResources is up to date or not, in order to prevent IncrementalClean from deleting it. -->
	<Target
		Name="_MergeResourcesRecordCacheFileWrites"
		DependsOnTargets="$(_MergeResourcesRecordCacheFileWritesDependsOn)"
		Condition="'@(MergeResource)'!=''">

		<CreateItem Include="%(_MergeResourceWithResolvedTarget.MergeTarget).cache" Condition="Exists('%(_MergeResourceWithResolvedTarget.MergeTarget).cache')">
			<Output TaskParameter="Include" ItemName="FileWrites"/>
		</CreateItem>

	</Target>


	<!-- RegexCompiler -->
	<PropertyGroup>
		<!-- Regex compilation is set to default to being disabled for now, until we have finished developing it. -->
		<DisableRegexCompilation Condition="'$(DisableRegexCompilation)'==''">true</DisableRegexCompilation>
	</PropertyGroup>
	<PropertyGroup Condition="'$(DisableRegexCompilation)'!='true'">
		<!-- Compile regular expressions just before ResolveReferences, so that references to the regular expression assembly can be resolved. -->
		<ResolveReferencesDependsOn>
			RegexCompile;
			$(ResolveReferencesDependsOn)
		</ResolveReferencesDependsOn>
		<RegexCompileDependsOn>
			$(RegexCompileDependsOn);
			ResolveKeySource
		</RegexCompileDependsOn>
		<!-- Default to true if we are compiling within Visual Studio. -->
		<AlwaysCompileRegexInSeparateDomain Condition="'$(AlwaysCompileRegexInSeparateDomain)'==''">$(BuildingInsideVisualStudio)</AlwaysCompileRegexInSeparateDomain>
		<RegexAssemblyName Condition="'$(RegexAssemblyName)'==''">$(AssemblyName).RegularExpressions</RegexAssemblyName>
	</PropertyGroup>

	<ItemGroup Condition="'$(DisableRegexCompilation)'!='true'">
		<!-- Add the CompileRegex Item name to the AvailableItemName item, so that it shows up in the Build Action drop-down menu in the properties windows in Visual Studio (and the equivalent in other IDEs). -->
		<AvailableItemName Include="CompileRegex"/>
	</ItemGroup>

	<Target
		Name="RegexCompile"
		Condition="'@(CompileRegex)'!='' and '$(DisableRegexCompilation)'!='true'"
		DependsOnTargets="$(RegexCompileDependsOn)">

		<RegexCompiler
			AlwaysCompileRegexInSeparateDomain="$(AlwaysCompileRegexInSeparateDomain)"
			AssemblyName="$(RegexAssemblyName)"
			IntermediateOutputPath="$(IntermediateOutputPath)"
			RegexCompilationInfoFiles="@(CompileRegex)"
			KeyContainer="$(KeyContainerName)"
			KeyFile="$(KeyOriginatorFile)">
			<Output TaskParameter="OutputAssembly" ItemName="FileWrites"/>
			<Output TaskParameter="OutputAssembly" ItemName="IntermediateRegexAssembly"/>
		</RegexCompiler>
		
	</Target>



	<!-- XslCompiler (UNDONE) -->
	<PropertyGroup>
		<DisableXslCompilation Condition="'$(DisableXslCompilation)'==''">false</DisableXslCompilation>
		<!-- Default to true if we are compiling within Visual Studio. -->
		<AlwaysCompileXslInSeparateDomain Condition="'$(AlwaysCompileXslInSeparateDomain)'==''">$(BuildingInsideVisualStudio)</AlwaysCompileXslInSeparateDomain>
	</PropertyGroup>





</Project>
