#region Common Public License Copyright Notice
/**************************************************************************\
* Natural Object-Role Modeling Architect for Visual Studio                 *
*                                                                          *
* Copyright © Neumont University. All rights reserved.                     *
*                                                                          *
* The use and distribution terms for this software are covered by the      *
* Common Public License 1.0 (http://opensource.org/licenses/cpl) which     *
* can be found in the file CPL.txt at the root of this distribution.       *
* By using this software in any fashion, you are agreeing to be bound by   *
* the terms of this license.                                               *
*                                                                          *
* You must not remove this notice, or any other, from this software.       *
\**************************************************************************/
#endregion
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge
{
	/// <summary>
	/// DomainRelationship AssimilationMappingCustomizesFactType
	/// Description for
	/// ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesFactType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesFactType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesFactType.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("c997059d-5f08-43db-a225-b698ea7badfb")]
	public partial class AssimilationMappingCustomizesFactType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AssimilationMappingCustomizesFactType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc997059d, 0x5f08, 0x43db, 0xa2, 0x25, 0xb6, 0x98, 0xea, 0x7b, 0xad, 0xfb);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AssimilationMappingCustomizesFactType link in the same Partition as the given AssimilationMapping
		/// </summary>
		/// <param name="source">AssimilationMapping to use as the source of the relationship.</param>
		/// <param name="target">FactType to use as the target of the relationship.</param>
		public AssimilationMappingCustomizesFactType(AssimilationMapping source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AssimilationMappingCustomizesFactType.AssimilationMappingDomainRoleId, source), new DslModeling::RoleAssignment(AssimilationMappingCustomizesFactType.FactTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AssimilationMappingCustomizesFactType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AssimilationMappingCustomizesFactType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AssimilationMappingCustomizesFactType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AssimilationMappingCustomizesFactType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region AssimilationMapping domain role code
		
		/// <summary>
		/// AssimilationMapping domain role Id.
		/// </summary>
		public static readonly global::System.Guid AssimilationMappingDomainRoleId = new global::System.Guid(0xcdf964c3, 0x4a74, 0x479a, 0x86, 0xdb, 0x5d, 0x5a, 0xbb, 0x23, 0xdc, 0xea);
		
		/// <summary>
		/// DomainRole AssimilationMapping
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesFactType/AssimilationMapping.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesFactType/AssimilationMapping.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "FactType", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesFactType/AssimilationMapping.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("cdf964c3-4a74-479a-86db-5d5abb23dcea")]
		public virtual AssimilationMapping AssimilationMapping
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AssimilationMapping)DslModeling::DomainRoleInfo.GetRolePlayer(this, AssimilationMappingDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AssimilationMappingDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AssimilationMapping of a FactType
		/// <summary>
		/// Gets AssimilationMapping.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AssimilationMapping GetAssimilationMapping(global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FactTypeDomainRoleId) as AssimilationMapping;
		}
		
		/// <summary>
		/// Sets AssimilationMapping.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAssimilationMapping(global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType element, AssimilationMapping newAssimilationMapping)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FactTypeDomainRoleId, newAssimilationMapping);
		}
		#endregion
		#region FactType domain role code
		
		/// <summary>
		/// FactType domain role Id.
		/// </summary>
		public static readonly global::System.Guid FactTypeDomainRoleId = new global::System.Guid(0x41bd276d, 0xd55e, 0x4972, 0xaf, 0xd9, 0x75, 0x7e, 0xbe, 0x82, 0x4f, 0x39);
		
		/// <summary>
		/// DomainRole FactType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesFactType/FactType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesFactType/FactType.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "AssimilationMapping", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesFactType/FactType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("41bd276d-d55e-4972-afd9-757ebe824f39")]
		public virtual global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType FactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType)DslModeling::DomainRoleInfo.GetRolePlayer(this, FactTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FactTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FactType of a AssimilationMapping
		/// <summary>
		/// Gets FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType GetFactType(AssimilationMapping element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AssimilationMappingDomainRoleId) as global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType;
		}
		
		/// <summary>
		/// Sets FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFactType(AssimilationMapping element, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType newFactType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AssimilationMappingDomainRoleId, newFactType);
		}
		#endregion
		#region AssimilationMapping link accessor
		/// <summary>
		/// Get the AssimilationMappingCustomizesFactType link to a AssimilationMapping.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesFactType GetLinkToFactType (global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.AssimilationMapping assimilationMappingInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesFactType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesFactType>(assimilationMappingInstance, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesFactType.AssimilationMappingDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of AssimilationMapping not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FactType link accessor
		/// <summary>
		/// Get the AssimilationMappingCustomizesFactType link to a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesFactType GetLinkToAssimilationMapping (global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType factTypeInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesFactType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesFactType>(factTypeInstance, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesFactType.FactTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of FactType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AssimilationMappingCustomizesFactType instance accessors
		
		/// <summary>
		/// Get any AssimilationMappingCustomizesFactType links between a given AssimilationMapping and a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesFactType> GetLinks( global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.AssimilationMapping source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesFactType> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesFactType>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesFactType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesFactType>(source, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesFactType.AssimilationMappingDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesFactType link in links )
			{
				if ( target.Equals(link.FactType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AssimilationMappingCustomizesFactType link between a given AssimilationMappingand a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesFactType GetLink( global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.AssimilationMapping source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesFactType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesFactType>(source, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesFactType.AssimilationMappingDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesFactType link in links )
			{
				if ( target.Equals(link.FactType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge
{
	/// <summary>
	/// DomainRelationship MappingCustomizationModelHasAssimilationMapping
	/// Description for
	/// ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("61deb15b-308b-4266-8766-c1e4348250d8")]
	public partial class MappingCustomizationModelHasAssimilationMapping : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MappingCustomizationModelHasAssimilationMapping domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x61deb15b, 0x308b, 0x4266, 0x87, 0x66, 0xc1, 0xe4, 0x34, 0x82, 0x50, 0xd8);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MappingCustomizationModelHasAssimilationMapping link in the same Partition as the given MappingCustomizationModel
		/// </summary>
		/// <param name="source">MappingCustomizationModel to use as the source of the relationship.</param>
		/// <param name="target">AssimilationMapping to use as the target of the relationship.</param>
		public MappingCustomizationModelHasAssimilationMapping(MappingCustomizationModel source, AssimilationMapping target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MappingCustomizationModelHasAssimilationMapping.ModelDomainRoleId, source), new DslModeling::RoleAssignment(MappingCustomizationModelHasAssimilationMapping.AssimilationMappingDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MappingCustomizationModelHasAssimilationMapping(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MappingCustomizationModelHasAssimilationMapping(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MappingCustomizationModelHasAssimilationMapping(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MappingCustomizationModelHasAssimilationMapping(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x2122d3fd, 0x134d, 0x41db, 0x8b, 0x12, 0x8f, 0xd2, 0xfd, 0x60, 0x72, 0x7e);
		
		/// <summary>
		/// DomainRole Model
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping/Model.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping/Model.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AssimilationMappingCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping/Model.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("2122d3fd-134d-41db-8b12-8fd2fd60727e")]
		public virtual MappingCustomizationModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MappingCustomizationModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a AssimilationMapping
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static MappingCustomizationModel GetModel(AssimilationMapping element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AssimilationMappingDomainRoleId) as MappingCustomizationModel;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(AssimilationMapping element, MappingCustomizationModel newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AssimilationMappingDomainRoleId, newModel);
		}
		#endregion
		#region AssimilationMapping domain role code
		
		/// <summary>
		/// AssimilationMapping domain role Id.
		/// </summary>
		public static readonly global::System.Guid AssimilationMappingDomainRoleId = new global::System.Guid(0xda82c400, 0x912e, 0x45b2, 0x87, 0xc4, 0x56, 0xaf, 0x21, 0xa7, 0xd4, 0x81);
		
		/// <summary>
		/// DomainRole AssimilationMapping
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping/AssimilationMapping.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping/AssimilationMapping.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping/AssimilationMapping.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("da82c400-912e-45b2-87c4-56af21a7d481")]
		public virtual AssimilationMapping AssimilationMapping
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AssimilationMapping)DslModeling::DomainRoleInfo.GetRolePlayer(this, AssimilationMappingDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AssimilationMappingDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AssimilationMappingCollection of a MappingCustomizationModel
		/// <summary>
		/// Gets a list of AssimilationMappingCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<AssimilationMapping> GetAssimilationMappingCollection(MappingCustomizationModel element)
		{
			return new DslModeling::LinkedElementCollection<AssimilationMapping>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of MappingCustomizationModelHasAssimilationMapping links to a MappingCustomizationModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping> GetLinksToAssimilationMappingCollection ( global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModel modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping>(modelInstance, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping.ModelDomainRoleId);
		}
		#endregion
		#region AssimilationMapping link accessor
		/// <summary>
		/// Get the MappingCustomizationModelHasAssimilationMapping link to a AssimilationMapping.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping GetLinkToModel (global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.AssimilationMapping assimilationMappingInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping>(assimilationMappingInstance, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping.AssimilationMappingDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of AssimilationMapping not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MappingCustomizationModelHasAssimilationMapping instance accessors
		
		/// <summary>
		/// Get any MappingCustomizationModelHasAssimilationMapping links between a given MappingCustomizationModel and a AssimilationMapping.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping> GetLinks( global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModel source, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.AssimilationMapping target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping>(source, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping.ModelDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping link in links )
			{
				if ( target.Equals(link.AssimilationMapping) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MappingCustomizationModelHasAssimilationMapping link between a given MappingCustomizationModeland a AssimilationMapping.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping GetLink( global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModel source, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.AssimilationMapping target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping>(source, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping.ModelDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping link in links )
			{
				if ( target.Equals(link.AssimilationMapping) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge
{
	/// <summary>
	/// DomainRelationship ReferenceModeNamingCustomizesObjectType
	/// Description for
	/// ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ReferenceModeNamingCustomizesObjectType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ReferenceModeNamingCustomizesObjectType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ReferenceModeNamingCustomizesObjectType.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("f96c317d-4820-4604-aa3e-7f8a97541b7e")]
	public partial class ReferenceModeNamingCustomizesObjectType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ReferenceModeNamingCustomizesObjectType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf96c317d, 0x4820, 0x4604, 0xaa, 0x3e, 0x7f, 0x8a, 0x97, 0x54, 0x1b, 0x7e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ReferenceModeNamingCustomizesObjectType link in the same Partition as the given RelationalReferenceModeNaming
		/// </summary>
		/// <param name="source">RelationalReferenceModeNaming to use as the source of the relationship.</param>
		/// <param name="target">ObjectType to use as the target of the relationship.</param>
		public ReferenceModeNamingCustomizesObjectType(RelationalReferenceModeNaming source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ReferenceModeNamingCustomizesObjectType.ReferenceModeNamingDomainRoleId, source), new DslModeling::RoleAssignment(ReferenceModeNamingCustomizesObjectType.ObjectTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ReferenceModeNamingCustomizesObjectType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ReferenceModeNamingCustomizesObjectType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ReferenceModeNamingCustomizesObjectType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ReferenceModeNamingCustomizesObjectType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ReferenceModeNaming domain role code
		
		/// <summary>
		/// ReferenceModeNaming domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReferenceModeNamingDomainRoleId = new global::System.Guid(0xd83f7c4d, 0xf955, 0x4ec8, 0xbd, 0xbc, 0x0e, 0x7c, 0xdc, 0x48, 0x0a, 0x79);
		
		/// <summary>
		/// DomainRole ReferenceModeNaming
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ReferenceModeNamingCustomizesObjectType/ReferenceModeNaming.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ReferenceModeNamingCustomizesObjectType/ReferenceModeNaming.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ObjectType", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ReferenceModeNamingCustomizesObjectType/ReferenceModeNaming.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("d83f7c4d-f955-4ec8-bdbc-0e7cdc480a79")]
		public virtual RelationalReferenceModeNaming ReferenceModeNaming
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RelationalReferenceModeNaming)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReferenceModeNamingDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReferenceModeNamingDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ReferenceModeNaming of a ObjectType
		/// <summary>
		/// Gets ReferenceModeNaming.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static RelationalReferenceModeNaming GetReferenceModeNaming(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ObjectTypeDomainRoleId) as RelationalReferenceModeNaming;
		}
		
		/// <summary>
		/// Sets ReferenceModeNaming.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetReferenceModeNaming(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType element, RelationalReferenceModeNaming newReferenceModeNaming)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ObjectTypeDomainRoleId, newReferenceModeNaming);
		}
		#endregion
		#region ObjectType domain role code
		
		/// <summary>
		/// ObjectType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ObjectTypeDomainRoleId = new global::System.Guid(0x67c2b3cd, 0xf276, 0x411b, 0x98, 0x0d, 0x13, 0xd9, 0x49, 0x70, 0xd6, 0x04);
		
		/// <summary>
		/// DomainRole ObjectType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ReferenceModeNamingCustomizesObjectType/ObjectType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ReferenceModeNamingCustomizesObjectType/ObjectType.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ReferenceModeNaming", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ReferenceModeNamingCustomizesObjectType/ObjectType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("67c2b3cd-f276-411b-980d-13d94970d604")]
		public virtual global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType ObjectType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjectTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjectTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ObjectType of a RelationalReferenceModeNaming
		/// <summary>
		/// Gets ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType GetObjectType(RelationalReferenceModeNaming element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ReferenceModeNamingDomainRoleId) as global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType;
		}
		
		/// <summary>
		/// Sets ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetObjectType(RelationalReferenceModeNaming element, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType newObjectType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ReferenceModeNamingDomainRoleId, newObjectType);
		}
		#endregion
		#region ReferenceModeNaming link accessor
		/// <summary>
		/// Get the ReferenceModeNamingCustomizesObjectType link to a RelationalReferenceModeNaming.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ReferenceModeNamingCustomizesObjectType GetLinkToObjectType (global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.RelationalReferenceModeNaming referenceModeNamingInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ReferenceModeNamingCustomizesObjectType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ReferenceModeNamingCustomizesObjectType>(referenceModeNamingInstance, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ReferenceModeNamingCustomizesObjectType.ReferenceModeNamingDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ReferenceModeNaming not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ObjectType link accessor
		/// <summary>
		/// Get the ReferenceModeNamingCustomizesObjectType link to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ReferenceModeNamingCustomizesObjectType GetLinkToReferenceModeNaming (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType objectTypeInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ReferenceModeNamingCustomizesObjectType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ReferenceModeNamingCustomizesObjectType>(objectTypeInstance, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ReferenceModeNamingCustomizesObjectType.ObjectTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ObjectType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ReferenceModeNamingCustomizesObjectType instance accessors
		
		/// <summary>
		/// Get any ReferenceModeNamingCustomizesObjectType links between a given RelationalReferenceModeNaming and a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ReferenceModeNamingCustomizesObjectType> GetLinks( global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.RelationalReferenceModeNaming source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ReferenceModeNamingCustomizesObjectType> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ReferenceModeNamingCustomizesObjectType>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ReferenceModeNamingCustomizesObjectType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ReferenceModeNamingCustomizesObjectType>(source, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ReferenceModeNamingCustomizesObjectType.ReferenceModeNamingDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ReferenceModeNamingCustomizesObjectType link in links )
			{
				if ( target.Equals(link.ObjectType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ReferenceModeNamingCustomizesObjectType link between a given RelationalReferenceModeNamingand a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ReferenceModeNamingCustomizesObjectType GetLink( global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.RelationalReferenceModeNaming source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ReferenceModeNamingCustomizesObjectType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ReferenceModeNamingCustomizesObjectType>(source, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ReferenceModeNamingCustomizesObjectType.ReferenceModeNamingDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ReferenceModeNamingCustomizesObjectType link in links )
			{
				if ( target.Equals(link.ObjectType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge
{
	/// <summary>
	/// DomainRelationship MappingCustomizationModelHasReferenceModeNaming
	/// Description for
	/// ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasReferenceModeNaming
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasReferenceModeNaming.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasReferenceModeNaming.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("d412080d-5555-4134-8106-9f9452a7d452")]
	public partial class MappingCustomizationModelHasReferenceModeNaming : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MappingCustomizationModelHasReferenceModeNaming domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd412080d, 0x5555, 0x4134, 0x81, 0x06, 0x9f, 0x94, 0x52, 0xa7, 0xd4, 0x52);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MappingCustomizationModelHasReferenceModeNaming link in the same Partition as the given MappingCustomizationModel
		/// </summary>
		/// <param name="source">MappingCustomizationModel to use as the source of the relationship.</param>
		/// <param name="target">RelationalReferenceModeNaming to use as the target of the relationship.</param>
		public MappingCustomizationModelHasReferenceModeNaming(MappingCustomizationModel source, RelationalReferenceModeNaming target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MappingCustomizationModelHasReferenceModeNaming.ModelDomainRoleId, source), new DslModeling::RoleAssignment(MappingCustomizationModelHasReferenceModeNaming.ReferenceModeNamingDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MappingCustomizationModelHasReferenceModeNaming(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MappingCustomizationModelHasReferenceModeNaming(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MappingCustomizationModelHasReferenceModeNaming(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MappingCustomizationModelHasReferenceModeNaming(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0xf10b9590, 0xaf11, 0x4fd9, 0xbb, 0xa9, 0xd2, 0x77, 0xa7, 0xa5, 0x0f, 0xa0);
		
		/// <summary>
		/// DomainRole Model
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasReferenceModeNaming/Model.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasReferenceModeNaming/Model.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ReferenceModeNamingCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasReferenceModeNaming/Model.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f10b9590-af11-4fd9-bba9-d277a7a50fa0")]
		public virtual MappingCustomizationModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MappingCustomizationModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a RelationalReferenceModeNaming
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static MappingCustomizationModel GetModel(RelationalReferenceModeNaming element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ReferenceModeNamingDomainRoleId) as MappingCustomizationModel;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(RelationalReferenceModeNaming element, MappingCustomizationModel newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ReferenceModeNamingDomainRoleId, newModel);
		}
		#endregion
		#region ReferenceModeNaming domain role code
		
		/// <summary>
		/// ReferenceModeNaming domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReferenceModeNamingDomainRoleId = new global::System.Guid(0x219a1852, 0x9896, 0x4303, 0xbf, 0x8f, 0x26, 0x96, 0xba, 0xa2, 0x59, 0x62);
		
		/// <summary>
		/// DomainRole ReferenceModeNaming
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasReferenceModeNaming/ReferenceModeNaming.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasReferenceModeNaming/ReferenceModeNaming.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasReferenceModeNaming/ReferenceModeNaming.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("219a1852-9896-4303-bf8f-2696baa25962")]
		public virtual RelationalReferenceModeNaming ReferenceModeNaming
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RelationalReferenceModeNaming)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReferenceModeNamingDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReferenceModeNamingDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ReferenceModeNamingCollection of a MappingCustomizationModel
		/// <summary>
		/// Gets a list of ReferenceModeNamingCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<RelationalReferenceModeNaming> GetReferenceModeNamingCollection(MappingCustomizationModel element)
		{
			return new DslModeling::LinkedElementCollection<RelationalReferenceModeNaming>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of MappingCustomizationModelHasReferenceModeNaming links to a MappingCustomizationModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasReferenceModeNaming> GetLinksToReferenceModeNamingCollection ( global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModel modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasReferenceModeNaming>(modelInstance, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasReferenceModeNaming.ModelDomainRoleId);
		}
		#endregion
		#region ReferenceModeNaming link accessor
		/// <summary>
		/// Get the MappingCustomizationModelHasReferenceModeNaming link to a RelationalReferenceModeNaming.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasReferenceModeNaming GetLinkToModel (global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.RelationalReferenceModeNaming referenceModeNamingInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasReferenceModeNaming> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasReferenceModeNaming>(referenceModeNamingInstance, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasReferenceModeNaming.ReferenceModeNamingDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ReferenceModeNaming not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MappingCustomizationModelHasReferenceModeNaming instance accessors
		
		/// <summary>
		/// Get any MappingCustomizationModelHasReferenceModeNaming links between a given MappingCustomizationModel and a RelationalReferenceModeNaming.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasReferenceModeNaming> GetLinks( global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModel source, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.RelationalReferenceModeNaming target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasReferenceModeNaming> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasReferenceModeNaming>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasReferenceModeNaming> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasReferenceModeNaming>(source, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasReferenceModeNaming.ModelDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasReferenceModeNaming link in links )
			{
				if ( target.Equals(link.ReferenceModeNaming) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MappingCustomizationModelHasReferenceModeNaming link between a given MappingCustomizationModeland a RelationalReferenceModeNaming.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasReferenceModeNaming GetLink( global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModel source, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.RelationalReferenceModeNaming target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasReferenceModeNaming> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasReferenceModeNaming>(source, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasReferenceModeNaming.ModelDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasReferenceModeNaming link in links )
			{
				if ( target.Equals(link.ReferenceModeNaming) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge
{
	/// <summary>
	/// DomainRelationship DefaultReferenceModeNamingCustomizesORMModel
	/// Description for
	/// ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DefaultReferenceModeNamingCustomizesORMModel
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DefaultReferenceModeNamingCustomizesORMModel.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DefaultReferenceModeNamingCustomizesORMModel.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("0b75db0c-3196-4c80-884b-2adda04de8b0")]
	public partial class DefaultReferenceModeNamingCustomizesORMModel : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DefaultReferenceModeNamingCustomizesORMModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0b75db0c, 0x3196, 0x4c80, 0x88, 0x4b, 0x2a, 0xdd, 0xa0, 0x4d, 0xe8, 0xb0);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DefaultReferenceModeNamingCustomizesORMModel link in the same Partition as the given ORMModel
		/// </summary>
		/// <param name="source">ORMModel to use as the source of the relationship.</param>
		/// <param name="target">RelationalDefaultReferenceModeNaming to use as the target of the relationship.</param>
		public DefaultReferenceModeNamingCustomizesORMModel(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel source, RelationalDefaultReferenceModeNaming target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DefaultReferenceModeNamingCustomizesORMModel.ORMModelDomainRoleId, source), new DslModeling::RoleAssignment(DefaultReferenceModeNamingCustomizesORMModel.DefaultReferenceModeNamingDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DefaultReferenceModeNamingCustomizesORMModel(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DefaultReferenceModeNamingCustomizesORMModel(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DefaultReferenceModeNamingCustomizesORMModel(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DefaultReferenceModeNamingCustomizesORMModel(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ORMModel domain role code
		
		/// <summary>
		/// ORMModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid ORMModelDomainRoleId = new global::System.Guid(0x341c7c8a, 0xd168, 0x4d09, 0xb0, 0x2d, 0x6a, 0x79, 0xbc, 0x3f, 0x34, 0xc8);
		
		/// <summary>
		/// DomainRole ORMModel
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DefaultReferenceModeNamingCustomizesORMModel/ORMModel.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DefaultReferenceModeNamingCustomizesORMModel/ORMModel.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DefaultReferenceModeNamingCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DefaultReferenceModeNamingCustomizesORMModel/ORMModel.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("341c7c8a-d168-4d09-b02d-6a79bc3f34c8")]
		public virtual global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel ORMModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ORMModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ORMModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ORMModel of a RelationalDefaultReferenceModeNaming
		/// <summary>
		/// Gets ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel GetORMModel(RelationalDefaultReferenceModeNaming element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DefaultReferenceModeNamingDomainRoleId) as global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel;
		}
		
		/// <summary>
		/// Sets ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetORMModel(RelationalDefaultReferenceModeNaming element, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel newORMModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DefaultReferenceModeNamingDomainRoleId, newORMModel);
		}
		#endregion
		#region DefaultReferenceModeNaming domain role code
		
		/// <summary>
		/// DefaultReferenceModeNaming domain role Id.
		/// </summary>
		public static readonly global::System.Guid DefaultReferenceModeNamingDomainRoleId = new global::System.Guid(0x5c4580ad, 0xbc05, 0x4691, 0xa9, 0xce, 0xe5, 0x49, 0x52, 0xdb, 0x1e, 0xf9);
		
		/// <summary>
		/// DomainRole DefaultReferenceModeNaming
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DefaultReferenceModeNamingCustomizesORMModel/DefaultReferenceModeNaming.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DefaultReferenceModeNamingCustomizesORMModel/DefaultReferenceModeNaming.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ORMModel", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DefaultReferenceModeNamingCustomizesORMModel/DefaultReferenceModeNaming.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("5c4580ad-bc05-4691-a9ce-e54952db1ef9")]
		public virtual RelationalDefaultReferenceModeNaming DefaultReferenceModeNaming
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RelationalDefaultReferenceModeNaming)DslModeling::DomainRoleInfo.GetRolePlayer(this, DefaultReferenceModeNamingDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DefaultReferenceModeNamingDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DefaultReferenceModeNamingCollection of a ORMModel
		/// <summary>
		/// Gets a list of DefaultReferenceModeNamingCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<RelationalDefaultReferenceModeNaming> GetDefaultReferenceModeNamingCollection(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel element)
		{
			return new DslModeling::LinkedElementCollection<RelationalDefaultReferenceModeNaming>(element, ORMModelDomainRoleId);
		}
		#endregion
		#region ORMModel link accessor
		/// <summary>
		/// Get the list of DefaultReferenceModeNamingCustomizesORMModel links to a ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DefaultReferenceModeNamingCustomizesORMModel> GetLinksToDefaultReferenceModeNamingCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel oRMModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DefaultReferenceModeNamingCustomizesORMModel>(oRMModelInstance, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DefaultReferenceModeNamingCustomizesORMModel.ORMModelDomainRoleId);
		}
		#endregion
		#region DefaultReferenceModeNaming link accessor
		/// <summary>
		/// Get the DefaultReferenceModeNamingCustomizesORMModel link to a RelationalDefaultReferenceModeNaming.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DefaultReferenceModeNamingCustomizesORMModel GetLinkToORMModel (global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.RelationalDefaultReferenceModeNaming defaultReferenceModeNamingInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DefaultReferenceModeNamingCustomizesORMModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DefaultReferenceModeNamingCustomizesORMModel>(defaultReferenceModeNamingInstance, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DefaultReferenceModeNamingCustomizesORMModel.DefaultReferenceModeNamingDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DefaultReferenceModeNaming not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DefaultReferenceModeNamingCustomizesORMModel instance accessors
		
		/// <summary>
		/// Get any DefaultReferenceModeNamingCustomizesORMModel links between a given ORMModel and a RelationalDefaultReferenceModeNaming.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DefaultReferenceModeNamingCustomizesORMModel> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel source, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.RelationalDefaultReferenceModeNaming target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DefaultReferenceModeNamingCustomizesORMModel> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DefaultReferenceModeNamingCustomizesORMModel>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DefaultReferenceModeNamingCustomizesORMModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DefaultReferenceModeNamingCustomizesORMModel>(source, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DefaultReferenceModeNamingCustomizesORMModel.ORMModelDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DefaultReferenceModeNamingCustomizesORMModel link in links )
			{
				if ( target.Equals(link.DefaultReferenceModeNaming) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DefaultReferenceModeNamingCustomizesORMModel link between a given ORMModeland a RelationalDefaultReferenceModeNaming.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DefaultReferenceModeNamingCustomizesORMModel GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel source, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.RelationalDefaultReferenceModeNaming target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DefaultReferenceModeNamingCustomizesORMModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DefaultReferenceModeNamingCustomizesORMModel>(source, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DefaultReferenceModeNamingCustomizesORMModel.ORMModelDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DefaultReferenceModeNamingCustomizesORMModel link in links )
			{
				if ( target.Equals(link.DefaultReferenceModeNaming) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge
{
	/// <summary>
	/// DomainRelationship MappingCustomizationModelHasDefaultReferenceModeNaming
	/// Description for
	/// ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasDefaultReferenceModeNaming
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasDefaultReferenceModeNaming.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasDefaultReferenceModeNaming.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("93737680-42d1-4453-bd79-d143406648ce")]
	public partial class MappingCustomizationModelHasDefaultReferenceModeNaming : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MappingCustomizationModelHasDefaultReferenceModeNaming domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x93737680, 0x42d1, 0x4453, 0xbd, 0x79, 0xd1, 0x43, 0x40, 0x66, 0x48, 0xce);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MappingCustomizationModelHasDefaultReferenceModeNaming link in the same Partition as the given MappingCustomizationModel
		/// </summary>
		/// <param name="source">MappingCustomizationModel to use as the source of the relationship.</param>
		/// <param name="target">RelationalDefaultReferenceModeNaming to use as the target of the relationship.</param>
		public MappingCustomizationModelHasDefaultReferenceModeNaming(MappingCustomizationModel source, RelationalDefaultReferenceModeNaming target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MappingCustomizationModelHasDefaultReferenceModeNaming.ModelDomainRoleId, source), new DslModeling::RoleAssignment(MappingCustomizationModelHasDefaultReferenceModeNaming.DefaultReferenceModeNamingDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MappingCustomizationModelHasDefaultReferenceModeNaming(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MappingCustomizationModelHasDefaultReferenceModeNaming(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MappingCustomizationModelHasDefaultReferenceModeNaming(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MappingCustomizationModelHasDefaultReferenceModeNaming(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x652081eb, 0x9586, 0x407c, 0x8d, 0x3f, 0xa6, 0x49, 0x1b, 0x97, 0x5c, 0x27);
		
		/// <summary>
		/// DomainRole Model
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasDefaultReferenceModeNaming/Model.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasDefaultReferenceModeNaming/Model.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DefaultReferenceModeNamingCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasDefaultReferenceModeNaming/Model.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("652081eb-9586-407c-8d3f-a6491b975c27")]
		public virtual MappingCustomizationModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MappingCustomizationModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a RelationalDefaultReferenceModeNaming
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static MappingCustomizationModel GetModel(RelationalDefaultReferenceModeNaming element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DefaultReferenceModeNamingDomainRoleId) as MappingCustomizationModel;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(RelationalDefaultReferenceModeNaming element, MappingCustomizationModel newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DefaultReferenceModeNamingDomainRoleId, newModel);
		}
		#endregion
		#region DefaultReferenceModeNaming domain role code
		
		/// <summary>
		/// DefaultReferenceModeNaming domain role Id.
		/// </summary>
		public static readonly global::System.Guid DefaultReferenceModeNamingDomainRoleId = new global::System.Guid(0x32c09a1c, 0x8139, 0x489a, 0x8a, 0x4e, 0x2e, 0x35, 0xa5, 0xc3, 0x1d, 0x7c);
		
		/// <summary>
		/// DomainRole DefaultReferenceModeNaming
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasDefaultReferenceModeNaming/DefaultReferenceModeNaming.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasDefaultReferenceModeNaming/DefaultReferenceModeNaming.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasDefaultReferenceModeNaming/DefaultReferenceModeNaming.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("32c09a1c-8139-489a-8a4e-2e35a5c31d7c")]
		public virtual RelationalDefaultReferenceModeNaming DefaultReferenceModeNaming
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RelationalDefaultReferenceModeNaming)DslModeling::DomainRoleInfo.GetRolePlayer(this, DefaultReferenceModeNamingDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DefaultReferenceModeNamingDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DefaultReferenceModeNamingCollection of a MappingCustomizationModel
		/// <summary>
		/// Gets a list of DefaultReferenceModeNamingCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<RelationalDefaultReferenceModeNaming> GetDefaultReferenceModeNamingCollection(MappingCustomizationModel element)
		{
			return new DslModeling::LinkedElementCollection<RelationalDefaultReferenceModeNaming>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of MappingCustomizationModelHasDefaultReferenceModeNaming links to a MappingCustomizationModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasDefaultReferenceModeNaming> GetLinksToDefaultReferenceModeNamingCollection ( global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModel modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasDefaultReferenceModeNaming>(modelInstance, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasDefaultReferenceModeNaming.ModelDomainRoleId);
		}
		#endregion
		#region DefaultReferenceModeNaming link accessor
		/// <summary>
		/// Get the MappingCustomizationModelHasDefaultReferenceModeNaming link to a RelationalDefaultReferenceModeNaming.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasDefaultReferenceModeNaming GetLinkToModel (global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.RelationalDefaultReferenceModeNaming defaultReferenceModeNamingInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasDefaultReferenceModeNaming> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasDefaultReferenceModeNaming>(defaultReferenceModeNamingInstance, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasDefaultReferenceModeNaming.DefaultReferenceModeNamingDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DefaultReferenceModeNaming not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MappingCustomizationModelHasDefaultReferenceModeNaming instance accessors
		
		/// <summary>
		/// Get any MappingCustomizationModelHasDefaultReferenceModeNaming links between a given MappingCustomizationModel and a RelationalDefaultReferenceModeNaming.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasDefaultReferenceModeNaming> GetLinks( global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModel source, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.RelationalDefaultReferenceModeNaming target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasDefaultReferenceModeNaming> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasDefaultReferenceModeNaming>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasDefaultReferenceModeNaming> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasDefaultReferenceModeNaming>(source, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasDefaultReferenceModeNaming.ModelDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasDefaultReferenceModeNaming link in links )
			{
				if ( target.Equals(link.DefaultReferenceModeNaming) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MappingCustomizationModelHasDefaultReferenceModeNaming link between a given MappingCustomizationModeland a RelationalDefaultReferenceModeNaming.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasDefaultReferenceModeNaming GetLink( global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModel source, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.RelationalDefaultReferenceModeNaming target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasDefaultReferenceModeNaming> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasDefaultReferenceModeNaming>(source, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasDefaultReferenceModeNaming.ModelDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasDefaultReferenceModeNaming link in links )
			{
				if ( target.Equals(link.DefaultReferenceModeNaming) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge
{
	/// <summary>
	/// DomainRelationship SchemaIsForAbstractionModel
	/// Description for
	/// ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("9ca44cef-1787-41bc-a0ac-5ac79753dabb")]
	public partial class SchemaIsForAbstractionModel : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SchemaIsForAbstractionModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9ca44cef, 0x1787, 0x41bc, 0xa0, 0xac, 0x5a, 0xc7, 0x97, 0x53, 0xda, 0xbb);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SchemaIsForAbstractionModel link in the same Partition as the given Schema
		/// </summary>
		/// <param name="source">Schema to use as the source of the relationship.</param>
		/// <param name="target">AbstractionModel to use as the target of the relationship.</param>
		public SchemaIsForAbstractionModel(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Schema source, global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SchemaIsForAbstractionModel.SchemaDomainRoleId, source), new DslModeling::RoleAssignment(SchemaIsForAbstractionModel.AbstractionModelDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SchemaIsForAbstractionModel(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SchemaIsForAbstractionModel(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SchemaIsForAbstractionModel(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SchemaIsForAbstractionModel(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Schema domain role code
		
		/// <summary>
		/// Schema domain role Id.
		/// </summary>
		public static readonly global::System.Guid SchemaDomainRoleId = new global::System.Guid(0x6ed59846, 0xe0d8, 0x4980, 0x81, 0xac, 0xb3, 0x54, 0x1a, 0xd9, 0xd7, 0xdd);
		
		/// <summary>
		/// DomainRole Schema
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel/Schema.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel/Schema.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AbstractionModel", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel/Schema.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("6ed59846-e0d8-4980-81ac-b3541ad9d7dd")]
		public virtual global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Schema Schema
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Schema)DslModeling::DomainRoleInfo.GetRolePlayer(this, SchemaDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SchemaDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Schema of a AbstractionModel
		/// <summary>
		/// Gets Schema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Schema GetSchema(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AbstractionModelDomainRoleId) as global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Schema;
		}
		
		/// <summary>
		/// Sets Schema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSchema(global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel element, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Schema newSchema)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AbstractionModelDomainRoleId, newSchema);
		}
		#endregion
		#region AbstractionModel domain role code
		
		/// <summary>
		/// AbstractionModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid AbstractionModelDomainRoleId = new global::System.Guid(0x3c18d01e, 0x2687, 0x42a1, 0x95, 0x36, 0xb2, 0x3f, 0x91, 0xa2, 0x47, 0xd0);
		
		/// <summary>
		/// DomainRole AbstractionModel
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel/AbstractionModel.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel/AbstractionModel.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Schema", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel/AbstractionModel.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("3c18d01e-2687-42a1-9536-b23f91a247d0")]
		public virtual global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel AbstractionModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, AbstractionModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AbstractionModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AbstractionModel of a Schema
		/// <summary>
		/// Gets AbstractionModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel GetAbstractionModel(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Schema element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SchemaDomainRoleId) as global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel;
		}
		
		/// <summary>
		/// Sets AbstractionModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAbstractionModel(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Schema element, global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel newAbstractionModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SchemaDomainRoleId, newAbstractionModel);
		}
		#endregion
		#region Schema link accessor
		/// <summary>
		/// Get the SchemaIsForAbstractionModel link to a Schema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel GetLinkToAbstractionModel (global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Schema schemaInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel>(schemaInstance, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel.SchemaDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Schema not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AbstractionModel link accessor
		/// <summary>
		/// Get the SchemaIsForAbstractionModel link to a AbstractionModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel GetLinkToSchema (global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel abstractionModelInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel>(abstractionModelInstance, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel.AbstractionModelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of AbstractionModel not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SchemaIsForAbstractionModel instance accessors
		
		/// <summary>
		/// Get any SchemaIsForAbstractionModel links between a given Schema and a AbstractionModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel> GetLinks( global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Schema source, global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel>(source, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel.SchemaDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel link in links )
			{
				if ( target.Equals(link.AbstractionModel) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SchemaIsForAbstractionModel link between a given Schemaand a AbstractionModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel GetLink( global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Schema source, global::ORMSolutions.ORMArchitect.ORMAbstraction.AbstractionModel target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel>(source, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel.SchemaDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.SchemaIsForAbstractionModel link in links )
			{
				if ( target.Equals(link.AbstractionModel) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge
{
	/// <summary>
	/// DomainRelationship TableIsPrimarilyForConceptType
	/// Description for
	/// ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("3598c529-7d90-47bf-92ae-f77575b8bfd9")]
	public partial class TableIsPrimarilyForConceptType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TableIsPrimarilyForConceptType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3598c529, 0x7d90, 0x47bf, 0x92, 0xae, 0xf7, 0x75, 0x75, 0xb8, 0xbf, 0xd9);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TableIsPrimarilyForConceptType link in the same Partition as the given Table
		/// </summary>
		/// <param name="source">Table to use as the source of the relationship.</param>
		/// <param name="target">ConceptType to use as the target of the relationship.</param>
		public TableIsPrimarilyForConceptType(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Table source, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TableIsPrimarilyForConceptType.TableDomainRoleId, source), new DslModeling::RoleAssignment(TableIsPrimarilyForConceptType.ConceptTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TableIsPrimarilyForConceptType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TableIsPrimarilyForConceptType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TableIsPrimarilyForConceptType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TableIsPrimarilyForConceptType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Table domain role code
		
		/// <summary>
		/// Table domain role Id.
		/// </summary>
		public static readonly global::System.Guid TableDomainRoleId = new global::System.Guid(0xdaeb8db4, 0xc3a6, 0x497d, 0xba, 0x4c, 0x74, 0xd1, 0xaf, 0x6c, 0xcd, 0xc0);
		
		/// <summary>
		/// DomainRole Table
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType/Table.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType/Table.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ConceptType", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType/Table.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("daeb8db4-c3a6-497d-ba4c-74d1af6ccdc0")]
		public virtual global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Table Table
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Table)DslModeling::DomainRoleInfo.GetRolePlayer(this, TableDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TableDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Table of a ConceptType
		/// <summary>
		/// Gets Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Table GetTable(global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConceptTypeDomainRoleId) as global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Table;
		}
		
		/// <summary>
		/// Sets Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTable(global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType element, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Table newTable)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConceptTypeDomainRoleId, newTable);
		}
		#endregion
		#region ConceptType domain role code
		
		/// <summary>
		/// ConceptType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConceptTypeDomainRoleId = new global::System.Guid(0x64f5ec66, 0x1af4, 0x4368, 0xa1, 0xa2, 0x59, 0x13, 0x68, 0x1d, 0xe4, 0x91);
		
		/// <summary>
		/// DomainRole ConceptType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType/ConceptType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType/ConceptType.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Table", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType/ConceptType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("64f5ec66-1af4-4368-a1a2-5913681de491")]
		public virtual global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType ConceptType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConceptTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConceptTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConceptType of a Table
		/// <summary>
		/// Gets ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType GetConceptType(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Table element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TableDomainRoleId) as global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType;
		}
		
		/// <summary>
		/// Sets ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetConceptType(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Table element, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType newConceptType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TableDomainRoleId, newConceptType);
		}
		#endregion
		#region Table link accessor
		/// <summary>
		/// Get the TableIsPrimarilyForConceptType link to a Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType GetLinkToConceptType (global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Table tableInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType>(tableInstance, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType.TableDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Table not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ConceptType link accessor
		/// <summary>
		/// Get the TableIsPrimarilyForConceptType link to a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType GetLinkToTable (global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType conceptTypeInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType>(conceptTypeInstance, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType.ConceptTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ConceptType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TableIsPrimarilyForConceptType instance accessors
		
		/// <summary>
		/// Get any TableIsPrimarilyForConceptType links between a given Table and a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType> GetLinks( global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Table source, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType>(source, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType.TableDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType link in links )
			{
				if ( target.Equals(link.ConceptType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TableIsPrimarilyForConceptType link between a given Tableand a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType GetLink( global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Table source, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType>(source, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType.TableDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsPrimarilyForConceptType link in links )
			{
				if ( target.Equals(link.ConceptType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge
{
	/// <summary>
	/// DomainRelationship TableIsAlsoForConceptType
	/// Description for
	/// ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("058e26e9-85e8-4da4-8979-bfa0455d41cc")]
	public partial class TableIsAlsoForConceptType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TableIsAlsoForConceptType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x058e26e9, 0x85e8, 0x4da4, 0x89, 0x79, 0xbf, 0xa0, 0x45, 0x5d, 0x41, 0xcc);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TableIsAlsoForConceptType link in the same Partition as the given Table
		/// </summary>
		/// <param name="source">Table to use as the source of the relationship.</param>
		/// <param name="target">ConceptType to use as the target of the relationship.</param>
		public TableIsAlsoForConceptType(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Table source, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TableIsAlsoForConceptType.TableDomainRoleId, source), new DslModeling::RoleAssignment(TableIsAlsoForConceptType.ConceptTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TableIsAlsoForConceptType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TableIsAlsoForConceptType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TableIsAlsoForConceptType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TableIsAlsoForConceptType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Table domain role code
		
		/// <summary>
		/// Table domain role Id.
		/// </summary>
		public static readonly global::System.Guid TableDomainRoleId = new global::System.Guid(0xe2f7dd3b, 0x8e40, 0x45a5, 0xac, 0x39, 0x86, 0x3a, 0xbf, 0xa3, 0x50, 0x20);
		
		/// <summary>
		/// DomainRole Table
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType/Table.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType/Table.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ConceptType", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType/Table.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e2f7dd3b-8e40-45a5-ac39-863abfa35020")]
		public virtual global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Table Table
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Table)DslModeling::DomainRoleInfo.GetRolePlayer(this, TableDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TableDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Table of a ConceptType
		/// <summary>
		/// Gets a list of Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Table> GetTable(global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType element)
		{
			return new DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Table>(element, ConceptTypeDomainRoleId);
		}
		#endregion
		#region ConceptType domain role code
		
		/// <summary>
		/// ConceptType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConceptTypeDomainRoleId = new global::System.Guid(0x51d93721, 0x0758, 0x4405, 0xb3, 0x6e, 0xe8, 0x07, 0x30, 0x9f, 0x8c, 0xa8);
		
		/// <summary>
		/// DomainRole ConceptType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType/ConceptType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType/ConceptType.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Table", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType/ConceptType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("51d93721-0758-4405-b36e-e807309f8ca8")]
		public virtual global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType ConceptType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConceptTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConceptTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConceptType of a Table
		/// <summary>
		/// Gets a list of ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType> GetConceptType(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Table element)
		{
			return new DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType>(element, TableDomainRoleId);
		}
		#endregion
		#region Accessors for roles that this REL plays in other RELs
		#region AssimilationPath opposite domain role accessor
		/// <summary>
		/// Gets a list of AssimilationPath.
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptTypeHasAssimilationPath.TableIsAlsoForConceptType
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeAssimilatesConceptType> AssimilationPath
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeAssimilatesConceptType>(this, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptTypeHasAssimilationPath.TableIsAlsoForConceptTypeDomainRoleId);
			}
		}
		#endregion
		#endregion
		#region Table link accessor
		/// <summary>
		/// Get the list of TableIsAlsoForConceptType links to a Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType> GetLinksToConceptType ( global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Table tableInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType>(tableInstance, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType.TableDomainRoleId);
		}
		#endregion
		#region ConceptType link accessor
		/// <summary>
		/// Get the list of TableIsAlsoForConceptType links to a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType> GetLinksToTable ( global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType conceptTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType>(conceptTypeInstance, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType.ConceptTypeDomainRoleId);
		}
		#endregion
		#region TableIsAlsoForConceptType instance accessors
		
		/// <summary>
		/// Get any TableIsAlsoForConceptType links between a given Table and a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType> GetLinks( global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Table source, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType>(source, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType.TableDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType link in links )
			{
				if ( target.Equals(link.ConceptType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TableIsAlsoForConceptType link between a given Tableand a ConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType GetLink( global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Table source, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptType target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType>(source, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType.TableDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType link in links )
			{
				if ( target.Equals(link.ConceptType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge
{
	/// <summary>
	/// DomainRelationship TableIsAlsoForConceptTypeHasAssimilationPath
	/// Description for
	/// ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptTypeHasAssimilationPath
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptTypeHasAssimilationPath.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptTypeHasAssimilationPath.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("1772c296-ec3e-4fe3-88d5-4abc85e74849")]
	public partial class TableIsAlsoForConceptTypeHasAssimilationPath : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TableIsAlsoForConceptTypeHasAssimilationPath domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1772c296, 0xec3e, 0x4fe3, 0x88, 0xd5, 0x4a, 0xbc, 0x85, 0xe7, 0x48, 0x49);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TableIsAlsoForConceptTypeHasAssimilationPath link in the same Partition as the given TableIsAlsoForConceptType
		/// </summary>
		/// <param name="source">TableIsAlsoForConceptType to use as the source of the relationship.</param>
		/// <param name="target">ConceptTypeAssimilatesConceptType to use as the target of the relationship.</param>
		public TableIsAlsoForConceptTypeHasAssimilationPath(TableIsAlsoForConceptType source, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeAssimilatesConceptType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TableIsAlsoForConceptTypeHasAssimilationPath.TableIsAlsoForConceptTypeDomainRoleId, source), new DslModeling::RoleAssignment(TableIsAlsoForConceptTypeHasAssimilationPath.AssimilationDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TableIsAlsoForConceptTypeHasAssimilationPath(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TableIsAlsoForConceptTypeHasAssimilationPath(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TableIsAlsoForConceptTypeHasAssimilationPath(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TableIsAlsoForConceptTypeHasAssimilationPath(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region TableIsAlsoForConceptType domain role code
		
		/// <summary>
		/// TableIsAlsoForConceptType domain role Id.
		/// </summary>
		public static readonly global::System.Guid TableIsAlsoForConceptTypeDomainRoleId = new global::System.Guid(0xbda4bd0b, 0xf86e, 0x481a, 0x92, 0x1f, 0x7f, 0x76, 0xed, 0xbe, 0x81, 0xa7);
		
		/// <summary>
		/// DomainRole TableIsAlsoForConceptType
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptTypeHasAssimilationPath.TableIsAlsoForConceptType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptTypeHasAssimilationPath/TableIsAlsoForConceptType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptTypeHasAssimilationPath/TableIsAlsoForConceptType.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AssimilationPath", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptTypeHasAssimilationPath/TableIsAlsoForConceptType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("bda4bd0b-f86e-481a-921f-7f76edbe81a7")]
		public virtual TableIsAlsoForConceptType TableIsAlsoForConceptType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TableIsAlsoForConceptType)DslModeling::DomainRoleInfo.GetRolePlayer(this, TableIsAlsoForConceptTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TableIsAlsoForConceptTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TableIsAlsoForConceptType of a ConceptTypeAssimilatesConceptType
		/// <summary>
		/// Gets a list of TableIsAlsoForConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<TableIsAlsoForConceptType> GetTableIsAlsoForConceptType(global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeAssimilatesConceptType element)
		{
			return new DslModeling::LinkedElementCollection<TableIsAlsoForConceptType>(element, AssimilationDomainRoleId);
		}
		#endregion
		#region Assimilation domain role code
		
		/// <summary>
		/// Assimilation domain role Id.
		/// </summary>
		public static readonly global::System.Guid AssimilationDomainRoleId = new global::System.Guid(0xc14aed06, 0xe158, 0x4082, 0x96, 0xe3, 0x62, 0xc2, 0xa7, 0xe3, 0x02, 0xf1);
		
		/// <summary>
		/// DomainRole Assimilation
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptTypeHasAssimilationPath.Assimilation
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptTypeHasAssimilationPath/Assimilation.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptTypeHasAssimilationPath/Assimilation.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "TableIsAlsoForConceptType", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptTypeHasAssimilationPath/Assimilation.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c14aed06-e158-4082-96e3-62c2a7e302f1")]
		public virtual global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeAssimilatesConceptType Assimilation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeAssimilatesConceptType)DslModeling::DomainRoleInfo.GetRolePlayer(this, AssimilationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AssimilationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AssimilationPath of a TableIsAlsoForConceptType
		/// <summary>
		/// Gets a list of AssimilationPath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeAssimilatesConceptType> GetAssimilationPath(TableIsAlsoForConceptType element)
		{
			return new DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeAssimilatesConceptType>(element, TableIsAlsoForConceptTypeDomainRoleId);
		}
		#endregion
		#region TableIsAlsoForConceptType link accessor
		/// <summary>
		/// Get the list of TableIsAlsoForConceptTypeHasAssimilationPath links to a TableIsAlsoForConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptTypeHasAssimilationPath> GetLinksToAssimilationPath ( global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType tableIsAlsoForConceptTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptTypeHasAssimilationPath>(tableIsAlsoForConceptTypeInstance, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptTypeHasAssimilationPath.TableIsAlsoForConceptTypeDomainRoleId);
		}
		#endregion
		#region Assimilation link accessor
		/// <summary>
		/// Get the list of TableIsAlsoForConceptTypeHasAssimilationPath links to a ConceptTypeAssimilatesConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptTypeHasAssimilationPath> GetLinksToTableIsAlsoForConceptType ( global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeAssimilatesConceptType assimilationInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptTypeHasAssimilationPath>(assimilationInstance, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptTypeHasAssimilationPath.AssimilationDomainRoleId);
		}
		#endregion
		#region TableIsAlsoForConceptTypeHasAssimilationPath instance accessors
		
		/// <summary>
		/// Get any TableIsAlsoForConceptTypeHasAssimilationPath links between a given TableIsAlsoForConceptType and a ConceptTypeAssimilatesConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptTypeHasAssimilationPath> GetLinks( global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType source, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeAssimilatesConceptType target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptTypeHasAssimilationPath> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptTypeHasAssimilationPath>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptTypeHasAssimilationPath> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptTypeHasAssimilationPath>(source, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptTypeHasAssimilationPath.TableIsAlsoForConceptTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptTypeHasAssimilationPath link in links )
			{
				if ( target.Equals(link.Assimilation) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TableIsAlsoForConceptTypeHasAssimilationPath link between a given TableIsAlsoForConceptTypeand a ConceptTypeAssimilatesConceptType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptTypeHasAssimilationPath GetLink( global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptType source, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeAssimilatesConceptType target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptTypeHasAssimilationPath> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptTypeHasAssimilationPath>(source, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptTypeHasAssimilationPath.TableIsAlsoForConceptTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableIsAlsoForConceptTypeHasAssimilationPath link in links )
			{
				if ( target.Equals(link.Assimilation) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge
{
	/// <summary>
	/// DomainRelationship ColumnHasConceptTypeChild
	/// Description for
	/// ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ColumnHasConceptTypeChild
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ColumnHasConceptTypeChild.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ColumnHasConceptTypeChild.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("ccbcab63-ade4-43fa-8e29-8a598b0969f5")]
	public partial class ColumnHasConceptTypeChild : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ColumnHasConceptTypeChild domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xccbcab63, 0xade4, 0x43fa, 0x8e, 0x29, 0x8a, 0x59, 0x8b, 0x09, 0x69, 0xf5);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ColumnHasConceptTypeChild link in the same Partition as the given Column
		/// </summary>
		/// <param name="source">Column to use as the source of the relationship.</param>
		/// <param name="target">ConceptTypeChild to use as the target of the relationship.</param>
		public ColumnHasConceptTypeChild(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Column source, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ColumnHasConceptTypeChild.ColumnDomainRoleId, source), new DslModeling::RoleAssignment(ColumnHasConceptTypeChild.ConceptTypeChildDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ColumnHasConceptTypeChild(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ColumnHasConceptTypeChild(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ColumnHasConceptTypeChild(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ColumnHasConceptTypeChild(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Column domain role code
		
		/// <summary>
		/// Column domain role Id.
		/// </summary>
		public static readonly global::System.Guid ColumnDomainRoleId = new global::System.Guid(0xbc7ea8a8, 0x8772, 0x4ca4, 0xb9, 0x14, 0xb7, 0x8b, 0x4b, 0x58, 0x33, 0x38);
		
		/// <summary>
		/// DomainRole Column
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ColumnHasConceptTypeChild/Column.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ColumnHasConceptTypeChild/Column.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ConceptTypeChildPath", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ColumnHasConceptTypeChild/Column.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("bc7ea8a8-8772-4ca4-b914-b78b4b583338")]
		public virtual global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Column Column
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Column)DslModeling::DomainRoleInfo.GetRolePlayer(this, ColumnDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ColumnDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Column of a ConceptTypeChild
		/// <summary>
		/// Gets a list of Column.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Column> GetColumn(global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild element)
		{
			return new DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Column>(element, ConceptTypeChildDomainRoleId);
		}
		#endregion
		#region ConceptTypeChild domain role code
		
		/// <summary>
		/// ConceptTypeChild domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConceptTypeChildDomainRoleId = new global::System.Guid(0xb162a279, 0xa4c1, 0x4271, 0xad, 0x37, 0x9c, 0xdd, 0xfc, 0x42, 0x17, 0x22);
		
		/// <summary>
		/// DomainRole ConceptTypeChild
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ColumnHasConceptTypeChild/ConceptTypeChild.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ColumnHasConceptTypeChild/ConceptTypeChild.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Column", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ColumnHasConceptTypeChild/ConceptTypeChild.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("b162a279-a4c1-4271-ad37-9cddfc421722")]
		public virtual global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild ConceptTypeChild
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConceptTypeChildDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConceptTypeChildDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConceptTypeChildPath of a Column
		/// <summary>
		/// Gets a list of ConceptTypeChildPath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild> GetConceptTypeChildPath(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Column element)
		{
			return new DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild>(element, ColumnDomainRoleId);
		}
		#endregion
		#region Column link accessor
		/// <summary>
		/// Get the list of ColumnHasConceptTypeChild links to a Column.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ColumnHasConceptTypeChild> GetLinksToConceptTypeChildPath ( global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Column columnInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ColumnHasConceptTypeChild>(columnInstance, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ColumnHasConceptTypeChild.ColumnDomainRoleId);
		}
		#endregion
		#region ConceptTypeChild link accessor
		/// <summary>
		/// Get the list of ColumnHasConceptTypeChild links to a ConceptTypeChild.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ColumnHasConceptTypeChild> GetLinksToColumn ( global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild conceptTypeChildInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ColumnHasConceptTypeChild>(conceptTypeChildInstance, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ColumnHasConceptTypeChild.ConceptTypeChildDomainRoleId);
		}
		#endregion
		#region ColumnHasConceptTypeChild instance accessors
		
		/// <summary>
		/// Get any ColumnHasConceptTypeChild links between a given Column and a ConceptTypeChild.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ColumnHasConceptTypeChild> GetLinks( global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Column source, global::ORMSolutions.ORMArchitect.ORMAbstraction.ConceptTypeChild target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ColumnHasConceptTypeChild> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ColumnHasConceptTypeChild>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ColumnHasConceptTypeChild> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ColumnHasConceptTypeChild>(source, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ColumnHasConceptTypeChild.ColumnDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ColumnHasConceptTypeChild link in links )
			{
				if ( target.Equals(link.ConceptTypeChild) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge
{
	/// <summary>
	/// DomainRelationship UniquenessConstraintIsForUniqueness
	/// Description for
	/// ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("5da169bb-5439-4f61-926f-6b789503511e")]
	public partial class UniquenessConstraintIsForUniqueness : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// UniquenessConstraintIsForUniqueness domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5da169bb, 0x5439, 0x4f61, 0x92, 0x6f, 0x6b, 0x78, 0x95, 0x03, 0x51, 0x1e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a UniquenessConstraintIsForUniqueness link in the same Partition as the given UniquenessConstraint
		/// </summary>
		/// <param name="source">UniquenessConstraint to use as the source of the relationship.</param>
		/// <param name="target">Uniqueness to use as the target of the relationship.</param>
		public UniquenessConstraintIsForUniqueness(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.UniquenessConstraint source, global::ORMSolutions.ORMArchitect.ORMAbstraction.Uniqueness target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(UniquenessConstraintIsForUniqueness.UniquenessConstraintDomainRoleId, source), new DslModeling::RoleAssignment(UniquenessConstraintIsForUniqueness.UniquenessDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UniquenessConstraintIsForUniqueness(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UniquenessConstraintIsForUniqueness(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UniquenessConstraintIsForUniqueness(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UniquenessConstraintIsForUniqueness(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region UniquenessConstraint domain role code
		
		/// <summary>
		/// UniquenessConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid UniquenessConstraintDomainRoleId = new global::System.Guid(0x2c58f935, 0xe736, 0x401f, 0xb2, 0x2f, 0xe3, 0x8f, 0x71, 0xab, 0x33, 0xe5);
		
		/// <summary>
		/// DomainRole UniquenessConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness/UniquenessConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness/UniquenessConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Uniqueness", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness/UniquenessConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("2c58f935-e736-401f-b22f-e38f71ab33e5")]
		public virtual global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.UniquenessConstraint UniquenessConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.UniquenessConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, UniquenessConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, UniquenessConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access UniquenessConstraint of a Uniqueness
		/// <summary>
		/// Gets a list of UniquenessConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.UniquenessConstraint> GetUniquenessConstraint(global::ORMSolutions.ORMArchitect.ORMAbstraction.Uniqueness element)
		{
			return new DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.UniquenessConstraint>(element, UniquenessDomainRoleId);
		}
		#endregion
		#region Uniqueness domain role code
		
		/// <summary>
		/// Uniqueness domain role Id.
		/// </summary>
		public static readonly global::System.Guid UniquenessDomainRoleId = new global::System.Guid(0x78ab7c46, 0xd141, 0x4136, 0xb1, 0xda, 0x2f, 0x5a, 0x64, 0xe8, 0x20, 0xdc);
		
		/// <summary>
		/// DomainRole Uniqueness
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness/Uniqueness.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness/Uniqueness.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "UniquenessConstraint", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness/Uniqueness.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("78ab7c46-d141-4136-b1da-2f5a64e820dc")]
		public virtual global::ORMSolutions.ORMArchitect.ORMAbstraction.Uniqueness Uniqueness
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.ORMAbstraction.Uniqueness)DslModeling::DomainRoleInfo.GetRolePlayer(this, UniquenessDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, UniquenessDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Uniqueness of a UniquenessConstraint
		/// <summary>
		/// Gets Uniqueness.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstraction.Uniqueness GetUniqueness(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.UniquenessConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, UniquenessConstraintDomainRoleId) as global::ORMSolutions.ORMArchitect.ORMAbstraction.Uniqueness;
		}
		
		/// <summary>
		/// Sets Uniqueness.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetUniqueness(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.UniquenessConstraint element, global::ORMSolutions.ORMArchitect.ORMAbstraction.Uniqueness newUniqueness)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, UniquenessConstraintDomainRoleId, newUniqueness);
		}
		#endregion
		#region UniquenessConstraint link accessor
		/// <summary>
		/// Get the UniquenessConstraintIsForUniqueness link to a UniquenessConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness GetLinkToUniqueness (global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.UniquenessConstraint uniquenessConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness>(uniquenessConstraintInstance, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness.UniquenessConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of UniquenessConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Uniqueness link accessor
		/// <summary>
		/// Get the list of UniquenessConstraintIsForUniqueness links to a Uniqueness.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness> GetLinksToUniquenessConstraint ( global::ORMSolutions.ORMArchitect.ORMAbstraction.Uniqueness uniquenessInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness>(uniquenessInstance, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness.UniquenessDomainRoleId);
		}
		#endregion
		#region UniquenessConstraintIsForUniqueness instance accessors
		
		/// <summary>
		/// Get any UniquenessConstraintIsForUniqueness links between a given UniquenessConstraint and a Uniqueness.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness> GetLinks( global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.UniquenessConstraint source, global::ORMSolutions.ORMArchitect.ORMAbstraction.Uniqueness target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness>(source, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness.UniquenessConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness link in links )
			{
				if ( target.Equals(link.Uniqueness) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one UniquenessConstraintIsForUniqueness link between a given UniquenessConstraintand a Uniqueness.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness GetLink( global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.UniquenessConstraint source, global::ORMSolutions.ORMArchitect.ORMAbstraction.Uniqueness target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness>(source, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness.UniquenessConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.UniquenessConstraintIsForUniqueness link in links )
			{
				if ( target.Equals(link.Uniqueness) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge
{
	/// <summary>
	/// DomainRelationship DomainIsForInformationTypeFormat
	/// Description for
	/// ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("a9f82d26-1d87-4808-b618-37ff179466fc")]
	public partial class DomainIsForInformationTypeFormat : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DomainIsForInformationTypeFormat domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa9f82d26, 0x1d87, 0x4808, 0xb6, 0x18, 0x37, 0xff, 0x17, 0x94, 0x66, 0xfc);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DomainIsForInformationTypeFormat link in the same Partition as the given Domain
		/// </summary>
		/// <param name="source">Domain to use as the source of the relationship.</param>
		/// <param name="target">InformationTypeFormat to use as the target of the relationship.</param>
		public DomainIsForInformationTypeFormat(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Domain source, global::ORMSolutions.ORMArchitect.ORMAbstraction.InformationTypeFormat target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DomainIsForInformationTypeFormat.DomainDomainRoleId, source), new DslModeling::RoleAssignment(DomainIsForInformationTypeFormat.InformationTypeFormatDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DomainIsForInformationTypeFormat(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DomainIsForInformationTypeFormat(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DomainIsForInformationTypeFormat(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DomainIsForInformationTypeFormat(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Domain domain role code
		
		/// <summary>
		/// Domain domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainDomainRoleId = new global::System.Guid(0xeec22052, 0x39cd, 0x4f93, 0xac, 0x66, 0x66, 0x34, 0xdd, 0x64, 0x23, 0xb4);
		
		/// <summary>
		/// DomainRole Domain
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat/Domain.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat/Domain.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "InformationTypeFormat", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat/Domain.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("eec22052-39cd-4f93-ac66-6634dd6423b4")]
		public virtual global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Domain Domain
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Domain)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Domain of a InformationTypeFormat
		/// <summary>
		/// Gets a list of Domain.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Domain> GetDomain(global::ORMSolutions.ORMArchitect.ORMAbstraction.InformationTypeFormat element)
		{
			return new DslModeling::LinkedElementCollection<global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Domain>(element, InformationTypeFormatDomainRoleId);
		}
		#endregion
		#region InformationTypeFormat domain role code
		
		/// <summary>
		/// InformationTypeFormat domain role Id.
		/// </summary>
		public static readonly global::System.Guid InformationTypeFormatDomainRoleId = new global::System.Guid(0x64e89755, 0x37f7, 0x43d6, 0xa6, 0xc5, 0x65, 0x4b, 0x1c, 0x31, 0x5d, 0x1b);
		
		/// <summary>
		/// DomainRole InformationTypeFormat
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat/InformationTypeFormat.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat/InformationTypeFormat.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Domain", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat/InformationTypeFormat.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("64e89755-37f7-43d6-a6c5-654b1c315d1b")]
		public virtual global::ORMSolutions.ORMArchitect.ORMAbstraction.InformationTypeFormat InformationTypeFormat
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.ORMAbstraction.InformationTypeFormat)DslModeling::DomainRoleInfo.GetRolePlayer(this, InformationTypeFormatDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InformationTypeFormatDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InformationTypeFormat of a Domain
		/// <summary>
		/// Gets InformationTypeFormat.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstraction.InformationTypeFormat GetInformationTypeFormat(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Domain element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DomainDomainRoleId) as global::ORMSolutions.ORMArchitect.ORMAbstraction.InformationTypeFormat;
		}
		
		/// <summary>
		/// Sets InformationTypeFormat.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetInformationTypeFormat(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Domain element, global::ORMSolutions.ORMArchitect.ORMAbstraction.InformationTypeFormat newInformationTypeFormat)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DomainDomainRoleId, newInformationTypeFormat);
		}
		#endregion
		#region Domain link accessor
		/// <summary>
		/// Get the DomainIsForInformationTypeFormat link to a Domain.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat GetLinkToInformationTypeFormat (global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Domain domainInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat>(domainInstance, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat.DomainDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Domain not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region InformationTypeFormat link accessor
		/// <summary>
		/// Get the list of DomainIsForInformationTypeFormat links to a InformationTypeFormat.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat> GetLinksToDomain ( global::ORMSolutions.ORMArchitect.ORMAbstraction.InformationTypeFormat informationTypeFormatInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat>(informationTypeFormatInstance, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat.InformationTypeFormatDomainRoleId);
		}
		#endregion
		#region DomainIsForInformationTypeFormat instance accessors
		
		/// <summary>
		/// Get any DomainIsForInformationTypeFormat links between a given Domain and a InformationTypeFormat.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat> GetLinks( global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Domain source, global::ORMSolutions.ORMArchitect.ORMAbstraction.InformationTypeFormat target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat>(source, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat.DomainDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat link in links )
			{
				if ( target.Equals(link.InformationTypeFormat) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DomainIsForInformationTypeFormat link between a given Domainand a InformationTypeFormat.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat GetLink( global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Domain source, global::ORMSolutions.ORMArchitect.ORMAbstraction.InformationTypeFormat target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat>(source, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat.DomainDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DomainIsForInformationTypeFormat link in links )
			{
				if ( target.Equals(link.InformationTypeFormat) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge
{
	/// <summary>
	/// DomainRelationship GenerationSettingTargetsSchema
	/// Description for
	/// ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GenerationSettingTargetsSchema
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GenerationSettingTargetsSchema.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GenerationSettingTargetsSchema.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("d7c8e3c8-7a84-4c28-8362-8c8d38c35a07")]
	public partial class GenerationSettingTargetsSchema : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// GenerationSettingTargetsSchema domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd7c8e3c8, 0x7a84, 0x4c28, 0x83, 0x62, 0x8c, 0x8d, 0x38, 0xc3, 0x5a, 0x07);
	
				
		/// <summary>
		/// Constructor
		/// Creates a GenerationSettingTargetsSchema link in the same Partition as the given SchemaGenerationSetting
		/// </summary>
		/// <param name="source">SchemaGenerationSetting to use as the source of the relationship.</param>
		/// <param name="target">Schema to use as the target of the relationship.</param>
		public GenerationSettingTargetsSchema(SchemaGenerationSetting source, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Schema target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(GenerationSettingTargetsSchema.GenerationSettingDomainRoleId, source), new DslModeling::RoleAssignment(GenerationSettingTargetsSchema.GeneratedSchemaDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public GenerationSettingTargetsSchema(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public GenerationSettingTargetsSchema(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public GenerationSettingTargetsSchema(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public GenerationSettingTargetsSchema(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region GenerationSetting domain role code
		
		/// <summary>
		/// GenerationSetting domain role Id.
		/// </summary>
		public static readonly global::System.Guid GenerationSettingDomainRoleId = new global::System.Guid(0x654a46a6, 0x2f7a, 0x4c60, 0xae, 0xc9, 0xad, 0x4b, 0x71, 0xf5, 0x80, 0x82);
		
		/// <summary>
		/// DomainRole GenerationSetting
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GenerationSettingTargetsSchema.GenerationSetting
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GenerationSettingTargetsSchema/GenerationSetting.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GenerationSettingTargetsSchema/GenerationSetting.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "GeneratedSchema", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GenerationSettingTargetsSchema/GenerationSetting.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("654a46a6-2f7a-4c60-aec9-ad4b71f58082")]
		public virtual SchemaGenerationSetting GenerationSetting
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SchemaGenerationSetting)DslModeling::DomainRoleInfo.GetRolePlayer(this, GenerationSettingDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, GenerationSettingDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access GenerationSetting of a Schema
		/// <summary>
		/// Gets GenerationSetting.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SchemaGenerationSetting GetGenerationSetting(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Schema element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, GeneratedSchemaDomainRoleId) as SchemaGenerationSetting;
		}
		
		/// <summary>
		/// Sets GenerationSetting.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetGenerationSetting(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Schema element, SchemaGenerationSetting newGenerationSetting)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, GeneratedSchemaDomainRoleId, newGenerationSetting);
		}
		#endregion
		#region GeneratedSchema domain role code
		
		/// <summary>
		/// GeneratedSchema domain role Id.
		/// </summary>
		public static readonly global::System.Guid GeneratedSchemaDomainRoleId = new global::System.Guid(0x4cd40629, 0xc999, 0x4e6b, 0xa8, 0xb6, 0x42, 0x90, 0x46, 0xd3, 0xf5, 0x54);
		
		/// <summary>
		/// DomainRole GeneratedSchema
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GenerationSettingTargetsSchema.GeneratedSchema
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GenerationSettingTargetsSchema/GeneratedSchema.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GenerationSettingTargetsSchema/GeneratedSchema.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "GenerationSetting", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GenerationSettingTargetsSchema/GeneratedSchema.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("4cd40629-c999-4e6b-a8b6-429046d3f554")]
		public virtual global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Schema GeneratedSchema
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Schema)DslModeling::DomainRoleInfo.GetRolePlayer(this, GeneratedSchemaDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, GeneratedSchemaDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access GeneratedSchema of a SchemaGenerationSetting
		/// <summary>
		/// Gets GeneratedSchema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Schema GetGeneratedSchema(SchemaGenerationSetting element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, GenerationSettingDomainRoleId) as global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Schema;
		}
		
		/// <summary>
		/// Sets GeneratedSchema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetGeneratedSchema(SchemaGenerationSetting element, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Schema newGeneratedSchema)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, GenerationSettingDomainRoleId, newGeneratedSchema);
		}
		#endregion
		#region GenerationSetting link accessor
		/// <summary>
		/// Get the GenerationSettingTargetsSchema link to a SchemaGenerationSetting.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GenerationSettingTargetsSchema GetLinkToGeneratedSchema (global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.SchemaGenerationSetting generationSettingInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GenerationSettingTargetsSchema> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GenerationSettingTargetsSchema>(generationSettingInstance, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GenerationSettingTargetsSchema.GenerationSettingDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of GenerationSetting not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region GeneratedSchema link accessor
		/// <summary>
		/// Get the GenerationSettingTargetsSchema link to a Schema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GenerationSettingTargetsSchema GetLinkToGenerationSetting (global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Schema generatedSchemaInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GenerationSettingTargetsSchema> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GenerationSettingTargetsSchema>(generatedSchemaInstance, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GenerationSettingTargetsSchema.GeneratedSchemaDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of GeneratedSchema not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region GenerationSettingTargetsSchema instance accessors
		
		/// <summary>
		/// Get any GenerationSettingTargetsSchema links between a given SchemaGenerationSetting and a Schema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GenerationSettingTargetsSchema> GetLinks( global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.SchemaGenerationSetting source, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Schema target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GenerationSettingTargetsSchema> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GenerationSettingTargetsSchema>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GenerationSettingTargetsSchema> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GenerationSettingTargetsSchema>(source, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GenerationSettingTargetsSchema.GenerationSettingDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GenerationSettingTargetsSchema link in links )
			{
				if ( target.Equals(link.GeneratedSchema) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one GenerationSettingTargetsSchema link between a given SchemaGenerationSettingand a Schema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GenerationSettingTargetsSchema GetLink( global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.SchemaGenerationSetting source, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Schema target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GenerationSettingTargetsSchema> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GenerationSettingTargetsSchema>(source, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GenerationSettingTargetsSchema.GenerationSettingDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GenerationSettingTargetsSchema link in links )
			{
				if ( target.Equals(link.GeneratedSchema) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
