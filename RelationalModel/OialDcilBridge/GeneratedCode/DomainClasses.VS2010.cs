#region Common Public License Copyright Notice
/**************************************************************************\
* Natural Object-Role Modeling Architect for Visual Studio                 *
*                                                                          *
* Copyright © Neumont University. All rights reserved.                     *
* Copyright © ORM Solutions, LLC. All rights reserved.                     *
*                                                                          *
* The use and distribution terms for this software are covered by the      *
* Common Public License 1.0 (http://opensource.org/licenses/cpl) which     *
* can be found in the file CPL.txt at the root of this distribution.       *
* By using this software in any fashion, you are agreeing to be bound by   *
* the terms of this license.                                               *
*                                                                          *
* You must not remove this notice, or any other, from this software.       *
\**************************************************************************/
#endregion
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge
{
	/// <summary>
	/// DomainClass MappingCustomizationModel
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModel.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModel.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("d027cce5-b22a-44c0-a580-630658605da5")]
	public partial class MappingCustomizationModel : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// MappingCustomizationModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd027cce5, 0xb22a, 0x44c0, 0xa5, 0x80, 0x63, 0x06, 0x58, 0x60, 0x5d, 0xa5);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MappingCustomizationModel(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MappingCustomizationModel(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region AssimilationMappingCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of AssimilationMappingCollection.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<AssimilationMapping> AssimilationMappingCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<AssimilationMapping>, AssimilationMapping>(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping.ModelDomainRoleId);
			}
		}
		#endregion
		#region ReferenceModeNamingCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ReferenceModeNamingCollection.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<RelationalReferenceModeNaming> ReferenceModeNamingCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<RelationalReferenceModeNaming>, RelationalReferenceModeNaming>(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasReferenceModeNaming.ModelDomainRoleId);
			}
		}
		#endregion
		#region DefaultReferenceModeNamingCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of DefaultReferenceModeNamingCollection.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<RelationalDefaultReferenceModeNaming> DefaultReferenceModeNamingCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<RelationalDefaultReferenceModeNaming>, RelationalDefaultReferenceModeNaming>(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasDefaultReferenceModeNaming.ModelDomainRoleId);
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge
{
	/// <summary>
	/// DomainClass AssimilationMapping
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.AssimilationMapping.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.AssimilationMapping.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("2f631fd8-6b87-42e6-961f-750a566fb7c1")]
	public partial class AssimilationMapping : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// AssimilationMapping domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2f631fd8, 0x6b87, 0x42e6, 0x96, 0x1f, 0x75, 0x0a, 0x56, 0x6f, 0xb7, 0xc1);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public AssimilationMapping(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public AssimilationMapping(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region AbsorptionChoice domain property code
		
		/// <summary>
		/// AbsorptionChoice domain property Id.
		/// </summary>
		public static readonly global::System.Guid AbsorptionChoiceDomainPropertyId = new global::System.Guid(0x62b69840, 0xb95f, 0x467b, 0x8f, 0xff, 0x67, 0x05, 0x52, 0x13, 0x9e, 0x1d);
		
		/// <summary>
		/// Storage for AbsorptionChoice
		/// </summary>
		private AssimilationAbsorptionChoice absorptionChoicePropertyStorage = AssimilationAbsorptionChoice.Absorb;
		
		/// <summary>
		/// Gets or sets the value of AbsorptionChoice domain property.
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.AssimilationMapping.AbsorptionChoice
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.AssimilationMapping/AbsorptionChoice.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.AssimilationMapping/AbsorptionChoice.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(AssimilationAbsorptionChoice.Absorb)]
		[DslModeling::DomainObjectId("62b69840-b95f-467b-8fff-670552139e1d")]
		public AssimilationAbsorptionChoice AbsorptionChoice
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return absorptionChoicePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				AbsorptionChoicePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the AssimilationMapping.AbsorptionChoice domain property.
		/// </summary>
		internal sealed partial class AbsorptionChoicePropertyHandler : DslModeling::DomainPropertyValueHandler<AssimilationMapping, AssimilationAbsorptionChoice>
		{
			private AbsorptionChoicePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the AssimilationMapping.AbsorptionChoice domain property value handler.
			/// </summary>
			public static readonly AbsorptionChoicePropertyHandler Instance = new AbsorptionChoicePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the AssimilationMapping.AbsorptionChoice domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return AbsorptionChoiceDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed AssimilationAbsorptionChoice GetValue(AssimilationMapping element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.absorptionChoicePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(AssimilationMapping element, AssimilationAbsorptionChoice newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				AssimilationAbsorptionChoice oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.absorptionChoicePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region FactType opposite domain role accessor
		/// <summary>
		/// Gets or sets FactType.
		/// </summary>
		public virtual global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType FactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesFactType.AssimilationMappingDomainRoleId) as global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesFactType.FactTypeDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesFactType.FactTypeDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.AssimilationMappingCustomizesFactType.AssimilationMappingDomainRoleId, value);
				}
			}
		}
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// </summary>
		public virtual MappingCustomizationModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping.AssimilationMappingDomainRoleId) as MappingCustomizationModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasAssimilationMapping.AssimilationMappingDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge
{
	/// <summary>
	/// DomainClass RelationalReferenceModeNaming
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.RelationalReferenceModeNaming.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.RelationalReferenceModeNaming.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("8153232d-54bd-4cfe-9b2f-9e20faceb688")]
	public sealed partial class RelationalReferenceModeNaming : global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeNaming
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// RelationalReferenceModeNaming domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8153232d, 0x54bd, 0x4cfe, 0x9b, 0x2f, 0x9e, 0x20, 0xfa, 0xce, 0xb6, 0x88);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RelationalReferenceModeNaming(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RelationalReferenceModeNaming(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ObjectType opposite domain role accessor
		/// <summary>
		/// Gets or sets ObjectType.
		/// </summary>
		public global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType ObjectType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ReferenceModeNamingCustomizesObjectType.ReferenceModeNamingDomainRoleId) as global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ReferenceModeNamingCustomizesObjectType.ObjectTypeDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ReferenceModeNamingCustomizesObjectType.ObjectTypeDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ReferenceModeNamingCustomizesObjectType.ReferenceModeNamingDomainRoleId, value);
				}
			}
		}
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// </summary>
		public MappingCustomizationModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasReferenceModeNaming.ReferenceModeNamingDomainRoleId) as MappingCustomizationModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasReferenceModeNaming.ReferenceModeNamingDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge
{
	/// <summary>
	/// DomainClass RelationalDefaultReferenceModeNaming
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.RelationalDefaultReferenceModeNaming.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.RelationalDefaultReferenceModeNaming.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("953a051c-b190-4bca-9eb9-6bdce8ec5d7c")]
	public sealed partial class RelationalDefaultReferenceModeNaming : global::ORMSolutions.ORMArchitect.Core.ObjectModel.DefaultReferenceModeNaming
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// RelationalDefaultReferenceModeNaming domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x953a051c, 0xb190, 0x4bca, 0x9e, 0xb9, 0x6b, 0xdc, 0xe8, 0xec, 0x5d, 0x7c);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RelationalDefaultReferenceModeNaming(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RelationalDefaultReferenceModeNaming(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ORMModel opposite domain role accessor
		/// <summary>
		/// Gets or sets ORMModel.
		/// </summary>
		public global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel ORMModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DefaultReferenceModeNamingCustomizesORMModel.DefaultReferenceModeNamingDomainRoleId) as global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.DefaultReferenceModeNamingCustomizesORMModel.DefaultReferenceModeNamingDomainRoleId, value);
			}
		}
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// </summary>
		public MappingCustomizationModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasDefaultReferenceModeNaming.DefaultReferenceModeNamingDomainRoleId) as MappingCustomizationModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.MappingCustomizationModelHasDefaultReferenceModeNaming.DefaultReferenceModeNamingDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge
{
	/// <summary>
	/// DomainClass RelationalNameGenerator
	/// </summary>
	[ORMSolutions.ORMArchitect.Core.ObjectModel.NameConsumerIdentifier("Relational")]
	[ORMSolutions.ORMArchitect.Core.ObjectModel.NameUsage(typeof(ColumnNameUsage))]
	[ORMSolutions.ORMArchitect.Core.ObjectModel.NameUsage(typeof(TableNameUsage))]
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.RelationalNameGenerator.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.RelationalNameGenerator.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("a2d24e49-1b2f-42c0-b1ce-1f7f3b193e26")]
	public partial class RelationalNameGenerator : global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameGenerator
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// RelationalNameGenerator domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa2d24e49, 0x1b2f, 0x42c0, 0xb1, 0xce, 0x1f, 0x7f, 0x3b, 0x19, 0x3e, 0x26);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RelationalNameGenerator(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RelationalNameGenerator(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge
{
	/// <summary>
	/// DomainClass ColumnNameUsage
	/// </summary>
	[ORMSolutions.ORMArchitect.Core.ObjectModel.NameUsageIdentifier("RelationalColumn")]
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ColumnNameUsage.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ColumnNameUsage.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("61362e35-e677-4a3e-b5cc-a05b7c6ea6e9")]
	public abstract partial class ColumnNameUsage : global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameUsage
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ColumnNameUsage domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x61362e35, 0xe677, 0x4a3e, 0xb5, 0xcc, 0xa0, 0x5b, 0x7c, 0x6e, 0xa6, 0xe9);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ColumnNameUsage(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge
{
	/// <summary>
	/// DomainClass TableNameUsage
	/// </summary>
	[ORMSolutions.ORMArchitect.Core.ObjectModel.NameUsageIdentifier("RelationalTable")]
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableNameUsage.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.TableNameUsage.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("e8ce0734-1fb3-4d0b-9da0-56fddc502ac0")]
	public abstract partial class TableNameUsage : global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameUsage
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// TableNameUsage domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe8ce0734, 0x1fb3, 0x4d0b, 0x9d, 0xa0, 0x56, 0xfd, 0xdc, 0x50, 0x2a, 0xc0);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected TableNameUsage(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge
{
	/// <summary>
	/// DomainClass SchemaGenerationSetting
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.SchemaGenerationSetting.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.SchemaGenerationSetting.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("94918d9c-0935-4b98-86f2-ff8c98861e0d")]
	public partial class SchemaGenerationSetting : global::ORMSolutions.ORMArchitect.Core.ObjectModel.GenerationSetting
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SchemaGenerationSetting domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x94918d9c, 0x0935, 0x4b98, 0x86, 0xf2, 0xff, 0x8c, 0x98, 0x86, 0x1e, 0x0d);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SchemaGenerationSetting(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SchemaGenerationSetting(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region CoreAlgorithmVersion domain property code
		
		/// <summary>
		/// CoreAlgorithmVersion domain property Id.
		/// </summary>
		public static readonly global::System.Guid CoreAlgorithmVersionDomainPropertyId = new global::System.Guid(0x5570f2c2, 0x0f9e, 0x43a7, 0x8a, 0x2e, 0xaf, 0xc3, 0xdf, 0xb3, 0xf7, 0xa3);
		
		/// <summary>
		/// Storage for CoreAlgorithmVersion
		/// </summary>
		private global::System.String coreAlgorithmVersionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of CoreAlgorithmVersion domain property.
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.SchemaGenerationSetting.Depth
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.SchemaGenerationSetting/CoreAlgorithmVersion.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.SchemaGenerationSetting/CoreAlgorithmVersion.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("5570f2c2-0f9e-43a7-8a2e-afc3dfb3f7a3")]
		public global::System.String CoreAlgorithmVersion
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return coreAlgorithmVersionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CoreAlgorithmVersionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SchemaGenerationSetting.CoreAlgorithmVersion domain property.
		/// </summary>
		internal sealed partial class CoreAlgorithmVersionPropertyHandler : DslModeling::DomainPropertyValueHandler<SchemaGenerationSetting, global::System.String>
		{
			private CoreAlgorithmVersionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SchemaGenerationSetting.CoreAlgorithmVersion domain property value handler.
			/// </summary>
			public static readonly CoreAlgorithmVersionPropertyHandler Instance = new CoreAlgorithmVersionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SchemaGenerationSetting.CoreAlgorithmVersion domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CoreAlgorithmVersionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(SchemaGenerationSetting element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.coreAlgorithmVersionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SchemaGenerationSetting element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.coreAlgorithmVersionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region NameAlgorithmVersion domain property code
		
		/// <summary>
		/// NameAlgorithmVersion domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameAlgorithmVersionDomainPropertyId = new global::System.Guid(0x01203af6, 0x93d5, 0x4555, 0x9b, 0xd1, 0x54, 0x5c, 0xf5, 0x90, 0x70, 0x22);
		
		/// <summary>
		/// Storage for NameAlgorithmVersion
		/// </summary>
		private global::System.String nameAlgorithmVersionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of NameAlgorithmVersion domain property.
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.SchemaGenerationSetting.Depth
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.SchemaGenerationSetting/NameAlgorithmVersion.DisplayName", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.SchemaGenerationSetting/NameAlgorithmVersion.Description", typeof(global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.ORMAbstractionToConceptualDatabaseBridgeDomainModel), "ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("01203af6-93d5-4555-9bd1-545cf5907022")]
		public global::System.String NameAlgorithmVersion
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return nameAlgorithmVersionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NameAlgorithmVersionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SchemaGenerationSetting.NameAlgorithmVersion domain property.
		/// </summary>
		internal sealed partial class NameAlgorithmVersionPropertyHandler : DslModeling::DomainPropertyValueHandler<SchemaGenerationSetting, global::System.String>
		{
			private NameAlgorithmVersionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SchemaGenerationSetting.NameAlgorithmVersion domain property value handler.
			/// </summary>
			public static readonly NameAlgorithmVersionPropertyHandler Instance = new NameAlgorithmVersionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SchemaGenerationSetting.NameAlgorithmVersion domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameAlgorithmVersionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(SchemaGenerationSetting element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.nameAlgorithmVersionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SchemaGenerationSetting element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.nameAlgorithmVersionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region GeneratedSchema opposite domain role accessor
		/// <summary>
		/// Gets or sets GeneratedSchema.
		/// Description for
		/// ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GenerationSettingTargetsSchema.GenerationSetting
		/// </summary>
		public virtual global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Schema GeneratedSchema
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GenerationSettingTargetsSchema.GenerationSettingDomainRoleId) as global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Schema;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GenerationSettingTargetsSchema.GeneratedSchemaDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GenerationSettingTargetsSchema.GeneratedSchemaDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.ORMAbstractionToConceptualDatabaseBridge.GenerationSettingTargetsSchema.GenerationSettingDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
