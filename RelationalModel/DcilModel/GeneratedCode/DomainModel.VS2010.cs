#region Common Public License Copyright Notice
/**************************************************************************\
* Natural Object-Role Modeling Architect for Visual Studio                 *
*                                                                          *
* Copyright © Neumont University. All rights reserved.                     *
* Copyright © ORM Solutions, LLC. All rights reserved.                     *
*                                                                          *
* The use and distribution terms for this software are covered by the      *
* Common Public License 1.0 (http://opensource.org/licenses/cpl) which     *
* can be found in the file CPL.txt at the root of this distribution.       *
* By using this software in any fashion, you are agreeing to be bound by   *
* the terms of this license.                                               *
*                                                                          *
* You must not remove this notice, or any other, from this software.       *
\**************************************************************************/
#endregion
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase
{
	/// <summary>
	/// DomainModel ConceptualDatabaseDomainModel
	/// Relational Database View of ORM Model
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel.DisplayName", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DependsOnDomainModel(typeof(global::Microsoft.VisualStudio.Modeling.CoreDomainModel))]
	[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]
	[DslModeling::DomainObjectId("cede46b1-9ca1-4c55-bc88-3dacfadd70ea")]
	public partial class ConceptualDatabaseDomainModel : DslModeling::DomainModel
	{
		#region Constructor, domain model Id
	
		/// <summary>
		/// ConceptualDatabaseDomainModel domain model Id.
		/// </summary>
		public static readonly global::System.Guid DomainModelId = new global::System.Guid(0xcede46b1, 0x9ca1, 0x4c55, 0xbc, 0x88, 0x3d, 0xac, 0xfa, 0xdd, 0x70, 0xea);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="store">Store containing the domain model.</param>
		public ConceptualDatabaseDomainModel(DslModeling::Store store)
			: base(store, DomainModelId)
		{
			// Call the partial method to allow any required serialization setup to be done.
			this.InitializeSerialization(store);		
		}
		
	
		///<Summary>
		/// Defines a partial method that will be called from the constructor to
		/// allow any necessary serialization setup to be done.
		///</Summary>
		///<remarks>
		/// For a DSL created with the DSL Designer wizard, an implementation of this 
		/// method will be generated in the GeneratedCode\SerializationHelper.cs class.
		///</remarks>
		partial void InitializeSerialization(DslModeling::Store store);
	
	
		#endregion
		#region Domain model reflection
			
		/// <summary>
		/// Gets the list of generated domain model types (classes, rules, relationships).
		/// </summary>
		/// <returns>List of types.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		protected sealed override global::System.Type[] GetGeneratedDomainModelTypes()
		{
			return new global::System.Type[]
			{
				typeof(ConceptualDatabaseModelElement),
				typeof(Catalog),
				typeof(Schema),
				typeof(Table),
				typeof(Column),
				typeof(Constraint),
				typeof(UniquenessConstraint),
				typeof(ReferenceConstraint),
				typeof(CheckConstraint),
				typeof(Domain),
				typeof(PredefinedDataType),
				typeof(CatalogContainsSchema),
				typeof(SchemaContainsContent),
				typeof(SchemaContainsTable),
				typeof(SchemaContainsDomain),
				typeof(TableContainsColumn),
				typeof(TableContainsConstraint),
				typeof(TableContainsUniquenessConstraint),
				typeof(TableContainsReferenceConstraint),
				typeof(TableContainsCheckConstraint),
				typeof(DomainContainsCheckConstraint),
				typeof(ColumnHasDomain),
				typeof(ColumnHasPredefinedDataType),
				typeof(DomainHasPredefinedDataType),
				typeof(UniquenessConstraintIncludesColumn),
				typeof(ReferenceConstraintTargetsTable),
				typeof(ReferenceConstraintTargetsUniquenessConstraint),
				typeof(ColumnReference),
				typeof(ReferenceConstraintContainsColumnReference),
			};
		}
		/// <summary>
		/// Gets the list of generated domain properties.
		/// </summary>
		/// <returns>List of property data.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		protected sealed override DomainMemberInfo[] GetGeneratedDomainProperties()
		{
			return new DomainMemberInfo[]
			{
				new DomainMemberInfo(typeof(Catalog), "Name", Catalog.NameDomainPropertyId, typeof(Catalog.NamePropertyHandler)),
				new DomainMemberInfo(typeof(Schema), "Name", Schema.NameDomainPropertyId, typeof(Schema.NamePropertyHandler)),
				new DomainMemberInfo(typeof(Schema), "DefaultColumnOrder", Schema.DefaultColumnOrderDomainPropertyId, typeof(Schema.DefaultColumnOrderPropertyHandler)),
				new DomainMemberInfo(typeof(Schema), "CustomName", Schema.CustomNameDomainPropertyId, typeof(Schema.CustomNamePropertyHandler)),
				new DomainMemberInfo(typeof(Schema), "EditName", Schema.EditNameDomainPropertyId, typeof(Schema.EditNamePropertyHandler)),
				new DomainMemberInfo(typeof(Table), "Name", Table.NameDomainPropertyId, typeof(Table.NamePropertyHandler)),
				new DomainMemberInfo(typeof(Table), "CustomName", Table.CustomNameDomainPropertyId, typeof(Table.CustomNamePropertyHandler)),
				new DomainMemberInfo(typeof(Table), "EditName", Table.EditNameDomainPropertyId, typeof(Table.EditNamePropertyHandler)),
				new DomainMemberInfo(typeof(Table), "ColumnOrder", Table.ColumnOrderDomainPropertyId, typeof(Table.ColumnOrderPropertyHandler)),
				new DomainMemberInfo(typeof(Column), "Name", Column.NameDomainPropertyId, typeof(Column.NamePropertyHandler)),
				new DomainMemberInfo(typeof(Column), "CustomName", Column.CustomNameDomainPropertyId, typeof(Column.CustomNamePropertyHandler)),
				new DomainMemberInfo(typeof(Column), "EditName", Column.EditNameDomainPropertyId, typeof(Column.EditNamePropertyHandler)),
				new DomainMemberInfo(typeof(Column), "IsNullable", Column.IsNullableDomainPropertyId, typeof(Column.IsNullablePropertyHandler)),
				new DomainMemberInfo(typeof(Column), "IsIdentity", Column.IsIdentityDomainPropertyId, typeof(Column.IsIdentityPropertyHandler)),
				new DomainMemberInfo(typeof(Column), "DataType", Column.DataTypeDomainPropertyId, typeof(Column.DataTypePropertyHandler)),
				new DomainMemberInfo(typeof(Column), "DataTypeScale", Column.DataTypeScaleDomainPropertyId, typeof(Column.DataTypeScalePropertyHandler)),
				new DomainMemberInfo(typeof(Column), "DataTypeLength", Column.DataTypeLengthDomainPropertyId, typeof(Column.DataTypeLengthPropertyHandler)),
				new DomainMemberInfo(typeof(Constraint), "Name", Constraint.NameDomainPropertyId, typeof(Constraint.NamePropertyHandler)),
				new DomainMemberInfo(typeof(UniquenessConstraint), "IsPrimary", UniquenessConstraint.IsPrimaryDomainPropertyId, typeof(UniquenessConstraint.IsPrimaryPropertyHandler)),
				new DomainMemberInfo(typeof(Domain), "Name", Domain.NameDomainPropertyId, typeof(Domain.NamePropertyHandler)),
				new DomainMemberInfo(typeof(PredefinedDataType), "Name", PredefinedDataType.NameDomainPropertyId, typeof(PredefinedDataType.NamePropertyHandler)),
				new DomainMemberInfo(typeof(PredefinedDataType), "Length", PredefinedDataType.LengthDomainPropertyId, typeof(PredefinedDataType.LengthPropertyHandler)),
				new DomainMemberInfo(typeof(PredefinedDataType), "Precision", PredefinedDataType.PrecisionDomainPropertyId, typeof(PredefinedDataType.PrecisionPropertyHandler)),
				new DomainMemberInfo(typeof(PredefinedDataType), "Scale", PredefinedDataType.ScaleDomainPropertyId, typeof(PredefinedDataType.ScalePropertyHandler)),
			};
		}
		/// <summary>
		/// Gets the list of generated domain roles.
		/// </summary>
		/// <returns>List of role data.</returns>
		protected sealed override DomainRolePlayerInfo[] GetGeneratedDomainRoles()
		{
			return new DomainRolePlayerInfo[]
			{
				new DomainRolePlayerInfo(typeof(CatalogContainsSchema), "Catalog", CatalogContainsSchema.CatalogDomainRoleId),
				new DomainRolePlayerInfo(typeof(CatalogContainsSchema), "Schema", CatalogContainsSchema.SchemaDomainRoleId),
				new DomainRolePlayerInfo(typeof(SchemaContainsContent), "Schema", SchemaContainsContent.SchemaDomainRoleId),
				new DomainRolePlayerInfo(typeof(SchemaContainsContent), "SchemaContent", SchemaContainsContent.SchemaContentDomainRoleId),
				new DomainRolePlayerInfo(typeof(SchemaContainsTable), "Schema", SchemaContainsTable.SchemaDomainRoleId),
				new DomainRolePlayerInfo(typeof(SchemaContainsTable), "Table", SchemaContainsTable.TableDomainRoleId),
				new DomainRolePlayerInfo(typeof(SchemaContainsDomain), "Schema", SchemaContainsDomain.SchemaDomainRoleId),
				new DomainRolePlayerInfo(typeof(SchemaContainsDomain), "Domain", SchemaContainsDomain.DomainDomainRoleId),
				new DomainRolePlayerInfo(typeof(TableContainsColumn), "Table", TableContainsColumn.TableDomainRoleId),
				new DomainRolePlayerInfo(typeof(TableContainsColumn), "Column", TableContainsColumn.ColumnDomainRoleId),
				new DomainRolePlayerInfo(typeof(TableContainsConstraint), "Table", TableContainsConstraint.TableDomainRoleId),
				new DomainRolePlayerInfo(typeof(TableContainsConstraint), "Constraint", TableContainsConstraint.ConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(TableContainsUniquenessConstraint), "Table", TableContainsUniquenessConstraint.TableDomainRoleId),
				new DomainRolePlayerInfo(typeof(TableContainsUniquenessConstraint), "UniquenessConstraint", TableContainsUniquenessConstraint.UniquenessConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(TableContainsReferenceConstraint), "Table", TableContainsReferenceConstraint.TableDomainRoleId),
				new DomainRolePlayerInfo(typeof(TableContainsReferenceConstraint), "ReferenceConstraint", TableContainsReferenceConstraint.ReferenceConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(TableContainsCheckConstraint), "Table", TableContainsCheckConstraint.TableDomainRoleId),
				new DomainRolePlayerInfo(typeof(TableContainsCheckConstraint), "CheckConstraint", TableContainsCheckConstraint.CheckConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(DomainContainsCheckConstraint), "Domain", DomainContainsCheckConstraint.DomainDomainRoleId),
				new DomainRolePlayerInfo(typeof(DomainContainsCheckConstraint), "CheckConstraint", DomainContainsCheckConstraint.CheckConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(ColumnHasDomain), "Column", ColumnHasDomain.ColumnDomainRoleId),
				new DomainRolePlayerInfo(typeof(ColumnHasDomain), "Domain", ColumnHasDomain.DomainDomainRoleId),
				new DomainRolePlayerInfo(typeof(ColumnHasPredefinedDataType), "Column", ColumnHasPredefinedDataType.ColumnDomainRoleId),
				new DomainRolePlayerInfo(typeof(ColumnHasPredefinedDataType), "PredefinedDataType", ColumnHasPredefinedDataType.PredefinedDataTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(DomainHasPredefinedDataType), "Domain", DomainHasPredefinedDataType.DomainDomainRoleId),
				new DomainRolePlayerInfo(typeof(DomainHasPredefinedDataType), "PredefinedDataType", DomainHasPredefinedDataType.PredefinedDataTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(UniquenessConstraintIncludesColumn), "UniquenessConstraint", UniquenessConstraintIncludesColumn.UniquenessConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(UniquenessConstraintIncludesColumn), "Column", UniquenessConstraintIncludesColumn.ColumnDomainRoleId),
				new DomainRolePlayerInfo(typeof(ReferenceConstraintTargetsTable), "ReferenceConstraint", ReferenceConstraintTargetsTable.ReferenceConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(ReferenceConstraintTargetsTable), "TargetTable", ReferenceConstraintTargetsTable.TargetTableDomainRoleId),
				new DomainRolePlayerInfo(typeof(ReferenceConstraintTargetsUniquenessConstraint), "ReferenceConstraint", ReferenceConstraintTargetsUniquenessConstraint.ReferenceConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(ReferenceConstraintTargetsUniquenessConstraint), "TargetUniquenessConstraint", ReferenceConstraintTargetsUniquenessConstraint.TargetUniquenessConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(ColumnReference), "SourceColumn", ColumnReference.SourceColumnDomainRoleId),
				new DomainRolePlayerInfo(typeof(ColumnReference), "TargetColumn", ColumnReference.TargetColumnDomainRoleId),
				new DomainRolePlayerInfo(typeof(ReferenceConstraintContainsColumnReference), "ReferenceConstraint", ReferenceConstraintContainsColumnReference.ReferenceConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(ReferenceConstraintContainsColumnReference), "ColumnReference", ReferenceConstraintContainsColumnReference.ColumnReferenceDomainRoleId),
			};
		}
		#endregion
		#region Factory methods
		private static global::System.Collections.Generic.Dictionary<global::System.Type, int> createElementMap;
	
		/// <summary>
		/// Creates an element of specified type.
		/// </summary>
		/// <param name="partition">Partition where element is to be created.</param>
		/// <param name="elementType">Element type which belongs to this domain model.</param>
		/// <param name="propertyAssignments">New element property assignments.</param>
		/// <returns>Created element.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		public sealed override DslModeling::ModelElement CreateElement(DslModeling::Partition partition, global::System.Type elementType, DslModeling::PropertyAssignment[] propertyAssignments)
		{
			if (elementType == null) throw new global::System.ArgumentNullException("elementType");
	
			if (createElementMap == null)
			{
				createElementMap = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(11);
				createElementMap.Add(typeof(Catalog), 0);
				createElementMap.Add(typeof(Schema), 1);
				createElementMap.Add(typeof(Table), 2);
				createElementMap.Add(typeof(Column), 3);
				createElementMap.Add(typeof(UniquenessConstraint), 4);
				createElementMap.Add(typeof(ReferenceConstraint), 5);
				createElementMap.Add(typeof(CheckConstraint), 6);
				createElementMap.Add(typeof(Domain), 7);
				createElementMap.Add(typeof(PredefinedDataType), 8);
			}
			int index;
			if (!createElementMap.TryGetValue(elementType, out index))
			{
				// construct exception error message		
				string exceptionError = string.Format(
								global::System.Globalization.CultureInfo.CurrentCulture,
								global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel.SingletonResourceManager.GetString("UnrecognizedElementType"),
								elementType.Name);
				throw new global::System.ArgumentException(exceptionError, "elementType");
			}
			switch (index)
			{
				case 0: return new Catalog(partition, propertyAssignments);
				case 1: return new Schema(partition, propertyAssignments);
				case 2: return new Table(partition, propertyAssignments);
				case 3: return new Column(partition, propertyAssignments);
				case 4: return new UniquenessConstraint(partition, propertyAssignments);
				case 5: return new ReferenceConstraint(partition, propertyAssignments);
				case 6: return new CheckConstraint(partition, propertyAssignments);
				case 7: return new Domain(partition, propertyAssignments);
				case 8: return new PredefinedDataType(partition, propertyAssignments);
				default: return null;
			}
		}
	
		private static global::System.Collections.Generic.Dictionary<global::System.Type, int> createElementLinkMap;
	
		/// <summary>
		/// Creates an element link of specified type.
		/// </summary>
		/// <param name="partition">Partition where element is to be created.</param>
		/// <param name="elementLinkType">Element link type which belongs to this domain model.</param>
		/// <param name="roleAssignments">List of relationship role assignments for the new link.</param>
		/// <param name="propertyAssignments">New element property assignments.</param>
		/// <returns>Created element link.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
		public sealed override DslModeling::ElementLink CreateElementLink(DslModeling::Partition partition, global::System.Type elementLinkType, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
		{
			if (elementLinkType == null) throw new global::System.ArgumentNullException("elementLinkType");
			if (roleAssignments == null) throw new global::System.ArgumentNullException("roleAssignments");
	
			if (createElementLinkMap == null)
			{
				createElementLinkMap = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(18);
				createElementLinkMap.Add(typeof(CatalogContainsSchema), 0);
				createElementLinkMap.Add(typeof(SchemaContainsTable), 1);
				createElementLinkMap.Add(typeof(SchemaContainsDomain), 2);
				createElementLinkMap.Add(typeof(TableContainsColumn), 3);
				createElementLinkMap.Add(typeof(TableContainsUniquenessConstraint), 4);
				createElementLinkMap.Add(typeof(TableContainsReferenceConstraint), 5);
				createElementLinkMap.Add(typeof(TableContainsCheckConstraint), 6);
				createElementLinkMap.Add(typeof(DomainContainsCheckConstraint), 7);
				createElementLinkMap.Add(typeof(ColumnHasDomain), 8);
				createElementLinkMap.Add(typeof(ColumnHasPredefinedDataType), 9);
				createElementLinkMap.Add(typeof(DomainHasPredefinedDataType), 10);
				createElementLinkMap.Add(typeof(UniquenessConstraintIncludesColumn), 11);
				createElementLinkMap.Add(typeof(ReferenceConstraintTargetsTable), 12);
				createElementLinkMap.Add(typeof(ReferenceConstraintTargetsUniquenessConstraint), 13);
				createElementLinkMap.Add(typeof(ColumnReference), 14);
				createElementLinkMap.Add(typeof(ReferenceConstraintContainsColumnReference), 15);
			}
			int index;
			if (!createElementLinkMap.TryGetValue(elementLinkType, out index))
			{
				// construct exception error message
				string exceptionError = string.Format(
								global::System.Globalization.CultureInfo.CurrentCulture,
								global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel.SingletonResourceManager.GetString("UnrecognizedElementLinkType"),
								elementLinkType.Name);
				throw new global::System.ArgumentException(exceptionError, "elementLinkType");
			
			}
			switch (index)
			{
				case 0: return new CatalogContainsSchema(partition, roleAssignments, propertyAssignments);
				case 1: return new SchemaContainsTable(partition, roleAssignments, propertyAssignments);
				case 2: return new SchemaContainsDomain(partition, roleAssignments, propertyAssignments);
				case 3: return new TableContainsColumn(partition, roleAssignments, propertyAssignments);
				case 4: return new TableContainsUniquenessConstraint(partition, roleAssignments, propertyAssignments);
				case 5: return new TableContainsReferenceConstraint(partition, roleAssignments, propertyAssignments);
				case 6: return new TableContainsCheckConstraint(partition, roleAssignments, propertyAssignments);
				case 7: return new DomainContainsCheckConstraint(partition, roleAssignments, propertyAssignments);
				case 8: return new ColumnHasDomain(partition, roleAssignments, propertyAssignments);
				case 9: return new ColumnHasPredefinedDataType(partition, roleAssignments, propertyAssignments);
				case 10: return new DomainHasPredefinedDataType(partition, roleAssignments, propertyAssignments);
				case 11: return new UniquenessConstraintIncludesColumn(partition, roleAssignments, propertyAssignments);
				case 12: return new ReferenceConstraintTargetsTable(partition, roleAssignments, propertyAssignments);
				case 13: return new ReferenceConstraintTargetsUniquenessConstraint(partition, roleAssignments, propertyAssignments);
				case 14: return new ColumnReference(partition, roleAssignments, propertyAssignments);
				case 15: return new ReferenceConstraintContainsColumnReference(partition, roleAssignments, propertyAssignments);
				default: return null;
			}
		}
		#endregion
		#region Resource manager
		
		private static global::System.Resources.ResourceManager resourceManager;
		
		/// <summary>
		/// The base name of this model's resources.
		/// </summary>
		public const string ResourceBaseName = "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx";
		
		/// <summary>
		/// Gets the DomainModel's ResourceManager. If the ResourceManager does not already exist, then it is created.
		/// </summary>
		public override global::System.Resources.ResourceManager ResourceManager
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return ConceptualDatabaseDomainModel.SingletonResourceManager;
			}
		}
	
		/// <summary>
		/// Gets the Singleton ResourceManager for this domain model.
		/// </summary>
		public static global::System.Resources.ResourceManager SingletonResourceManager
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				if (ConceptualDatabaseDomainModel.resourceManager == null)
				{
					ConceptualDatabaseDomainModel.resourceManager = new global::System.Resources.ResourceManager(ResourceBaseName, typeof(ConceptualDatabaseDomainModel).Assembly);
				}
				return ConceptualDatabaseDomainModel.resourceManager;
			}
		}
		#endregion
		#region Copy/Remove closures
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter copyClosure;
		/// <summary>
		/// DeleteClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter removeClosure;
		/// <summary>
		/// Returns an IElementVisitorFilter that corresponds to the ClosureType.
		/// </summary>
		/// <param name="type">closure type</param>
		/// <param name="rootElements">collection of root elements</param>
		/// <returns>IElementVisitorFilter or null</returns>
		public override DslModeling::IElementVisitorFilter GetClosureFilter(DslModeling::ClosureType type, global::System.Collections.Generic.ICollection<DslModeling::ModelElement> rootElements)
		{
			switch (type)
			{
				case DslModeling::ClosureType.CopyClosure:
					return ConceptualDatabaseDomainModel.CopyClosure;
				case DslModeling::ClosureType.DeleteClosure:
					return ConceptualDatabaseDomainModel.DeleteClosure;
			}
			return base.GetClosureFilter(type, rootElements);
		}
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter CopyClosure
		{
			get
			{
				// Incorporate all of the closures from the models we extend
				if (ConceptualDatabaseDomainModel.copyClosure == null)
				{
					DslModeling::ChainingElementVisitorFilter copyFilter = new DslModeling::ChainingElementVisitorFilter();
					copyFilter.AddFilter(new ConceptualDatabaseCopyClosure());
					copyFilter.AddFilter(new DslModeling::CoreCopyClosure());
					
					ConceptualDatabaseDomainModel.copyClosure = copyFilter;
				}
				return ConceptualDatabaseDomainModel.copyClosure;
			}
		}
		/// <summary>
		/// DeleteClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter DeleteClosure
		{
			get
			{
				// Incorporate all of the closures from the models we extend
				if (ConceptualDatabaseDomainModel.removeClosure == null)
				{
					DslModeling::ChainingElementVisitorFilter removeFilter = new DslModeling::ChainingElementVisitorFilter();
					removeFilter.AddFilter(new ConceptualDatabaseDeleteClosure());
					removeFilter.AddFilter(new DslModeling::CoreDeleteClosure());
		
					ConceptualDatabaseDomainModel.removeClosure = removeFilter;
				}
				return ConceptualDatabaseDomainModel.removeClosure;
			}
		}
		#endregion
	}
		
	#region Copy/Remove closure classes
	/// <summary>
	/// Remove closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class ConceptualDatabaseDeleteClosure : ConceptualDatabaseDeleteClosureBase, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ConceptualDatabaseDeleteClosure() : base()
		{
		}
	}
	
	/// <summary>
	/// Base class for remove closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class ConceptualDatabaseDeleteClosureBase : DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Specialized.HybridDictionary domainRoles;
		/// <summary>
		/// Constructor
		/// </summary>
		public ConceptualDatabaseDeleteClosureBase()
		{
			#region Initialize DomainData Table
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.CatalogContainsSchema.SchemaDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.SchemaContainsContent.SchemaContentDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.SchemaContainsTable.TableDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.SchemaContainsDomain.DomainDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.TableContainsColumn.ColumnDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.TableContainsConstraint.ConstraintDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.TableContainsUniquenessConstraint.UniquenessConstraintDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.TableContainsReferenceConstraint.ReferenceConstraintDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.TableContainsCheckConstraint.CheckConstraintDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.DomainContainsCheckConstraint.CheckConstraintDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ColumnHasPredefinedDataType.PredefinedDataTypeDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ReferenceConstraintTargetsTable.ReferenceConstraintDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ReferenceConstraintTargetsUniquenessConstraint.ReferenceConstraintDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ReferenceConstraintContainsColumnReference.ColumnReferenceDomainRoleId, true);
			#endregion
		}
		/// <summary>
		/// Called to ask the filter if a particular relationship from a source element should be included in the traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="sourceRoleInfo">DomainRoleInfo of the role that the source element is playing in the relationship</param>
		/// <param name="domainRelationshipInfo">DomainRelationshipInfo for the ElementLink in question</param>
		/// <param name="targetRelationship">Relationship in question</param>
		/// <returns>Yes if the relationship should be traversed</returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRelationship(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::DomainRoleInfo sourceRoleInfo, DslModeling::DomainRelationshipInfo domainRelationshipInfo, DslModeling::ElementLink targetRelationship)
		{
			return DslModeling::VisitorFilterResult.Yes;
		}
		/// <summary>
		/// Called to ask the filter if a particular role player should be Visited during traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="elementLink">Element Link that forms the relationship to the role player in question</param>
		/// <param name="targetDomainRole">DomainRoleInfo of the target role</param>
		/// <param name="targetRolePlayer">Model Element that plays the target role in the relationship</param>
		/// <returns></returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRolePlayer(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::ElementLink elementLink, DslModeling::DomainRoleInfo targetDomainRole, DslModeling::ModelElement targetRolePlayer)
		{
			if (targetDomainRole == null) throw new global::System.ArgumentNullException("targetDomainRole");
			return this.DomainRoles.Contains(targetDomainRole.Id) ? DslModeling::VisitorFilterResult.Yes : DslModeling::VisitorFilterResult.DoNotCare;
		}
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Specialized.HybridDictionary DomainRoles
		{
			get
			{
				if (this.domainRoles == null)
				{
					this.domainRoles = new global::System.Collections.Specialized.HybridDictionary();
				}
				return this.domainRoles;
			}
		}
	
	}
	/// <summary>
	/// Copy closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class ConceptualDatabaseCopyClosure : ConceptualDatabaseCopyClosureBase, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ConceptualDatabaseCopyClosure() : base()
		{
		}
	}
	/// <summary>
	/// Base class for copy closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class ConceptualDatabaseCopyClosureBase : DslModeling::CopyClosureFilter, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ConceptualDatabaseCopyClosureBase():base()
		{
		}
	}
	#endregion
		
}
namespace ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase
{
	/// <summary>
	/// DomainEnumeration: TriggerTarget
	/// The valid values for the target attribute of a trigger.
	/// </summary>
	[global::System.Serializable()]
	[global::System.ComponentModel.TypeConverter(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.EnumConverter<TriggerTarget, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Catalog>))]
	[global::System.CLSCompliant(true)]
	public enum TriggerTarget
	{
		/// <summary>
		/// OldRow
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.TriggerTarget.OldRow
		/// </summary>
		[global::System.Xml.Serialization.XmlEnum("OLD ROW")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.TriggerTarget/OldRow.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		OldRow = 0,
		/// <summary>
		/// NewRow
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.TriggerTarget.NewRow
		/// </summary>
		[global::System.Xml.Serialization.XmlEnum("NEW ROW")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.TriggerTarget/NewRow.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		NewRow = 1,
		/// <summary>
		/// OldTable
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.TriggerTarget.OldTable
		/// </summary>
		[global::System.Xml.Serialization.XmlEnum("OLD TABLE")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.TriggerTarget/OldTable.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		OldTable = 2,
		/// <summary>
		/// NewTable
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.TriggerTarget.NewTable
		/// </summary>
		[global::System.Xml.Serialization.XmlEnum("NEW TABLE")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.TriggerTarget/NewTable.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		NewTable = 3,
	}
}
namespace ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase
{
	/// <summary>
	/// DomainEnumeration: TriggerActionTime
	/// The valid values for the actionTime attribute of a trigger.
	/// </summary>
	[global::System.Serializable()]
	[global::System.ComponentModel.TypeConverter(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.EnumConverter<TriggerActionTime, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Catalog>))]
	[global::System.CLSCompliant(true)]
	public enum TriggerActionTime
	{
		/// <summary>
		/// Before
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.TriggerActionTime.Before
		/// </summary>
		[global::System.Xml.Serialization.XmlEnum("BEFORE")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.TriggerActionTime/Before.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		Before = 0,
		/// <summary>
		/// After
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.TriggerActionTime.After
		/// </summary>
		[global::System.Xml.Serialization.XmlEnum("AFTER")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.TriggerActionTime/After.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		After = 1,
	}
}
namespace ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase
{
	/// <summary>
	/// DomainEnumeration: TriggerEvent
	/// The valid values for the event attribute of a trigger.
	/// </summary>
	[global::System.Serializable()]
	[global::System.ComponentModel.TypeConverter(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.EnumConverter<TriggerEvent, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Catalog>))]
	[global::System.CLSCompliant(true)]
	public enum TriggerEvent
	{
		/// <summary>
		/// Insert
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.TriggerEvent.Insert
		/// </summary>
		[global::System.Xml.Serialization.XmlEnum("INSERT")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.TriggerEvent/Insert.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		Insert = 0,
		/// <summary>
		/// Delete
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.TriggerEvent.Delete
		/// </summary>
		[global::System.Xml.Serialization.XmlEnum("DELETE")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.TriggerEvent/Delete.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		Delete = 1,
		/// <summary>
		/// Update
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.TriggerEvent.Update
		/// </summary>
		[global::System.Xml.Serialization.XmlEnum("UPDATE")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.TriggerEvent/Update.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		Update = 2,
	}
}
namespace ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase
{
	/// <summary>
	/// DomainEnumeration: TriggerForEach
	/// The valid values for the event attribute of a trigger.
	/// </summary>
	[global::System.Serializable()]
	[global::System.ComponentModel.TypeConverter(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.EnumConverter<TriggerForEach, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Catalog>))]
	[global::System.CLSCompliant(true)]
	public enum TriggerForEach
	{
		/// <summary>
		/// Statement
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.TriggerForEach.Statement
		/// </summary>
		[global::System.Xml.Serialization.XmlEnum("STATEMENT")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.TriggerForEach/Statement.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		Statement = 0,
		/// <summary>
		/// Row
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.TriggerForEach.Row
		/// </summary>
		[global::System.Xml.Serialization.XmlEnum("ROW")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.TriggerForEach/Row.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		Row = 1,
	}
}
namespace ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase
{
	/// <summary>
	/// DomainEnumeration: ColumnOrdering
	/// Description for
	/// ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ColumnOrdering
	/// </summary>
	[global::System.ComponentModel.TypeConverter(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.EnumConverter<ColumnOrdering, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Catalog>))]
	[global::System.CLSCompliant(true)]
	public enum ColumnOrdering
	{
		/// <summary>
		/// AutoSchemaDefault
		/// Sort columns using the default column ordering specific with schema.
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ColumnOrdering/AutoSchemaDefault.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		AutoSchemaDefault = 0,
		/// <summary>
		/// Custom
		/// Lock the current column order and place new columns at the end of the table.
		/// Remember user-specified column order.
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ColumnOrdering/Custom.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		Custom = 1,
		/// <summary>
		/// AutoPrimaryMandatoryUniqueOther
		/// Automatically order columns with primary columns first, then remaining mandatory
		/// columns, then other columns under uniqueness constraints, then all other
		/// columns. Columns are sorted alphabetically by column name within each group.
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ColumnOrdering/AutoPrimaryMandatoryUniqueOther.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		AutoPrimaryMandatoryUniqueOther = 2,
		/// <summary>
		/// AutoPrimaryMandatoryOther
		/// Automatically order columns with primary columns first, then remaining mandatory
		/// columns, then all other columns. Columns are sorted alphabetically by column
		/// name within each group.
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ColumnOrdering/AutoPrimaryMandatoryOther.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		AutoPrimaryMandatoryOther = 3,
		/// <summary>
		/// AutoPrimaryUniqueMandatoryOther
		/// Automatically order columns with primary columns first, then other columns under
		/// uniqueness constraints, then remaining mandatory columns, then all other
		/// columns. Columns are sorted alphabetically by column name within each group.
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ColumnOrdering/AutoPrimaryUniqueMandatoryOther.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		AutoPrimaryUniqueMandatoryOther = 4,
		/// <summary>
		/// AutoPrimaryUniqueOther
		/// Automatically order columns with primary columns first, then remaining columns
		/// under uniqueness constraints, then all other columns. Columns are sorted
		/// alphabetically by column name within each group.
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ColumnOrdering/AutoPrimaryUniqueOther.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		AutoPrimaryUniqueOther = 5,
		/// <summary>
		/// AutoPrimaryOther
		/// Automatically order columns with primary columns first, then all other columns.
		/// Columns are sorted alphabetically by column name within each group.
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ColumnOrdering/AutoPrimaryOther.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		AutoPrimaryOther = 6,
		/// <summary>
		/// AutoMandatoryOther
		/// Automatically order columns with primary columns first, then remaining mandatory
		/// columns, then all other columns. Columns are sorted alphabetically by column
		/// name within each group.
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ColumnOrdering/AutoMandatoryOther.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		AutoMandatoryOther = 7,
		/// <summary>
		/// AutoByColumnName
		/// Automatically order columns by column name only.
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ColumnOrdering/AutoByColumnName.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		AutoByColumnName = 8,
	}
}
namespace ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase
{
	/// <summary>
	/// DomainEnumeration: AutomaticColumnOrdering
	/// Description for
	/// ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.AutomaticColumnOrdering
	/// </summary>
	[global::System.ComponentModel.TypeConverter(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.EnumConverter<AutomaticColumnOrdering, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Catalog>))]
	[global::System.CLSCompliant(true)]
	public enum AutomaticColumnOrdering
	{
		/// <summary>
		/// PrimaryMandatoryUniqueOther
		/// (Default) Automatically order columns with primary columns first, then remaining
		/// mandatory columns, then other columns under uniqueness constraints, then all
		/// other columns. Columns are sorted alphabetically by column name within each
		/// group.
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.AutomaticColumnOrdering/PrimaryMandatoryUniqueOther.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		PrimaryMandatoryUniqueOther = 0,
		/// <summary>
		/// PrimaryMandatoryOther
		/// Automatically order columns with primary columns first, then remaining mandatory
		/// columns, then all other columns. Columns are sorted alphabetically by column
		/// name within each group.
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.AutomaticColumnOrdering/PrimaryMandatoryOther.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		PrimaryMandatoryOther = 1,
		/// <summary>
		/// PrimaryUniqueMandatoryOther
		/// Automatically order columns with primary columns first, then other columns under
		/// uniqueness constraints, then remaining mandatory columns, then all other
		/// columns. Columns are sorted alphabetically by column name within each group.
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.AutomaticColumnOrdering/PrimaryUniqueMandatoryOther.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		PrimaryUniqueMandatoryOther = 2,
		/// <summary>
		/// PrimaryUniqueOther
		/// Automatically order columns with primary columns first, then remaining columns
		/// under uniqueness constraints, then all other columns. Columns are sorted
		/// alphabetically by column name within each group.
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.AutomaticColumnOrdering/PrimaryUniqueOther.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		PrimaryUniqueOther = 3,
		/// <summary>
		/// PrimaryOther
		/// Automatically order columns with primary columns first, then all other columns.
		/// Columns are sorted alphabetically by column name within each group.
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.AutomaticColumnOrdering/PrimaryOther.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		PrimaryOther = 4,
		/// <summary>
		/// MandatoryOther
		/// Automatically order columns with primary columns first, then remaining mandatory
		/// columns, then all other columns. Columns are sorted alphabetically by column
		/// name within each group.
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.AutomaticColumnOrdering/MandatoryOther.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		MandatoryOther = 5,
		/// <summary>
		/// ByColumnName
		/// Automatically order columns by column name only.
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.AutomaticColumnOrdering/ByColumnName.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		ByColumnName = 6,
	}
}
namespace ORMSolutions.ORMArchitect.RelationalModels.DatabaseDefinition
{
	/// <summary>
	/// DomainEnumeration: SqlDataAccessIndication
	/// Used to indicate the type of access to SQL-data for a SQL-invoked routine.
	/// </summary>
	[global::System.Serializable()]
	[global::System.ComponentModel.TypeConverter(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.EnumConverter<SqlDataAccessIndication, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Catalog>))]
	[global::System.CLSCompliant(true)]
	public enum SqlDataAccessIndication
	{
		/// <summary>
		/// NoSql
		/// Indicates that the SQL-invoked routine does not possibly contain SQL.
		/// </summary>
		[global::System.Xml.Serialization.XmlEnum("NO SQL")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.DatabaseDefinition.SqlDataAccessIndication/NoSql.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		NoSql = 0,
		/// <summary>
		/// ContainsSql
		/// Indicates that the SQL-invoked routine possibly contains SQL.
		/// </summary>
		[global::System.Xml.Serialization.XmlEnum("CONTAINS SQL")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.DatabaseDefinition.SqlDataAccessIndication/ContainsSql.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		ContainsSql = 1,
		/// <summary>
		/// ReadsSqlData
		/// Indicates that the SQL-invoked routine possibly reads SQL-data.
		/// </summary>
		[global::System.Xml.Serialization.XmlEnum("READS SQL DATA")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.DatabaseDefinition.SqlDataAccessIndication/ReadsSqlData.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		ReadsSqlData = 2,
		/// <summary>
		/// ModifiesSqlData
		/// Indicates that the SQL-invoked routine possibly modified SQL-data.
		/// </summary>
		[global::System.Xml.Serialization.XmlEnum("MODIFIES SQL DATA")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.DatabaseDefinition.SqlDataAccessIndication/ModifiesSqlData.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		ModifiesSqlData = 3,
	}
}
namespace ORMSolutions.ORMArchitect.RelationalModels.DatabaseDefinition
{
	/// <summary>
	/// DomainEnumeration: PredefinedType
	/// Description for
	/// ORMSolutions.ORMArchitect.RelationalModels.DatabaseDefinition.PredefinedType
	/// </summary>
	[global::System.Serializable()]
	[global::System.ComponentModel.TypeConverter(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.EnumConverter<PredefinedType, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Catalog>))]
	[global::System.CLSCompliant(true)]
	public enum PredefinedType
	{
		/// <summary>
		/// StringMask
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.DatabaseDefinition.PredefinedType.StringMask
		/// </summary>
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.DatabaseDefinition.PredefinedType/StringMask.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		StringMask = 1140850688,
		/// <summary>
		/// CharacterStringMask
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.DatabaseDefinition.PredefinedType.CharacterStringMask
		/// </summary>
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.DatabaseDefinition.PredefinedType/CharacterStringMask.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		CharacterStringMask = 67108864,
		/// <summary>
		/// BinaryStringMask
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.DatabaseDefinition.PredefinedType.BinaryStringMask
		/// </summary>
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.DatabaseDefinition.PredefinedType/BinaryStringMask.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		BinaryStringMask = 1073741824,
		/// <summary>
		/// LargeObjectStringMask
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.DatabaseDefinition.PredefinedType.LargeObjectStringMask
		/// </summary>
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.DatabaseDefinition.PredefinedType/LargeObjectStringMask.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		LargeObjectStringMask = 536870912,
		/// <summary>
		/// NumericMask
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.DatabaseDefinition.PredefinedType.NumericMask
		/// </summary>
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.DatabaseDefinition.PredefinedType/NumericMask.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		NumericMask = 402653184,
		/// <summary>
		/// ExactNumericMask
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.DatabaseDefinition.PredefinedType.ExactNumericMask
		/// </summary>
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.DatabaseDefinition.PredefinedType/ExactNumericMask.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		ExactNumericMask = 268435456,
		/// <summary>
		/// ApproximateNumericMask
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.DatabaseDefinition.PredefinedType.ApproximateNumericMask
		/// </summary>
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.DatabaseDefinition.PredefinedType/ApproximateNumericMask.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		ApproximateNumericMask = 134217728,
		/// <summary>
		/// Character
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.DatabaseDefinition.PredefinedType.Character
		/// </summary>
		[global::System.Xml.Serialization.XmlEnum("CHARACTER")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.DatabaseDefinition.PredefinedType/Character.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		Character = 67108865,
		/// <summary>
		/// CharacterVarying
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.DatabaseDefinition.PredefinedType.CharacterVarying
		/// </summary>
		[global::System.Xml.Serialization.XmlEnum("CHARACTER VARYING")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.DatabaseDefinition.PredefinedType/CharacterVarying.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		CharacterVarying = 67108866,
		/// <summary>
		/// CharacterLargeObject
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.DatabaseDefinition.PredefinedType.CharacterLargeObject
		/// </summary>
		[global::System.Xml.Serialization.XmlEnum("CHARACTER LARGE OBJECT")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.DatabaseDefinition.PredefinedType/CharacterLargeObject.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		CharacterLargeObject = 603979779,
		/// <summary>
		/// BinaryLargeObject
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.DatabaseDefinition.PredefinedType.BinaryLargeObject
		/// </summary>
		[global::System.Xml.Serialization.XmlEnum("BINARY LARGE OBJECT")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.DatabaseDefinition.PredefinedType/BinaryLargeObject.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		BinaryLargeObject = 1610612740,
		/// <summary>
		/// Numeric
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.DatabaseDefinition.PredefinedType.Numeric
		/// </summary>
		[global::System.Xml.Serialization.XmlEnum("NUMERIC")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.DatabaseDefinition.PredefinedType/Numeric.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		Numeric = 268435461,
		/// <summary>
		/// Decimal
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.DatabaseDefinition.PredefinedType.Decimal
		/// </summary>
		[global::System.Xml.Serialization.XmlEnum("DECIMAL")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.DatabaseDefinition.PredefinedType/Decimal.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		Decimal = 268435462,
		/// <summary>
		/// SmallInt
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.DatabaseDefinition.PredefinedType.SmallInt
		/// </summary>
		[global::System.Xml.Serialization.XmlEnum("SMALLINT")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.DatabaseDefinition.PredefinedType/SmallInt.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		SmallInt = 268435463,
		/// <summary>
		/// Integer
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.DatabaseDefinition.PredefinedType.Integer
		/// </summary>
		[global::System.Xml.Serialization.XmlEnum("INTEGER")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.DatabaseDefinition.PredefinedType/Integer.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		Integer = 268435464,
		/// <summary>
		/// BigInt
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.DatabaseDefinition.PredefinedType.BigInt
		/// </summary>
		[global::System.Xml.Serialization.XmlEnum("BIGINT")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.DatabaseDefinition.PredefinedType/BigInt.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		BigInt = 268435465,
		/// <summary>
		/// Float
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.DatabaseDefinition.PredefinedType.Float
		/// </summary>
		[global::System.Xml.Serialization.XmlEnum("FLOAT")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.DatabaseDefinition.PredefinedType/Float.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		Float = 134217738,
		/// <summary>
		/// Real
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.DatabaseDefinition.PredefinedType.Real
		/// </summary>
		[global::System.Xml.Serialization.XmlEnum("REAL")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.DatabaseDefinition.PredefinedType/Real.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		Real = 134217739,
		/// <summary>
		/// DoublePrecision
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.DatabaseDefinition.PredefinedType.DoublePrecision
		/// </summary>
		[global::System.Xml.Serialization.XmlEnum("DOUBLE PRECISION")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.DatabaseDefinition.PredefinedType/DoublePrecision.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		DoublePrecision = 134217740,
		/// <summary>
		/// Boolean
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.DatabaseDefinition.PredefinedType.Boolean
		/// </summary>
		[global::System.Xml.Serialization.XmlEnum("BOOLEAN")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.DatabaseDefinition.PredefinedType/Boolean.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		Boolean = 13,
	}
}

