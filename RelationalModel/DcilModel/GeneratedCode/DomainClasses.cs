#region Common Public License Copyright Notice
/**************************************************************************\
* Natural Object-Role Modeling Architect for Visual Studio                 *
*                                                                          *
* Copyright © Neumont University. All rights reserved.                     *
* Copyright © ORM Solutions, LLC. All rights reserved.                     *
*                                                                          *
* The use and distribution terms for this software are covered by the      *
* Common Public License 1.0 (http://opensource.org/licenses/cpl) which     *
* can be found in the file CPL.txt at the root of this distribution.       *
* By using this software in any fashion, you are agreeing to be bound by   *
* the terms of this license.                                               *
*                                                                          *
* You must not remove this notice, or any other, from this software.       *
\**************************************************************************/
#endregion
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase
{
	/// <summary>
	/// DomainClass ConceptualDatabaseModelElement
	/// Base class for ConceptualData &lt;see cref='DslModeling::ModelElement'/&gt;s.
	/// </summary>
	[global::System.ComponentModel.TypeDescriptionProvider(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.ElementTypeDescriptionProvider<ConceptualDatabaseModelElement, Design.ConceptualDatabaseElementTypeDescriptor<ConceptualDatabaseModelElement>>))]
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseModelElement.DisplayName", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseModelElement.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("35796255-f8fb-4d5e-a2ce-b3d48911ebeb")]
	public abstract partial class ConceptualDatabaseModelElement : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ConceptualDatabaseModelElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x35796255, 0xf8fb, 0x4d5e, 0xa2, 0xce, 0xb3, 0xd4, 0x89, 0x11, 0xeb, 0xeb);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ConceptualDatabaseModelElement(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase
{
	/// <summary>
	/// DomainClass Catalog
	/// A named collection of schemas (commonly referred to as a database). Equivalent
	/// to a 'CATALOG' in the SQL Standard.
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Catalog.DisplayName", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Catalog.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("0a5dca22-af17-4c53-9baf-b7da1650119c")]
	public partial class Catalog : ConceptualDatabaseModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Catalog domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0a5dca22, 0xaf17, 0x4c53, 0x9b, 0xaf, 0xb7, 0xda, 0x16, 0x50, 0x11, 0x9c);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Catalog(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Catalog(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xaedfa9d8, 0x02de, 0x47ec, 0xab, 0xd0, 0xb7, 0x83, 0x99, 0xc7, 0xf9, 0xeb);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// The name of the catalog.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Catalog/Name.DisplayName", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Catalog/Name.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("aedfa9d8-02de-47ec-abd0-b78399c7f9eb")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Catalog.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Catalog, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Catalog.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Catalog.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Catalog element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Catalog element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SchemaCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of SchemaCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.CatalogContainsSchema.Catalog
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Schema> SchemaCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<Schema>(this, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.CatalogContainsSchema.CatalogDomainRoleId);
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase
{
	/// <summary>
	/// DomainClass Schema
	/// Equivalent to a 'SCHEMA' in the SQL Standard.
	/// </summary>
	[global::System.ComponentModel.TypeDescriptionProvider(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.ElementTypeDescriptionProvider<Schema, Design.SchemaTypeDescriptor<Schema>>))]
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Schema.DisplayName", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Schema.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("ddbaced7-c013-419b-a305-9937379038d0")]
	public partial class Schema : ConceptualDatabaseModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Schema domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xddbaced7, 0xc013, 0x419b, 0xa3, 0x05, 0x99, 0x37, 0x37, 0x90, 0x38, 0xd0);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Schema(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Schema(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xddee5918, 0x35b9, 0x476c, 0xbb, 0x21, 0x31, 0xe9, 0xe1, 0x32, 0xfa, 0x6f);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// The name of the schema.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Schema/Name.DisplayName", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Schema/Name.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("ddee5918-35b9-476c-bb21-31e9e132fa6f")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Schema.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Schema, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Schema.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Schema.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Schema element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Schema element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DefaultColumnOrder domain property code
		
		/// <summary>
		/// DefaultColumnOrder domain property Id.
		/// </summary>
		public static readonly global::System.Guid DefaultColumnOrderDomainPropertyId = new global::System.Guid(0x7dc89632, 0xaf5f, 0x44fa, 0x8f, 0x30, 0x03, 0xb1, 0xd0, 0x53, 0x88, 0x6b);
		
		/// <summary>
		/// Storage for DefaultColumnOrder
		/// </summary>
		private AutomaticColumnOrdering defaultColumnOrderPropertyStorage = ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.AutomaticColumnOrdering.PrimaryMandatoryUniqueOther;
		
		/// <summary>
		/// Gets or sets the value of DefaultColumnOrder domain property.
		/// Determine the default column sort order for tables in this schema.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Schema/DefaultColumnOrder.DisplayName", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Schema/DefaultColumnOrder.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.AutomaticColumnOrdering.PrimaryMandatoryUniqueOther)]
		[DslModeling::DomainObjectId("7dc89632-af5f-44fa-8f30-03b1d053886b")]
		public AutomaticColumnOrdering DefaultColumnOrder
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return defaultColumnOrderPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DefaultColumnOrderPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Schema.DefaultColumnOrder domain property.
		/// </summary>
		internal sealed partial class DefaultColumnOrderPropertyHandler : DslModeling::DomainPropertyValueHandler<Schema, AutomaticColumnOrdering>
		{
			private DefaultColumnOrderPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Schema.DefaultColumnOrder domain property value handler.
			/// </summary>
			public static readonly DefaultColumnOrderPropertyHandler Instance = new DefaultColumnOrderPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Schema.DefaultColumnOrder domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DefaultColumnOrderDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed AutomaticColumnOrdering GetValue(Schema element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.defaultColumnOrderPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Schema element, AutomaticColumnOrdering newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				AutomaticColumnOrdering oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.defaultColumnOrderPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region CustomName domain property code
		
		/// <summary>
		/// CustomName domain property Id.
		/// </summary>
		public static readonly global::System.Guid CustomNameDomainPropertyId = new global::System.Guid(0x9768cf92, 0x384d, 0x4202, 0x86, 0x80, 0xe5, 0x99, 0xad, 0x24, 0x73, 0x6d);
		
		/// <summary>
		/// Storage for CustomName
		/// </summary>
		private global::System.Boolean customNamePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of CustomName domain property.
		/// The generated schema name is modified by the user.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Schema/CustomName.DisplayName", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Schema/CustomName.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("9768cf92-384d-4202-8680-e599ad24736d")]
		public global::System.Boolean CustomName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return customNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CustomNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Schema.CustomName domain property.
		/// </summary>
		internal sealed partial class CustomNamePropertyHandler : DslModeling::DomainPropertyValueHandler<Schema, global::System.Boolean>
		{
			private CustomNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Schema.CustomName domain property value handler.
			/// </summary>
			public static readonly CustomNamePropertyHandler Instance = new CustomNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Schema.CustomName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CustomNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(Schema element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.customNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Schema element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.customNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region EditName domain property code
		
		/// <summary>
		/// EditName domain property Id.
		/// </summary>
		public static readonly global::System.Guid EditNameDomainPropertyId = new global::System.Guid(0x42bfd5fc, 0x04dc, 0x4c35, 0xb4, 0x2f, 0x40, 0xc9, 0x1f, 0x7b, 0x36, 0x35);
		
		/// <summary>
		/// Gets or sets the value of EditName domain property.
		/// The name of the schema.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Schema/EditName.DisplayName", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Schema/EditName.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("42bfd5fc-04dc-4c35-b42f-40c91f7b3635")]
		public global::System.String EditName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return EditNamePropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				EditNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Schema.EditName domain property.
		/// </summary>
		internal sealed partial class EditNamePropertyHandler : DslModeling::DomainPropertyValueHandler<Schema, global::System.String>
		{
			private EditNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Schema.EditName domain property value handler.
			/// </summary>
			public static readonly EditNamePropertyHandler Instance = new EditNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Schema.EditName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return EditNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Schema element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for EditName because its Kind is
				// set to CustomStorage. Please provide the GetEditNameValue()
				// method on the domain class.
				return element.GetEditNameValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Schema element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for EditName because its Kind is
					// set to CustomStorage. Please provide the SetEditNameValue()
					// method on the domain class.
					element.SetEditNameValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Catalog opposite domain role accessor
		/// <summary>
		/// Gets or sets Catalog.
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.CatalogContainsSchema.Schema
		/// </summary>
		public virtual Catalog Catalog
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.CatalogContainsSchema.SchemaDomainRoleId) as Catalog;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.CatalogContainsSchema.SchemaDomainRoleId, value);
			}
		}
		#endregion
		#region TableCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of TableCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.SchemaContainsTable.Schema
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Table> TableCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<Table>(this, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.SchemaContainsTable.SchemaDomainRoleId);
			}
		}
		#endregion
		#region DomainCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of DomainCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.SchemaContainsDomain.Schema
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Domain> DomainCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<Domain>(this, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.SchemaContainsDomain.SchemaDomainRoleId);
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase
{
	/// <summary>
	/// DomainClass Table
	/// Equivalent to a 'TABLE' in the SQL Standard.
	/// </summary>
	[global::System.ComponentModel.TypeDescriptionProvider(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.ElementTypeDescriptionProvider<Table, Design.TableTypeDescriptor<Table>>))]
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Table.DisplayName", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Table.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("99e0b931-a6b9-4248-b6de-5afd95bbb21a")]
	public partial class Table : ConceptualDatabaseModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Table domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x99e0b931, 0xa6b9, 0x4248, 0xb6, 0xde, 0x5a, 0xfd, 0x95, 0xbb, 0xb2, 0x1a);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Table(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Table(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x0a14b5d9, 0x1988, 0x4736, 0xa2, 0x43, 0xd7, 0x14, 0x7d, 0xcc, 0x74, 0xe9);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// The name of the table.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Table/Name.DisplayName", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Table/Name.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("0a14b5d9-1988-4736-a243-d7147dcc74e9")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Table.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Table, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Table.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Table.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Table element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Table element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region CustomName domain property code
		
		/// <summary>
		/// CustomName domain property Id.
		/// </summary>
		public static readonly global::System.Guid CustomNameDomainPropertyId = new global::System.Guid(0x46eadfda, 0xf440, 0x46fd, 0x8d, 0x54, 0x89, 0x2e, 0xa5, 0x98, 0x62, 0x6b);
		
		/// <summary>
		/// Storage for CustomName
		/// </summary>
		private global::System.Boolean customNamePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of CustomName domain property.
		/// The generated table name is modified by the user.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Table/CustomName.DisplayName", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Table/CustomName.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("46eadfda-f440-46fd-8d54-892ea598626b")]
		public global::System.Boolean CustomName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return customNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CustomNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Table.CustomName domain property.
		/// </summary>
		internal sealed partial class CustomNamePropertyHandler : DslModeling::DomainPropertyValueHandler<Table, global::System.Boolean>
		{
			private CustomNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Table.CustomName domain property value handler.
			/// </summary>
			public static readonly CustomNamePropertyHandler Instance = new CustomNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Table.CustomName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CustomNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(Table element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.customNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Table element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.customNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region EditName domain property code
		
		/// <summary>
		/// EditName domain property Id.
		/// </summary>
		public static readonly global::System.Guid EditNameDomainPropertyId = new global::System.Guid(0xe9cabb40, 0x6e7d, 0x4ae3, 0xa5, 0x6f, 0x5d, 0x98, 0x34, 0x27, 0x04, 0x74);
		
		/// <summary>
		/// Gets or sets the value of EditName domain property.
		/// The name of the table.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Table/EditName.DisplayName", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Table/EditName.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("e9cabb40-6e7d-4ae3-a56f-5d9834270474")]
		public global::System.String EditName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return EditNamePropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				EditNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Table.EditName domain property.
		/// </summary>
		internal sealed partial class EditNamePropertyHandler : DslModeling::DomainPropertyValueHandler<Table, global::System.String>
		{
			private EditNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Table.EditName domain property value handler.
			/// </summary>
			public static readonly EditNamePropertyHandler Instance = new EditNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Table.EditName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return EditNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Table element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for EditName because its Kind is
				// set to CustomStorage. Please provide the GetEditNameValue()
				// method on the domain class.
				return element.GetEditNameValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Table element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for EditName because its Kind is
					// set to CustomStorage. Please provide the SetEditNameValue()
					// method on the domain class.
					element.SetEditNameValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ColumnOrder domain property code
		
		/// <summary>
		/// ColumnOrder domain property Id.
		/// </summary>
		public static readonly global::System.Guid ColumnOrderDomainPropertyId = new global::System.Guid(0x9c49935a, 0x631f, 0x434b, 0x93, 0xa3, 0xa0, 0x93, 0xf7, 0x41, 0xb5, 0x72);
		
		/// <summary>
		/// Storage for ColumnOrder
		/// </summary>
		private ColumnOrdering columnOrderPropertyStorage = ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ColumnOrdering.AutoSchemaDefault;
		
		/// <summary>
		/// Gets or sets the value of ColumnOrder domain property.
		/// Determine how columns are sorted in this table.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Table/ColumnOrder.DisplayName", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Table/ColumnOrder.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ColumnOrdering.AutoSchemaDefault)]
		[DslModeling::DomainObjectId("9c49935a-631f-434b-93a3-a093f741b572")]
		public ColumnOrdering ColumnOrder
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return columnOrderPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ColumnOrderPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Table.ColumnOrder domain property.
		/// </summary>
		internal sealed partial class ColumnOrderPropertyHandler : DslModeling::DomainPropertyValueHandler<Table, ColumnOrdering>
		{
			private ColumnOrderPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Table.ColumnOrder domain property value handler.
			/// </summary>
			public static readonly ColumnOrderPropertyHandler Instance = new ColumnOrderPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Table.ColumnOrder domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ColumnOrderDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed ColumnOrdering GetValue(Table element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.columnOrderPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Table element, ColumnOrdering newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				ColumnOrdering oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.columnOrderPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Schema opposite domain role accessor
		/// <summary>
		/// Gets or sets Schema.
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.SchemaContainsTable.Table
		/// </summary>
		public virtual Schema Schema
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.SchemaContainsTable.TableDomainRoleId) as Schema;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.SchemaContainsTable.TableDomainRoleId, value);
			}
		}
		#endregion
		#region ColumnCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of ColumnCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.TableContainsColumn.Table
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Column> ColumnCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<Column>(this, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.TableContainsColumn.TableDomainRoleId);
			}
		}
		#endregion
		#region UniquenessConstraintCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of UniquenessConstraintCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.TableContainsUniquenessConstraint.Table
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<UniquenessConstraint> UniquenessConstraintCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<UniquenessConstraint>(this, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.TableContainsUniquenessConstraint.TableDomainRoleId);
			}
		}
		#endregion
		#region ReferenceConstraintCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of ReferenceConstraintCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.TableContainsReferenceConstraint.Table
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ReferenceConstraint> ReferenceConstraintCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ReferenceConstraint>(this, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.TableContainsReferenceConstraint.TableDomainRoleId);
			}
		}
		#endregion
		#region CheckConstraintCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of CheckConstraintCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.TableContainsCheckConstraint.Table
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<CheckConstraint> CheckConstraintCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<CheckConstraint>(this, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.TableContainsCheckConstraint.TableDomainRoleId);
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase
{
	/// <summary>
	/// DomainClass Column
	/// Equivalent to a 'COLUMN' in the SQL Standard.
	/// </summary>
	[global::System.ComponentModel.TypeDescriptionProvider(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.ElementTypeDescriptionProvider<Column, Design.ColumnTypeDescriptor<Column>>))]
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Column.DisplayName", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Column.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("16628bd3-d761-4c6a-816e-c98aefbadc41")]
	public partial class Column : ConceptualDatabaseModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Column domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x16628bd3, 0xd761, 0x4c6a, 0x81, 0x6e, 0xc9, 0x8a, 0xef, 0xba, 0xdc, 0x41);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Column(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Column(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x3f8b881e, 0x244c, 0x4b4e, 0x96, 0xe9, 0x05, 0x14, 0x7d, 0x4c, 0x64, 0x71);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// The name of the column.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Column/Name.DisplayName", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Column/Name.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("3f8b881e-244c-4b4e-96e9-05147d4c6471")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Column.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Column, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Column.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Column.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Column element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Column element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region CustomName domain property code
		
		/// <summary>
		/// CustomName domain property Id.
		/// </summary>
		public static readonly global::System.Guid CustomNameDomainPropertyId = new global::System.Guid(0xadaaea18, 0x1ec3, 0x48e5, 0xb0, 0x5e, 0xf7, 0x6d, 0xca, 0xe3, 0x97, 0xf0);
		
		/// <summary>
		/// Storage for CustomName
		/// </summary>
		private global::System.Boolean customNamePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of CustomName domain property.
		/// The generated table name is modified by the user.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Column/CustomName.DisplayName", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Column/CustomName.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("adaaea18-1ec3-48e5-b05e-f76dcae397f0")]
		public global::System.Boolean CustomName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return customNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CustomNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Column.CustomName domain property.
		/// </summary>
		internal sealed partial class CustomNamePropertyHandler : DslModeling::DomainPropertyValueHandler<Column, global::System.Boolean>
		{
			private CustomNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Column.CustomName domain property value handler.
			/// </summary>
			public static readonly CustomNamePropertyHandler Instance = new CustomNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Column.CustomName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CustomNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(Column element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.customNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Column element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.customNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region EditName domain property code
		
		/// <summary>
		/// EditName domain property Id.
		/// </summary>
		public static readonly global::System.Guid EditNameDomainPropertyId = new global::System.Guid(0x261d5e44, 0x2426, 0x4298, 0xa0, 0x55, 0x79, 0x6a, 0xb7, 0x02, 0xf5, 0x56);
		
		/// <summary>
		/// Gets or sets the value of EditName domain property.
		/// The name of the column.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Column/EditName.DisplayName", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Column/EditName.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("261d5e44-2426-4298-a055-796ab702f556")]
		public global::System.String EditName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return EditNamePropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				EditNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Column.EditName domain property.
		/// </summary>
		internal sealed partial class EditNamePropertyHandler : DslModeling::DomainPropertyValueHandler<Column, global::System.String>
		{
			private EditNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Column.EditName domain property value handler.
			/// </summary>
			public static readonly EditNamePropertyHandler Instance = new EditNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Column.EditName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return EditNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Column element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for EditName because its Kind is
				// set to CustomStorage. Please provide the GetEditNameValue()
				// method on the domain class.
				return element.GetEditNameValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Column element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for EditName because its Kind is
					// set to CustomStorage. Please provide the SetEditNameValue()
					// method on the domain class.
					element.SetEditNameValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsNullable domain property code
		
		/// <summary>
		/// IsNullable domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsNullableDomainPropertyId = new global::System.Guid(0x2fd3c751, 0xbd3d, 0x44ea, 0x94, 0xe1, 0x6f, 0x31, 0x8f, 0xe2, 0x5a, 0x07);
		
		/// <summary>
		/// Storage for IsNullable
		/// </summary>
		private global::System.Boolean isNullablePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsNullable domain property.
		/// Is NULL a valid value for this column?
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Column/IsNullable.DisplayName", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Column/IsNullable.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("2fd3c751-bd3d-44ea-94e1-6f318fe25a07")]
		public global::System.Boolean IsNullable
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isNullablePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsNullablePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Column.IsNullable domain property.
		/// </summary>
		internal sealed partial class IsNullablePropertyHandler : DslModeling::DomainPropertyValueHandler<Column, global::System.Boolean>
		{
			private IsNullablePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Column.IsNullable domain property value handler.
			/// </summary>
			public static readonly IsNullablePropertyHandler Instance = new IsNullablePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Column.IsNullable domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsNullableDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(Column element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isNullablePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Column element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isNullablePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsIdentity domain property code
		
		/// <summary>
		/// IsIdentity domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsIdentityDomainPropertyId = new global::System.Guid(0xbead460a, 0xe2ba, 0x417d, 0xb3, 0x6e, 0x18, 0x28, 0x33, 0x21, 0x7f, 0x9a);
		
		/// <summary>
		/// Storage for IsIdentity
		/// </summary>
		private global::System.Boolean isIdentityPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsIdentity domain property.
		/// Is this an IDENTITY column?
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Column/IsIdentity.DisplayName", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Column/IsIdentity.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("bead460a-e2ba-417d-b36e-182833217f9a")]
		public global::System.Boolean IsIdentity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isIdentityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsIdentityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Column.IsIdentity domain property.
		/// </summary>
		internal sealed partial class IsIdentityPropertyHandler : DslModeling::DomainPropertyValueHandler<Column, global::System.Boolean>
		{
			private IsIdentityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Column.IsIdentity domain property value handler.
			/// </summary>
			public static readonly IsIdentityPropertyHandler Instance = new IsIdentityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Column.IsIdentity domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsIdentityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(Column element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isIdentityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Column element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isIdentityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DataType domain property code
		
		/// <summary>
		/// DataType domain property Id.
		/// </summary>
		public static readonly global::System.Guid DataTypeDomainPropertyId = new global::System.Guid(0x02e07257, 0x8739, 0x4708, 0x84, 0x74, 0x51, 0x45, 0x18, 0x3b, 0xac, 0xf5);
		
		/// <summary>
		/// Gets or sets the value of DataType domain property.
		/// The DataType for this Column. Corresponds to the DataType of the terminal
		/// ValueType in the FactType path for this Column.
		///     Changing this DataType changes the DataType for all columns that terminate
		/// at the same ValueType.
		///     This is a portable DataType. The final physical DataType is dependent on the
		/// generation target.
		/// </summary>
		[global::System.ComponentModel.Editor(typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Design.ColumnDataTypePicker), typeof(global::System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Column/DataType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Column/DataType.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("02e07257-8739-4708-8474-5145183bacf5")]
		public global::System.Object DataType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DataTypePropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DataTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Column.DataType domain property.
		/// </summary>
		internal sealed partial class DataTypePropertyHandler : DslModeling::DomainPropertyValueHandler<Column, global::System.Object>
		{
			private DataTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Column.DataType domain property value handler.
			/// </summary>
			public static readonly DataTypePropertyHandler Instance = new DataTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Column.DataType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DataTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Object GetValue(Column element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for DataType because its Kind is
				// set to CustomStorage. Please provide the GetDataTypeValue()
				// method on the domain class.
				return element.GetDataTypeValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Column element, global::System.Object newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Object oldValue = GetValue(element);
				// Don't use != with object properties
				if (!global::System.Object.Equals(newValue, oldValue))
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for DataType because its Kind is
					// set to CustomStorage. Please provide the SetDataTypeValue()
					// method on the domain class.
					element.SetDataTypeValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DataTypeScale domain property code
		
		/// <summary>
		/// DataTypeScale domain property Id.
		/// </summary>
		public static readonly global::System.Guid DataTypeScaleDomainPropertyId = new global::System.Guid(0xa30271e0, 0x613d, 0x4198, 0x91, 0x47, 0x9c, 0x67, 0xa8, 0xbf, 0x0d, 0x3f);
		
		/// <summary>
		/// Gets or sets the value of DataTypeScale domain property.
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Column.DataTypeScale
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Column/DataTypeScale.DisplayName", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Column/DataTypeScale.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("a30271e0-613d-4198-9147-9c67a8bf0d3f")]
		public global::System.Int32 DataTypeScale
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DataTypeScalePropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DataTypeScalePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Column.DataTypeScale domain property.
		/// </summary>
		internal sealed partial class DataTypeScalePropertyHandler : DslModeling::DomainPropertyValueHandler<Column, global::System.Int32>
		{
			private DataTypeScalePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Column.DataTypeScale domain property value handler.
			/// </summary>
			public static readonly DataTypeScalePropertyHandler Instance = new DataTypeScalePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Column.DataTypeScale domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DataTypeScaleDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(Column element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for DataTypeScale because its Kind is
				// set to CustomStorage. Please provide the GetDataTypeScaleValue()
				// method on the domain class.
				return element.GetDataTypeScaleValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Column element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for DataTypeScale because its Kind is
					// set to CustomStorage. Please provide the SetDataTypeScaleValue()
					// method on the domain class.
					element.SetDataTypeScaleValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DataTypeLength domain property code
		
		/// <summary>
		/// DataTypeLength domain property Id.
		/// </summary>
		public static readonly global::System.Guid DataTypeLengthDomainPropertyId = new global::System.Guid(0x1a3aa9d0, 0xa2b9, 0x46a5, 0x8b, 0x77, 0x55, 0xba, 0x9f, 0x5d, 0x4d, 0x98);
		
		/// <summary>
		/// Gets or sets the value of DataTypeLength domain property.
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Column.DataTypeLength
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Column/DataTypeLength.DisplayName", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Column/DataTypeLength.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("1a3aa9d0-a2b9-46a5-8b77-55ba9f5d4d98")]
		public global::System.Int32 DataTypeLength
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DataTypeLengthPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DataTypeLengthPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Column.DataTypeLength domain property.
		/// </summary>
		internal sealed partial class DataTypeLengthPropertyHandler : DslModeling::DomainPropertyValueHandler<Column, global::System.Int32>
		{
			private DataTypeLengthPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Column.DataTypeLength domain property value handler.
			/// </summary>
			public static readonly DataTypeLengthPropertyHandler Instance = new DataTypeLengthPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Column.DataTypeLength domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DataTypeLengthDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(Column element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for DataTypeLength because its Kind is
				// set to CustomStorage. Please provide the GetDataTypeLengthValue()
				// method on the domain class.
				return element.GetDataTypeLengthValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Column element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for DataTypeLength because its Kind is
					// set to CustomStorage. Please provide the SetDataTypeLengthValue()
					// method on the domain class.
					element.SetDataTypeLengthValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Table opposite domain role accessor
		/// <summary>
		/// Gets or sets Table.
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.TableContainsColumn.Column
		/// </summary>
		public virtual Table Table
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.TableContainsColumn.ColumnDomainRoleId) as Table;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.TableContainsColumn.ColumnDomainRoleId, value);
			}
		}
		#endregion
		#region Domain opposite domain role accessor
		/// <summary>
		/// Gets or sets Domain.
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ColumnHasDomain.Column
		/// </summary>
		public virtual Domain Domain
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ColumnHasDomain.ColumnDomainRoleId) as Domain;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ColumnHasDomain.ColumnDomainRoleId, value);
			}
		}
		#endregion
		#region PredefinedDataType opposite domain role accessor
		/// <summary>
		/// Gets or sets PredefinedDataType.
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ColumnHasPredefinedDataType.Column
		/// </summary>
		public virtual PredefinedDataType PredefinedDataType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ColumnHasPredefinedDataType.ColumnDomainRoleId) as PredefinedDataType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ColumnHasPredefinedDataType.PredefinedDataTypeDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ColumnHasPredefinedDataType.PredefinedDataTypeDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ColumnHasPredefinedDataType.ColumnDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase
{
	/// <summary>
	/// DomainClass Constraint
	/// Base class for ConceptualData constraints.
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Constraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Constraint.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("a966aaa8-e770-4696-8865-a1396b7871bd")]
	public abstract partial class Constraint : ConceptualDatabaseModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Constraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa966aaa8, 0xe770, 0x4696, 0x88, 0x65, 0xa1, 0x39, 0x6b, 0x78, 0x71, 0xbd);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected Constraint(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xe5b7177f, 0xc2c6, 0x4777, 0xb9, 0x17, 0x78, 0x47, 0x93, 0x0e, 0x34, 0xec);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// The name of the constraint.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Constraint/Name.DisplayName", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Constraint/Name.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("e5b7177f-c2c6-4777-b917-7847930e34ec")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Constraint.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Constraint, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Constraint.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Constraint.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Constraint element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Constraint element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase
{
	/// <summary>
	/// DomainClass UniquenessConstraint
	/// A constraint on the uniqueness of a set of columns. Equivalent to a 'UNIQUE' or
	/// 'PRIMARY KEY' in the SQL Standard.
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.UniquenessConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.UniquenessConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("18dc9caa-3f7b-49e2-8db3-71898c66423a")]
	public partial class UniquenessConstraint : Constraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// UniquenessConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x18dc9caa, 0x3f7b, 0x49e2, 0x8d, 0xb3, 0x71, 0x89, 0x8c, 0x66, 0x42, 0x3a);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public UniquenessConstraint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public UniquenessConstraint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region IsPrimary domain property code
		
		/// <summary>
		/// IsPrimary domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsPrimaryDomainPropertyId = new global::System.Guid(0xf09ac57c, 0x454b, 0x48d7, 0xbe, 0x68, 0x53, 0xa5, 0xce, 0x64, 0xb8, 0xf9);
		
		/// <summary>
		/// Storage for IsPrimary
		/// </summary>
		private global::System.Boolean isPrimaryPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsPrimary domain property.
		/// Is this uniqueness constraint a PRIMARY KEY?
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.UniquenessConstraint/IsPrimary.DisplayName", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.UniquenessConstraint/IsPrimary.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("f09ac57c-454b-48d7-be68-53a5ce64b8f9")]
		public global::System.Boolean IsPrimary
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isPrimaryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsPrimaryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the UniquenessConstraint.IsPrimary domain property.
		/// </summary>
		internal sealed partial class IsPrimaryPropertyHandler : DslModeling::DomainPropertyValueHandler<UniquenessConstraint, global::System.Boolean>
		{
			private IsPrimaryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the UniquenessConstraint.IsPrimary domain property value handler.
			/// </summary>
			public static readonly IsPrimaryPropertyHandler Instance = new IsPrimaryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the UniquenessConstraint.IsPrimary domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsPrimaryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(UniquenessConstraint element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isPrimaryPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(UniquenessConstraint element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isPrimaryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Table opposite domain role accessor
		/// <summary>
		/// Gets or sets Table.
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.TableContainsUniquenessConstraint.UniquenessConstraint
		/// </summary>
		public virtual Table Table
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.TableContainsUniquenessConstraint.UniquenessConstraintDomainRoleId) as Table;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.TableContainsUniquenessConstraint.UniquenessConstraintDomainRoleId, value);
			}
		}
		#endregion
		#region ColumnCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of ColumnCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.UniquenessConstraintIncludesColumn.UniquenessConstraint
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Column> ColumnCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<Column>(this, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.UniquenessConstraintIncludesColumn.UniquenessConstraintDomainRoleId);
			}
		}
		#endregion
		#region ReferenceConstraintCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of ReferenceConstraintCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ReferenceConstraintTargetsUniquenessConstraint.TargetUniquenessConstraint
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ReferenceConstraint> ReferenceConstraintCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ReferenceConstraint>(this, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ReferenceConstraintTargetsUniquenessConstraint.TargetUniquenessConstraintDomainRoleId);
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase
{
	/// <summary>
	/// DomainClass ReferenceConstraint
	/// A reference to a &lt;see cref='UniquenessConstraint'/&gt; in another table. Equivalent
	/// to a 'FOREIGN KEY' in the SQL Standard.
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ReferenceConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ReferenceConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("17f929ce-d332-40f6-bce3-6a7901790fe3")]
	public partial class ReferenceConstraint : Constraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ReferenceConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x17f929ce, 0xd332, 0x40f6, 0xbc, 0xe3, 0x6a, 0x79, 0x01, 0x79, 0x0f, 0xe3);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ReferenceConstraint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ReferenceConstraint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region SourceTable opposite domain role accessor
		/// <summary>
		/// Gets or sets SourceTable.
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.TableContainsReferenceConstraint.ReferenceConstraint
		/// </summary>
		public virtual Table SourceTable
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.TableContainsReferenceConstraint.ReferenceConstraintDomainRoleId) as Table;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.TableContainsReferenceConstraint.ReferenceConstraintDomainRoleId, value);
			}
		}
		#endregion
		#region TargetTable opposite domain role accessor
		/// <summary>
		/// Gets or sets TargetTable.
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ReferenceConstraintTargetsTable.ReferenceConstraint
		/// </summary>
		public virtual Table TargetTable
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ReferenceConstraintTargetsTable.ReferenceConstraintDomainRoleId) as Table;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ReferenceConstraintTargetsTable.ReferenceConstraintDomainRoleId, value);
			}
		}
		#endregion
		#region TargetUniquenessConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets TargetUniquenessConstraint.
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ReferenceConstraintTargetsUniquenessConstraint.ReferenceConstraint
		/// </summary>
		public virtual UniquenessConstraint TargetUniquenessConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ReferenceConstraintTargetsUniquenessConstraint.ReferenceConstraintDomainRoleId) as UniquenessConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ReferenceConstraintTargetsUniquenessConstraint.ReferenceConstraintDomainRoleId, value);
			}
		}
		#endregion
		#region ColumnReferenceCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of ColumnReferenceCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ReferenceConstraintContainsColumnReference.ReferenceConstraint
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ColumnReference> ColumnReferenceCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ColumnReference>(this, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ReferenceConstraintContainsColumnReference.ReferenceConstraintDomainRoleId);
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase
{
	/// <summary>
	/// DomainClass CheckConstraint
	/// Equivalent to a table-level or domain 'CHECK' clause in the SQL Standard.
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.CheckConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.CheckConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("a8f18e46-fc02-4dc1-af0a-47fa4c5d8ddc")]
	public partial class CheckConstraint : Constraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// CheckConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa8f18e46, 0xfc02, 0x4dc1, 0xaf, 0x0a, 0x47, 0xfa, 0x4c, 0x5d, 0x8d, 0xdc);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CheckConstraint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CheckConstraint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Table opposite domain role accessor
		/// <summary>
		/// Gets or sets Table.
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.TableContainsCheckConstraint.CheckConstraint
		/// </summary>
		public virtual Table Table
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.TableContainsCheckConstraint.CheckConstraintDomainRoleId) as Table;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.TableContainsCheckConstraint.CheckConstraintDomainRoleId, value);
			}
		}
		#endregion
		#region Domain opposite domain role accessor
		/// <summary>
		/// Gets or sets Domain.
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.DomainContainsCheckConstraint.CheckConstraint
		/// </summary>
		public virtual Domain Domain
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.DomainContainsCheckConstraint.CheckConstraintDomainRoleId) as Domain;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.DomainContainsCheckConstraint.DomainDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.DomainContainsCheckConstraint.DomainDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.DomainContainsCheckConstraint.CheckConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase
{
	/// <summary>
	/// DomainClass Domain
	/// A user-defined data domain, which can have custom restrictions on it.
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Domain.DisplayName", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Domain.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("c06c8520-e087-4a6a-8e41-24a195773edc")]
	public partial class Domain : ConceptualDatabaseModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Domain domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc06c8520, 0xe087, 0x4a6a, 0x8e, 0x41, 0x24, 0xa1, 0x95, 0x77, 0x3e, 0xdc);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Domain(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Domain(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xb0681a83, 0x3dbe, 0x4520, 0xbf, 0x28, 0xe0, 0x39, 0x92, 0x7b, 0xc1, 0x84);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// The name of the data domain.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Domain/Name.DisplayName", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.Domain/Name.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("b0681a83-3dbe-4520-bf28-e039927bc184")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Domain.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Domain, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Domain.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Domain.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Domain element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Domain element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Schema opposite domain role accessor
		/// <summary>
		/// Gets or sets Schema.
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.SchemaContainsDomain.Domain
		/// </summary>
		public virtual Schema Schema
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.SchemaContainsDomain.DomainDomainRoleId) as Schema;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.SchemaContainsDomain.DomainDomainRoleId, value);
			}
		}
		#endregion
		#region CheckConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets CheckConstraint.
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.DomainContainsCheckConstraint.Domain
		/// </summary>
		public virtual CheckConstraint CheckConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.DomainContainsCheckConstraint.DomainDomainRoleId) as CheckConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.DomainContainsCheckConstraint.CheckConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.DomainContainsCheckConstraint.CheckConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.DomainContainsCheckConstraint.DomainDomainRoleId, value);
				}
			}
		}
		#endregion
		#region PredefinedDataType opposite domain role accessor
		/// <summary>
		/// Gets or sets PredefinedDataType.
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.DomainHasPredefinedDataType.Domain
		/// </summary>
		public virtual PredefinedDataType PredefinedDataType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.DomainHasPredefinedDataType.DomainDomainRoleId) as PredefinedDataType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.DomainHasPredefinedDataType.PredefinedDataTypeDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.DomainHasPredefinedDataType.PredefinedDataTypeDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.DomainHasPredefinedDataType.DomainDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase
{
	/// <summary>
	/// DomainClass PredefinedDataType
	/// Description for
	/// ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.PredefinedDataType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.PredefinedDataType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.PredefinedDataType.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("14b0a424-4646-4b01-80aa-f67d118f46ca")]
	public partial class PredefinedDataType : ConceptualDatabaseModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// PredefinedDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x14b0a424, 0x4646, 0x4b01, 0x80, 0xaa, 0xf6, 0x7d, 0x11, 0x8f, 0x46, 0xca);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PredefinedDataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PredefinedDataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x9f52ce66, 0xbb82, 0x42f3, 0x81, 0x1f, 0x0e, 0xca, 0xfa, 0xb2, 0x05, 0xb5);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::ORMSolutions.ORMArchitect.RelationalModels.DatabaseDefinition.PredefinedType namePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// The name of the predefined type.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.PredefinedDataType/Name.DisplayName", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.PredefinedDataType/Name.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("9f52ce66-bb82-42f3-811f-0ecafab205b5")]
		public global::ORMSolutions.ORMArchitect.RelationalModels.DatabaseDefinition.PredefinedType Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PredefinedDataType.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<PredefinedDataType, global::ORMSolutions.ORMArchitect.RelationalModels.DatabaseDefinition.PredefinedType>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PredefinedDataType.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PredefinedDataType.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::ORMSolutions.ORMArchitect.RelationalModels.DatabaseDefinition.PredefinedType GetValue(PredefinedDataType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PredefinedDataType element, global::ORMSolutions.ORMArchitect.RelationalModels.DatabaseDefinition.PredefinedType newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::ORMSolutions.ORMArchitect.RelationalModels.DatabaseDefinition.PredefinedType oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Length domain property code
		
		/// <summary>
		/// Length domain property Id.
		/// </summary>
		public static readonly global::System.Guid LengthDomainPropertyId = new global::System.Guid(0xc1982d15, 0x4bff, 0x4075, 0x8a, 0xb3, 0x6b, 0xa7, 0x23, 0xa8, 0x89, 0x15);
		
		/// <summary>
		/// Storage for Length
		/// </summary>
		private global::System.Int32 lengthPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Length domain property.
		/// The number of characters in a CHARACTER, CHARACTER VARYING, or CHARACTER LARGE
		/// OBJECT, or the number of bytes in a BINARY LARGE OBJECT.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.PredefinedDataType/Length.DisplayName", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.PredefinedDataType/Length.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("c1982d15-4bff-4075-8ab3-6ba723a88915")]
		public global::System.Int32 Length
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return lengthPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				LengthPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PredefinedDataType.Length domain property.
		/// </summary>
		internal sealed partial class LengthPropertyHandler : DslModeling::DomainPropertyValueHandler<PredefinedDataType, global::System.Int32>
		{
			private LengthPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PredefinedDataType.Length domain property value handler.
			/// </summary>
			public static readonly LengthPropertyHandler Instance = new LengthPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PredefinedDataType.Length domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return LengthDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(PredefinedDataType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.lengthPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PredefinedDataType element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.lengthPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Precision domain property code
		
		/// <summary>
		/// Precision domain property Id.
		/// </summary>
		public static readonly global::System.Guid PrecisionDomainPropertyId = new global::System.Guid(0xfd15650f, 0x454e, 0x464f, 0x8c, 0xe0, 0xdf, 0xfe, 0x55, 0x51, 0xee, 0xd5);
		
		/// <summary>
		/// Storage for Precision
		/// </summary>
		private global::System.Int32 precisionPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Precision domain property.
		/// The maximum number of decimal digits in a NUMERIC or DECIMAL, or the maximum
		/// number of binary digits in the significand (mantissa) of a FLOAT.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.PredefinedDataType/Precision.DisplayName", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.PredefinedDataType/Precision.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("fd15650f-454e-464f-8ce0-dffe5551eed5")]
		public global::System.Int32 Precision
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return precisionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				PrecisionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PredefinedDataType.Precision domain property.
		/// </summary>
		internal sealed partial class PrecisionPropertyHandler : DslModeling::DomainPropertyValueHandler<PredefinedDataType, global::System.Int32>
		{
			private PrecisionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PredefinedDataType.Precision domain property value handler.
			/// </summary>
			public static readonly PrecisionPropertyHandler Instance = new PrecisionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PredefinedDataType.Precision domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PrecisionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(PredefinedDataType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.precisionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PredefinedDataType element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.precisionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Scale domain property code
		
		/// <summary>
		/// Scale domain property Id.
		/// </summary>
		public static readonly global::System.Guid ScaleDomainPropertyId = new global::System.Guid(0x989b8033, 0x13d5, 0x455d, 0x87, 0xba, 0x68, 0x07, 0xde, 0x85, 0x79, 0xb2);
		
		/// <summary>
		/// Storage for Scale
		/// </summary>
		private global::System.Int32 scalePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Scale domain property.
		/// The maximum number of decimal digits after the decimal point in a NUMERIC or
		/// DECIMAL.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.PredefinedDataType/Scale.DisplayName", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.PredefinedDataType/Scale.Description", typeof(global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ConceptualDatabaseDomainModel), "ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("989b8033-13d5-455d-87ba-6807de8579b2")]
		public global::System.Int32 Scale
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return scalePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ScalePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PredefinedDataType.Scale domain property.
		/// </summary>
		internal sealed partial class ScalePropertyHandler : DslModeling::DomainPropertyValueHandler<PredefinedDataType, global::System.Int32>
		{
			private ScalePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PredefinedDataType.Scale domain property value handler.
			/// </summary>
			public static readonly ScalePropertyHandler Instance = new ScalePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PredefinedDataType.Scale domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ScaleDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(PredefinedDataType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.scalePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PredefinedDataType element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.scalePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Column opposite domain role accessor
		/// <summary>
		/// Gets or sets Column.
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ColumnHasPredefinedDataType.PredefinedDataType
		/// </summary>
		public virtual Column Column
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ColumnHasPredefinedDataType.PredefinedDataTypeDomainRoleId) as Column;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ColumnHasPredefinedDataType.ColumnDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ColumnHasPredefinedDataType.ColumnDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.ColumnHasPredefinedDataType.PredefinedDataTypeDomainRoleId, value);
				}
			}
		}
		#endregion
		#region Domain opposite domain role accessor
		/// <summary>
		/// Gets or sets Domain.
		/// Description for
		/// ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.DomainHasPredefinedDataType.PredefinedDataType
		/// </summary>
		public virtual Domain Domain
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.DomainHasPredefinedDataType.PredefinedDataTypeDomainRoleId) as Domain;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.DomainHasPredefinedDataType.DomainDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.DomainHasPredefinedDataType.DomainDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.RelationalModels.ConceptualDatabase.DomainHasPredefinedDataType.PredefinedDataTypeDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
