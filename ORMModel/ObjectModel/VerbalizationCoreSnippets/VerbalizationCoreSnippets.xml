<?xml version="1.0" encoding="utf-8"?>
<!-- 
Natural Object-Role Modeling Architect for Visual Studio

Copyright © Neumont University. All rights reserved.
Copyright © ORM Solutions, LLC. All rights reserved.

The use and distribution terms for this software are covered by the
Common Public License 1.0 (http://opensource.org/licenses/cpl) which
can be found in the file CPL.txt at the root of this distribution.
By using this software in any fashion, you are agreeing to be bound by
the terms of this license.

You must not remove this notice, or any other, from this software.
-->
<Languages xmlns="http://schemas.neumont.edu/ORM/SDK/Verbalization" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://schemas.neumont.edu/ORM/SDK/Verbalization VerbalizationCoreSnippets.xsd">
	<Language xml:lang="en-US">
		<Snippets name="_default" description="Built-in verbalization snippets">
			<Snippet type="IndependentVerbalization"><![CDATA[<span class="smallIndent">{0} <span class="quantifier">is independent (it may have instances that play no other roles)</span></span>]]></Snippet>
			<Snippet type="PortableDataTypeVerbalization"><![CDATA[<span class="smallIndent"><span class="quantifier">Data Type:</span> {0}{1}</span>]]></Snippet>
			<Snippet type="PortableDataTypeLengthAndScale"><![CDATA[ <span class="listSeparator">(</span><span class="instance">{0}</span><span class="listSeparator">, </span><span class="instance">{1}</span><span class="listSeparator">)</span>]]></Snippet>
			<Snippet type="PortableDataTypeLength"><![CDATA[ <span class="listSeparator">(</span><span class="instance">{0}</span><span class="listSeparator">)</span>]]></Snippet>
			<Snippet type="ReferenceModeVerbalization"><![CDATA[<span class="smallIndent"><span class="quantifier">Reference Mode:</span> <span class="referenceMode">{0}</span></span>]]></Snippet>
			<Snippet type="ReferenceSchemeVerbalization"><![CDATA[<span class="smallIndent"><span class="quantifier">Reference Scheme:</span> {0}</span>]]></Snippet>
			<Snippet type="ObjectifiesFactTypeVerbalization"><![CDATA[<span class="smallIndent">{0} <span class="quantifier">objectifies</span> <span class="listSeparator">&#8220;</span>{1}<span class="listSeparator">&#8221;</span></span>]]></Snippet>
			<Snippet type="EntityTypeVerbalization"><![CDATA[{0} <span class="quantifier">is an entity type</span>]]></Snippet>
			<Snippet type="ValueTypeVerbalization"><![CDATA[{0} <span class="quantifier">is a value type</span>]]></Snippet>
			<Snippet type="ModelVerbalization"><![CDATA[<span class="quantifier">Object-Role Model:</span> {0}]]></Snippet>
			<Snippet type="NotesVerbalization"><![CDATA[<span class="quantifier">Notes:</span> <span class="note">{0}</span>]]></Snippet>
			<Snippet type="DescriptionVerbalization"><![CDATA[<span class="quantifier">Informal Description:</span> <span class="definition">{0}</span>]]></Snippet>
			<Snippet type="DerivationNoteVerbalization"><![CDATA[<span class="quantifier">Derivation Note:</span> <span class="definition">{0}</span>]]></Snippet>
			<Snippet type="ConstraintProvidesPreferredIdentifier"><![CDATA[<span class="smallIndent"><span class="quantifier">this association with</span> {0} <span class="quantifier">provides the preferred identification scheme for</span> {1}</span>]]></Snippet>
 
			<!-- All object type names are wrapped with this style automatically.
					 The objectType class should not be used in other quantifiers because
					 it will interfere with hyphen-binding and possible other features. -->
			<Snippet type="ObjectType"><![CDATA[<a class="objectType" href="elementid:{1}">{0}</a>]]></Snippet>
			<Snippet type="ObjectTypeWithSubscript"><![CDATA[<a class="objectType" href="elementid:{1}">{0}<sub style="font-size:smaller;">{2}</sub></a>]]></Snippet>
			<Snippet type="ObjectTypeMissing"><![CDATA[<span class="objectTypeMissing">Missing<sub style="font-size:smaller;">{0}</sub></span>]]></Snippet>
			<Snippet type="ObjectTypeMissingWithIdentifier"><![CDATA[<span class="objectTypeMissing" href="elementid:{1}">Missing<sub style="font-size:smaller;">{0}</sub></span>]]></Snippet>
			<Snippet type="HyphenBoundPredicatePart"><![CDATA[{0}{{0}}{1}]]></Snippet>
			<Snippet type="PredicatePart"><![CDATA[<a class="predicateText" href="elementid:{1}">{{0}}</a>]]></Snippet>
			<Snippet type="DefiniteArticle"><![CDATA[<span class="quantifier">that</span> {0}]]></Snippet>
			<Snippet type="RoleHeader"><![CDATA[<span class="quantifier">role for</span> {0}]]></Snippet>
			<Snippet type="RoleHeaderWithName"><![CDATA[<span class="quantifier">role for</span> {0}, <span class="quantifier">named</span> <span class="predicateText">{1}</span>]]></Snippet>

			<Snippet type="ImpersonalPronoun"><![CDATA[<span class="quantifier">that</span>]]></Snippet>
			<Snippet type="PersonalPronoun"><![CDATA[<span class="quantifier">who</span>]]></Snippet>
			<Snippet type="ReflexivePronoun"><![CDATA[<span class="quantifier">itself</span>]]></Snippet>

			<Snippet type="UniversalQuantifier" sign="positive"><![CDATA[<span class="quantifier">each</span> {0}]]></Snippet>
			<Snippet type="UniversalQuantifier" sign="negative"><![CDATA[<span class="quantifier">some</span> {0}]]></Snippet>
			<Snippet type="AtMostOneQuantifier"><![CDATA[<span class="quantifier">at most one</span> {0}]]></Snippet>
			<Snippet type="ForEachCompactQuantifier"><![CDATA[<span class="quantifier">for each</span> {0}, {1}]]></Snippet>
			<Snippet type="ForEachNegatableCompactQuantifier" sign="positive"><![CDATA[<span class="quantifier">for each</span> {0}, {1}]]></Snippet>
			<Snippet type="ForEachNegatableCompactQuantifier" sign="negative"><![CDATA[<span class="quantifier">for some</span> {0}, {1}]]></Snippet>
			<Snippet type="ForEachIndentedQuantifier"><![CDATA[<span class="quantifier">for each</span> {0},<br/><span class="smallIndent">{1}</span>]]></Snippet>
			<Snippet type="ForEachNegatableIndentedQuantifier"><![CDATA[<span class="quantifier">for each</span> {0},<br/><span class="smallIndent">{1}</span>]]></Snippet>
			<Snippet type="ForEachNegatableIndentedQuantifier" sign="negative"><![CDATA[<span class="quantifier">for some</span> {0},<br/><span class="smallIndent">{1}</span>]]></Snippet>
			<Snippet type="ExistentialQuantifier" sign="positive"><![CDATA[<span class="quantifier">some</span> {0}]]></Snippet>
			<Snippet type="ExistentialQuantifier" sign="negative"><![CDATA[<span class="quantifier">no</span> {0}]]></Snippet>
			<Snippet type="ExactlyOneQuantifier"><![CDATA[<span class="quantifier">exactly one</span> {0}]]></Snippet>
			<Snippet type="ReflexiveQuantifier"><![CDATA[{0} <span class="quantifier">itself</span>]]></Snippet>
			<Snippet type="DynamicRuleQuantifiers"><![CDATA[<span class="quantifier">For each </span> {0}<br/>{1}]]></Snippet>
			<Snippet type="DynamicRuleQuantifierCondition"><![CDATA[<span class="quantifier">where</span> {0}<br/>]]></Snippet>
			<Snippet type="DynamicRuleStandaloneCondition"><![CDATA[<span class="quantifier">When</span><span class="listSeparator">:</span><br/><span class="smallIndent">{0}</span>]]></Snippet>
			<Snippet type="DynamicRuleAdditions"><![CDATA[<span class="quantifier">Add</span><span class="listSeparator">:</span> {0}<br/>]]></Snippet>
			<Snippet type="DynamicRuleDeletions"><![CDATA[<span class="quantifier">Delete</span><span class="listSeparator">:</span> {0}<br/>]]></Snippet>
			<Snippet type="VariableAddedQuantifier"><![CDATA[<span class="quantifier">added</span> {0}]]></Snippet>
			<Snippet type="VariableDeletedQuantifier"><![CDATA[<span class="quantifier">deleted</span> {0}]]></Snippet>
			<Snippet type="VariableInitialQuantifier"><![CDATA[<span class="quantifier">initial</span> {0}]]></Snippet>
			<Snippet type="VariableAddAction"><![CDATA[<span class="quantifier">new</span> {0}]]></Snippet>

			<!-- UNDONE:
					<Form condition="PreConsonant"><![CDATA[<span class="quantifier">a</span> {0}]]></Form>
					<Form condition="PreVowel"><![CDATA[<span class="quantifier">an</span> {0}]]></Form>
				-->
			<Snippet type="IdentityReferenceQuantifier"><![CDATA[<span class="quantifier">the same</span> {0}]]></Snippet>
			<Snippet type="MoreThanOneQuantifier"><![CDATA[<span class="quantifier">more than one</span> {0}]]></Snippet>

			<Snippet type="CombinationIdentifier"><![CDATA[{0} <span class="quantifier">combination</span>]]></Snippet>
			<Snippet type="OneQuantifier" sign="positive"><![CDATA[<span class="quantifier">at most one</span> {0}]]></Snippet>
			<Snippet type="OneQuantifier" sign="negative"><![CDATA[<span class="quantifier">more than one</span> {0}]]></Snippet>


			<Snippet type="OccursInPopulation" sign="positive"><![CDATA[<span class="quantifier">in each population of</span> {1}<span class="listSeparator">, </span>{0} <span class="quantifier">occurs at most once</span>]]></Snippet>
			<Snippet type="OccursInPopulation" sign="negative"><![CDATA[{0} <span class="quantifier">occurs more than once in the same population of</span> {1}]]></Snippet>

			<Snippet type="ModalPossibilityOperator" modality="alethic" sign="positive"><![CDATA[<span class="quantifier">it is possible that</span> {0}]]></Snippet>
			<Snippet type="ModalPossibilityOperator" modality="deontic" sign="positive"><![CDATA[<span class="quantifier">it is permitted that</span> {0}]]></Snippet>
			<Snippet type="ModalPossibilityOperator" modality="alethic" sign="negative"><![CDATA[<span class="quantifier">it is impossible that</span> {0}]]></Snippet>
			<Snippet type="ModalPossibilityOperator" modality="deontic" sign="negative"><![CDATA[<span class="quantifier">it is forbidden that</span> {0}]]></Snippet>
			<Snippet type="ModalNecessityOperator" modality="alethic"><![CDATA[<span class="quantifier">it is necessary that</span> {0}]]></Snippet>
			<Snippet type="ModalNecessityOperator" modality="deontic"><![CDATA[<span class="quantifier">it is obligatory that</span> {0}]]></Snippet>
			<Snippet type="ImpliedModalNecessityOperator" modality="alethic" sign="positive"><![CDATA[{0}]]></Snippet>
			<Snippet type="ImpliedModalNecessityOperator" modality="deontic" sign="positive"><![CDATA[<span class="quantifier">it is obligatory that</span> {0}]]></Snippet>
			<Snippet type="ImpliedModalNecessityOperator" modality="alethic" sign="negative"><![CDATA[<span class="quantifier">it is impossible that</span> {0}]]></Snippet>
			<Snippet type="ImpliedModalNecessityOperator" modality="deontic" sign="negative"><![CDATA[<span class="quantifier">it is forbidden that</span> {0}]]></Snippet>

			<Snippet type="ContextCombinationAssociation"><![CDATA[<span class="quantifier">that combination is associated with</span> {0} <span class="quantifier">in this context</span>]]></Snippet>
			<Snippet type="ContextCombinationOccurrence"><![CDATA[<span class="quantifier">that combination occurs</span> {0} <span class="quantifier">in this context</span>]]></Snippet>
			<Snippet type="CombinationUniqueness"><![CDATA[{0} <span class="quantifier">combination is unique</span>]]></Snippet>
			<Snippet type="SingularExistenceImplicationOperator"><![CDATA[<span class="quantifier">there is </span>{0} <span class="quantifier">such that</span><br/><span class="smallIndent">{1}</span>]]></Snippet>
			<Snippet type="PluralExistenceImplicationOperator"><![CDATA[<span class="quantifier">there are </span>{0} <span class="quantifier">such that</span><br/><span class="smallIndent">{1}</span>]]></Snippet>

			<!-- Snippets related to derivation rules and join paths -->
			<Snippet type="FullFactTypeDerivation"><![CDATA[<span class="quantifier">*</span>{0} <span class="quantifier">if and only if</span><br/>{1}<br/>]]></Snippet>
			<Snippet type="FullFactTypeStoredDerivation"><![CDATA[<span class="quantifier">**</span>{0} <span class="quantifier">if and only if</span><br/>{1}<br/>]]></Snippet>
			<Snippet type="FullStoredFactTypeDescription"><![CDATA[<span class="indent"><span class="quantifier">instances of this fact type are stored immediately after they are derived</span></span>]]></Snippet>
			<Snippet type="PartialFactTypeDerivation"><![CDATA[<span class="quantifier"><sup style="font-size:smaller;">+</sup></span>{0} <span class="quantifier">if</span><br/>{1}<br/>]]></Snippet>
			<Snippet type="PartialFactTypeStoredDerivation"><![CDATA[<span class="quantifier"><sup style="font-size:smaller;">++</sup></span>{0} <span class="quantifier">if</span><br/>{1}<br/>]]></Snippet>
			<Snippet type="PartialStoredFactTypeDescription"><![CDATA[<span class="indent"><span class="quantifier">derived instances of this fact type are also stored immediately after they are derived</span></span>]]></Snippet>
			<Snippet type="FullSubtypeDerivation"><![CDATA[<span class="quantifier">*Each</span> {0} <span class="quantifier">is by definition</span> {1}]]></Snippet>
			<Snippet type="FullSubtypeStoredDerivation"><![CDATA[<span class="quantifier">**Each</span> {0} <span class="quantifier">is by definition</span> {1}]]></Snippet>
			<Snippet type="FullStoredSubtypeDescription"><![CDATA[<span class="smallIndent"><span class="quantifier">instances of this subtype are stored immediately after they are derived</span></span>]]></Snippet>
			<Snippet type="PartialSubtypeDerivation"><![CDATA[<span class="quantifier"><sup style="font-size:smaller;">+</sup>each derived</span> {0} <span class="quantifier">is by definition</span> {1}]]></Snippet>
			<Snippet type="PartialSubtypeStoredDerivation"><![CDATA[<span class="quantifier"><sup style="font-size:smaller;">++</sup>each derived</span> {0} <span class="quantifier">is by definition</span> {1}]]></Snippet>
			<Snippet type="PartialStoredSubtypeDescription"><![CDATA[<span class="smallIndent"><span class="quantifier">derived instances of this subtype are also stored immediately after they are derived</span></span>]]></Snippet>
			<Snippet type="QueryParameterContainer"><![CDATA[<span class="quantifier">given</span> {0} ]]></Snippet>
			<Snippet type="QueryNamedParameter"><![CDATA[{1}<span class="logicalOperator">=</span>{0}]]></Snippet>
			<Snippet type="QueryUnnamedParameter"><![CDATA[{0}]]></Snippet>
			<Snippet type="QueryVerbalization"><![CDATA[{0}<span class="quantifier">select</span> {1} <span class="quantifier">where</span><br/><span class="smallIndent">{2}</span>]]></Snippet>
			<Snippet type="DynamicRuleVerbalization"><![CDATA[{0}{1}{2}{3}]]></Snippet>
			<Snippet type="IdentityListOpen"><![CDATA[]]></Snippet>
			<Snippet type="IdentityListPairSeparator"><![CDATA[ <span class="quantifier">that is</span> ]]></Snippet>
			<Snippet type="IdentityListSeparator"><![CDATA[ <span class="quantifier">that is</span> ]]></Snippet>
			<Snippet type="IdentityListFinalSeparator"><![CDATA[ <span class="quantifier">that is</span> ]]></Snippet>
			<Snippet type="IdentityListClose"><![CDATA[]]></Snippet>

			<!-- Used inside a ModalOperator -->
			<Snippet type="NegativeReadingForUnaryOnlyDisjunctiveMandatory" sign="negative"><![CDATA[<span class="quantifier">some</span> {0} <span class="quantifier">participates in none of the following:</span>{1}]]></Snippet>

			<!-- Snippets related to value constraint verbalization -->
			<Snippet type="ReferenceScheme"><![CDATA[{0}<span class="listSeparator">(</span><span class="referenceMode">{1}</span><span class="listSeparator">)</span>]]></Snippet>
			<Snippet type="InQuantifier"><![CDATA[{0} <span class="quantifier">in</span> {1}]]></Snippet>
			<Snippet type="PeriodSeparator"><![CDATA[{0}<span class="listSeparator">.</span>{1}]]></Snippet>
			<Snippet type="SelfReference"><![CDATA[{0}]]></Snippet>
			<Snippet type="DefaultValuePrefix"><![CDATA[<span class="smallIndent"><span class="quantifier">Default Value:</span> {0}</span>]]></Snippet>
			<Snippet type="DefaultUnaryPopulation"><![CDATA[<span class="smallIndent"><span class="quantifier">Each new instance of </span> {0} <span class="quantifier">plays this role by default</span><span class="listSeparator".</span></span>]]></Snippet>
			<Snippet type="SingleValueValueConstraint" modality="alethic"><![CDATA[<span class="quantifier">the possible value of</span> {0} <span class="quantifier">is</span> {1}]]></Snippet>
			<Snippet type="SingleValueValueConstraint" modality="deontic"><![CDATA[<span class="quantifier">the value of</span> {0} <span class="quantifier">is</span> {1}]]></Snippet>
			<Snippet type="MultiValueValueConstraint" modality="alethic"><![CDATA[<span class="quantifier">the possible values of</span> {0} <span class="quantifier">are</span> {1}]]></Snippet>
			<Snippet type="MultiValueValueConstraint" modality="deontic"><![CDATA[<span class="quantifier">the values of</span> {0} <span class="quantifier">are</span> {1}]]></Snippet>
			<Snippet type="MinClosedMaxClosed"><![CDATA[<span class="quantifier">at least {0} to at most {1}</span>]]></Snippet>
			<Snippet type="MinClosedMaxOpen"><![CDATA[<span class="quantifier">at least {0} to below {1}</span>]]></Snippet>
			<Snippet type="MinClosedMaxUnbounded"><![CDATA[<span class="quantifier">at least {0}</span>]]></Snippet>
			<Snippet type="MinOpenMaxClosed"><![CDATA[<span class="quantifier">above {0} to at most {1}</span>]]></Snippet>
			<Snippet type="MinOpenMaxOpen"><![CDATA[<span class="quantifier">above {0} to below {1}</span>]]></Snippet>
			<Snippet type="MinOpenMaxUnbounded"><![CDATA[<span class="quantifier">above {0}</span>]]></Snippet>
			<Snippet type="MinUnboundedMaxClosed"><![CDATA[<span class="quantifier">at most {1}</span>]]></Snippet>
			<Snippet type="MinUnboundedMaxOpen"><![CDATA[<span class="quantifier">below {1}</span>]]></Snippet>
			<Snippet type="EqualsListOpen"><![CDATA[]]></Snippet>
			<Snippet type="EqualsListPairSeparator"><![CDATA[<span class="logicalOperator"> = </span>]]></Snippet>
			<Snippet type="EqualsListSeparator"><![CDATA[<span class="logicalOperator"> = </span>]]></Snippet>
			<Snippet type="EqualsListFinalSeparator"><![CDATA[<span class="logicalOperator"> = </span>]]></Snippet>
			<Snippet type="EqualsListClose"><![CDATA[]]></Snippet>
			<Snippet type="IdentityEqualityListOpen"><![CDATA[]]></Snippet>
			<Snippet type="IdentityEqualityListPairSeparator"><![CDATA[<span class="logicalOperator"> that is a </span>]]></Snippet>
			<Snippet type="IdentityEqualityListSeparator"><![CDATA[<span class="logicalOperator"> that is a </span>]]></Snippet>
			<Snippet type="IdentityEqualityListFinalSeparator"><![CDATA[<span class="logicalOperator"> that is a </span>]]></Snippet>
			<Snippet type="IdentityEqualityListClose"><![CDATA[]]></Snippet>
			<Snippet type="IndentedCompoundListOpen"><![CDATA[<br/><span class="smallIndent">]]></Snippet>
			<Snippet type="IndentedCompoundListPairSeparator"><![CDATA[<span class="listSeparator">; </span>]]></Snippet>
			<Snippet type="IndentedCompoundListSeparator"><![CDATA[<span class="listSeparator">; </span>]]></Snippet>
			<Snippet type="IndentedCompoundListFinalSeparator"><![CDATA[<span class="listSeparator">; </span>]]></Snippet>
			<Snippet type="IndentedCompoundListClose"><![CDATA[</span>]]></Snippet>
			<Snippet type="IndentedListOpen"><![CDATA[<br/><span class="smallIndent">]]></Snippet>
			<Snippet type="IndentedListPairSeparator"><![CDATA[<span class="logicalOperator"> and </span><br/>]]></Snippet>
			<Snippet type="IndentedListSeparator"><![CDATA[<span class="logicalOperator"> and </span><br/>]]></Snippet>
			<Snippet type="IndentedListFinalSeparator"><![CDATA[<span class="logicalOperator"> and </span><br/>]]></Snippet>
			<Snippet type="IndentedListClose"><![CDATA[</span>]]></Snippet>
			<Snippet type="IndentedLogicalOrListOpen"><![CDATA[<br/><span class="smallIndent">]]></Snippet>
			<Snippet type="IndentedLogicalOrListPairSeparator"><![CDATA[<br/><span class="logicalOperator">or </span>]]></Snippet>
			<Snippet type="IndentedLogicalOrListSeparator"><![CDATA[<br/><span class="logicalOperator">or </span>]]></Snippet>
			<Snippet type="IndentedLogicalOrListFinalSeparator"><![CDATA[<br/><span class="logicalOperator">or </span>]]></Snippet>
			<Snippet type="IndentedLogicalOrListClose"><![CDATA[</span>]]></Snippet>
			<Snippet type="SimpleLogicalOrListOpen"><![CDATA[]]></Snippet>
			<Snippet type="SimpleLogicalOrListPairSeparator"><![CDATA[<span class="logicalOperator"> or </span>]]></Snippet>
			<Snippet type="SimpleLogicalOrListSeparator"><![CDATA[<span class="logicalOperator"> or </span>]]></Snippet>
			<Snippet type="SimpleLogicalOrListFinalSeparator"><![CDATA[<span class="logicalOperator"> or </span>]]></Snippet>
			<Snippet type="SimpleLogicalOrListClose"><![CDATA[]]></Snippet>
			<Snippet type="TopLevelIndentedLogicalOrListOpen"><![CDATA[<span>]]></Snippet>
			<Snippet type="TopLevelIndentedLogicalOrListPairSeparator"><![CDATA[</span><span class="smallIndent"><br/><span class="logicalOperator">or </span>]]></Snippet>
			<Snippet type="TopLevelIndentedLogicalOrListSeparator"><![CDATA[</span><span class="smallIndent"><br/><span class="logicalOperator">or </span>]]></Snippet>
			<Snippet type="TopLevelIndentedLogicalOrListFinalSeparator"><![CDATA[</span><span class="smallIndent"><br/><span class="logicalOperator">or </span>]]></Snippet>
			<Snippet type="TopLevelIndentedLogicalOrListClose"><![CDATA[</span>]]></Snippet>
			<Snippet type="IndentedLogicalAndListOpen"><![CDATA[<br/><span class="smallIndent">]]></Snippet>
			<Snippet type="IndentedLogicalAndListPairSeparator"><![CDATA[<br/><span class="logicalOperator">and that </span>]]></Snippet>
			<Snippet type="IndentedLogicalAndListSeparator"><![CDATA[<br/><span class="logicalOperator">and that </span>]]></Snippet>
			<Snippet type="IndentedLogicalAndListFinalSeparator"><![CDATA[<br/><span class="logicalOperator">and that </span>]]></Snippet>
			<Snippet type="IndentedLogicalAndListClose"><![CDATA[</span>]]></Snippet>
			<Snippet type="SimpleLogicalAndListOpen"><![CDATA[]]></Snippet>
			<Snippet type="SimpleLogicalAndListPairSeparator"><![CDATA[<span class="logicalOperator"> and </span>]]></Snippet>
			<Snippet type="SimpleLogicalAndListSeparator"><![CDATA[<span class="logicalOperator"> and </span>]]></Snippet>
			<Snippet type="SimpleLogicalAndListFinalSeparator"><![CDATA[<span class="logicalOperator"> and </span>]]></Snippet>
			<Snippet type="SimpleLogicalAndListClose"><![CDATA[]]></Snippet>
			<Snippet type="SubtypeMetaReading" sign="positive"><![CDATA[<span class="quantifier">each </span>{0} <a class="predicateText" href="elementid:{2}">is an instance of</a> {1}]]></Snippet>
			<Snippet type="SubtypeMetaReading" sign="negative"><![CDATA[<span class="quantifier">some </span>{0} <a class="predicateText" href="elementid:{2}">is not an instance of</a> {1}]]></Snippet>
			<Snippet type="TopLevelIndentedLogicalAndListOpen"><![CDATA[<span>]]></Snippet>
			<Snippet type="TopLevelIndentedLogicalAndListPairSeparator"><![CDATA[</span><span class="smallIndent"><br/><span class="logicalOperator">and that </span>]]></Snippet>
			<Snippet type="TopLevelIndentedLogicalAndListSeparator"><![CDATA[</span><span class="smallIndent"><br/><span class="logicalOperator">and that </span>]]></Snippet>
			<Snippet type="TopLevelIndentedLogicalAndListFinalSeparator"><![CDATA[</span><span class="smallIndent"><br/><span class="logicalOperator">and that </span>]]></Snippet>
			<Snippet type="TopLevelIndentedLogicalAndListClose"><![CDATA[</span>]]></Snippet>

			<!-- Verbalization of elements derived from the current selection. -->
			<Snippet type="DerivedFactTypeReference"><![CDATA[{0}]]></Snippet>
			<Snippet type="DerivedSubtypeReference"><![CDATA[<span class="quantifier">subtype</span> {0}]]></Snippet>
			<Snippet type="DynamicRuleReference"><![CDATA[<span class="quantifier">dynamic rule</span> {0}]]></Snippet>
			<Snippet type="JoinedFrequencyConstraintReference"><![CDATA[<span class="quantifier">frequency constraint</span> {0}]]></Snippet>
			<Snippet type="JoinedRingConstraintReference"><![CDATA[<span class="quantifier">ring constraint</span> {0}]]></Snippet>
			<Snippet type="JoinedUniquenessConstraintReference"><![CDATA[<span class="quantifier">uniqueness constraint</span> {0}]]></Snippet>
			<Snippet type="JoinedValueComparisonConstraintReference"><![CDATA[<span class="quantifier">value comparison constraint</span> {0}]]></Snippet>
			<Snippet type="JoinedEqualityConstraintReference"><![CDATA[<span class="quantifier">equality constraint</span> {0}]]></Snippet>
			<Snippet type="JoinedExclusionConstraintReference"><![CDATA[<span class="quantifier">exclusion constraint</span> {0}]]></Snippet>
			<Snippet type="JoinedSubsetConstraintReference"><![CDATA[<span class="quantifier">subset constraint</span> {0}]]></Snippet>
			<Snippet type="JoinedSetComparisonSequenceReference"><![CDATA[{0}<span class="listSeparator">, </span><span class="quantifier">sequence</span> <span class="instance">{1}</span>]]></Snippet>

			<Snippet type="CompoundListOpen"><![CDATA[]]></Snippet>
			<Snippet type="CompoundListPairSeparator"><![CDATA[; ]]></Snippet>
			<Snippet type="CompoundListSeparator"><![CDATA[; ]]></Snippet>
			<Snippet type="CompoundListFinalSeparator"><![CDATA[; ]]></Snippet>
			<Snippet type="CompoundListClose"><![CDATA[]]></Snippet>
			<Snippet type="SimpleListOpen"><![CDATA[]]></Snippet>
			<Snippet type="SimpleListPairSeparator"><![CDATA[<span class="logicalOperator"> and </span>]]></Snippet>
			<Snippet type="SimpleListSeparator"><![CDATA[<span class="listSeparator">, </span>]]></Snippet>
			<Snippet type="SimpleListFinalSeparator"><![CDATA[<span class="listSeparator">,</span><span class="logicalOperator"> and </span>]]></Snippet>
			<Snippet type="SimpleListClose"><![CDATA[]]></Snippet>
			<Snippet type="CompactSimpleListOpen"><![CDATA[]]></Snippet>
			<Snippet type="CompactSimpleListPairSeparator"><![CDATA[<span class="listSeparator">, </span>]]></Snippet>
			<Snippet type="CompactSimpleListSeparator"><![CDATA[<span class="listSeparator">, </span>]]></Snippet>
			<Snippet type="CompactSimpleListFinalSeparator"><![CDATA[<span class="listSeparator">, </span>]]></Snippet>
			<Snippet type="CompactSimpleListClose"><![CDATA[]]></Snippet>
			<Snippet type="CompactSimpleOrListOpen"><![CDATA[]]></Snippet>
			<Snippet type="CompactSimpleOrListPairSeparator"><![CDATA[ <span class="logicalOperator">or</span> ]]></Snippet>
			<Snippet type="CompactSimpleOrListSeparator"><![CDATA[<span class="listSeparator">, </span>]]></Snippet>
			<Snippet type="CompactSimpleOrListFinalSeparator"><![CDATA[<span class="listSeparator">, </span><span class="logicalOperator">or</span> ]]></Snippet>
			<Snippet type="CompactSimpleOrListClose"><![CDATA[]]></Snippet>
			<Snippet type="ErrorOpenPrimaryReport"><![CDATA[<span class="primaryErrorReport">]]></Snippet>
			<Snippet type="ErrorClosePrimaryReport"><![CDATA[</span>]]></Snippet>
			<Snippet type="ErrorOpenSecondaryReport"><![CDATA[<span class="secondaryErrorReport">]]></Snippet>
			<Snippet type="ErrorCloseSecondaryReport"><![CDATA[</span>]]></Snippet>
			<Snippet type="ErrorPrimary"><![CDATA[Model Error: <a class="primaryErrorReport" href="elementid:{1}">{0}</a>]]></Snippet>
			<Snippet type="ErrorSecondary"><![CDATA[Model Error: <a class="secondaryErrorReport" href="elementid:{1}">{0}</a>]]></Snippet>
			<Snippet type="CloseVerbalizationSentence"><![CDATA[<span class="listSeparator">.</span>]]></Snippet>
			<Snippet type="VerbalizerNewLine"><![CDATA[<br/>]]></Snippet>
			<Snippet type="VerbalizerIncreaseIndent"><![CDATA[<span class="indent">]]></Snippet>
			<Snippet type="VerbalizerDecreaseIndent"><![CDATA[</span>]]></Snippet>
			<Snippet type="VerbalizerOpenVerbalization"><![CDATA[<div class="verbalization">]]></Snippet>
			<Snippet type="VerbalizerCloseVerbalization"><![CDATA[</div>]]></Snippet>
			<Snippet type="VerbalizerDocumentHeader">
			<![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
	<title>ORM2 Verbalization</title>
	<style type="text/css">
		body, table {{ font-family: {0}; font-size: {1}pt; color: {2}; {3} }}
		body {{ padding: 0em .1em; }}
		table.hidden, tr.hidden, td.hidden {{ margin: 0em; padding: 0em; border-collapse: collapse;}}
		td.hidden {{ vertical-align: top; }}
		table.hidden {{ display:inline; }}
		a {{text-decoration:none; }}
		a:hover {{background-color:infobackground; }}
		.objectType {{ color: {4}; {5} }}
		.objectTypeMissing {{ color: {4}; {5} }}
		.referenceMode {{ color: {10}; {11} }}
		.predicateText {{ color: {2}; {3} }}
		.quantifier {{ color: {6}; {7} }}
		.primaryErrorReport {{ color: red; font-weight: bolder; }}
		.secondaryErrorReport {{ color: red; }}
		.verbalization {{ }}
		.indent {{ left: 20px; position: relative; }}
		.smallIndent {{ left: 8px; position: relative;}}
		.listSeparator {{ color: windowtext; font-weight: 200;}}
		.logicalOperator {{ color: {6}; {7}}}
		.note {{ color: {8}; font-style: italic; {9} }}
		.definition {{ color: {8}; font-style: italic; {9} }}
		.notAvailable {{ font-style: italic; }}
		.instance {{ color: {12}; {13} }}
	</style>
</head>
<body>]]></Snippet>
			<Snippet type="VerbalizerDocumentFooter"><![CDATA[</body></html>]]></Snippet>
			<Snippet type="VerbalizerFontWeightBold"><![CDATA[font-weight: bold;]]></Snippet>
			<Snippet type="VerbalizerFontWeightNormal"><![CDATA[font-weight: normal;]]></Snippet>
			<Snippet type="CombinedObjectAndInstance"><![CDATA[{0} <span class="instance">{1}</span>]]></Snippet>
			<Snippet type="CombinedObjectAndInstanceTypeMissing"><![CDATA[Missing {0}]]></Snippet>
			<Snippet type="TextInstanceValue"><![CDATA[<span class="instance">'{0}'</span>]]></Snippet>
			<Snippet type="NonTextInstanceValue"><![CDATA[<span class="instance">{0}</span>]]></Snippet>
			<Snippet type="FactTypeInstanceBlockStart"><![CDATA[<br/><span class="quantifier">Examples: </span><span class="smallIndent">]]></Snippet>
			<Snippet type="FactTypeInstanceBlockEnd"><![CDATA[</span>]]></Snippet>
			<Snippet type="FactTypeInstanceIdentifier"><![CDATA[<span class="smallIndent"><span class="quantifier">Identifier: <span class="instance">{0}</span></span></span>]]></Snippet>
			<Snippet type="ObjectTypeInstanceListOpen"><![CDATA[<br/><span class="quantifier">Examples:</span> ]]></Snippet>
			<Snippet type="ObjectTypeInstanceListPairSeparator"><![CDATA[<span class="listSeparator">, </span>]]></Snippet>
			<Snippet type="ObjectTypeInstanceListSeparator"><![CDATA[<span class="listSeparator">, </span>]]></Snippet>
			<Snippet type="ObjectTypeInstanceListFinalSeparator"><![CDATA[<span class="listSeparator">, </span>]]></Snippet>
			<Snippet type="ObjectTypeInstanceListClose"><![CDATA[]]></Snippet>
			<Snippet type="FactTypeListOpen"><![CDATA[<br/><span class="indent"><span class="quantifier">Fact Types:</span><span class="smallIndent"><br/>]]></Snippet>
			<Snippet type="FactTypeListPairSeparator"><![CDATA[<br/>]]></Snippet>
			<Snippet type="FactTypeListSeparator"><![CDATA[<br/>]]></Snippet>
			<Snippet type="FactTypeListFinalSeparator"><![CDATA[<br/>]]></Snippet>
			<Snippet type="FactTypeListClose"><![CDATA[</span></span>]]></Snippet>
			<Snippet type="DerivedFromListOpen"><![CDATA[<br/><span class="quantifier">Used By Derivations:</span><span class="smallIndent"><br/>]]></Snippet>
			<Snippet type="DerivedFromListPairSeparator"><![CDATA[<br/>]]></Snippet>
			<Snippet type="DerivedFromListSeparator"><![CDATA[<br/>]]></Snippet>
			<Snippet type="DerivedFromListFinalSeparator"><![CDATA[<br/>]]></Snippet>
			<Snippet type="DerivedFromListClose"><![CDATA[</span>]]></Snippet>
			<Snippet type="GroupEquality"><![CDATA[<span class="quantifier">all or none of the following hold:</span>{0}]]></Snippet>
			<Snippet type="MultilineIndentedCompoundListOpen"><![CDATA[<br/><span class="smallIndent">]]></Snippet>
			<Snippet type="MultilineIndentedCompoundListPairSeparator"><![CDATA[<span class="listSeparator">;</span><br/>]]></Snippet>
			<Snippet type="MultilineIndentedCompoundListSeparator"><![CDATA[<span class="listSeparator">;</span><br/>]]></Snippet>
			<Snippet type="MultilineIndentedCompoundListFinalSeparator"><![CDATA[<span class="listSeparator">;</span><br/>]]></Snippet>
			<Snippet type="MultilineIndentedCompoundListClose"><![CDATA[</span>]]></Snippet>
			<Snippet type="GroupExclusion"><![CDATA[<span class="quantifier">at most one of the following holds:</span>{0}]]></Snippet>
			<Snippet type="GroupExclusiveOr"><![CDATA[<span class="quantifier">exactly one of the following holds:</span>{0}]]></Snippet>
			<Snippet type="Conditional"><![CDATA[<span class="quantifier">if </span>{0}<span class="quantifier"> then </span>{1}]]></Snippet>
			<Snippet type="ConditionalMultiLine"><![CDATA[<span class="quantifier">if </span>{0}<br/><span class="quantifier">then </span>{1}]]></Snippet>
			<Snippet type="ConditionalMultiLineIndented"><![CDATA[<span class="quantifier">if </span>{0}<br/><span class="smallIndent"><span class="quantifier">then </span>{1}</span>]]></Snippet>
			<Snippet type="Equality"><![CDATA[{0}<span class="quantifier"> if and only if </span>{1}]]></Snippet>
			<Snippet type="ExclusionBinaryLeadReading"><![CDATA[<span class="quantifier">no</span> {0}<span class="quantifier"> the same </span>{1}]]></Snippet>
			<Snippet type="ExclusionCombined"><![CDATA[{0} {1}]]></Snippet>
			<Snippet type="FrequencyPopulation"><![CDATA[<span class="quantifier">each</span> {0} <span class="quantifier">in the population of</span> <span class="listSeparator">&#8220;</span>{1}<span class="listSeparator">&#8221;</span> <span class="quantifier">occurs there</span> {2}]]></Snippet>
			<Snippet type="FrequencyTypedOccurrences"><![CDATA[{1} <span class="quantifier">instances of</span> {0}]]></Snippet>
			<Snippet type="FrequencyTypedCombinationOccurrences"><![CDATA[{1} <span class="quantifier">combinations of</span> {0}]]></Snippet>
			<Snippet type="FrequencyUntypedOccurrences"><![CDATA[{0} <span class="quantifier">times</span>]]></Snippet>
			<Snippet type="FrequencyNotPopulatedOrRange"><![CDATA[<span class="quantifier">either</span> <span class="instance">0</span><span class="listSeparator">, </span><span class="logicalOperator">or</span> {0}]]></Snippet>
			<Snippet type="CountRangeExact"><![CDATA[<span class="quantifier">exactly</span> <span class="instance">{0}</span>]]></Snippet>
			<Snippet type="CountRangeMinAndMax"><![CDATA[<span class="quantifier">at least</span> <span class="instance">{0}</span> <span class="quantifier">and at most</span> <span class="instance">{1}</span>]]></Snippet>
			<Snippet type="CountRangeMaxUnbounded"><![CDATA[<span class="quantifier">at least</span> <span class="instance">{0}</span>]]></Snippet>
			<Snippet type="CountRangeMinUnbounded"><![CDATA[<span class="quantifier">at most</span> <span class="instance">{1}</span>]]></Snippet>
			<Snippet type="ObjectTypeCardinality"><![CDATA[<span class="quantifier">each population of </span>{0}<span class="quantifier"> contains </span>{1}]]></Snippet>
			<Snippet type="UnaryRoleCardinality"><![CDATA[<span class="quantifier">for each population of </span><span class="listSeparator">&#8220;</span>{0}<span class="listSeparator">&#8221;,</span><span class="smallIndent"><br/><span class="quantifier">the number of</span> {1} <span class="quantifier">instances is </span>{2}</span>]]></Snippet>
			<Snippet type="CardinalitySingleInstance"><![CDATA[{0} <span class="quantifier">instance</span>]]></Snippet>
			<Snippet type="CardinalityMultipleInstances"><![CDATA[{0} <span class="quantifier">instances</span>]]></Snippet>
			<Snippet type="ExactlyOneUntypedOccurrence" sign="positive"><![CDATA[<span class="quantifier">exactly once</span>]]></Snippet>
			<Snippet type="ExactlyOneUntypedOccurrence" sign="negative"><![CDATA[<span class="quantifier">more than once</span>]]></Snippet>
			<Snippet type="ExactlyOneTypedOccurrence"><![CDATA[<span class="quantifier">exactly one</span> {0}]]></Snippet>
			<Snippet type="AtMostOneTypedOccurrence"><![CDATA[<span class="quantifier">at most one</span> {0}]]></Snippet>
			<Snippet type="LogicalAndOperator"><![CDATA[{0}<span class="logicalOperator"> and </span>{1}]]></Snippet>
			<Snippet type="SameTypeIdentityInequalityOperator"><![CDATA[{0}<span class="logicalOperator"> is not </span>{1}]]></Snippet>
			<Snippet type="CompatibleTypesIdentityInequalityOperator"><![CDATA[<span class="logicalOperator">that </span>{0}<span class="logicalOperator"> is not that </span>{1}]]></Snippet>
			<Snippet type="IsIdentifiedBy"><![CDATA[{0}<span class="quantifier"> is identified by </span>{1}]]></Snippet>
			<Snippet type="Acyclicity"><![CDATA[<span class="quantifier">no {0} may cycle back to itself via one or more traversals through </span>{1}]]></Snippet>
			<Snippet type="AcyclicityWithRoleNumbers"><![CDATA[<span class="quantifier">no {0} may cycle back to itself via one or more instances of the role pair:</span><br/><span class="smallIndent"><span class="quantifier">roles <span class="objectType">{2}</span> and <span class="objectType">{3}</span> of </span>{1}</span>]]></Snippet>
			<Snippet type="StronglyIntransitiveConsequent"><![CDATA[<span class="quantifier">it is not true that {0} is indirectly related to {1} by repeatedly applying this fact type</span>]]></Snippet>
			<Snippet type="LessThanValueComparator"><![CDATA[{0}<span class="quantifier"> is less than </span>{1}]]></Snippet>
			<Snippet type="LessThanOrEqualValueComparator"><![CDATA[{0}<span class="quantifier"> is less than or equal to </span>{1}]]></Snippet>
			<Snippet type="GreaterThanValueComparator"><![CDATA[{0}<span class="quantifier"> is greater than </span>{1}]]></Snippet>
			<Snippet type="GreaterThanOrEqualValueComparator"><![CDATA[{0}<span class="quantifier"> is greater than or equal to </span>{1}]]></Snippet>
			<Snippet type="EqualValueComparator"><![CDATA[{0}<span class="quantifier"> is equal to </span>{1}]]></Snippet>
			<Snippet type="NotEqualValueComparator"><![CDATA[{0}<span class="quantifier"> is not equal to </span>{1}]]></Snippet>

			<!-- Role path snippets -->
			<Snippet type="RolePathHeaderListDirective"><![CDATA[!And !Or Xor !Xor]]></Snippet>
			<Snippet type="RolePathCollapsibleLeadDirective"><![CDATA[And Or Chain]]></Snippet>
			<Snippet type="RolePathCollapsibleListOpenForBackReferenceDirective"><![CDATA[And Or Chain]]></Snippet>
			<Snippet type="RolePathBlockLeadCollapseForSnippetDirective"><![CDATA[AndTailListOpen OrTailListOpen ChainedListLocalRestrictionSeparator ChainedListComplexRestrictionSeparator ChainedListTopLevelComplexRestrictionSeparator]]></Snippet>
			<Snippet type="ImpersonalIdentityCorrelation"><![CDATA[{0} <span class="quantifier">that is</span> {1}]]></Snippet>
			<Snippet type="ImpersonalLeadIdentityCorrelation"><![CDATA[{1} <span class="quantifier">is</span> {0} <span class="quantifier">that</span>]]></Snippet>
			<Snippet type="PersonalIdentityCorrelation"><![CDATA[{0} <span class="quantifier">who is</span> {1}]]></Snippet>
			<Snippet type="PersonalLeadIdentityCorrelation"><![CDATA[{1} <span class="quantifier">is</span> {0} <span class="quantifier">who</span>]]></Snippet>
			<Snippet type="HeadVariableProjection"><![CDATA[{0} <span class="logicalOperator">=</span> {1}]]></Snippet>
			<Snippet type="AggregateParameterDecorator"><![CDATA[{0} <span class="quantifier">for </span> {1}]]></Snippet>
			<Snippet type="AggregateParameterSimpleAggregationContext"><![CDATA[<span class="quantifier">that</span> {0}]]></Snippet>
			<Snippet type="AggregateParameterComplexAggregationContextListOpen"><![CDATA[<span class="quantifier">each unique </span>]]></Snippet>
			<Snippet type="AggregateParameterComplexAggregationContextListSeparator"><![CDATA[<span class="listSeparator">, </span>]]></Snippet>
			<Snippet type="AggregateParameterComplexAggregationContextListClose"><![CDATA[<span class="quantifier"> combination</span>]]></Snippet>
			<Snippet type="AggregateBagProjection"><![CDATA[<span class="quantifier">each</span> {0}]]></Snippet>
			<Snippet type="AggregateSetProjection"><![CDATA[<span class="quantifier">each distinct</span> {0}]]></Snippet>
			<Snippet type="VariableIntroductionClause"><![CDATA[<span class="quantifier">for</span> {0}<span class="listSeparator">, </span>]]></Snippet>
			<Snippet type="VariableIntroductionSeparator"><![CDATA[<span class="logicalOperator"> and </span>]]></Snippet>
			<Snippet type="VariableExistence"><![CDATA[{0} <span class="quantifier">exists</span>]]></Snippet>
			<Snippet type="NegatedVariableExistence"><![CDATA[{0} <span class="quantifier">does not exist</span>]]></Snippet>
			<Snippet type="NegatedVariableExistenceAddedState"><![CDATA[{0} <span class="quantifier">does not exist in added state</span>]]></Snippet>
			<Snippet type="NegatedVariableExistenceDeletedState"><![CDATA[{0} <span class="quantifier">does not exist in deleted state</span>]]></Snippet>
			<Snippet type="NegatedVariableExistenceInitialState"><![CDATA[{0} <span class="quantifier">does not exist in initial state</span>]]></Snippet>
			<Snippet type="ExistentialAddedQuantifier" sign="positive"><![CDATA[<span class="quantifier">some added</span> {0}]]></Snippet>
			<Snippet type="ExistentialAddedQuantifier" sign="negative"><![CDATA[<span class="quantifier">no added</span> {0}]]></Snippet>
			<Snippet type="ExistentialDeletedQuantifier" sign="positive"><![CDATA[<span class="quantifier">some deleted</span> {0}]]></Snippet>
			<Snippet type="ExistentialDeletedQuantifier" sign="negative"><![CDATA[<span class="quantifier">no deleted</span> {0}]]></Snippet>
			<Snippet type="ExistentialInitialQuantifier" sign="positive"><![CDATA[<span class="quantifier">some initial</span> {0}]]></Snippet>
			<Snippet type="ExistentialInitialQuantifier" sign="negative"><![CDATA[<span class="quantifier">no initial</span> {0}]]></Snippet>
			<Snippet type="FactTypeAddedState" sign="positive"><![CDATA[<span class="listSeparator">(</span>{0}<span class="listSeparator">)</span> <span class="quantifier">is added</span>]]></Snippet>
			<Snippet type="FactTypeDeletedState" sign="positive"><![CDATA[<span class="listSeparator">(</span>{0}<span class="listSeparator">)</span> <span class="quantifier">is deleted</span>]]></Snippet>
			<Snippet type="FactTypeInitialState" sign="positive"><![CDATA[<span class="listSeparator">(</span>{0}<span class="listSeparator">)</span> <span class="quantifier">is initial</span>]]></Snippet>

			<!-- Role path list management -->
			<Snippet type="RolePathListCloseOutdentSnippets"><![CDATA[ChainedListClose NegatedChainedListClose AndTailListClose AndNestedListClose NegatedAndLeadListClose NegatedAndTailListClose NegatedAndNestedListClose OrTailListClose OrNestedListClose NegatedOrLeadListClose NegatedOrTailListClose NegatedOrNestedListClose XorLeadListClose XorTailListClose XorNestedListClose NegatedXorLeadListClose NegatedXorTailListClose NegatedXorNestedListClose]]></Snippet>
			<Snippet type="RolePathOutdentAwareTrailingListSnippets"><![CDATA[NegatedAndLeadListSeparator NegatedAndNestedListSeparator NegatedAndTailListSeparator NegatedOrLeadListSeparator NegatedOrNestedListSeparator NegatedOrTailListSeparator XorLeadListSeparator XorNestedListSeparator XorTailListSeparator NegatedXorLeadListSeparator NegatedXorNestedListSeparator NegatedXorTailListSeparator NegatedChainedListClose]]></Snippet>
			<Snippet type="ChainedListOpen"><![CDATA[<span>]]></Snippet>
			<Snippet type="ChainedListLocalRestrictionSeparator"><![CDATA[ <span class="quantifier">where</span> ]]></Snippet>
			<Snippet type="ChainedListLocalRestrictionBackReferenceSeparator"><![CDATA[ ]]></Snippet>
			<Snippet type="ChainedListComplexRestrictionSeparator"><![CDATA[<br/></span><span class="smallIndent"><span class="quantifier">where</span> ]]></Snippet>
			<Snippet type="ChainedListTopLevelComplexRestrictionSeparator"><![CDATA[<br/><span class="quantifier">where</span> ]]></Snippet>
			<Snippet type="ChainedListComplexRestrictionBackReferenceSeparator"><![CDATA[<br/></span><span class="smallIndent">]]></Snippet>
			<Snippet type="ChainedListTopLevelComplexRestrictionBackReferenceSeparator"><![CDATA[<br/>]]></Snippet>
			<Snippet type="ChainedListComplexRestrictionCollapsedLeadSeparator"><![CDATA[<br/></span><span class="smallIndent"><span class="quantifier">and</span> ]]></Snippet>
			<Snippet type="ChainedListTopLevelComplexRestrictionCollapsedLeadSeparator"><![CDATA[<br/><span class="quantifier">and</span> ]]></Snippet>
			<Snippet type="ChainedListCollapsedSeparator"><![CDATA[ ]]></Snippet>
			<Snippet type="ChainedListClose"><![CDATA[</span>]]></Snippet>
			<Snippet type="NegatedChainedListOpen"><![CDATA[<span class="quantifier">it is not true that </span><span class="listSeparator">(</span>]]></Snippet>
			<Snippet type="NegatedChainedListClose"><![CDATA[<span class="listSeparator">)</span>]]></Snippet>
			<Snippet type="KnownFalseChainedListOpen"><![CDATA[<span class="quantifier">it is known to be false that </span><span class="listSeparator">(</span>]]></Snippet>
			<Snippet type="KnownNotFalseChainedListOpen"><![CDATA[<span class="quantifier">it is not known to be false that </span><span class="listSeparator">(</span>]]></Snippet>
			<Snippet type="AndLeadListOpen"><![CDATA[]]></Snippet>
			<Snippet type="AndLeadListSeparator"><![CDATA[<br/><span class="quantifier">and</span> ]]></Snippet>
			<Snippet type="AndLeadListClose"><![CDATA[]]></Snippet>
			<Snippet type="AndTailListOpen"><![CDATA[<br/><span class="smallIndent"><span class="quantifier">where</span> ]]></Snippet>
			<Snippet type="AndTailListCollapsedOpen" groupWith="AndTailListOpen"><![CDATA[<br/><span class="smallIndent">]]></Snippet>
			<Snippet type="AndTailListSeparator"><![CDATA[<br/><span class="quantifier">and</span> ]]></Snippet>
			<Snippet type="AndTailListClose"><![CDATA[</span>]]></Snippet>
			<Snippet type="AndNestedListOpen"><![CDATA[<span>]]></Snippet>
			<Snippet type="AndNestedListCollapsedOpen" groupWith="AndNestedListOpen"><![CDATA[<span>]]></Snippet>
			<Snippet type="AndNestedListSeparator"><![CDATA[</span><br/><span class="smallIndent"><span class="quantifier">and</span> ]]></Snippet>
			<Snippet type="AndNestedListClose"><![CDATA[</span>]]></Snippet>
			<Snippet type="NegatedAndLeadListOpen"><![CDATA[<span class="quantifier">at least one of the following is <em>false:</em></span><br/><span class="smallIndent">]]></Snippet>
			<Snippet type="NegatedAndLeadListSeparator"><![CDATA[<span class="listSeparator">;</span><br/>]]></Snippet>
			<Snippet type="NegatedAndLeadListClose"><![CDATA[</span>]]></Snippet>
			<Snippet type="NegatedAndTailListOpen"><![CDATA[<span class="quantifier">at least one of the following is <em>false:</em></span><br/><span class="smallIndent">]]></Snippet>
			<Snippet type="NegatedAndTailListCollapsedOpen" groupWith="NegatedAndTailListOpen"><![CDATA[<span class="quantifier">at least one of the following is <em>false:</em></span><br/><span class="smallIndent">]]></Snippet>
			<Snippet type="NegatedAndTailListSeparator"><![CDATA[<span class="listSeparator">;</span><br/>]]></Snippet>
			<Snippet type="NegatedAndTailListClose"><![CDATA[</span>]]></Snippet>
			<Snippet type="NegatedAndNestedListOpen"><![CDATA[<span class="quantifier">at least one of the following is <em>false:</em></span><br/><span class="smallIndent">]]></Snippet>
			<Snippet type="NegatedAndNestedListCollapsedOpen" groupWith="NegatedAndNestedListOpen"><![CDATA[<span class="quantifier">at least one of the following is <em>false:</em></span><br/><span class="smallIndent">]]></Snippet>
			<Snippet type="NegatedAndNestedListSeparator"><![CDATA[<span class="listSeparator">;</span><br/>]]></Snippet>
			<Snippet type="NegatedAndNestedListClose"><![CDATA[</span>]]></Snippet>
			<Snippet type="OrLeadListOpen"><![CDATA[]]></Snippet>
			<Snippet type="OrLeadListSeparator"><![CDATA[<br/><span class="quantifier">or</span> ]]></Snippet>
			<Snippet type="OrLeadListClose"><![CDATA[]]></Snippet>
			<Snippet type="OrTailListOpen"><![CDATA[<br/><span class="smallIndent"><span class="quantifier">where</span> ]]></Snippet>
			<Snippet type="OrTailListCollapsedOpen" groupWith="OrTailListOpen"><![CDATA[<br/><span class="smallIndent">]]></Snippet>
			<Snippet type="OrTailListSeparator"><![CDATA[<br/><span class="quantifier">or</span> ]]></Snippet>
			<Snippet type="OrTailListClose"><![CDATA[</span>]]></Snippet>
			<Snippet type="OrNestedListOpen"><![CDATA[<span>]]></Snippet>
			<Snippet type="OrNestedListCollapsedOpen" groupWith="OrNestedListOpen"><![CDATA[<span>]]></Snippet>
			<Snippet type="OrNestedListSeparator"><![CDATA[</span><br/><span class="smallIndent"><span class="quantifier">or</span> ]]></Snippet>
			<Snippet type="OrNestedListClose"><![CDATA[</span>]]></Snippet>
			<Snippet type="NegatedOrLeadListOpen"><![CDATA[<span class="quantifier">all of the following are <em>false:</em></span><br/><span class="smallIndent">]]></Snippet>
			<Snippet type="NegatedOrLeadListSeparator"><![CDATA[<span class="listSeparator">;</span><br/>]]></Snippet>
			<Snippet type="NegatedOrLeadListClose"><![CDATA[</span>]]></Snippet>
			<Snippet type="NegatedOrTailListOpen"><![CDATA[<span class="quantifier">all of the following are <em>false:</em></span><br/><span class="smallIndent">]]></Snippet>
			<Snippet type="NegatedOrTailListCollapsedOpen" groupWith="NegatedOrTailListOpen"><![CDATA[<span class="quantifier">all of the following are <em>false:</em></span><br/><span class="smallIndent">]]></Snippet>
			<Snippet type="NegatedOrTailListSeparator"><![CDATA[<span class="listSeparator">;</span><br/>]]></Snippet>
			<Snippet type="NegatedOrTailListClose"><![CDATA[</span>]]></Snippet>
			<Snippet type="NegatedOrNestedListOpen"><![CDATA[<span class="quantifier">all of the following are <em>false:</em></span><br/><span class="smallIndent">]]></Snippet>
			<Snippet type="NegatedOrNestedListCollapsedOpen" groupWith="NegatedOrNestedListOpen"><![CDATA[<span class="quantifier">all of the following are <em>false:</em></span><br/><span class="smallIndent">]]></Snippet>
			<Snippet type="NegatedOrNestedListSeparator"><![CDATA[<span class="listSeparator">;</span><br/>]]></Snippet>
			<Snippet type="NegatedOrNestedListClose"><![CDATA[</span>]]></Snippet>
			<Snippet type="XorLeadListOpen"><![CDATA[<span class="quantifier">exactly one of the following is <em>true:</em></span><br/><span class="smallIndent">]]></Snippet>
			<Snippet type="XorLeadListSeparator"><![CDATA[<span class="listSeparator">;</span><br/>]]></Snippet>
			<Snippet type="XorLeadListClose"><![CDATA[</span>]]></Snippet>
			<Snippet type="XorTailListOpen"><![CDATA[<span class="quantifier">exactly one of the following is <em>true:</em></span><br/><span class="smallIndent">]]></Snippet>
			<Snippet type="XorTailListCollapsedOpen" groupWith="XorTailListOpen"><![CDATA[<span class="quantifier">exactly one of the following is <em>true:</em></span><br/><span class="smallIndent">]]></Snippet>
			<Snippet type="XorTailListSeparator"><![CDATA[<span class="listSeparator">;</span><br/>]]></Snippet>
			<Snippet type="XorTailListClose"><![CDATA[</span>]]></Snippet>
			<Snippet type="XorNestedListOpen"><![CDATA[<span class="quantifier">exactly one of the following is <em>true:</em></span><br/><span class="smallIndent">]]></Snippet>
			<Snippet type="XorNestedListCollapsedOpen" groupWith="XorNestedListOpen"><![CDATA[<span class="quantifier">exactly one of the following is <em>true:</em></span><br/><span class="smallIndent">]]></Snippet>
			<Snippet type="XorNestedListSeparator"><![CDATA[<span class="listSeparator">;</span><br/>]]></Snippet>
			<Snippet type="XorNestedListClose"><![CDATA[</span>]]></Snippet>
			<Snippet type="NegatedXorLeadListOpen"><![CDATA[<span class="quantifier">either none or many of the following are <em>true:</em></span><br/><span class="smallIndent">]]></Snippet>
			<Snippet type="NegatedXorLeadListSeparator"><![CDATA[<span class="listSeparator">;</span><br/>]]></Snippet>
			<Snippet type="NegatedXorLeadListClose"><![CDATA[</span>]]></Snippet>
			<Snippet type="NegatedXorTailListOpen"><![CDATA[<span class="quantifier">either none or many of the following are <em>true:</em></span><br/><span class="smallIndent">]]></Snippet>
			<Snippet type="NegatedXorTailListCollapsedOpen" groupWith="NegatedXorTailListOpen"><![CDATA[<span class="quantifier">either none or many of the following are <em>true:</em></span><br/><span class="smallIndent">]]></Snippet>
			<Snippet type="NegatedXorTailListSeparator"><![CDATA[<span class="listSeparator">;</span><br/>]]></Snippet>
			<Snippet type="NegatedXorTailListClose"><![CDATA[</span>]]></Snippet>
			<Snippet type="NegatedXorNestedListOpen"><![CDATA[<span class="quantifier">either none or many of the following are <em>true:</em></span><br/><span class="smallIndent">]]></Snippet>
			<Snippet type="NegatedXorNestedListCollapsedOpen" groupWith="NegatedXorNestedListOpen"><![CDATA[<span class="quantifier">either none or many of the following are <em>true:</em></span><br/><span class="smallIndent">]]></Snippet>
			<Snippet type="NegatedXorNestedListSeparator"><![CDATA[<span class="listSeparator">;</span><br/>]]></Snippet>
			<Snippet type="NegatedXorNestedListClose"><![CDATA[</span>]]></Snippet>
		</Snippets>
	</Language>
</Languages>
