<?xml version="1.0" encoding="utf-8"?>
<xs:schema
	attributeFormDefault="unqualified"
	elementFormDefault="qualified"
	targetNamespace="http://schemas.neumont.edu/ORM/SDK/Verbalization"
	xmlns="http://schemas.neumont.edu/ORM/SDK/Verbalization"
	xmlns:ve="http://schemas.neumont.edu/ORM/SDK/Verbalization"
	xmlns:xs="http://www.w3.org/2001/XMLSchema">
	<xs:annotation>
		<xs:appinfo source="Common Public License Copyright Notice">
			Natural Object-Role Modeling Architect for Visual Studio

			Copyright © Neumont University. All rights reserved.
			Copyright © ORM Solutions, LLC. All rights reserved.

			The use and distribution terms for this software are covered by the
			Common Public License 1.0 (http://opensource.org/licenses/cpl) which
			can be found in the file CPL.txt at the root of this distribution.
			By using this software in any fashion, you are agreeing to be bound by
			the terms of this license.

			You must not remove this notice, or any other, from this software.
		</xs:appinfo>
	</xs:annotation>
	<xs:redefine schemaLocation="../VerbalizationUntypedSnippets.xsd">
		<xs:simpleType name="SnippetTypeEnum">
			<xs:restriction base="SnippetTypeEnum">
				<xs:enumeration value="DescriptionVerbalization">
					<xs:annotation>
						<xs:documentation>Description: Verbalizes the text specified for an element description. Format: Informal Description: {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="DerivationNoteVerbalization">
					<xs:annotation>
						<xs:documentation>Description: Verbalizes the informal note specified for an element derivation rule. Format: Derivation  Note: {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="NotesVerbalization">
					<xs:annotation>
						<xs:documentation>Description: Verbalizes the text specified for a model note. Format: Notes: {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ObjectifiesFactTypeVerbalization">
					<xs:annotation>
						<xs:documentation>Description: Verbalizes the objectification made for a FactType. Format: {0} objectifies "{1}"</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ReferenceModeVerbalization">
					<xs:annotation>
						<xs:documentation>Description: Verbalizes the mode in which an object is referenced. Format: Reference Mode: {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="PortableDataTypeVerbalization">
					<xs:annotation>
						<xs:documentation>Description: Verbalizes an object's portable data type, plus a suffix showing optional data type properties. Format: Data Type: {0}{1}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="PortableDataTypeLengthAndScale">
					<xs:annotation>
						<xs:documentation>Description: Verbalizes the length (used here as precision) and scale of a portable data type. Format: ({0},{1})</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="PortableDataTypeLength">
					<xs:annotation>
						<xs:documentation>Description: Verbalizes the length of a portable data type. Format: ({0})</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="IndependentVerbalization">
					<xs:annotation>
						<xs:documentation>Description: Verbalizes an object as being independent. Format: {0} is independent (it may have instances that play no other roles)</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ReferenceSchemeVerbalization">
					<xs:annotation>
						<xs:documentation>Description: Verbalizes the way in which an object is referenced. Format: Reference Scheme: {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ObjectType">
					<xs:annotation>
						<xs:documentation>Description: Verbalizes an object. {0} is the name, {1} is the guid id for the element</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="EntityTypeVerbalization">
					<xs:annotation>
						<xs:documentation>Description: Verbalizes an object as being an entity type. Format: {0} is an entity type</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ValueTypeVerbalization">
					<xs:annotation>
						<xs:documentation>Description: Verbalizes an object as being a value type. Format: {0} is a value type</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ObjectTypeWithSubscript">
					<xs:annotation>
						<xs:documentation>Description: Verbalizes an object type with a subscript. {0} is the name, {1} is the guid id for the element, {2} is the subscript</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ObjectTypeMissing">
					<xs:annotation>
						<xs:documentation>Description: Verbalizes an object type as being missing.</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ObjectTypeMissingWithIdentifier">
					<xs:annotation>
						<xs:documentation>Description: Verbalizes an object type as being missing with an identifier. Used for items that reference an object type but have their own id. {0} is the subscript, {1} is the identifier.</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="HyphenBoundPredicatePart">
					<xs:annotation>
						<xs:documentation>Description: Format string to combine predicate text from hyphen binding with the replacement field. Format: {0}{{0}}{1}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="PredicatePart">
					<xs:annotation>
						<xs:documentation>Description: Format string to decorate predicate text in between replacement fields. Must contain a {{0}}. Replacement field {0} is the FactType name, and {1} is the guid id for the element.</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ModelVerbalization">
					<xs:annotation>
						<xs:documentation>Description: Format string to verbalize the model element. Replacement field {0} is the Model name, and {1} is the guid id for the model.</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ImpersonalPronoun">
					<xs:annotation>
						<xs:documentation>Description: Use in place of a role player name to reference an impersonal object type with a clear antecedent.</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="PersonalPronoun">
					<xs:annotation>
						<xs:documentation>Description: Use in place of a role player name to reference a personal object type with a clear antecedent.</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ReflexivePronoun">
					<xs:annotation>
						<xs:documentation>Description: Use in place of a role player name to refer to an object type with a clear antecedent.</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="DefiniteArticle">
					<xs:annotation>
						<xs:documentation>Description: Used for 'that' before an object name to signify a back reference to a uniquely qualified object type. Format: that {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="RoleHeader">
					<xs:annotation>
						<xs:documentation>Description: A header for contained role data.  Format: role for {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="RoleHeaderWithName">
					<xs:annotation>
						<xs:documentation>Description: A role header used to indicate a role name.  Format: role for {0}, named {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="UniversalQuantifier">
					<xs:annotation>
						<xs:documentation>Description: Used for 'each' before an object name to signify the quantity associated with the object.  Format: each {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="AtMostOneQuantifier">
					<xs:annotation>
						<xs:documentation>Description: Used for 'at most one' before an object name to signify the quantity may only be zero or one.  Format: at most one {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ExactlyOneQuantifier">
					<xs:annotation>
						<xs:documentation>Description: Used for 'exactly one' before an object name to signify the quantity may only be one.  Format: exactly one {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ForEachCompactQuantifier">
					<xs:annotation>
						<xs:documentation>Description: Verbalizes for each instance of an object, some rule applies to those instances.  Format: for each {0}, {1}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ForEachNegatableCompactQuantifier">
					<xs:annotation>
						<xs:documentation>Description: Verbalizes for each instance of an object, some rule applies to those instances.
Format positive: for each {0}, {1}
Format negative: for some {0}, {1}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ForEachIndentedQuantifier">
					<xs:annotation>
						<xs:documentation>Description: Verbalizes for each instance of an object then creates a line break where the rules that apply to those instances are listed.  Format: for each {0}, \n{1}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ForEachNegatableIndentedQuantifier">
					<xs:annotation>
						<xs:documentation>Description: Verbalizes for each instance of an object then creates a line break where the rules that apply to those instances are listed.
Format positive: for each {0}, \n{1}
Format negative: for some {0}, \n{1}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ExistentialQuantifier">
					<xs:annotation>
						<xs:documentation>Description: Used for 'some' before an object name to signify the context in which the object is being referred to.  Format: some {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ExistentialAddedQuantifier">
					<xs:annotation>
						<xs:documentation>Description: Used for 'some' before the name of an object in the 'added' dynamic state to signify the context in which the object is being referred to.  Format: some added {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ExistentialDeletedQuantifier">
					<xs:annotation>
						<xs:documentation>Description: Used for 'some' before the name of an object in the 'deleted' dynamic state to signify the context in which the object is being referred to.  Format: some deleted {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ExistentialInitialQuantifier">
					<xs:annotation>
						<xs:documentation>Description: Used for 'some' before the name of an object in the 'initial' dynamic state to signify the context in which the object is being referred to.  Format: some initial {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="FactTypeAddedState">
					<xs:annotation>
						<xs:documentation>Description: Used to indicate that a fact type is in the 'added' dynamic state.  Format: ({0}) is added</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="FactTypeDeletedState">
					<xs:annotation>
						<xs:documentation>Description: Used to indicate that a fact type is in the 'initial' dynamic state.  Format: ({0}) is deleted</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="FactTypeInitialState">
					<xs:annotation>
						<xs:documentation>Description: Used to indicate that a fact type is in the 'initial' dynamic state.  Format: ({0}) is initial</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="IdentityReferenceQuantifier">
					<xs:annotation>
						<xs:documentation>Description: Used for 'the same' before an object name to signify exactly which object is being reference.  Format: the same {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ReflexiveQuantifier">
					<xs:annotation>
						<xs:documentation>Description: Used in place of a reflexive pronoun when an antecedent is not guaranteed.  Format: {0} itself</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ImpliedModalNecessityOperator">
					<xs:annotation>
						<xs:documentation>Description: Used to define the strength of the constraint.  Alethic, positive adds nothing before an object name.  Deontic, positive adds 'it is obligatory that' before an object name.  Alethic, negative adds 'it is impossible that' before an object name.  Deontic, negative adds 'it is forbidden that' before an object name.
Format for alethic and positive: {0}  Format for deontic and positive: it is obligatory that {0}  Format for alethic and negative: it is impossible that {0}  Format for deontic and negative: it is forbidden that {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ContextCombinationOccurrence">
					<xs:annotation>
						<xs:documentation>Description: Verbalizes a range of combination occurrences where the combination has been previous specified.  Format: that combination occurs {1} in this context</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ContextCombinationAssociation">
					<xs:annotation>
						<xs:documentation>Description: Verbalizes a range of combination occurrences for a specified type where the combination has been previous specified.  Format: that combination is associated with {1} in this context</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="CombinationUniqueness">
					<xs:annotation>
						<xs:documentation>Description: Verbalizes uniqueness of a combination.  Format: {0} combination is unique</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="SingularExistenceImplicationOperator">
					<xs:annotation>
						<xs:documentation>Description: Verbalizes an existence condition for a single item and a consequent.  Format: there is {0} such that {1}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="PluralExistenceImplicationOperator">
					<xs:annotation>
						<xs:documentation>Description: Verbalizes an existence condition for a multiple items and a consequent.  Format: there are {0} such that {1}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="MoreThanOneQuantifier">
					<xs:annotation>
						<xs:documentation>Description: Used for 'more than one' before an object name to define quantity as more than one.  Format: more than one {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ModalPossibilityOperator">
					<xs:annotation>
						<xs:documentation>Description: Used to define the strength of the constraint.  Alethic, positive adds 'it is possible that' before an object name.  Deontic, positive adds 'it is permitted that' before an object name.  Alethic, negative adds 'it is impossible that' before an object name.  Deontic, negative adds 'it is forbidden that' before an object name.
Format for alethic and positive: it is possible that {0}  Format for deontic and positive: it is permitted that {0}  Format for alethic and negative: it is impossible that {0}  Format for deontic and negative: it is forbidden that {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ModalNecessityOperator">
					<xs:annotation>
						<xs:documentation>Description: Used to define the strength of the constraint.  Alethic adds 'it is necessary that' before  an object name.  Deontic adds 'it is obligatory that' before an object name.
Format for alethic: it is necessary that {0}  Format for deontic: it is obligatory that {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="NegativeReadingForUnaryOnlyDisjunctiveMandatory">
					<xs:annotation>
						<xs:documentation>Description: Used to verbalize that an object is not included in a set.  Format: some {0} participates in none of the following:{1}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>

				<xs:enumeration value="CompoundListOpen">
					<xs:annotation>
						<xs:documentation>Description: Text that is at the beginning of a compound list.</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="CompoundListPairSeparator">
					<xs:annotation>
						<xs:documentation>Description: Used to separate items in a compound list.  Format: ;</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="CompoundListSeparator">
					<xs:annotation>
						<xs:documentation>Description: Used to separate items in a compound list.  Format: ;</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="CompoundListFinalSeparator">
					<xs:annotation>
						<xs:documentation>Description: Used after the last item listed in a compound list.  Format: ;</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="CompoundListClose">
					<xs:annotation>
						<xs:documentation>Description: Text that is at the end of a compound list.</xs:documentation>
					</xs:annotation>
				</xs:enumeration>

				<xs:enumeration value="EqualsListOpen">
					<xs:annotation>
						<xs:documentation>Description: Text that is at the beginning of an equals list.</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="EqualsListPairSeparator">
					<xs:annotation>
						<xs:documentation>Description: Used to separate items in an equals list.  Format: =</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="EqualsListSeparator">
					<xs:annotation>
						<xs:documentation>Description: Used to separate items in an equals list.  Format: =</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="EqualsListFinalSeparator">
					<xs:annotation>
						<xs:documentation>Description: Used between the last two items in an equals list.  Format: =</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="EqualsListClose">
					<xs:annotation>
						<xs:documentation>Description: Text that is at the end of an equals list.</xs:documentation>
					</xs:annotation>
				</xs:enumeration>

				<xs:enumeration value="IdentityEqualityListOpen">
					<xs:annotation>
						<xs:documentation>Description: Text that is at the beginning of an identity equality list.</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="IdentityEqualityListPairSeparator">
					<xs:annotation>
						<xs:documentation>Description: Used to separate items in an identity equality list.  Format: that is a</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="IdentityEqualityListSeparator">
					<xs:annotation>
						<xs:documentation>Description: Used to separate items in an identity equality list.  Format: that is a</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="IdentityEqualityListFinalSeparator">
					<xs:annotation>
						<xs:documentation>Description: Used between the last two items in an identity equality list.  Format: that is a</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="IdentityEqualityListClose">
					<xs:annotation>
						<xs:documentation>Description: Text that is at the end of an identity equality list.</xs:documentation>
					</xs:annotation>
				</xs:enumeration>

				<xs:enumeration value="IndentedCompoundListOpen">
					<xs:annotation>
						<xs:documentation>Description: Text that is at the beginning of an indented compound list.  Format: \n</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="IndentedCompoundListPairSeparator">
					<xs:annotation>
						<xs:documentation>Description: Used to separate items in an indented compound list.  Format: ;</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="IndentedCompoundListSeparator">
					<xs:annotation>
						<xs:documentation>Description: Used to separate items in an indented compound list.  Format: ;</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="IndentedCompoundListFinalSeparator">
					<xs:annotation>
						<xs:documentation>Description: Used to separate the last two items in an indented compound list.  Format: ;</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="IndentedCompoundListClose">
					<xs:annotation>
						<xs:documentation>Description: Text that is at the end of an indented compound list.</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="IndentedListOpen">
					<xs:annotation>
						<xs:documentation>Description: Text used at the beginning of an indented list.  Format: \n</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="IndentedListPairSeparator">
					<xs:annotation>
						<xs:documentation>Description: Used to separate items in an indented list.  Format: and</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="IndentedListSeparator">
					<xs:annotation>
						<xs:documentation>Description: Used to separate items in an indented list.  Format: and</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="IndentedListFinalSeparator">
					<xs:annotation>
						<xs:documentation>Description: Used to separate the last two items in an indented list.  Format: and</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="IndentedListClose">
					<xs:annotation>
						<xs:documentation>Description: Text used at the end of an indented list.</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="IndentedLogicalAndListOpen">
					<xs:annotation>
						<xs:documentation>Description: Text used at the beginning of an indented logical and list.  Format: \n</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="IndentedLogicalAndListPairSeparator">
					<xs:annotation>
						<xs:documentation>Description: Used to separate items in an indented logical and list.  Format: and that</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="IndentedLogicalAndListSeparator">
					<xs:annotation>
						<xs:documentation>Description: Used to separate items in an indented logical and list.  Format: and that</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="IndentedLogicalAndListFinalSeparator">
					<xs:annotation>
						<xs:documentation>Description: Used to separate the last two items in an indented logical and list.  Format: and that</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="IndentedLogicalAndListClose">
					<xs:annotation>
						<xs:documentation>Description: Text used at the end of an indented logical and list.</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="IndentedLogicalOrListOpen">
					<xs:annotation>
						<xs:documentation>Description: Text used at the beginning of an indented logical or list.  Format: \n</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="IndentedLogicalOrListPairSeparator">
					<xs:annotation>
						<xs:documentation>Description: Used to separate items in an indented logical or list.  Format: or</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="IndentedLogicalOrListSeparator">
					<xs:annotation>
						<xs:documentation>Description: Used to separate items in an indented logical or list.  Format: or</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="IndentedLogicalOrListFinalSeparator">
					<xs:annotation>
						<xs:documentation>Description: Used to separate the last two items in an indented logical or list.  Format: or</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="IndentedLogicalOrListClose">
					<xs:annotation>
						<xs:documentation>Description: Text used at the end of an indented logical or list.</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ConstraintProvidesPreferredIdentifier">
					<xs:annotation>
						<xs:documentation>Description: Verbalizes the preferred identifier for an object.
Format: this association with {0}provides the preferred identification scheme for {1}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="SimpleLogicalAndListOpen">
					<xs:annotation>
						<xs:documentation>Description: Text used at the beginning of a simple logical and list.</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="SimpleLogicalAndListPairSeparator">
					<xs:annotation>
						<xs:documentation>Description: Used to separate items in a simple logical and list.  Format: and</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="SimpleLogicalAndListSeparator">
					<xs:annotation>
						<xs:documentation>Description: Used to separate items in a simple logical and list.  Format: and</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="SimpleLogicalAndListFinalSeparator">
					<xs:annotation>
						<xs:documentation>Description: Used to separate the last two items in a simple logical and list.  Format: and</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="SimpleLogicalAndListClose">
					<xs:annotation>
						<xs:documentation>Description: Text used at the end of a simple logical and list.</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="TopLevelIndentedLogicalAndListOpen">
					<xs:annotation>
						<xs:documentation>Description: Text used at the beginning of a top level indented logical and list.</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="TopLevelIndentedLogicalAndListPairSeparator">
					<xs:annotation>
						<xs:documentation>Description: Used to separate items in a top level indented logical and list.  Format: \n and that</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="TopLevelIndentedLogicalAndListSeparator">
					<xs:annotation>
						<xs:documentation>Description: Used to separate items in a top level indented logical and list.  Format: \n and that</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="TopLevelIndentedLogicalAndListFinalSeparator">
					<xs:annotation>
						<xs:documentation>Description: Used to separate the last two items in a top level indented logical and list.  Format: \n and that</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="TopLevelIndentedLogicalAndListClose">
					<xs:annotation>
						<xs:documentation>Description: Text used at the end of a top level indented logical and list.</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="SimpleLogicalOrListOpen">
					<xs:annotation>
						<xs:documentation>Description: Text used at the beginning of a simple logical or list.</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="SimpleLogicalOrListPairSeparator">
					<xs:annotation>
						<xs:documentation>Description: Used to separate items in a simple logical or list.  Format: or</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="SimpleLogicalOrListSeparator">
					<xs:annotation>
						<xs:documentation>Description: Used to separate items in a simple logical or list.  Format: or</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="SimpleLogicalOrListFinalSeparator">
					<xs:annotation>
						<xs:documentation>Description:  Used to separate the last two items in a simple logical or list.  Format: or</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="SimpleLogicalOrListClose">
					<xs:annotation>
						<xs:documentation>Description:  Text used at the end of a simple logical or list.</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="TopLevelIndentedLogicalOrListOpen">
					<xs:annotation>
						<xs:documentation>Description: Text used at the beginning of a top level indented logical or list.</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="TopLevelIndentedLogicalOrListPairSeparator">
					<xs:annotation>
						<xs:documentation>Description: Used to separate items in a top level indented logical or list.  Format: \n or</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="TopLevelIndentedLogicalOrListSeparator">
					<xs:annotation>
						<xs:documentation>Description: Used to separate items in a top level indented logical or list.  Format: \n or</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="TopLevelIndentedLogicalOrListFinalSeparator">
					<xs:annotation>
						<xs:documentation>Description: Used to separate the last two items in a top level indented logical or list.  Format: \n or</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="TopLevelIndentedLogicalOrListClose">
					<xs:annotation>
						<xs:documentation>Description: Text used at the end of a top level indented logical or list.</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="SimpleListOpen">
					<xs:annotation>
						<xs:documentation>Description:  Text used at the end of a simple list.</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="SimpleListPairSeparator">
					<xs:annotation>
						<xs:documentation>Description: Used to separate items in simple list with two items. Format: and</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="SimpleListSeparator">
					<xs:annotation>
						<xs:documentation>Description: Used to separate items in simple list. Format: ,</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="SimpleListFinalSeparator">
					<xs:annotation>
						<xs:documentation>Description: Used to separate the final item in simple list. Format: , and</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="SimpleListClose">
					<xs:annotation>
						<xs:documentation>Description: Text used at the end of a simple list.</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="CompactSimpleListOpen">
					<xs:annotation>
						<xs:documentation>Description: Text used at the beginning of a compact simple list.</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="CompactSimpleListPairSeparator">
					<xs:annotation>
						<xs:documentation>Description: Used to separate items in a compact simple list.  Format: ,</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="CompactSimpleListSeparator">
					<xs:annotation>
						<xs:documentation>Description: Used to separate items in a compact simple list.  Format: ,</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="CompactSimpleListFinalSeparator">
					<xs:annotation>
						<xs:documentation>Description: Used to separate the last two items in a compact simple list.  Format: ,</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="CompactSimpleListClose">
					<xs:annotation>
						<xs:documentation>Description: Text used at the end of a compact simple list.</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="CompactSimpleOrListOpen">
					<xs:annotation>
						<xs:documentation>Description: Text used at the beginning of a compact simple or list.</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="CompactSimpleOrListPairSeparator">
					<xs:annotation>
						<xs:documentation>Description: Used to separate items in a compact simple or list.  Format: or </xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="CompactSimpleOrListSeparator">
					<xs:annotation>
						<xs:documentation>Description: Used to separate items in a compact simple or list.  Format: ,</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="CompactSimpleOrListFinalSeparator">
					<xs:annotation>
						<xs:documentation>Description: Used to separate the last two items in a compact simple or list.  Format: , or </xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="CompactSimpleOrListClose">
					<xs:annotation>
						<xs:documentation>Description: Text used at the end of a compact simple or list.</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="GroupEquality">
					<xs:annotation>
						<xs:documentation>Description: Assert group equality. Format: all or none of the following hold: {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="GroupExclusiveOr">
					<xs:annotation>
						<xs:documentation>Description: Assert group exclusive-or. Format: exactly one of the following holds: {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="GroupExclusion">
					<xs:annotation>
						<xs:documentation>Description: Assert group exclusion. Format: at most one of the following holds: {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="MultilineIndentedCompoundListOpen">
					<xs:annotation>
						<xs:documentation>Description: Text used at the beginning of an indented compound list with one item on each line.</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="MultilineIndentedCompoundListPairSeparator">
					<xs:annotation>
						<xs:documentation>Description: Used to separate items in an indented compound list.  Format: ;</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="MultilineIndentedCompoundListSeparator">
					<xs:annotation>
						<xs:documentation>Description: Used to separate items in an indented compound list.  Format: ;</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="MultilineIndentedCompoundListFinalSeparator">
					<xs:annotation>
						<xs:documentation>Description: Used to separate the last two items in an indented compound list.  Format: ;</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="MultilineIndentedCompoundListClose">
					<xs:annotation>
						<xs:documentation>Description: Text used at the end of an indented compound list.  Format:</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="CloseVerbalizationSentence">
					<xs:annotation>
						<xs:documentation>Description: Text used to close a verbalized sentence.  Format: .</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="CombinationIdentifier">
					<xs:annotation>
						<xs:documentation>Description: Verbalizes a combination.  Format: {0} combination</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="OccursInPopulation">
					<xs:annotation>
						<xs:documentation>Description: Verbalizes that an object occurs at most once or more than once in a given population.
Format positive: in each population of {1}, {0} occurs at most once
Format negative: {0} occurs more than once in the same population of {1}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="OneQuantifier">
					<xs:annotation>
						<xs:documentation>Description: Used for 'at most one' or 'more than one' before an object.
Format positive: at most one {0}
Format negative: more than one {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="PeriodSeparator">
					<xs:annotation>
						<xs:documentation>Description: Used to delimit two snippet replacements by a snippet.
Format: {0}.{1}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ReferenceScheme">
					<xs:annotation>
						<xs:documentation>Description: Used to enclose and format a reference scheme replacement in brackets.
Format: {0}({1})</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="SingleValueValueConstraint">
					<xs:annotation>
						<xs:documentation>Description: Used to verbalize a value range constraint with one range, where the min value is equal to the max value.
Format: the possible value of {0} is {1}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="MultiValueValueConstraint">
					<xs:annotation>
						<xs:documentation>Description: Used to verbalize a value range constraint with multiple values.
Format: the possible values of {0} are {1}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="DefaultValuePrefix">
					<xs:annotation>
						<xs:documentation>Description: Used to verbalize a default value.
Format: default value: {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="SelfReference">
					<xs:annotation>
						<xs:documentation>Description: Allows the snippet replacement to verbalize itself. Format: {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="MinClosedMaxClosed">
					<xs:annotation>
						<xs:documentation>Description: Used to verbalize a range inclusion with the minimum bound closed and the maximum bound closed.
Format: at least {0} to at most {1}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="MinClosedMaxOpen">
					<xs:annotation>
						<xs:documentation>Description: Used to verbalize a range inclusion with the minimum bound closed and the maximum bound open.
Format: at least {0} to below {1}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="MinClosedMaxUnbounded">
					<xs:annotation>
						<xs:documentation>Description: Used to verbalize a range inclusion with the minimum bound closed and the maximum unbounded.
Format: at least {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="MinOpenMaxClosed">
					<xs:annotation>
						<xs:documentation>Description: Used to verbalize a range inclusion with the minimum bound open and the maximum bound closed.
Format: above {0} to at most {1}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="MinOpenMaxOpen">
					<xs:annotation>
						<xs:documentation>Description: Used to verbalize a range inclusion with the minimum bound open and the maximum bound open.
Format: above {0} to below {1}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="MinOpenMaxUnbounded">
					<xs:annotation>
						<xs:documentation>Description: Used to verbalize a range inclusion with the minimum bound open and the maximum unbounded.
Format: above {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="MinUnboundedMaxClosed">
					<xs:annotation>
						<xs:documentation>Description: Used to verbalize a range inclusion with the minimum unbounded and the maximum bound closed.
Format: at most {1}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="MinUnboundedMaxOpen">
					<xs:annotation>
						<xs:documentation>Description: Used to verbalize a range inclusion with the minimum unbounded and the maximum bound open.
Format: below {1}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="InQuantifier">
					<xs:annotation>
						<xs:documentation>Description: Used to verbalize [RolePlayer in Fact], e.g. Person in Person has Age.
Format: {0} in {1}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ErrorOpenPrimaryReport">
					<xs:annotation>
						<xs:documentation>Description: Used to open a primary error report. Primary error reports block further verbalization.</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ErrorClosePrimaryReport">
					<xs:annotation>
						<xs:documentation>Description: Close a primary error report opened with ErrorOpenPrimaryReport</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ErrorPrimary">
					<xs:annotation>
						<xs:documentation>Description: Used to verbalize a single primary error.
Replacement: {0}=error text,{1}=error id
Format: Model Error: {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ErrorOpenSecondaryReport">
					<xs:annotation>
						<xs:documentation>Description: Used to open a secondary error report. Secondary reports contain errors that do not block verbalization.
Replacement: {0}=error text,{1}=error id
Format: Model Error: {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ErrorCloseSecondaryReport">
					<xs:annotation>
						<xs:documentation>Description: Close a secondary error report opened with ErrorOpenSecondaryReport.</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ErrorSecondary">
					<xs:annotation>
						<xs:documentation>Description: Used to verbalize a single secondary error.
Format: Model Error: {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="VerbalizerNewLine">
					<xs:annotation>
						<xs:documentation>Description: Used by the verbalizer to enter a new line. Format: \n</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="VerbalizerIncreaseIndent">
					<xs:annotation>
						<xs:documentation>Description: Used by the verbalizer to indent a child verbalization</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="VerbalizerDecreaseIndent">
					<xs:annotation>
						<xs:documentation>Description: Used by the verbalizer to close indent opened by VerbalizerIncreaseIndent</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="VerbalizerOpenVerbalization">
					<xs:annotation>
						<xs:documentation>Description: Used by the verbalizer around a single verbalization</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="VerbalizerCloseVerbalization">
					<xs:annotation>
						<xs:documentation>Description: Used by the verbalizer to close a verbalization opened by VerbalizerOpenVerbalization</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="VerbalizerDocumentHeader">
					<xs:annotation>
						<xs:documentation>Description: Used by the verbalizer to open a document. The document header gets replacement fields in the following order:
{0} font-family
{1} font-size
{2} predicate text color
{3} predicate text bold
{4} object name color
{5} object name bold
{6} formal item color
{7} formal item bold
{8} note color
{9} note bold
{10} reference mode color
{11} reference mode bold
{12} instance value color
{13} instance value bold</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="VerbalizerDocumentFooter">
					<xs:annotation>
						<xs:documentation>Description: Used by the verbalizer to close a document</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="VerbalizerFontWeightBold">
					<xs:annotation>
						<xs:documentation>Description: The text to insert to indicate a bold font.</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="VerbalizerFontWeightNormal">
					<xs:annotation>
						<xs:documentation>Description: The text to insert to indicate a normal font weight.</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="CombinedObjectAndInstance">
					<xs:annotation>
						<xs:documentation>Description: Used to combine an object and an instance. Format: {0} {1}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="CombinedObjectAndInstanceTypeMissing">
					<xs:annotation>
						<xs:documentation>Description: Used to say an object and instance combination is missing. Format: Missing {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="TextInstanceValue">
					<xs:annotation>
						<xs:documentation>Description: Used to output a text instance value. Format: '{0}'</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="NonTextInstanceValue">
					<xs:annotation>
						<xs:documentation>Description: Used to output a non-text instance value. Format: {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="FactTypeInstanceBlockStart">
					<xs:annotation>
						<xs:documentation>Description: Text and formatting to begin a sample population verbalization of fact types block. Format: Examples:</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="FactTypeInstanceBlockEnd">
					<xs:annotation>
						<xs:documentation>Description: Formatted single snippet used to end a sample population verbalization of fact types block.</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="FactTypeInstanceIdentifier">
					<xs:annotation>
						<xs:documentation>Description: The text describing the identifier for an objectified FactType instance with an external identifier. Format: Identifier:</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="FactTypeListOpen">
					<xs:annotation>
						<xs:documentation>Description:  Text and formatting to begin a list of fact types represented by basic predicate text.Format: FactTypes: &lt;br/&gt;</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="FactTypeListPairSeparator">
					<xs:annotation>
						<xs:documentation>Description: Text used to separate items in a fact type verbalization list. Format: &lt;br/&gt;</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="FactTypeListSeparator">
					<xs:annotation>
						<xs:documentation>Description: Text used to separate items in a fact type verbalization list. Format: &lt;br/&gt;</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="FactTypeListFinalSeparator">
					<xs:annotation>
						<xs:documentation>Description: Text used to separate the last two items in a fact type verbalization list. Format: &lt;br/&gt;</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="FactTypeListClose">
					<xs:annotation>
						<xs:documentation>Description: Text used to close the fact type verbalization list.</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="DerivedFromListOpen">
					<xs:annotation>
						<xs:documentation>Description:  Text and formatting to begin a list of elements derived from the current selection.Format: Used by derivations: &lt;br/&gt;</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="DerivedFromListPairSeparator">
					<xs:annotation>
						<xs:documentation>Description: Text used to separate items in a derived from list. Format: &lt;br/&gt;</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="DerivedFromListSeparator">
					<xs:annotation>
						<xs:documentation>Description: Text used to separate items in a derived from list. Format: &lt;br/&gt;</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="DerivedFromListFinalSeparator">
					<xs:annotation>
						<xs:documentation>Description: Text used to separate the last two items in a derived from list. Format: &lt;br/&gt;</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="DerivedFromListClose">
					<xs:annotation>
						<xs:documentation>Description: Text used to close the derived from list.</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ObjectTypeInstanceListOpen">
					<xs:annotation>
						<xs:documentation> Description:  Text and formatting to begin a sample population verbalization of object types block. Format: Examples:</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ObjectTypeInstanceListPairSeparator">
					<xs:annotation>
						<xs:documentation>Description: Text used to separate items in a sample population verbalization list. Format: , </xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ObjectTypeInstanceListSeparator">
					<xs:annotation>
						<xs:documentation>Description: Text used to separate items in a sample population verbalization list.	Format: ,</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ObjectTypeInstanceListFinalSeparator">
					<xs:annotation>
						<xs:documentation>Description: Text used to separate the last two items in a sample population verbalization list, or object types. Format: ,</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ObjectTypeInstanceListClose">
					<xs:annotation>
						<xs:documentation>Description: Text used to close the sample population verbalization list. Format: .</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="Conditional">
					<xs:annotation>
						<xs:documentation>Description: Verbalizes a simple conditional statement. Format: if {0} then {1}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ConditionalMultiLine">
					<xs:annotation>
						<xs:documentation>Description: Verbalizes a conditional statement on two lines.
Format: if {0}
        then {1}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ConditionalMultiLineIndented">
					<xs:annotation>
						<xs:documentation>Description: Verbalizes a conditional statement on two lines with the 'then' line indented.
Format: if {0}
          then {1}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="Equality">
					<xs:annotation>
						<xs:documentation>Description: Used to verbalize a simple equality constraint. Format: {0} if and only if {1}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ExclusionBinaryLeadReading">
					<xs:annotation>
						<xs:documentation>Description: Used to verbalize an exclusion constraint, on a binary lead reading.
Format: No {0} the same {1}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ExclusionCombined">
					<xs:annotation>
						<xs:documentation>Description: Used to combine the first role player and the roles played for an Exclusion constraint (i.e: No Person authored and reviewed). Format: {0} {1}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="SubtypeMetaReading">
					<xs:annotation>
						<xs:documentation>Description: Used to describe the relationship between a Subtype and its Supertype at the meta level (i.e: Each Man is an instance of Person).
Format: {0}=subtype, {1}=supertype, {2}=SubtypeFact identifier</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="QueryParameterContainer">
					<xs:annotation>
						<xs:documentation>Description: Outer container for listing query parameters. Used as part of a query verbalization.
Format: given {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="QueryNamedParameter">
					<xs:annotation>
						<xs:documentation>Description: Describe a query parameter with an associated name.
Format: {0}=name, {1}=type name</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="QueryUnnamedParameter">
					<xs:annotation>
						<xs:documentation>Description: Describe a query parameter with no associated name. Format: given {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="QueryVerbalization">
					<xs:annotation>
						<xs:documentation>Description: Root verbalization for a query. Containers a parameter (defined with QueryParameterContainer if present) and projection lists plus the derivation rule.
Format: {0}select {1} where {2}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="DynamicRuleVerbalization">
					<xs:annotation>
						<xs:documentation>Description: Root verbalization for a dynamic rule. Containers simple replacement fields for the four possible parts of a dynamic rule verbalization (quantifier + condition, additions, deletions, standalone conditions).
Format: {0}{1}{2}{3}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="DynamicRuleQuantifiers">
					<xs:annotation>
						<xs:documentation>Description: Dynamic rule quantification section. Contains quantifiers for body variables used in additions and deletions, plus remaining conditions from the path.
Format: For each {0}{1}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="DynamicRuleAdditions">
					<xs:annotation>
						<xs:documentation>Description: Dynamic rule additions section. Specify instances and facts to add.
Format: Add: {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="DynamicRuleDeletions">
					<xs:annotation>
						<xs:documentation>Description: Dynamic rule deletions section. Specify instances and facts to delete.
Format: Remove: {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="DynamicRuleQuantifierCondition">
					<xs:annotation>
						<xs:documentation>Description: Dynamic rule conditions attached to the quanfiers section. Verbalize the path body (with additions and deletions filtered)
Format: where {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="DynamicRuleStandaloneCondition">
					<xs:annotation>
						<xs:documentation>Description: Dynamic rule conditions attached to the end of the rule when there are now to the quanfiers section. Verbalize the path body (with additions and deletions filtered)
Format: When: {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="VariableAddedQuantifier">
					<xs:annotation>
						<xs:documentation>Description: A universally quanfied variable in a dynamic rule is part of the 'added' state.
Format: added {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="VariableDeletedQuantifier">
					<xs:annotation>
						<xs:documentation>Description: A universally quanfied variable in a dynamic rule is part of the 'deleted' state.
Format: deleted {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="VariableInitialQuantifier">
					<xs:annotation>
						<xs:documentation>Description: A universally quanfied variable in a dynamic rule is part of the 'initial' state.
Format: initial {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="VariableAddAction">
					<xs:annotation>
						<xs:documentation>Description: A decorated for a variable listed in the 'add' section of a dynamic rule.
Format: new {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="IdentityListOpen">
					<xs:annotation>
						<xs:documentation>Description:  Text and formatting to begin a list of different-typed identifiers representating the same instance.
Format: </xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="IdentityListPairSeparator">
					<xs:annotation>
						<xs:documentation>Description:  Text and formatting to separate a two-item list of different-typed identifiers representating the same instance.
Format: that is </xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="IdentityListSeparator">
					<xs:annotation>
						<xs:documentation>Description:  Text and formatting to separate all but the last item of 3 or more items or different-typed identifiers representating the same instance.
Format: that is </xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="IdentityListFinalSeparator">
					<xs:annotation>
						<xs:documentation>Description:  Text and formatting to separate the last pair of 3 or more items or different-typed identifiers representating the same instance.
Format: that is </xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="IdentityListClose">
					<xs:annotation>
						<xs:documentation>Description:  Text and formatting to end a list of different-typed identifiers representating the same instance.
Format: </xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="FrequencyPopulation">
					<xs:annotation>
						<xs:documentation>Description: Used as for the main body text of a frequency constraint on one FactType.
Format: each {0} in the population of {1} occurs there {2} times</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="FrequencyTypedOccurrences">
					<xs:annotation>
						<xs:documentation>Description: Used to specify an instance count or range for a specific object type.
Format: {1} instances of {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="FrequencyTypedCombinationOccurrences">
					<xs:annotation>
						<xs:documentation>Description: Used to specify an instance count or range for a combination of object types.
Format: {1} combinations of {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="FrequencyUntypedOccurrences">
					<xs:annotation>
						<xs:documentation>Description: Used to specify an instance count or range using an untyped occurrence phrase
Format: {0} times</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="FrequencyNotPopulatedOrRange">
					<xs:annotation>
						<xs:documentation>Description: Combined with a frequency range to indicate that a frequency constraint with a lower bound does not imply existence.
Format: either no, or {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="CountRangeExact">
					<xs:annotation>
						<xs:documentation>Description: Used for frequency and cardinality ranges where both the min and max values the same
Format: exactly {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="CountRangeMinAndMax">
					<xs:annotation>
						<xs:documentation>Description: Used for frequency and cardinality ranges where both the min and max values are specified and different.
Format: at least {0} and at most {1}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="CountRangeMaxUnbounded">
					<xs:annotation>
						<xs:documentation>Description: Used for frequency and cardinality ranges where the max value is unbounded.
Format: at least {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="CountRangeMinUnbounded">
					<xs:annotation>
						<xs:documentation>Description: Used for a frequency range where the min value is less than 2, or a cardinality range with a 0 lower bound.
Format: at most {1}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ObjectTypeCardinality">
					<xs:annotation>
						<xs:documentation>Description: Used as the boiler plate for object type cardinality.
Format: each population of {0} contains {1}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="UnaryRoleCardinality">
					<xs:annotation>
						<xs:documentation>Description: Used as the boiler plate for unary role cardinality.
Format: for each population of '{0}', the number of {1} instances is {2}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="CardinalitySingleInstance">
					<xs:annotation>
						<xs:documentation>Description: Replaces the last phrase in cardinality statements if a single instance is specified:
Format: {0} instance</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="CardinalityMultipleInstances">
					<xs:annotation>
						<xs:documentation>Description: Replaces the last phrase in cardinality statements if multiple instances are specified:
Format: {0} instances</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ExactlyOneUntypedOccurrence">
					<xs:annotation>
						<xs:documentation>Description: Used for a fallback uniqueness verbalization, or for a frequency constraint with min=max=1.
Format: exactly once</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ExactlyOneTypedOccurrence">
					<xs:annotation>
						<xs:documentation>Description: Used for a fallback uniqueness verbalization, or for a frequency constraint with min=max=1.
Format: exactly one {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="AtMostOneTypedOccurrence">
					<xs:annotation>
						<xs:documentation>Description: Used for a single-role frequency constraint with min=max=1.
Format: at most one {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="LogicalAndOperator">
					<xs:annotation>
						<xs:documentation>Description: Used to 'and' together exactly two other snippets.
Format: {0} and {1}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="SameTypeIdentityInequalityOperator">
					<xs:annotation>
						<xs:documentation>Description: Used to specify that two instances of the same type are not the same instance.
Format: {0} is not {1}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="CompatibleTypesIdentityInequalityOperator">
					<xs:annotation>
						<xs:documentation>Description: Used to specify that two instances of compatible types are not the same instance.
Format: that {0} is not that {1}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="IsIdentifiedBy">
					<xs:annotation>
						<xs:documentation>Description: Used to specify that one instance is identified by the other instance.
Format: {0} is identified by {1}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="Acyclicity">
					<xs:annotation>
						<xs:documentation>Description: Used to verbalize acyclic ring constraint in the majority of cases.
Format: No {0} may cycle back to itself via one or more traversals through {1}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="AcyclicityWithRoleNumbers">
					<xs:annotation>
						<xs:documentation>Description: Used to verbalize acyclic ring constraints where more than two roles have a role player of the constrained type.
Format: No {0} may cycle back to itself via one or more instances of the role pair: roles {2} and {3} of {1}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="StronglyIntransitiveConsequent">
					<xs:annotation>
						<xs:documentation>Description: Used to verbalize a strongly intransitive ring constraint.
Format: it is not true that {0} is indirectly related to {1} by repeatedly applying this fact type</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="LessThanValueComparator">
					<xs:annotation>
						<xs:documentation>Description: Used to compare the two values in a value comparison constraint with a 'less than' operator.
Format: {0} is less than {1}
						</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="LessThanOrEqualValueComparator">
					<xs:annotation>
						<xs:documentation>Description: Used to compare the two values in a value comparison constraint with a 'less than or equal' operator.
Format: {0} is less than or equal to {1}
						</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="GreaterThanValueComparator">
					<xs:annotation>
						<xs:documentation>Description: Used to compare the two values in a value comparison constraint with a 'greater than' operator.
Format: {0} is greater than {1}
						</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="GreaterThanOrEqualValueComparator">
					<xs:annotation>
						<xs:documentation>Description: Used to compare the two values in a value comparison constraint with a 'greater than or equal' operator.
Format: {0} is greater than or equal to {1}
						</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="EqualValueComparator">
					<xs:annotation>
						<xs:documentation>Description: Used to compare the two values in a value comparison constraint with a 'equal' operator.
Format: {0} is equal to {1}
						</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="NotEqualValueComparator">
					<xs:annotation>
						<xs:documentation>Description: Used to compare the two values in a value comparison constraint with a 'not equal' operator.
Format: {0} is not equal to {1}
						</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="FullFactTypeDerivation">
					<xs:annotation>
						<xs:documentation>Description: Used to specify a fully derived fact type with its derivation rule.
Format: *{0} if and only if {1}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="FullFactTypeStoredDerivation">
					<xs:annotation>
						<xs:documentation>Description: Used to specify a fully derived (and stored) fact type with its derivation rule.
Format: **{0} if and only if {1}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="FullStoredFactTypeDescription">
					<xs:annotation>
						<xs:documentation>Description: A textual specification of stored derivation for a fully derived fact type.
instances of this fact type are stored immediately after they are derived</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="PartialFactTypeDerivation">
					<xs:annotation>
						<xs:documentation>Description: Used to specify a partially derived fact type with its derivation rule.
Format: +{0} if {1}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="PartialFactTypeStoredDerivation">
					<xs:annotation>
						<xs:documentation>Description: Used to specify a partially derived (and stored) fact type with its derivation rule.
Format: ++{0} if {1}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="PartialStoredFactTypeDescription">
					<xs:annotation>
						<xs:documentation>Description: A textual specification of stored derivation for a partially derived fact type.
derived instances of this fact type are also stored immediately after they are derived</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="FullSubtypeDerivation">
					<xs:annotation>
						<xs:documentation>Description: Used to specify a fully derived subtype derivation rule.
Format: *each {0} is by definition {1}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="FullSubtypeStoredDerivation">
					<xs:annotation>
						<xs:documentation>Description: Used to specify a fully derived (and stored) subtype derivation rule.
Format: **each {0} is by definition {1}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="DerivedFactTypeReference">
					<xs:annotation>
						<xs:documentation>Description: used to reference a derived fact type in a list of derived elements.
Format: {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="DerivedSubtypeReference">
					<xs:annotation>
						<xs:documentation>Description: used to reference a derived subtype in a list of derived elements.
Format: subtype {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="JoinedFrequencyConstraintReference">
					<xs:annotation>
						<xs:documentation>Description: used to reference a frequency constraint with a join path in a list of derived elements.
Format: frequency constraint {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="JoinedRingConstraintReference">
					<xs:annotation>
						<xs:documentation>Description: used to reference a ring constraint with a join path in a list of derived elements.
Format: ring constraint {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="JoinedUniquenessConstraintReference">
					<xs:annotation>
						<xs:documentation>Description: used to reference a ring constraint with a join path in a list of derived elements.
Format: uniqueness constraint {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="JoinedValueComparisonConstraintReference">
					<xs:annotation>
						<xs:documentation>Description: used to reference a value comparison constraint with a join path in a list of derived elements.
Format: value comparison constraint {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="JoinedEqualityConstraintReference">
					<xs:annotation>
						<xs:documentation>Description: used to reference an equality constraint with a sequence that has a join path in a list of derived elements.
Format: equality constraint {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="JoinedExclusionConstraintReference">
					<xs:annotation>
						<xs:documentation>Description: used to reference an exclusion constraint with a sequence that has a join path in a list of derived elements.
Format: exclusion constraint {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="JoinedSubsetConstraintReference">
					<xs:annotation>
						<xs:documentation>Description: used to reference a subset constraint with a sequence that has a join path in a list of derived elements.
Format: subset constraint {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="JoinedSetComparisonSequenceReference">
					<xs:annotation>
						<xs:documentation>Description: used to reference a set comparison sequence that has a join path in a list of derived elements.
Format: {0}, sequence {1}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="FullStoredSubtypeDescription">
					<xs:annotation>
						<xs:documentation>Description: A textual specification of stored derivation for a fully derived subtype.
instances of this subtype are stored immediately after they are derived</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="PartialSubtypeDerivation">
					<xs:annotation>
						<xs:documentation>Description: Used to specify a partially derived subtype derivation rule.
Format: +each derived {0} is by definition {1}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="PartialSubtypeStoredDerivation">
					<xs:annotation>
						<xs:documentation>Description: Used to specify a partially derived (and stored) subtype derivation rule.
Format: ++each derived {0} is by definition {1}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="PartialStoredSubtypeDescription">
					<xs:annotation>
						<xs:documentation>Description: A textual specification of stored derivation for a partially derived subtype.
derived instances of this subtype are also stored immediately after they are derived</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="RolePathHeaderListDirective">
					<xs:annotation>
						<xs:documentation>Description: Specify a space-separated list of items to determine if split lists are rendered as
integrated or separate blocks. Allowed values are {And, Or, Xor, !And, !Or, !Xor}.
Format: !And !Or Xor !Xor</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="RolePathCollapsibleLeadDirective">
					<xs:annotation>
						<xs:documentation>Description: Specify a space-separated list of items to determine if a list style supports
collapsing a repeated lead role. Allowed values are {Chain, And, Or, Xor, !And, !Or, !Xor, !Chain}. The !Chain directive
here applies to the long form of negation, not the inlined form where the verbose negation constructs are not used.
A collapsed lead completely eliminates a lead role player. For example, '... Person has FirstName and has LastName',
with Person eliminated from the second fact type rendering.
Format: And Or Chain</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="RolePathCollapsibleListOpenForBackReferenceDirective">
					<xs:annotation>
						<xs:documentation>Description: Specify a space-separated list of items to determine if the first item in a list style supports
collapsing to allow a back reference. The allowed values here are the same as the RolePathCollapsibleLeadDirective and
should not intersect the values used for the RolePathHeaderListDirective. A back reference uses a personal or impersonal
pronoun in place of a restatement of the lead role player. The back reference must immediately follow the preceding noun.
This directive allows a backreference to be used by replacing the *[Tail|Nested]ListOpen snippets with the *[Tail|Nested]ListCollapsedOpen
snippets. Lead list types do not support back referencing.
Format: And Or Chain</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="RolePathBlockLeadCollapseForSnippetDirective">
					<xs:annotation>
						<xs:documentation>Description: Specify a space-separated list of snippet names to specify list snippets that
would allow lead role collapsing based on the RolePathCollapsibleLeadDirective, but do not actually support this construct.
This allows a final override to block the collapsing behavior for specific snippets. This is checked for the
(Negated)[Chained|And|Or|Xor][Tail|Nested]List[(Collapsed)Open|Separator] and the ChainedList*Restrction* snippets.
Format: AndTailListOpen OrTailListOpen</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ImpersonalIdentityCorrelation">
					<xs:annotation>
						<xs:documentation>Description: Relate two variables of different types that represent the same instance where the first
variable is an impersonal object type.
Format: {0} that is {1}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ImpersonalLeadIdentityCorrelation">
					<xs:annotation>
						<xs:documentation>Description: A form of ImpersonalIdentityCorrelation for lead role scenarios. Relate two variables of different
types that represent the same instance where the first variable is an impersonal object type.
Format:  {1} is {0} that</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="PersonalIdentityCorrelation">
					<xs:annotation>
						<xs:documentation>Description: Relate two variable names of different types that represent the same instance where the first
variable is a personal object type.
Format:  {0} who is {1}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="PersonalLeadIdentityCorrelation">
					<xs:annotation>
						<xs:documentation>Description: A form of PersonalIdentityCorrelation for lead role scenarios. Relate two variables of
different types that represent the same instance where the first variable is an personal object type.
Format: {1} is {0} who</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="HeadVariableProjection">
					<xs:annotation>
						<xs:documentation>Description: Project a calculation or constant value onto a head variable.
Format: {0} = {1}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="AggregateParameterDecorator">
					<xs:annotation>
						<xs:documentation>Description: Decorate a single or complex aggregation context.
Format: {0} of {1}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="AggregateParameterSimpleAggregationContext">
					<xs:annotation>
						<xs:documentation>Description: Provide a description of a single aggregation context.
Format: each {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="AggregateParameterComplexAggregationContextListOpen">
					<xs:annotation>
						<xs:documentation>Description:The opening of a composite aggregation list.
Format: each</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="AggregateParameterComplexAggregationContextListSeparator">
					<xs:annotation>
						<xs:documentation>Description: The separator of a composite aggregation list.
Format: ,</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="AggregateParameterComplexAggregationContextListClose">
					<xs:annotation>
						<xs:documentation>Description: The closing of a composite aggregation list.
Format: combination</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="AggregateBagProjection">
					<xs:annotation>
						<xs:documentation>Description: Leave aggregate parameter inputs as a bag of values.
Format: each {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="AggregateSetProjection">
					<xs:annotation>
						<xs:documentation>Description: Limit values from an aggregate parameter input to distinct values.
Format: each distinct {0}</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="VariableIntroductionClause">
					<xs:annotation>
						<xs:documentation>Description: Introduce variables inline in the verbalization phrase. The replacement is either
a single value or a list, and the quantifiers (some, no, that) are already included in the replacement list.
Format: for {0},</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="VariableIntroductionSeparator">
					<xs:annotation>
						<xs:documentation>Description: The list separator for introducing multiple variables in a single clause.
Format: and</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="VariableExistence">
					<xs:annotation>
						<xs:documentation>Description: Assert variable existence as a complete statement, as opposed to the
VariableIntroductionClause used to introduce a variable using a prefix.
Format: {0} exists</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="NegatedVariableExistence">
					<xs:annotation>
						<xs:documentation>Description: Assert variable non-existence for an a previous declared variable in an existence statement.
Note that VariableExistence can be used with a negated quantifier if the negated variable has not been previously introduced.
Format: {0} does not exist</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="NegatedVariableExistenceAddedState">
					<xs:annotation>
						<xs:documentation>Description: Assert variable non-existence in the added state.
Format: {0} does not exist in added state</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="NegatedVariableExistenceDeletedState">
					<xs:annotation>
						<xs:documentation>Description: Assert variable non-existence in the deleted state.
Format: {0} does not in deleted state</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="NegatedVariableExistenceInitialState">
					<xs:annotation>
						<xs:documentation>Description: Assert variable non-existence in the initial state.
Format: {0} does not exist in initial state</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="RolePathListCloseOutdentSnippets">
					<xs:annotation>
						<xs:documentation>Description: A space separated list of list closure snippet names from this enum that reverse an indentation.
Trailing outdents can be tracked specially during formatting so that external text or outer list separator and close
elements on the same line as the outdent keeps the same indentation level.
Format: ChainedListClose NegatedChainedListClose AndTailListClose AndNestedListClose NegatedAndLeadListClose NegatedAndTailListClose NegatedAndNestedListClose OrTailListClose OrNestedListClose NegatedOrLeadListClose NegatedOrTailListClose NegatedOrNestedListClose XorLeadListClose XorTailListClose XorNestedListClose NegatedXorLeadListClose NegatedXorTailListClose NegatedXorNestedListClose</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="RolePathOutdentAwareTrailingListSnippets">
					<xs:annotation>
						<xs:documentation>Description: A space separated list of list separators and close elements that must be placed before any
active trailing outdent snippets.
Format: NegatedAndLeadListSeparator NegatedAndNestedListSeparator NegatedAndTailListSeparator NegatedOrLeadListSeparator NegatedOrNestedListSeparator NegatedOrTailListSeparator XorLeadListSeparator XorNestedListSeparator XorTailListSeparator NegatedXorLeadListSeparator NegatedXorNestedListSeparator NegatedXorTailListSeparator</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ChainedListOpen">
					<xs:annotation>
						<xs:documentation>Description: The opening text for a chained list.</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ChainedListLocalRestrictionSeparator">
					<xs:annotation>
						<xs:documentation>Description: A separator for a chained list where the chained restriction applies only
to elements contained in the preceding fact statement.
Format: where</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ChainedListLocalRestrictionBackReferenceSeparator">
					<xs:annotation>
						<xs:documentation>Description: A separator for a chained list where the chained restriction applies only
to elements contained in the preceding fact statement and the start of the next statement is a back reference.</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ChainedListComplexRestrictionSeparator">
					<xs:annotation>
						<xs:documentation>Description: A separator for a chained list where the chained restriction introduces
additional fact statements. Note that the complex restriction separator is not used before a TailListOpen of
an operator separated list, which is any split list not specific in the RolePathHeaderListDirective snippet.
Format: \n\t where</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ChainedListTopLevelComplexRestrictionSeparator">
					<xs:annotation>
						<xs:documentation>Description: The same as ChainedListComplexRestrictionSeparator, except used for a top-level
restriction. If the non-top-level separator includes an indentation, then this separator should omit the indent.
Format: \n where</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ChainedListComplexRestrictionBackReferenceSeparator">
					<xs:annotation>
						<xs:documentation>Description: A separator for a chained list where the chained restriction introduces additional
fact statements and the start of the next statement is a back reference.
See ChainedListComplexRestrictionSeparator for additional comments.
Format: \n </xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ChainedListTopLevelComplexRestrictionBackReferenceSeparator">
					<xs:annotation>
						<xs:documentation>Description: The same as ChainedListComplexRestrictionBackReferenceSeparator, except used for a
top-level restriction. If the non-top-level separator includes an indentation, then this separator should omit the indent.
Format: \n and</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ChainedListComplexRestrictionCollapsedLeadSeparator">
					<xs:annotation>
						<xs:documentation>Description: Used in place of the ChainedListComplexRestrictionSeparator if the lead role player of
a chained list is the same as the previous statement. Chained lists can collapse the lead role if the list type is
listed in the RolePathCollapsibleLeadDirective snippet.
Format: \n\t and</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ChainedListTopLevelComplexRestrictionCollapsedLeadSeparator">
					<xs:annotation>
						<xs:documentation>Description: The same as ChainedListComplexRestrictionCollapsedLeadSeparator, except used for a
top-level restriction. If the non-top-level separator includes an indentation, then this separator should omit the indent.
Format: \n and</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ChainedListCollapsedSeparator">
					<xs:annotation>
						<xs:documentation>Description: The text for a collapsed separator in a chained list. Generally just a space.</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="ChainedListClose"/>
				<xs:enumeration value="NegatedChainedListOpen"/>
				<xs:enumeration value="NegatedChainedListClose"/>
				<xs:enumeration value="KnownFalseChainedListOpen">
					<xs:annotation>
						<xs:documentation>This is closed by NegatedChainedListClose and should have the same format as NegatedChainedListOpen.</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="KnownNotFalseChainedListOpen">
					<xs:annotation>
						<xs:documentation>This is closed by NegatedChainedListClose and should have the same format as NegatedChainedListOpen.</xs:documentation>
					</xs:annotation>
				</xs:enumeration>
				<xs:enumeration value="AndLeadListOpen"/>
				<xs:enumeration value="AndLeadListSeparator"/>
				<xs:enumeration value="AndLeadListClose"/>
				<xs:enumeration value="AndTailListOpen"/>
				<xs:enumeration value="AndTailListCollapsedOpen"/>
				<xs:enumeration value="AndTailListSeparator"/>
				<xs:enumeration value="AndTailListClose"/>
				<xs:enumeration value="AndNestedListOpen"/>
				<xs:enumeration value="AndNestedListCollapsedOpen"/>
				<xs:enumeration value="AndNestedListSeparator"/>
				<xs:enumeration value="AndNestedListClose"/>
				<xs:enumeration value="NegatedAndLeadListOpen"/>
				<xs:enumeration value="NegatedAndLeadListSeparator"/>
				<xs:enumeration value="NegatedAndLeadListClose"/>
				<xs:enumeration value="NegatedAndTailListOpen"/>
				<xs:enumeration value="NegatedAndTailListCollapsedOpen"/>
				<xs:enumeration value="NegatedAndTailListSeparator"/>
				<xs:enumeration value="NegatedAndTailListClose"/>
				<xs:enumeration value="NegatedAndNestedListOpen"/>
				<xs:enumeration value="NegatedAndNestedListCollapsedOpen"/>
				<xs:enumeration value="NegatedAndNestedListSeparator"/>
				<xs:enumeration value="NegatedAndNestedListClose"/>
				<xs:enumeration value="OrLeadListOpen"/>
				<xs:enumeration value="OrLeadListSeparator"/>
				<xs:enumeration value="OrLeadListClose"/>
				<xs:enumeration value="OrTailListOpen"/>
				<xs:enumeration value="OrTailListCollapsedOpen"/>
				<xs:enumeration value="OrTailListSeparator"/>
				<xs:enumeration value="OrTailListClose"/>
				<xs:enumeration value="OrNestedListOpen"/>
				<xs:enumeration value="OrNestedListCollapsedOpen"/>
				<xs:enumeration value="OrNestedListSeparator"/>
				<xs:enumeration value="OrNestedListClose"/>
				<xs:enumeration value="NegatedOrLeadListOpen"/>
				<xs:enumeration value="NegatedOrLeadListSeparator"/>
				<xs:enumeration value="NegatedOrLeadListClose"/>
				<xs:enumeration value="NegatedOrTailListOpen"/>
				<xs:enumeration value="NegatedOrTailListCollapsedOpen"/>
				<xs:enumeration value="NegatedOrTailListSeparator"/>
				<xs:enumeration value="NegatedOrTailListClose"/>
				<xs:enumeration value="NegatedOrNestedListOpen"/>
				<xs:enumeration value="NegatedOrNestedListCollapsedOpen"/>
				<xs:enumeration value="NegatedOrNestedListSeparator"/>
				<xs:enumeration value="NegatedOrNestedListClose"/>
				<xs:enumeration value="XorLeadListOpen"/>
				<xs:enumeration value="XorLeadListSeparator"/>
				<xs:enumeration value="XorLeadListClose"/>
				<xs:enumeration value="XorTailListOpen"/>
				<xs:enumeration value="XorTailListCollapsedOpen"/>
				<xs:enumeration value="XorTailListSeparator"/>
				<xs:enumeration value="XorTailListClose"/>
				<xs:enumeration value="XorNestedListOpen"/>
				<xs:enumeration value="XorNestedListCollapsedOpen"/>
				<xs:enumeration value="XorNestedListSeparator"/>
				<xs:enumeration value="XorNestedListClose"/>
				<xs:enumeration value="NegatedXorLeadListOpen"/>
				<xs:enumeration value="NegatedXorLeadListSeparator"/>
				<xs:enumeration value="NegatedXorLeadListClose"/>
				<xs:enumeration value="NegatedXorTailListOpen"/>
				<xs:enumeration value="NegatedXorTailListCollapsedOpen"/>
				<xs:enumeration value="NegatedXorTailListSeparator"/>
				<xs:enumeration value="NegatedXorTailListClose"/>
				<xs:enumeration value="NegatedXorNestedListOpen"/>
				<xs:enumeration value="NegatedXorNestedListCollapsedOpen"/>
				<xs:enumeration value="NegatedXorNestedListSeparator"/>
				<xs:enumeration value="NegatedXorNestedListClose"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:redefine>
</xs:schema>