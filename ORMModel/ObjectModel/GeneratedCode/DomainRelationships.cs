#region Common Public License Copyright Notice
/**************************************************************************\
* Natural Object-Role Modeling Architect for Visual Studio                 *
*                                                                          *
* Copyright © Neumont University. All rights reserved.                     *
* Copyright © ORM Solutions, LLC. All rights reserved.                     *
*                                                                          *
* The use and distribution terms for this software are covered by the      *
* Common Public License 1.0 (http://opensource.org/licenses/cpl) which     *
* can be found in the file CPL.txt at the root of this distribution.       *
* By using this software in any fashion, you are agreeing to be bound by   *
* the terms of this license.                                               *
*                                                                          *
* You must not remove this notice, or any other, from this software.       *
\**************************************************************************/
#endregion
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship FactConstraint
	/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.FactConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("bcf635f2-f2c6-4690-956d-2a44c48a9da9")]
	public abstract partial class FactConstraint : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FactConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbcf635f2, 0xf2c6, 0x4690, 0x95, 0x6d, 0x2a, 0x44, 0xc4, 0x8a, 0x9d, 0xa9);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">The Partition instance containing this ElementLink</param>
		/// <param name="roleAssignments">A set of role assignments for roleplayer initialization</param>
		/// <param name="propertyAssignments">A set of attribute assignments for attribute initialization</param>
		protected FactConstraint(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Constraint domain role code
		
		/// <summary>
		/// Constraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConstraintDomainRoleId = new global::System.Guid(0x9b305629, 0x1efa, 0x404f, 0xae, 0x8e, 0x47, 0x51, 0x17, 0xb2, 0x87, 0xae);
		
		/// <summary>
		/// DomainRole Constraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactConstraint.Constraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactConstraint/Constraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactConstraint/Constraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "FactTypeCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.FactConstraint/Constraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("9b305629-1efa-404f-ae8e-475117b287ae")]
		public abstract ORMNamedElement Constraint
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access ConstraintCollection of a FactType
		/// <summary>
		/// Gets a list of ConstraintCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<ORMNamedElement> GetConstraintCollection(FactType element)
		{
			return new DslModeling::ReadOnlyLinkedElementCollection<ORMNamedElement>(element, FactTypeDomainRoleId);
		}
		#endregion
		#region FactType domain role code
		
		/// <summary>
		/// FactType domain role Id.
		/// </summary>
		public static readonly global::System.Guid FactTypeDomainRoleId = new global::System.Guid(0xd60cb2bf, 0x7de7, 0x4ced, 0xa0, 0x0f, 0xbf, 0x7c, 0x3a, 0x2e, 0x52, 0x48);
		
		/// <summary>
		/// DomainRole FactType
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactConstraint.FactType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactConstraint/FactType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactConstraint/FactType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ConstraintCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.FactConstraint/FactType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("d60cb2bf-7de7-4ced-a00f-bf7c3a2e5248")]
		public abstract FactType FactType
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access FactTypeCollection of a ORMNamedElement
		/// <summary>
		/// Gets a list of FactTypeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<FactType> GetFactTypeCollection(ORMNamedElement element)
		{
			return new DslModeling::ReadOnlyLinkedElementCollection<FactType>(element, ConstraintDomainRoleId);
		}
		#endregion
		#region Accessors for roles that this REL plays in other RELs
		#region ConstrainedRoleCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of ConstrainedRoleCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ExternalRoleConstraint.FactConstraint
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ConstraintRoleSequenceHasRole> ConstrainedRoleCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ConstraintRoleSequenceHasRole>(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExternalRoleConstraint.FactConstraintDomainRoleId);
			}
		}
		#endregion
		#endregion
		#region Constraint link accessor
		/// <summary>
		/// Get the list of FactConstraint links to a ORMNamedElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactConstraint> GetLinksToFactTypeCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMNamedElement constraintInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactConstraint>(constraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactConstraint.ConstraintDomainRoleId);
		}
		#endregion
		#region FactType link accessor
		/// <summary>
		/// Get the list of FactConstraint links to a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactConstraint> GetLinksToConstraintCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType factTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactConstraint>(factTypeInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactConstraint.FactTypeDomainRoleId);
		}
		#endregion
		#region FactConstraint instance accessors
		
		/// <summary>
		/// Get any FactConstraint links between a given ORMNamedElement and a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactConstraint> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMNamedElement source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactConstraint> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactConstraint>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactConstraint>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactConstraint.ConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactConstraint link in links )
			{
				if ( target.Equals(link.FactType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FactConstraint link between a given ORMNamedElementand a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactConstraint GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMNamedElement source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactConstraint>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactConstraint.ConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactConstraint link in links )
			{
				if ( target.Equals(link.FactType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship FactSetComparisonConstraint
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetComparisonConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetComparisonConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetComparisonConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("ff8f65ad-248a-4ef8-9172-515204c9a44c")]
	public partial class FactSetComparisonConstraint : FactConstraint
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FactSetComparisonConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xff8f65ad, 0x248a, 0x4ef8, 0x91, 0x72, 0x51, 0x52, 0x04, 0xc9, 0xa4, 0x4c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FactSetComparisonConstraint link in the same Partition as the given SetComparisonConstraint
		/// </summary>
		/// <param name="source">SetComparisonConstraint to use as the source of the relationship.</param>
		/// <param name="target">FactType to use as the target of the relationship.</param>
		public FactSetComparisonConstraint(SetComparisonConstraint source, FactType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FactSetComparisonConstraint.SetComparisonConstraintDomainRoleId, source), new DslModeling::RoleAssignment(FactSetComparisonConstraint.FactTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactSetComparisonConstraint(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactSetComparisonConstraint(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactSetComparisonConstraint(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactSetComparisonConstraint(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SetComparisonConstraint domain role code
		
		/// <summary>
		/// SetComparisonConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid SetComparisonConstraintDomainRoleId = new global::System.Guid(0x575f65e4, 0x682e, 0x427a, 0xb2, 0x73, 0x3d, 0x30, 0xd9, 0x09, 0xa8, 0x16);
		
		/// <summary>
		/// DomainRole SetComparisonConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetComparisonConstraint.SetComparisonConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetComparisonConstraint/SetComparisonConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetComparisonConstraint/SetComparisonConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "FactTypeCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetComparisonConstraint/SetComparisonConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("575f65e4-682e-427a-b273-3d30d909a816")]
		public virtual SetComparisonConstraint SetComparisonConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SetComparisonConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SetComparisonConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SetComparisonConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SetComparisonConstraintCollection of a FactType
		/// <summary>
		/// Gets a list of SetComparisonConstraintCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SetComparisonConstraint> GetSetComparisonConstraintCollection(FactType element)
		{
			return new DslModeling::LinkedElementCollection<SetComparisonConstraint>(element, FactTypeDomainRoleId);
		}
		#endregion
		#region Constraint domain role override
		
		/// <summary>
		/// Gets the element playing SetComparisonConstraint domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactConstraint.Constraint
		/// </summary>
		public override ORMNamedElement Constraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.SetComparisonConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.SetComparisonConstraint = (SetComparisonConstraint)value;
			}
		}
		
		#endregion
		#region FactType domain role code
		
		/// <summary>
		/// FactType domain role Id.
		/// </summary>
		public static readonly new global::System.Guid FactTypeDomainRoleId = new global::System.Guid(0xf7733faf, 0x1029, 0x480e, 0x8f, 0xea, 0x96, 0xfd, 0xd6, 0x5a, 0xb2, 0x12);
		
		/// <summary>
		/// DomainRole FactType
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetComparisonConstraint.FactType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetComparisonConstraint/FactType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetComparisonConstraint/FactType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SetComparisonConstraintCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetComparisonConstraint/FactType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f7733faf-1029-480e-8fea-96fdd65ab212")]
		public override FactType FactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FactType)DslModeling::DomainRoleInfo.GetRolePlayer(this, FactTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FactTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FactTypeCollection of a SetComparisonConstraint
		/// <summary>
		/// Gets a list of FactTypeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FactType> GetFactTypeCollection(SetComparisonConstraint element)
		{
			return new DslModeling::LinkedElementCollection<FactType>(element, SetComparisonConstraintDomainRoleId);
		}
		#endregion
		#region SetComparisonConstraint link accessor
		/// <summary>
		/// Get the list of FactSetComparisonConstraint links to a SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetComparisonConstraint> GetLinksToFactTypeCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint setComparisonConstraintInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetComparisonConstraint>(setComparisonConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetComparisonConstraint.SetComparisonConstraintDomainRoleId);
		}
		#endregion
		#region FactType link accessor
		/// <summary>
		/// Get the list of FactSetComparisonConstraint links to a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetComparisonConstraint> GetLinksToSetComparisonConstraintCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType factTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetComparisonConstraint>(factTypeInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetComparisonConstraint.FactTypeDomainRoleId);
		}
		#endregion
		#region FactSetComparisonConstraint instance accessors
		
		/// <summary>
		/// Get any FactSetComparisonConstraint links between a given SetComparisonConstraint and a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetComparisonConstraint> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetComparisonConstraint> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetComparisonConstraint>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetComparisonConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetComparisonConstraint>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetComparisonConstraint.SetComparisonConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetComparisonConstraint link in links )
			{
				if ( target.Equals(link.FactType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FactSetComparisonConstraint link between a given SetComparisonConstraintand a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetComparisonConstraint GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetComparisonConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetComparisonConstraint>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetComparisonConstraint.SetComparisonConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetComparisonConstraint link in links )
			{
				if ( target.Equals(link.FactType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship FactSetConstraint
	/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("771ec962-8086-4b21-bfb2-830f30e52861")]
	public partial class FactSetConstraint : FactConstraint
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FactSetConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x771ec962, 0x8086, 0x4b21, 0xbf, 0xb2, 0x83, 0x0f, 0x30, 0xe5, 0x28, 0x61);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FactSetConstraint link in the same Partition as the given SetConstraint
		/// </summary>
		/// <param name="source">SetConstraint to use as the source of the relationship.</param>
		/// <param name="target">FactType to use as the target of the relationship.</param>
		public FactSetConstraint(SetConstraint source, FactType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FactSetConstraint.SetConstraintDomainRoleId, source), new DslModeling::RoleAssignment(FactSetConstraint.FactTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactSetConstraint(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactSetConstraint(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactSetConstraint(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactSetConstraint(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SetConstraint domain role code
		
		/// <summary>
		/// SetConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid SetConstraintDomainRoleId = new global::System.Guid(0x7789fd46, 0x6e28, 0x4ab7, 0xaf, 0xc5, 0x7f, 0x17, 0xb9, 0x5a, 0xc4, 0xd9);
		
		/// <summary>
		/// DomainRole SetConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetConstraint.SetConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetConstraint/SetConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetConstraint/SetConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "FactTypeCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetConstraint/SetConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("7789fd46-6e28-4ab7-afc5-7f17b95ac4d9")]
		public virtual SetConstraint SetConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SetConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SetConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SetConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SetConstraintCollection of a FactType
		/// <summary>
		/// Gets a list of SetConstraintCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SetConstraint> GetSetConstraintCollection(FactType element)
		{
			return new DslModeling::LinkedElementCollection<SetConstraint>(element, FactTypeDomainRoleId);
		}
		#endregion
		#region Constraint domain role override
		
		/// <summary>
		/// Gets the element playing SetConstraint domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactConstraint.Constraint
		/// </summary>
		public override ORMNamedElement Constraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.SetConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.SetConstraint = (SetConstraint)value;
			}
		}
		
		#endregion
		#region FactType domain role code
		
		/// <summary>
		/// FactType domain role Id.
		/// </summary>
		public static readonly new global::System.Guid FactTypeDomainRoleId = new global::System.Guid(0xde9a381f, 0x5346, 0x4c95, 0x9d, 0x48, 0xe4, 0x68, 0xb8, 0xcf, 0x8a, 0x29);
		
		/// <summary>
		/// DomainRole FactType
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetConstraint.FactType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetConstraint/FactType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetConstraint/FactType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SetConstraintCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetConstraint/FactType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("de9a381f-5346-4c95-9d48-e468b8cf8a29")]
		public override FactType FactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FactType)DslModeling::DomainRoleInfo.GetRolePlayer(this, FactTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FactTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FactTypeCollection of a SetConstraint
		/// <summary>
		/// Gets a list of FactTypeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FactType> GetFactTypeCollection(SetConstraint element)
		{
			return new DslModeling::LinkedElementCollection<FactType>(element, SetConstraintDomainRoleId);
		}
		#endregion
		#region SetConstraint link accessor
		/// <summary>
		/// Get the list of FactSetConstraint links to a SetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetConstraint> GetLinksToFactTypeCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint setConstraintInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetConstraint>(setConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetConstraint.SetConstraintDomainRoleId);
		}
		#endregion
		#region FactType link accessor
		/// <summary>
		/// Get the list of FactSetConstraint links to a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetConstraint> GetLinksToSetConstraintCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType factTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetConstraint>(factTypeInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetConstraint.FactTypeDomainRoleId);
		}
		#endregion
		#region FactSetConstraint instance accessors
		
		/// <summary>
		/// Get any FactSetConstraint links between a given SetConstraint and a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetConstraint> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetConstraint> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetConstraint>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetConstraint>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetConstraint.SetConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetConstraint link in links )
			{
				if ( target.Equals(link.FactType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FactSetConstraint link between a given SetConstraintand a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetConstraint GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetConstraint>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetConstraint.SetConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetConstraint link in links )
			{
				if ( target.Equals(link.FactType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ORMModelElementHasExtensionElement
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionElement
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionElement.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionElement.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("ff867109-fe3a-42c4-9770-2d735555016a")]
	public partial class ORMModelElementHasExtensionElement : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ORMModelElementHasExtensionElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xff867109, 0xfe3a, 0x42c4, 0x97, 0x70, 0x2d, 0x73, 0x55, 0x55, 0x01, 0x6a);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ORMModelElementHasExtensionElement link in the same Partition as the given ORMModelElement
		/// </summary>
		/// <param name="source">ORMModelElement to use as the source of the relationship.</param>
		/// <param name="target">ModelElement to use as the target of the relationship.</param>
		public ORMModelElementHasExtensionElement(ORMModelElement source, global::Microsoft.VisualStudio.Modeling.ModelElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ORMModelElementHasExtensionElement.ExtendedElementDomainRoleId, source), new DslModeling::RoleAssignment(ORMModelElementHasExtensionElement.ExtensionDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ORMModelElementHasExtensionElement(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ORMModelElementHasExtensionElement(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ORMModelElementHasExtensionElement(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ORMModelElementHasExtensionElement(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ExtendedElement domain role code
		
		/// <summary>
		/// ExtendedElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid ExtendedElementDomainRoleId = new global::System.Guid(0x9105a491, 0x7fc1, 0x408e, 0x8e, 0x07, 0xf8, 0xe7, 0x9c, 0xa0, 0xbf, 0xa4);
		
		/// <summary>
		/// DomainRole ExtendedElement
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionElement.ExtendedElement
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionElement/ExtendedElement.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionElement/ExtendedElement.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ExtensionCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionElement/ExtendedElement.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("9105a491-7fc1-408e-8e07-f8e79ca0bfa4")]
		public virtual ORMModelElement ExtendedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ORMModelElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, ExtendedElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ExtendedElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ExtendedElement of a ModelElement
		/// <summary>
		/// Gets ExtendedElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ORMModelElement GetExtendedElement(global::Microsoft.VisualStudio.Modeling.ModelElement element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ExtensionDomainRoleId) as ORMModelElement;
		}
		
		/// <summary>
		/// Sets ExtendedElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetExtendedElement(global::Microsoft.VisualStudio.Modeling.ModelElement element, ORMModelElement newExtendedElement)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ExtensionDomainRoleId, newExtendedElement);
		}
		#endregion
		#region Extension domain role code
		
		/// <summary>
		/// Extension domain role Id.
		/// </summary>
		public static readonly global::System.Guid ExtensionDomainRoleId = new global::System.Guid(0x0a7bbd8d, 0x0d86, 0x4fb4, 0x99, 0x1b, 0x36, 0x53, 0x02, 0xd1, 0xed, 0x63);
		
		/// <summary>
		/// DomainRole Extension
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionElement.Extension
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionElement/Extension.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionElement/Extension.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ExtendedElement", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionElement/Extension.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("0a7bbd8d-0d86-4fb4-991b-365302d1ed63")]
		public virtual global::Microsoft.VisualStudio.Modeling.ModelElement Extension
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::Microsoft.VisualStudio.Modeling.ModelElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, ExtensionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ExtensionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ExtensionCollection of a ORMModelElement
		/// <summary>
		/// Gets a list of ExtensionCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<global::Microsoft.VisualStudio.Modeling.ModelElement> GetExtensionCollection(ORMModelElement element)
		{
			return new DslModeling::LinkedElementCollection<global::Microsoft.VisualStudio.Modeling.ModelElement>(element, ExtendedElementDomainRoleId);
		}
		#endregion
		#region ExtendedElement link accessor
		/// <summary>
		/// Get the list of ORMModelElementHasExtensionElement links to a ORMModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionElement> GetLinksToExtensionCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElement extendedElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionElement>(extendedElementInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionElement.ExtendedElementDomainRoleId);
		}
		#endregion
		#region Extension link accessor
		/// <summary>
		/// Get the ORMModelElementHasExtensionElement link to a ModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionElement GetLinkToExtendedElement (global::Microsoft.VisualStudio.Modeling.ModelElement extensionInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionElement> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionElement>(extensionInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionElement.ExtensionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Extension not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ORMModelElementHasExtensionElement instance accessors
		
		/// <summary>
		/// Get any ORMModelElementHasExtensionElement links between a given ORMModelElement and a ModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionElement> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElement source, global::Microsoft.VisualStudio.Modeling.ModelElement target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionElement> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionElement>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionElement> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionElement>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionElement.ExtendedElementDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionElement link in links )
			{
				if ( target.Equals(link.Extension) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ORMModelElementHasExtensionElement link between a given ORMModelElementand a ModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionElement GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElement source, global::Microsoft.VisualStudio.Modeling.ModelElement target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionElement> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionElement>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionElement.ExtendedElementDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionElement link in links )
			{
				if ( target.Equals(link.Extension) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ORMModelElementHasExtensionModelError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionModelError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionModelError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionModelError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("7a4d2b10-43f3-475f-aa0a-8f880b9a1e4b")]
	public partial class ORMModelElementHasExtensionModelError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ORMModelElementHasExtensionModelError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7a4d2b10, 0x43f3, 0x475f, 0xaa, 0x0a, 0x8f, 0x88, 0x0b, 0x9a, 0x1e, 0x4b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ORMModelElementHasExtensionModelError link in the same Partition as the given ORMModelElement
		/// </summary>
		/// <param name="source">ORMModelElement to use as the source of the relationship.</param>
		/// <param name="target">ModelError to use as the target of the relationship.</param>
		public ORMModelElementHasExtensionModelError(ORMModelElement source, ModelError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ORMModelElementHasExtensionModelError.ExtendedElementDomainRoleId, source), new DslModeling::RoleAssignment(ORMModelElementHasExtensionModelError.ExtensionModelErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ORMModelElementHasExtensionModelError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ORMModelElementHasExtensionModelError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ORMModelElementHasExtensionModelError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ORMModelElementHasExtensionModelError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ExtendedElement domain role code
		
		/// <summary>
		/// ExtendedElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid ExtendedElementDomainRoleId = new global::System.Guid(0x415c3ef5, 0x7524, 0x45a9, 0x93, 0x07, 0x3d, 0x8b, 0x53, 0xbd, 0x88, 0xd6);
		
		/// <summary>
		/// DomainRole ExtendedElement
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionModelError.ExtendedElement
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionModelError/ExtendedElement.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionModelError/ExtendedElement.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ExtensionModelErrorCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionModelError/ExtendedElement.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("415c3ef5-7524-45a9-9307-3d8b53bd88d6")]
		public virtual ORMModelElement ExtendedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ORMModelElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, ExtendedElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ExtendedElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ExtendedElement of a ModelError
		/// <summary>
		/// Gets ExtendedElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ORMModelElement GetExtendedElement(ModelError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ExtensionModelErrorDomainRoleId) as ORMModelElement;
		}
		
		/// <summary>
		/// Sets ExtendedElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetExtendedElement(ModelError element, ORMModelElement newExtendedElement)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ExtensionModelErrorDomainRoleId, newExtendedElement);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing ExtendedElement domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ExtendedElement;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ExtendedElement = (ORMModelElement)value;
			}
		}
		
		#endregion
		#region ExtensionModelError domain role code
		
		/// <summary>
		/// ExtensionModelError domain role Id.
		/// </summary>
		public static readonly global::System.Guid ExtensionModelErrorDomainRoleId = new global::System.Guid(0x1a7a14ef, 0x01fc, 0x4ed8, 0xa1, 0xea, 0x35, 0x33, 0x51, 0x1d, 0x17, 0x50);
		
		/// <summary>
		/// DomainRole ExtensionModelError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionModelError.ExtensionModelError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionModelError/ExtensionModelError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionModelError/ExtensionModelError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ExtendedElement", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionModelError/ExtensionModelError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("1a7a14ef-01fc-4ed8-a1ea-3533511d1750")]
		public virtual ModelError ExtensionModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelError)DslModeling::DomainRoleInfo.GetRolePlayer(this, ExtensionModelErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ExtensionModelErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ExtensionModelErrorCollection of a ORMModelElement
		/// <summary>
		/// Gets a list of ExtensionModelErrorCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelError> GetExtensionModelErrorCollection(ORMModelElement element)
		{
			return new DslModeling::LinkedElementCollection<ModelError>(element, ExtendedElementDomainRoleId);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing ExtensionModelError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ExtensionModelError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ExtensionModelError = value;
			}
		}
		
		#endregion
		#region ExtendedElement link accessor
		/// <summary>
		/// Get the list of ORMModelElementHasExtensionModelError links to a ORMModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionModelError> GetLinksToExtensionModelErrorCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElement extendedElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionModelError>(extendedElementInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionModelError.ExtendedElementDomainRoleId);
		}
		#endregion
		#region ExtensionModelError link accessor
		/// <summary>
		/// Get the ORMModelElementHasExtensionModelError link to a ModelError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionModelError GetLinkToExtendedElement (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelError extensionModelErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionModelError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionModelError>(extensionModelErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionModelError.ExtensionModelErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ExtensionModelError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ORMModelElementHasExtensionModelError instance accessors
		
		/// <summary>
		/// Get any ORMModelElementHasExtensionModelError links between a given ORMModelElement and a ModelError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionModelError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElement source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionModelError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionModelError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionModelError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionModelError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionModelError.ExtendedElementDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionModelError link in links )
			{
				if ( target.Equals(link.ExtensionModelError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ORMModelElementHasExtensionModelError link between a given ORMModelElementand a ModelError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionModelError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElement source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionModelError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionModelError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionModelError.ExtendedElementDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionModelError link in links )
			{
				if ( target.Equals(link.ExtensionModelError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ValueTypeHasDataType
	/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasDataType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasDataType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasDataType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("e4bbc988-e920-4acb-8071-552aeeba7fa9")]
	public partial class ValueTypeHasDataType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ValueTypeHasDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe4bbc988, 0xe920, 0x4acb, 0x80, 0x71, 0x55, 0x2a, 0xee, 0xba, 0x7f, 0xa9);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ValueTypeHasDataType link in the same Partition as the given ObjectType
		/// </summary>
		/// <param name="source">ObjectType to use as the source of the relationship.</param>
		/// <param name="target">DataType to use as the target of the relationship.</param>
		public ValueTypeHasDataType(ObjectType source, DataType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ValueTypeHasDataType.ValueTypeDomainRoleId, source), new DslModeling::RoleAssignment(ValueTypeHasDataType.DataTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ValueTypeHasDataType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ValueTypeHasDataType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ValueTypeHasDataType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ValueTypeHasDataType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ValueType domain role code
		
		/// <summary>
		/// ValueType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ValueTypeDomainRoleId = new global::System.Guid(0x3f6d8d0a, 0xcec5, 0x47ef, 0x8f, 0x81, 0xef, 0x25, 0xf5, 0x95, 0x93, 0xe0);
		
		/// <summary>
		/// DomainRole ValueType
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasDataType.ValueType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasDataType/ValueType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasDataType/ValueType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DataType", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasDataType/ValueType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("3f6d8d0a-cec5-47ef-8f81-ef25f59593e0")]
		public virtual ObjectType ValueType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ValueTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ValueTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ValueTypeCollection of a DataType
		/// <summary>
		/// Gets a list of ValueTypeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ObjectType> GetValueTypeCollection(DataType element)
		{
			return new DslModeling::LinkedElementCollection<ObjectType>(element, DataTypeDomainRoleId);
		}
		#endregion
		#region DataType domain role code
		
		/// <summary>
		/// DataType domain role Id.
		/// </summary>
		public static readonly global::System.Guid DataTypeDomainRoleId = new global::System.Guid(0x0414c824, 0xf797, 0x4f95, 0x8f, 0x25, 0x7d, 0x27, 0x5f, 0xd6, 0x32, 0xb8);
		
		/// <summary>
		/// DomainRole DataType
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasDataType.DataType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasDataType/DataType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasDataType/DataType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ValueTypeCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasDataType/DataType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0414c824-f797-4f95-8f25-7d275fd632b8")]
		public virtual DataType DataType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DataType)DslModeling::DomainRoleInfo.GetRolePlayer(this, DataTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DataTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DataType of a ObjectType
		/// <summary>
		/// Gets DataType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DataType GetDataType(ObjectType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ValueTypeDomainRoleId) as DataType;
		}
		
		/// <summary>
		/// Sets DataType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDataType(ObjectType element, DataType newDataType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ValueTypeDomainRoleId, newDataType);
		}
		#endregion
		#region Scale domain property code
		
		/// <summary>
		/// Scale domain property Id.
		/// </summary>
		public static readonly global::System.Guid ScaleDomainPropertyId = new global::System.Guid(0xf21936e2, 0xe7e6, 0x4afc, 0xb9, 0x6f, 0x43, 0xe9, 0xc7, 0x6f, 0x8a, 0x9b);
		
		/// <summary>
		/// Storage for Scale
		/// </summary>
		private global::System.Int32 scalePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Scale domain property.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasDataType.Scale
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasDataType/Scale.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasDataType/Scale.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("f21936e2-e7e6-4afc-b96f-43e9c76f8a9b")]
		public global::System.Int32 Scale
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return scalePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ScalePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ValueTypeHasDataType.Scale domain property.
		/// </summary>
		internal sealed partial class ScalePropertyHandler : DslModeling::DomainPropertyValueHandler<ValueTypeHasDataType, global::System.Int32>
		{
			private ScalePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ValueTypeHasDataType.Scale domain property value handler.
			/// </summary>
			public static readonly ScalePropertyHandler Instance = new ScalePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ValueTypeHasDataType.Scale domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ScaleDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(ValueTypeHasDataType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.scalePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ValueTypeHasDataType element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.scalePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Length domain property code
		
		/// <summary>
		/// Length domain property Id.
		/// </summary>
		public static readonly global::System.Guid LengthDomainPropertyId = new global::System.Guid(0x60d1471d, 0x23c9, 0x4d4d, 0x91, 0xaf, 0x6a, 0xa5, 0xe9, 0xba, 0x7b, 0x8b);
		
		/// <summary>
		/// Storage for Length
		/// </summary>
		private global::System.Int32 lengthPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Length domain property.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasDataType.Length
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasDataType/Length.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasDataType/Length.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("60d1471d-23c9-4d4d-91af-6aa5e9ba7b8b")]
		public global::System.Int32 Length
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return lengthPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				LengthPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ValueTypeHasDataType.Length domain property.
		/// </summary>
		internal sealed partial class LengthPropertyHandler : DslModeling::DomainPropertyValueHandler<ValueTypeHasDataType, global::System.Int32>
		{
			private LengthPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ValueTypeHasDataType.Length domain property value handler.
			/// </summary>
			public static readonly LengthPropertyHandler Instance = new LengthPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ValueTypeHasDataType.Length domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return LengthDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(ValueTypeHasDataType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.lengthPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ValueTypeHasDataType element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.lengthPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region CurrentScale domain property code
		
		/// <summary>
		/// CurrentScale domain property Id.
		/// </summary>
		public static readonly global::System.Guid CurrentScaleDomainPropertyId = new global::System.Guid(0x7c4af9ce, 0xf083, 0x4ae3, 0x8d, 0xc3, 0x0a, 0xca, 0x82, 0x28, 0x20, 0xe3);
		
		/// <summary>
		/// Gets or sets the value of CurrentScale domain property.
		/// The current scale if scale is supported by the current data type, or 0.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasDataType/CurrentScale.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasDataType/CurrentScale.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("7c4af9ce-f083-4ae3-8dc3-0aca822820e3")]
		public global::System.Int32 CurrentScale
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return CurrentScalePropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CurrentScalePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ValueTypeHasDataType.CurrentScale domain property.
		/// </summary>
		internal sealed partial class CurrentScalePropertyHandler : DslModeling::DomainPropertyValueHandler<ValueTypeHasDataType, global::System.Int32>
		{
			private CurrentScalePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ValueTypeHasDataType.CurrentScale domain property value handler.
			/// </summary>
			public static readonly CurrentScalePropertyHandler Instance = new CurrentScalePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ValueTypeHasDataType.CurrentScale domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CurrentScaleDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(ValueTypeHasDataType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for CurrentScale because its Kind is
				// set to CustomStorage. Please provide the GetCurrentScaleValue()
				// method on the domain class.
				return element.GetCurrentScaleValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ValueTypeHasDataType element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for CurrentScale because its Kind is
					// set to CustomStorage. Please provide the SetCurrentScaleValue()
					// method on the domain class.
					element.SetCurrentScaleValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region CurrentLength domain property code
		
		/// <summary>
		/// CurrentLength domain property Id.
		/// </summary>
		public static readonly global::System.Guid CurrentLengthDomainPropertyId = new global::System.Guid(0xb9861bd8, 0xe22b, 0x4036, 0xb8, 0x44, 0xb9, 0x82, 0x92, 0x4e, 0x4b, 0x3c);
		
		/// <summary>
		/// Gets or sets the value of CurrentLength domain property.
		/// The current length if length is supported by the current data type, or 0.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasDataType/CurrentLength.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasDataType/CurrentLength.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("b9861bd8-e22b-4036-b844-b982924e4b3c")]
		public global::System.Int32 CurrentLength
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return CurrentLengthPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CurrentLengthPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ValueTypeHasDataType.CurrentLength domain property.
		/// </summary>
		internal sealed partial class CurrentLengthPropertyHandler : DslModeling::DomainPropertyValueHandler<ValueTypeHasDataType, global::System.Int32>
		{
			private CurrentLengthPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ValueTypeHasDataType.CurrentLength domain property value handler.
			/// </summary>
			public static readonly CurrentLengthPropertyHandler Instance = new CurrentLengthPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ValueTypeHasDataType.CurrentLength domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CurrentLengthDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(ValueTypeHasDataType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for CurrentLength because its Kind is
				// set to CustomStorage. Please provide the GetCurrentLengthValue()
				// method on the domain class.
				return element.GetCurrentLengthValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ValueTypeHasDataType element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for CurrentLength because its Kind is
					// set to CustomStorage. Please provide the SetCurrentLengthValue()
					// method on the domain class.
					element.SetCurrentLengthValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Accessors for roles that this REL plays in other RELs
		#region DataTypeNotSpecifiedError opposite domain role accessor
		/// <summary>
		/// Gets or sets DataTypeNotSpecifiedError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.ValueTypeHasDataType
		/// </summary>
		public virtual DataTypeNotSpecifiedError DataTypeNotSpecifiedError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.ValueTypeHasDataTypeDomainRoleId) as DataTypeNotSpecifiedError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.DataTypeNotSpecifiedErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.DataTypeNotSpecifiedErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.ValueTypeHasDataTypeDomainRoleId, value);
				}
			}
		}
		#endregion
		#endregion
		#region ValueType link accessor
		/// <summary>
		/// Get the ValueTypeHasDataType link to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasDataType GetLinkToDataType (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType valueTypeInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasDataType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasDataType>(valueTypeInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasDataType.ValueTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ValueType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DataType link accessor
		/// <summary>
		/// Get the list of ValueTypeHasDataType links to a DataType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasDataType> GetLinksToValueTypeCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.DataType dataTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasDataType>(dataTypeInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasDataType.DataTypeDomainRoleId);
		}
		#endregion
		#region ValueTypeHasDataType instance accessors
		
		/// <summary>
		/// Get any ValueTypeHasDataType links between a given ObjectType and a DataType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasDataType> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DataType target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasDataType> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasDataType>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasDataType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasDataType>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasDataType.ValueTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasDataType link in links )
			{
				if ( target.Equals(link.DataType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ValueTypeHasDataType link between a given ObjectTypeand a DataType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasDataType GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DataType target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasDataType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasDataType>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasDataType.ValueTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasDataType link in links )
			{
				if ( target.Equals(link.DataType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship Objectification
	/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.Objectification
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Objectification.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Objectification.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("935dc968-ddd1-4c57-9d43-9f367be78c6d")]
	public partial class Objectification : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// Objectification domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x935dc968, 0xddd1, 0x4c57, 0x9d, 0x43, 0x9f, 0x36, 0x7b, 0xe7, 0x8c, 0x6d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a Objectification link in the same Partition as the given ObjectType
		/// </summary>
		/// <param name="source">ObjectType to use as the source of the relationship.</param>
		/// <param name="target">FactType to use as the target of the relationship.</param>
		public Objectification(ObjectType source, FactType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(Objectification.NestingTypeDomainRoleId, source), new DslModeling::RoleAssignment(Objectification.NestedFactTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Objectification(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Objectification(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Objectification(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Objectification(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region NestingType domain role code
		
		/// <summary>
		/// NestingType domain role Id.
		/// </summary>
		public static readonly global::System.Guid NestingTypeDomainRoleId = new global::System.Guid(0x2660cf3e, 0x2a56, 0x496d, 0x98, 0xcd, 0xbf, 0xfa, 0xc5, 0xe7, 0x31, 0x98);
		
		/// <summary>
		/// DomainRole NestingType
		/// The FactType objectified by this EntityType.
		/// </summary>
		[global::System.ComponentModel.Editor(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.Design.NestedFactTypePicker), typeof(global::System.Drawing.Design.UITypeEditor))]
		[global::System.ComponentModel.MergableProperty(false)]
		[global::System.ComponentModel.TypeConverter()]
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Objectification/NestingType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Objectification/NestingType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "NestedFactType", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.Objectification/NestingType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("2660cf3e-2a56-496d-98cd-bffac5e73198")]
		public virtual ObjectType NestingType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, NestingTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, NestingTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access NestingType of a FactType
		/// <summary>
		/// Gets NestingType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ObjectType GetNestingType(FactType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, NestedFactTypeDomainRoleId) as ObjectType;
		}
		
		/// <summary>
		/// Sets NestingType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetNestingType(FactType element, ObjectType newNestingType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, NestedFactTypeDomainRoleId, newNestingType);
		}
		#endregion
		#region NestedFactType domain role code
		
		/// <summary>
		/// NestedFactType domain role Id.
		/// </summary>
		public static readonly global::System.Guid NestedFactTypeDomainRoleId = new global::System.Guid(0x69f805cc, 0x874f, 0x4e03, 0x83, 0x64, 0x0a, 0x04, 0x45, 0x16, 0x8b, 0x26);
		
		/// <summary>
		/// DomainRole NestedFactType
		/// The EntityType that objectifies this FactType.
		/// </summary>
		[global::System.ComponentModel.Editor(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.Design.NestingTypePicker), typeof(global::System.Drawing.Design.UITypeEditor))]
		[global::System.ComponentModel.MergableProperty(false)]
		[global::System.ComponentModel.TypeConverter()]
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Objectification/NestedFactType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Objectification/NestedFactType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "NestingType", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.Objectification/NestedFactType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("69f805cc-874f-4e03-8364-0a0445168b26")]
		public virtual FactType NestedFactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FactType)DslModeling::DomainRoleInfo.GetRolePlayer(this, NestedFactTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, NestedFactTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access NestedFactType of a ObjectType
		/// <summary>
		/// Gets NestedFactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FactType GetNestedFactType(ObjectType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, NestingTypeDomainRoleId) as FactType;
		}
		
		/// <summary>
		/// Sets NestedFactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetNestedFactType(ObjectType element, FactType newNestedFactType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, NestingTypeDomainRoleId, newNestedFactType);
		}
		#endregion
		#region IsImplied domain property code
		
		/// <summary>
		/// IsImplied domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsImpliedDomainPropertyId = new global::System.Guid(0x7d34dd15, 0xb4d2, 0x4144, 0xac, 0x1c, 0x0f, 0xff, 0xd5, 0x4d, 0xa8, 0x65);
		
		/// <summary>
		/// Storage for IsImplied
		/// </summary>
		private global::System.Boolean isImpliedPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsImplied domain property.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.Objectification.IsImplied
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Objectification/IsImplied.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Objectification/IsImplied.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("7d34dd15-b4d2-4144-ac1c-0fffd54da865")]
		public global::System.Boolean IsImplied
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isImpliedPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsImpliedPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Objectification.IsImplied domain property.
		/// </summary>
		internal sealed partial class IsImpliedPropertyHandler : DslModeling::DomainPropertyValueHandler<Objectification, global::System.Boolean>
		{
			private IsImpliedPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Objectification.IsImplied domain property value handler.
			/// </summary>
			public static readonly IsImpliedPropertyHandler Instance = new IsImpliedPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Objectification.IsImplied domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsImpliedDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(Objectification element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isImpliedPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Objectification element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isImpliedPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Accessors for roles that this REL plays in other RELs
		#region ImpliedFactTypeCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of ImpliedFactTypeCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationImpliesFactType.ImpliedByObjectification
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<FactType> ImpliedFactTypeCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<FactType>(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationImpliesFactType.ImpliedByObjectificationDomainRoleId);
			}
		}
		#endregion
		#endregion
		#region NestingType link accessor
		/// <summary>
		/// Get the Objectification link to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.Objectification GetLinkToNestedFactType (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType nestingTypeInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.Objectification> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.Objectification>(nestingTypeInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Objectification.NestingTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of NestingType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region NestedFactType link accessor
		/// <summary>
		/// Get the Objectification link to a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.Objectification GetLinkToNestingType (global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType nestedFactTypeInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.Objectification> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.Objectification>(nestedFactTypeInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Objectification.NestedFactTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of NestedFactType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Objectification instance accessors
		
		/// <summary>
		/// Get any Objectification links between a given ObjectType and a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.Objectification> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.Objectification> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.Objectification>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.Objectification> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.Objectification>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Objectification.NestingTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.Objectification link in links )
			{
				if ( target.Equals(link.NestedFactType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one Objectification link between a given ObjectTypeand a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.Objectification GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.Objectification> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.Objectification>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Objectification.NestingTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.Objectification link in links )
			{
				if ( target.Equals(link.NestedFactType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ObjectTypePlaysRole
	/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypePlaysRole
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypePlaysRole.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypePlaysRole.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("0ab8d25e-45d4-4696-b6ee-6f108fee97a7")]
	public partial class ObjectTypePlaysRole : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ObjectTypePlaysRole domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0ab8d25e, 0x45d4, 0x4696, 0xb6, 0xee, 0x6f, 0x10, 0x8f, 0xee, 0x97, 0xa7);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ObjectTypePlaysRole link in the same Partition as the given Role
		/// </summary>
		/// <param name="source">Role to use as the source of the relationship.</param>
		/// <param name="target">ObjectType to use as the target of the relationship.</param>
		public ObjectTypePlaysRole(Role source, ObjectType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ObjectTypePlaysRole.PlayedRoleDomainRoleId, source), new DslModeling::RoleAssignment(ObjectTypePlaysRole.RolePlayerDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectTypePlaysRole(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectTypePlaysRole(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectTypePlaysRole(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectTypePlaysRole(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region PlayedRole domain role code
		
		/// <summary>
		/// PlayedRole domain role Id.
		/// </summary>
		public static readonly global::System.Guid PlayedRoleDomainRoleId = new global::System.Guid(0xa87b6eeb, 0x1753, 0x4ad3, 0xa0, 0x0d, 0x43, 0x1e, 0x34, 0xb0, 0x5a, 0xc2);
		
		/// <summary>
		/// DomainRole PlayedRole
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypePlaysRole.PlayedRole
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypePlaysRole/PlayedRole.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypePlaysRole/PlayedRole.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "RolePlayer", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypePlaysRole/PlayedRole.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("a87b6eeb-1753-4ad3-a00d-431e34b05ac2")]
		public virtual Role PlayedRole
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Role)DslModeling::DomainRoleInfo.GetRolePlayer(this, PlayedRoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PlayedRoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PlayedRoleCollection of a ObjectType
		/// <summary>
		/// Gets a list of PlayedRoleCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Role> GetPlayedRoleCollection(ObjectType element)
		{
			return new DslModeling::LinkedElementCollection<Role>(element, RolePlayerDomainRoleId);
		}
		#endregion
		#region RolePlayer domain role code
		
		/// <summary>
		/// RolePlayer domain role Id.
		/// </summary>
		public static readonly global::System.Guid RolePlayerDomainRoleId = new global::System.Guid(0x8ec5c761, 0x2e7c, 0x422c, 0xb5, 0xe7, 0x35, 0x47, 0x88, 0xa1, 0x8f, 0x59);
		
		/// <summary>
		/// DomainRole RolePlayer
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypePlaysRole.RolePlayer
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypePlaysRole/RolePlayer.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypePlaysRole/RolePlayer.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "PlayedRoleCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypePlaysRole/RolePlayer.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("8ec5c761-2e7c-422c-b5e7-354788a18f59")]
		public virtual ObjectType RolePlayer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, RolePlayerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RolePlayerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RolePlayer of a Role
		/// <summary>
		/// Gets RolePlayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ObjectType GetRolePlayer(Role element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PlayedRoleDomainRoleId) as ObjectType;
		}
		
		/// <summary>
		/// Sets RolePlayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRolePlayer(Role element, ObjectType newRolePlayer)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PlayedRoleDomainRoleId, newRolePlayer);
		}
		#endregion
		#region PlayedRole link accessor
		/// <summary>
		/// Get the ObjectTypePlaysRole link to a Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypePlaysRole GetLinkToRolePlayer (global::ORMSolutions.ORMArchitect.Core.ObjectModel.Role playedRoleInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypePlaysRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypePlaysRole>(playedRoleInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypePlaysRole.PlayedRoleDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of PlayedRole not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region RolePlayer link accessor
		/// <summary>
		/// Get the list of ObjectTypePlaysRole links to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypePlaysRole> GetLinksToPlayedRoleCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType rolePlayerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypePlaysRole>(rolePlayerInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypePlaysRole.RolePlayerDomainRoleId);
		}
		#endregion
		#region ObjectTypePlaysRole instance accessors
		
		/// <summary>
		/// Get any ObjectTypePlaysRole links between a given Role and a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypePlaysRole> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.Role source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypePlaysRole> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypePlaysRole>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypePlaysRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypePlaysRole>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypePlaysRole.PlayedRoleDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypePlaysRole link in links )
			{
				if ( target.Equals(link.RolePlayer) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ObjectTypePlaysRole link between a given Roleand a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypePlaysRole GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.Role source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypePlaysRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypePlaysRole>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypePlaysRole.PlayedRoleDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypePlaysRole link in links )
			{
				if ( target.Equals(link.RolePlayer) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ModelHasObjectType
	/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasObjectType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasObjectType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasObjectType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("f060c714-ef07-481f-ab4b-ba02b9908025")]
	public partial class ModelHasObjectType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasObjectType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf060c714, 0xef07, 0x481f, 0xab, 0x4b, 0xba, 0x02, 0xb9, 0x90, 0x80, 0x25);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasObjectType link in the same Partition as the given ORMModel
		/// </summary>
		/// <param name="source">ORMModel to use as the source of the relationship.</param>
		/// <param name="target">ObjectType to use as the target of the relationship.</param>
		public ModelHasObjectType(ORMModel source, ObjectType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasObjectType.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasObjectType.ObjectTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasObjectType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasObjectType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasObjectType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasObjectType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0xe3fa6f15, 0xef49, 0x4b72, 0xb0, 0x2f, 0xec, 0x7c, 0x2b, 0xa7, 0x18, 0xec);
		
		/// <summary>
		/// DomainRole Model
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasObjectType.Model
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasObjectType/Model.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasObjectType/Model.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ObjectTypeCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasObjectType/Model.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e3fa6f15-ef49-4b72-b02f-ec7c2ba718ec")]
		public virtual ORMModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ORMModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a ObjectType
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ORMModel GetModel(ObjectType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ObjectTypeDomainRoleId) as ORMModel;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(ObjectType element, ORMModel newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ObjectTypeDomainRoleId, newModel);
		}
		#endregion
		#region ObjectType domain role code
		
		/// <summary>
		/// ObjectType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ObjectTypeDomainRoleId = new global::System.Guid(0xf827bd9b, 0x9eda, 0x41c6, 0xba, 0xe9, 0xac, 0xfd, 0x8a, 0x19, 0xba, 0x08);
		
		/// <summary>
		/// DomainRole ObjectType
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasObjectType.ObjectType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasObjectType/ObjectType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasObjectType/ObjectType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasObjectType/ObjectType.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("f827bd9b-9eda-41c6-bae9-acfd8a19ba08")]
		public virtual ObjectType ObjectType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjectTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjectTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ObjectTypeCollection of a ORMModel
		/// <summary>
		/// Gets a list of ObjectTypeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ObjectType> GetObjectTypeCollection(ORMModel element)
		{
			return new DslModeling::LinkedElementCollection<ObjectType>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelHasObjectType links to a ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasObjectType> GetLinksToObjectTypeCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasObjectType>(modelInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasObjectType.ModelDomainRoleId);
		}
		#endregion
		#region ObjectType link accessor
		/// <summary>
		/// Get the ModelHasObjectType link to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasObjectType GetLinkToModel (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType objectTypeInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasObjectType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasObjectType>(objectTypeInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasObjectType.ObjectTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ObjectType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasObjectType instance accessors
		
		/// <summary>
		/// Get any ModelHasObjectType links between a given ORMModel and a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasObjectType> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasObjectType> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasObjectType>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasObjectType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasObjectType>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasObjectType.ModelDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasObjectType link in links )
			{
				if ( target.Equals(link.ObjectType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasObjectType link between a given ORMModeland a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasObjectType GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasObjectType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasObjectType>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasObjectType.ModelDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasObjectType link in links )
			{
				if ( target.Equals(link.ObjectType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ModelHasFactType
	/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasFactType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasFactType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasFactType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("df97b102-8500-4ea1-9059-356bc49e7066")]
	public partial class ModelHasFactType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasFactType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xdf97b102, 0x8500, 0x4ea1, 0x90, 0x59, 0x35, 0x6b, 0xc4, 0x9e, 0x70, 0x66);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasFactType link in the same Partition as the given ORMModel
		/// </summary>
		/// <param name="source">ORMModel to use as the source of the relationship.</param>
		/// <param name="target">FactType to use as the target of the relationship.</param>
		public ModelHasFactType(ORMModel source, FactType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasFactType.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasFactType.FactTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasFactType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasFactType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasFactType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasFactType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0xcc174187, 0x4e88, 0x4230, 0xad, 0xbd, 0xb4, 0x68, 0xf5, 0x8a, 0xb5, 0x8d);
		
		/// <summary>
		/// DomainRole Model
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasFactType.Model
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasFactType/Model.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasFactType/Model.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "FactTypeCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasFactType/Model.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("cc174187-4e88-4230-adbd-b468f58ab58d")]
		public virtual ORMModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ORMModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a FactType
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ORMModel GetModel(FactType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FactTypeDomainRoleId) as ORMModel;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(FactType element, ORMModel newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FactTypeDomainRoleId, newModel);
		}
		#endregion
		#region FactType domain role code
		
		/// <summary>
		/// FactType domain role Id.
		/// </summary>
		public static readonly global::System.Guid FactTypeDomainRoleId = new global::System.Guid(0x972619de, 0x83c9, 0x4a7b, 0xa2, 0xc5, 0xa6, 0x26, 0xf0, 0x2d, 0x19, 0x2b);
		
		/// <summary>
		/// DomainRole FactType
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasFactType.FactType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasFactType/FactType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasFactType/FactType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasFactType/FactType.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("972619de-83c9-4a7b-a2c5-a626f02d192b")]
		public virtual FactType FactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FactType)DslModeling::DomainRoleInfo.GetRolePlayer(this, FactTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FactTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FactTypeCollection of a ORMModel
		/// <summary>
		/// Gets a list of FactTypeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FactType> GetFactTypeCollection(ORMModel element)
		{
			return new DslModeling::LinkedElementCollection<FactType>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelHasFactType links to a ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasFactType> GetLinksToFactTypeCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasFactType>(modelInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasFactType.ModelDomainRoleId);
		}
		#endregion
		#region FactType link accessor
		/// <summary>
		/// Get the ModelHasFactType link to a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasFactType GetLinkToModel (global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType factTypeInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasFactType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasFactType>(factTypeInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasFactType.FactTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of FactType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasFactType instance accessors
		
		/// <summary>
		/// Get any ModelHasFactType links between a given ORMModel and a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasFactType> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasFactType> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasFactType>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasFactType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasFactType>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasFactType.ModelDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasFactType link in links )
			{
				if ( target.Equals(link.FactType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasFactType link between a given ORMModeland a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasFactType GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasFactType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasFactType>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasFactType.ModelDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasFactType link in links )
			{
				if ( target.Equals(link.FactType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ModelHasError
	/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("20cfe989-a6af-4d97-a552-ae5dd7684971")]
	public partial class ModelHasError : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x20cfe989, 0xa6af, 0x4d97, 0xa5, 0x52, 0xae, 0x5d, 0xd7, 0x68, 0x49, 0x71);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasError link in the same Partition as the given ORMModel
		/// </summary>
		/// <param name="source">ORMModel to use as the source of the relationship.</param>
		/// <param name="target">ModelError to use as the target of the relationship.</param>
		public ModelHasError(ORMModel source, ModelError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasError.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasError.ErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x8f57fa08, 0x7038, 0x4cdb, 0x90, 0x0a, 0x45, 0x0a, 0x9a, 0x9d, 0xd8, 0xdc);
		
		/// <summary>
		/// DomainRole Model
		/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasError.Model
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasError/Model.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasError/Model.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ErrorCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasError/Model.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("8f57fa08-7038-4cdb-900a-450a9a9dd8dc")]
		public virtual ORMModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ORMModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a ModelError
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ORMModel GetModel(ModelError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ErrorDomainRoleId) as ORMModel;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(ModelError element, ORMModel newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ErrorDomainRoleId, newModel);
		}
		#endregion
		#region Error domain role code
		
		/// <summary>
		/// Error domain role Id.
		/// </summary>
		public static readonly global::System.Guid ErrorDomainRoleId = new global::System.Guid(0x48331657, 0x5405, 0x4a04, 0xb7, 0x72, 0x23, 0xa9, 0x41, 0x37, 0x88, 0xa4);
		
		/// <summary>
		/// DomainRole Error
		/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasError.Error
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasError/Error.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasError/Error.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasError/Error.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("48331657-5405-4a04-b772-23a9413788a4")]
		public virtual ModelError Error
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelError)DslModeling::DomainRoleInfo.GetRolePlayer(this, ErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ErrorCollection of a ORMModel
		/// <summary>
		/// Gets a list of ErrorCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelError> GetErrorCollection(ORMModel element)
		{
			return new DslModeling::LinkedElementCollection<ModelError>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelHasError links to a ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasError> GetLinksToErrorCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasError>(modelInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasError.ModelDomainRoleId);
		}
		#endregion
		#region Error link accessor
		/// <summary>
		/// Get the ModelHasError link to a ModelError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasError GetLinkToModel (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelError errorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasError>(errorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasError.ErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Error not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasError instance accessors
		
		/// <summary>
		/// Get any ModelHasError links between a given ORMModel and a ModelError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasError.ModelDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasError link in links )
			{
				if ( target.Equals(link.Error) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasError link between a given ORMModeland a ModelError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasError.ModelDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasError link in links )
			{
				if ( target.Equals(link.Error) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ModelHasReferenceModeKind
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceModeKind
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceModeKind.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceModeKind.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("1b280979-e9f5-4774-847f-3a1078db1943")]
	public partial class ModelHasReferenceModeKind : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasReferenceModeKind domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1b280979, 0xe9f5, 0x4774, 0x84, 0x7f, 0x3a, 0x10, 0x78, 0xdb, 0x19, 0x43);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasReferenceModeKind link in the same Partition as the given ORMModel
		/// </summary>
		/// <param name="source">ORMModel to use as the source of the relationship.</param>
		/// <param name="target">ReferenceModeKind to use as the target of the relationship.</param>
		public ModelHasReferenceModeKind(ORMModel source, ReferenceModeKind target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasReferenceModeKind.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasReferenceModeKind.ReferenceModeKindDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasReferenceModeKind(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasReferenceModeKind(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasReferenceModeKind(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasReferenceModeKind(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x966465e7, 0x6bad, 0x4100, 0xa0, 0x82, 0xb4, 0xaa, 0x20, 0x51, 0x1a, 0x7d);
		
		/// <summary>
		/// DomainRole Model
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceModeKind.Model
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceModeKind/Model.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceModeKind/Model.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ReferenceModeKindCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceModeKind/Model.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("966465e7-6bad-4100-a082-b4aa20511a7d")]
		public virtual ORMModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ORMModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a ReferenceModeKind
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ORMModel GetModel(ReferenceModeKind element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ReferenceModeKindDomainRoleId) as ORMModel;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(ReferenceModeKind element, ORMModel newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ReferenceModeKindDomainRoleId, newModel);
		}
		#endregion
		#region ReferenceModeKind domain role code
		
		/// <summary>
		/// ReferenceModeKind domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReferenceModeKindDomainRoleId = new global::System.Guid(0x234cdd35, 0xb21e, 0x48d2, 0xa4, 0x30, 0x5d, 0x9e, 0xc3, 0x06, 0xfa, 0x67);
		
		/// <summary>
		/// DomainRole ReferenceModeKind
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceModeKind.ReferenceModeKind
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceModeKind/ReferenceModeKind.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceModeKind/ReferenceModeKind.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceModeKind/ReferenceModeKind.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("234cdd35-b21e-48d2-a430-5d9ec306fa67")]
		public virtual ReferenceModeKind ReferenceModeKind
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ReferenceModeKind)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReferenceModeKindDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReferenceModeKindDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ReferenceModeKindCollection of a ORMModel
		/// <summary>
		/// Gets a list of ReferenceModeKindCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ReferenceModeKind> GetReferenceModeKindCollection(ORMModel element)
		{
			return new DslModeling::LinkedElementCollection<ReferenceModeKind>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelHasReferenceModeKind links to a ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceModeKind> GetLinksToReferenceModeKindCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceModeKind>(modelInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceModeKind.ModelDomainRoleId);
		}
		#endregion
		#region ReferenceModeKind link accessor
		/// <summary>
		/// Get the ModelHasReferenceModeKind link to a ReferenceModeKind.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceModeKind GetLinkToModel (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeKind referenceModeKindInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceModeKind> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceModeKind>(referenceModeKindInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceModeKind.ReferenceModeKindDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ReferenceModeKind not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasReferenceModeKind instance accessors
		
		/// <summary>
		/// Get any ModelHasReferenceModeKind links between a given ORMModel and a ReferenceModeKind.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceModeKind> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeKind target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceModeKind> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceModeKind>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceModeKind> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceModeKind>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceModeKind.ModelDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceModeKind link in links )
			{
				if ( target.Equals(link.ReferenceModeKind) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasReferenceModeKind link between a given ORMModeland a ReferenceModeKind.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceModeKind GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeKind target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceModeKind> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceModeKind>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceModeKind.ModelDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceModeKind link in links )
			{
				if ( target.Equals(link.ReferenceModeKind) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ModelHasReferenceMode
	/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceMode
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceMode.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceMode.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("f6647d65-926b-4e66-81bc-f6293a44093e")]
	public partial class ModelHasReferenceMode : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasReferenceMode domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf6647d65, 0x926b, 0x4e66, 0x81, 0xbc, 0xf6, 0x29, 0x3a, 0x44, 0x09, 0x3e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasReferenceMode link in the same Partition as the given ORMModel
		/// </summary>
		/// <param name="source">ORMModel to use as the source of the relationship.</param>
		/// <param name="target">ReferenceMode to use as the target of the relationship.</param>
		public ModelHasReferenceMode(ORMModel source, ReferenceMode target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasReferenceMode.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasReferenceMode.ReferenceModeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasReferenceMode(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasReferenceMode(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasReferenceMode(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasReferenceMode(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x88b428c5, 0xe93f, 0x4739, 0x82, 0xe5, 0x44, 0x0e, 0x6b, 0x13, 0x92, 0x1a);
		
		/// <summary>
		/// DomainRole Model
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceMode.Model
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceMode/Model.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceMode/Model.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ReferenceModeCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceMode/Model.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("88b428c5-e93f-4739-82e5-440e6b13921a")]
		public virtual ORMModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ORMModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a ReferenceMode
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ORMModel GetModel(ReferenceMode element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ReferenceModeDomainRoleId) as ORMModel;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(ReferenceMode element, ORMModel newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ReferenceModeDomainRoleId, newModel);
		}
		#endregion
		#region ReferenceMode domain role code
		
		/// <summary>
		/// ReferenceMode domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReferenceModeDomainRoleId = new global::System.Guid(0x4ebaaa54, 0x37e3, 0x43d5, 0xa1, 0xcd, 0xc8, 0xac, 0x5d, 0xa2, 0x74, 0xe4);
		
		/// <summary>
		/// DomainRole ReferenceMode
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceMode.ReferenceMode
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceMode/ReferenceMode.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceMode/ReferenceMode.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceMode/ReferenceMode.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("4ebaaa54-37e3-43d5-a1cd-c8ac5da274e4")]
		public virtual ReferenceMode ReferenceMode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ReferenceMode)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReferenceModeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReferenceModeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ReferenceModeCollection of a ORMModel
		/// <summary>
		/// Gets a list of ReferenceModeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ReferenceMode> GetReferenceModeCollection(ORMModel element)
		{
			return new DslModeling::LinkedElementCollection<ReferenceMode>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelHasReferenceMode links to a ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceMode> GetLinksToReferenceModeCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceMode>(modelInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceMode.ModelDomainRoleId);
		}
		#endregion
		#region ReferenceMode link accessor
		/// <summary>
		/// Get the ModelHasReferenceMode link to a ReferenceMode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceMode GetLinkToModel (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceMode referenceModeInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceMode> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceMode>(referenceModeInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceMode.ReferenceModeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ReferenceMode not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasReferenceMode instance accessors
		
		/// <summary>
		/// Get any ModelHasReferenceMode links between a given ORMModel and a ReferenceMode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceMode> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceMode target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceMode> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceMode>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceMode> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceMode>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceMode.ModelDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceMode link in links )
			{
				if ( target.Equals(link.ReferenceMode) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasReferenceMode link between a given ORMModeland a ReferenceMode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceMode GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceMode target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceMode> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceMode>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceMode.ModelDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceMode link in links )
			{
				if ( target.Equals(link.ReferenceMode) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ModelHasSetConstraint
	/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("c0104439-3b39-41e7-9b68-61f31f17a066")]
	public partial class ModelHasSetConstraint : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasSetConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc0104439, 0x3b39, 0x41e7, 0x9b, 0x68, 0x61, 0xf3, 0x1f, 0x17, 0xa0, 0x66);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasSetConstraint link in the same Partition as the given ORMModel
		/// </summary>
		/// <param name="source">ORMModel to use as the source of the relationship.</param>
		/// <param name="target">SetConstraint to use as the target of the relationship.</param>
		public ModelHasSetConstraint(ORMModel source, SetConstraint target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasSetConstraint.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasSetConstraint.SetConstraintDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasSetConstraint(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasSetConstraint(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasSetConstraint(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasSetConstraint(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x54b0d8a2, 0x91b9, 0x41a3, 0x85, 0x71, 0x10, 0x3d, 0xcb, 0x7b, 0xec, 0xcd);
		
		/// <summary>
		/// DomainRole Model
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetConstraint.Model
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetConstraint/Model.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetConstraint/Model.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "SetConstraintCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetConstraint/Model.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("54b0d8a2-91b9-41a3-8571-103dcb7beccd")]
		public virtual ORMModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ORMModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a SetConstraint
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ORMModel GetModel(SetConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SetConstraintDomainRoleId) as ORMModel;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(SetConstraint element, ORMModel newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SetConstraintDomainRoleId, newModel);
		}
		#endregion
		#region SetConstraint domain role code
		
		/// <summary>
		/// SetConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid SetConstraintDomainRoleId = new global::System.Guid(0x550f7793, 0x1381, 0x4d37, 0xa5, 0xe2, 0x78, 0xc4, 0x8d, 0x0f, 0x13, 0x31);
		
		/// <summary>
		/// DomainRole SetConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetConstraint.SetConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetConstraint/SetConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetConstraint/SetConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetConstraint/SetConstraint.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("550f7793-1381-4d37-a5e2-78c48d0f1331")]
		public virtual SetConstraint SetConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SetConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SetConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SetConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SetConstraintCollection of a ORMModel
		/// <summary>
		/// Gets a list of SetConstraintCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SetConstraint> GetSetConstraintCollection(ORMModel element)
		{
			return new DslModeling::LinkedElementCollection<SetConstraint>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelHasSetConstraint links to a ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetConstraint> GetLinksToSetConstraintCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetConstraint>(modelInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetConstraint.ModelDomainRoleId);
		}
		#endregion
		#region SetConstraint link accessor
		/// <summary>
		/// Get the ModelHasSetConstraint link to a SetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetConstraint GetLinkToModel (global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint setConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetConstraint>(setConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetConstraint.SetConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SetConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasSetConstraint instance accessors
		
		/// <summary>
		/// Get any ModelHasSetConstraint links between a given ORMModel and a SetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetConstraint> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetConstraint> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetConstraint>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetConstraint>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetConstraint.ModelDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetConstraint link in links )
			{
				if ( target.Equals(link.SetConstraint) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasSetConstraint link between a given ORMModeland a SetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetConstraint GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetConstraint>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetConstraint.ModelDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetConstraint link in links )
			{
				if ( target.Equals(link.SetConstraint) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ObjectTypeImpliesMandatoryConstraint
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeImpliesMandatoryConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeImpliesMandatoryConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeImpliesMandatoryConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("9a43a30e-6f18-46ff-9b8d-5313f6e93807")]
	public partial class ObjectTypeImpliesMandatoryConstraint : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ObjectTypeImpliesMandatoryConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9a43a30e, 0x6f18, 0x46ff, 0x9b, 0x8d, 0x53, 0x13, 0xf6, 0xe9, 0x38, 0x07);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ObjectTypeImpliesMandatoryConstraint link in the same Partition as the given ObjectType
		/// </summary>
		/// <param name="source">ObjectType to use as the source of the relationship.</param>
		/// <param name="target">MandatoryConstraint to use as the target of the relationship.</param>
		public ObjectTypeImpliesMandatoryConstraint(ObjectType source, MandatoryConstraint target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ObjectTypeImpliesMandatoryConstraint.ObjectTypeDomainRoleId, source), new DslModeling::RoleAssignment(ObjectTypeImpliesMandatoryConstraint.MandatoryConstraintDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectTypeImpliesMandatoryConstraint(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectTypeImpliesMandatoryConstraint(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectTypeImpliesMandatoryConstraint(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectTypeImpliesMandatoryConstraint(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ObjectType domain role code
		
		/// <summary>
		/// ObjectType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ObjectTypeDomainRoleId = new global::System.Guid(0x929dfc02, 0x4c1e, 0x4d43, 0x90, 0xd7, 0x11, 0x12, 0xc3, 0xcf, 0x75, 0x7b);
		
		/// <summary>
		/// DomainRole ObjectType
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeImpliesMandatoryConstraint.ObjectType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeImpliesMandatoryConstraint/ObjectType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeImpliesMandatoryConstraint/ObjectType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ImpliedMandatoryConstraint", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeImpliesMandatoryConstraint/ObjectType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("929dfc02-4c1e-4d43-90d7-1112c3cf757b")]
		public virtual ObjectType ObjectType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjectTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjectTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ImpliedByObjectType of a MandatoryConstraint
		/// <summary>
		/// Gets ImpliedByObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ObjectType GetImpliedByObjectType(MandatoryConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, MandatoryConstraintDomainRoleId) as ObjectType;
		}
		
		/// <summary>
		/// Sets ImpliedByObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetImpliedByObjectType(MandatoryConstraint element, ObjectType newObjectType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, MandatoryConstraintDomainRoleId, newObjectType);
		}
		#endregion
		#region MandatoryConstraint domain role code
		
		/// <summary>
		/// MandatoryConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid MandatoryConstraintDomainRoleId = new global::System.Guid(0xc4e7dfa7, 0x13b4, 0x463f, 0xbf, 0x84, 0x40, 0x32, 0xde, 0x22, 0xda, 0x88);
		
		/// <summary>
		/// DomainRole MandatoryConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeImpliesMandatoryConstraint.MandatoryConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeImpliesMandatoryConstraint/MandatoryConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeImpliesMandatoryConstraint/MandatoryConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ImpliedByObjectType", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeImpliesMandatoryConstraint/MandatoryConstraint.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("c4e7dfa7-13b4-463f-bf84-4032de22da88")]
		public virtual MandatoryConstraint MandatoryConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MandatoryConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, MandatoryConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MandatoryConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ImpliedMandatoryConstraint of a ObjectType
		/// <summary>
		/// Gets ImpliedMandatoryConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static MandatoryConstraint GetImpliedMandatoryConstraint(ObjectType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ObjectTypeDomainRoleId) as MandatoryConstraint;
		}
		
		/// <summary>
		/// Sets ImpliedMandatoryConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetImpliedMandatoryConstraint(ObjectType element, MandatoryConstraint newMandatoryConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ObjectTypeDomainRoleId, newMandatoryConstraint);
		}
		#endregion
		#region ObjectType link accessor
		/// <summary>
		/// Get the ObjectTypeImpliesMandatoryConstraint link to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeImpliesMandatoryConstraint GetLinkToImpliedMandatoryConstraint (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType objectTypeInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeImpliesMandatoryConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeImpliesMandatoryConstraint>(objectTypeInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeImpliesMandatoryConstraint.ObjectTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ObjectType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MandatoryConstraint link accessor
		/// <summary>
		/// Get the ObjectTypeImpliesMandatoryConstraint link to a MandatoryConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeImpliesMandatoryConstraint GetLinkToImpliedByObjectType (global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraint mandatoryConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeImpliesMandatoryConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeImpliesMandatoryConstraint>(mandatoryConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeImpliesMandatoryConstraint.MandatoryConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of MandatoryConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ObjectTypeImpliesMandatoryConstraint instance accessors
		
		/// <summary>
		/// Get any ObjectTypeImpliesMandatoryConstraint links between a given ObjectType and a MandatoryConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeImpliesMandatoryConstraint> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraint target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeImpliesMandatoryConstraint> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeImpliesMandatoryConstraint>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeImpliesMandatoryConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeImpliesMandatoryConstraint>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeImpliesMandatoryConstraint.ObjectTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeImpliesMandatoryConstraint link in links )
			{
				if ( target.Equals(link.MandatoryConstraint) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ObjectTypeImpliesMandatoryConstraint link between a given ObjectTypeand a MandatoryConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeImpliesMandatoryConstraint GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraint target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeImpliesMandatoryConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeImpliesMandatoryConstraint>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeImpliesMandatoryConstraint.ObjectTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeImpliesMandatoryConstraint link in links )
			{
				if ( target.Equals(link.MandatoryConstraint) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship MandatoryConstraintIsInherentForObjectType
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintIsInherentForObjectType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintIsInherentForObjectType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintIsInherentForObjectType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("717582e0-4fab-47f9-9e14-62c385a61125")]
	public partial class MandatoryConstraintIsInherentForObjectType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MandatoryConstraintIsInherentForObjectType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x717582e0, 0x4fab, 0x47f9, 0x9e, 0x14, 0x62, 0xc3, 0x85, 0xa6, 0x11, 0x25);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MandatoryConstraintIsInherentForObjectType link in the same Partition as the given ObjectType
		/// </summary>
		/// <param name="source">ObjectType to use as the source of the relationship.</param>
		/// <param name="target">MandatoryConstraint to use as the target of the relationship.</param>
		public MandatoryConstraintIsInherentForObjectType(ObjectType source, MandatoryConstraint target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MandatoryConstraintIsInherentForObjectType.ObjectTypeDomainRoleId, source), new DslModeling::RoleAssignment(MandatoryConstraintIsInherentForObjectType.MandatoryConstraintDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MandatoryConstraintIsInherentForObjectType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MandatoryConstraintIsInherentForObjectType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MandatoryConstraintIsInherentForObjectType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MandatoryConstraintIsInherentForObjectType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ObjectType domain role code
		
		/// <summary>
		/// ObjectType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ObjectTypeDomainRoleId = new global::System.Guid(0x56728280, 0x33d7, 0x4218, 0x95, 0x98, 0x70, 0x3e, 0x8d, 0xb5, 0x9f, 0x39);
		
		/// <summary>
		/// DomainRole ObjectType
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintIsInherentForObjectType.ObjectType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintIsInherentForObjectType/ObjectType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintIsInherentForObjectType/ObjectType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "InherentMandatoryConstraint", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintIsInherentForObjectType/ObjectType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("56728280-33d7-4218-9598-703e8db59f39")]
		public virtual ObjectType ObjectType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjectTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjectTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InherentForObjectType of a MandatoryConstraint
		/// <summary>
		/// Gets InherentForObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ObjectType GetInherentForObjectType(MandatoryConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, MandatoryConstraintDomainRoleId) as ObjectType;
		}
		
		/// <summary>
		/// Sets InherentForObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetInherentForObjectType(MandatoryConstraint element, ObjectType newObjectType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, MandatoryConstraintDomainRoleId, newObjectType);
		}
		#endregion
		#region MandatoryConstraint domain role code
		
		/// <summary>
		/// MandatoryConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid MandatoryConstraintDomainRoleId = new global::System.Guid(0x672605ce, 0xf276, 0x4e80, 0x9e, 0x47, 0x80, 0xdd, 0xb3, 0xd5, 0xbb, 0x4a);
		
		/// <summary>
		/// DomainRole MandatoryConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintIsInherentForObjectType.MandatoryConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintIsInherentForObjectType/MandatoryConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintIsInherentForObjectType/MandatoryConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "InherentForObjectType", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintIsInherentForObjectType/MandatoryConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("672605ce-f276-4e80-9e47-80ddb3d5bb4a")]
		public virtual MandatoryConstraint MandatoryConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MandatoryConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, MandatoryConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MandatoryConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InherentMandatoryConstraint of a ObjectType
		/// <summary>
		/// Gets InherentMandatoryConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static MandatoryConstraint GetInherentMandatoryConstraint(ObjectType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ObjectTypeDomainRoleId) as MandatoryConstraint;
		}
		
		/// <summary>
		/// Sets InherentMandatoryConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetInherentMandatoryConstraint(ObjectType element, MandatoryConstraint newMandatoryConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ObjectTypeDomainRoleId, newMandatoryConstraint);
		}
		#endregion
		#region ObjectType link accessor
		/// <summary>
		/// Get the MandatoryConstraintIsInherentForObjectType link to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintIsInherentForObjectType GetLinkToInherentMandatoryConstraint (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType objectTypeInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintIsInherentForObjectType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintIsInherentForObjectType>(objectTypeInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintIsInherentForObjectType.ObjectTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ObjectType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MandatoryConstraint link accessor
		/// <summary>
		/// Get the MandatoryConstraintIsInherentForObjectType link to a MandatoryConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintIsInherentForObjectType GetLinkToInherentForObjectType (global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraint mandatoryConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintIsInherentForObjectType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintIsInherentForObjectType>(mandatoryConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintIsInherentForObjectType.MandatoryConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of MandatoryConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MandatoryConstraintIsInherentForObjectType instance accessors
		
		/// <summary>
		/// Get any MandatoryConstraintIsInherentForObjectType links between a given ObjectType and a MandatoryConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintIsInherentForObjectType> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraint target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintIsInherentForObjectType> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintIsInherentForObjectType>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintIsInherentForObjectType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintIsInherentForObjectType>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintIsInherentForObjectType.ObjectTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintIsInherentForObjectType link in links )
			{
				if ( target.Equals(link.MandatoryConstraint) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MandatoryConstraintIsInherentForObjectType link between a given ObjectTypeand a MandatoryConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintIsInherentForObjectType GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraint target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintIsInherentForObjectType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintIsInherentForObjectType>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintIsInherentForObjectType.ObjectTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintIsInherentForObjectType link in links )
			{
				if ( target.Equals(link.MandatoryConstraint) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ModelHasSetComparisonConstraint
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetComparisonConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetComparisonConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetComparisonConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("37fbe5b6-4e18-43e2-b34b-dab0ef69dde4")]
	public partial class ModelHasSetComparisonConstraint : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasSetComparisonConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x37fbe5b6, 0x4e18, 0x43e2, 0xb3, 0x4b, 0xda, 0xb0, 0xef, 0x69, 0xdd, 0xe4);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasSetComparisonConstraint link in the same Partition as the given ORMModel
		/// </summary>
		/// <param name="source">ORMModel to use as the source of the relationship.</param>
		/// <param name="target">SetComparisonConstraint to use as the target of the relationship.</param>
		public ModelHasSetComparisonConstraint(ORMModel source, SetComparisonConstraint target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasSetComparisonConstraint.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasSetComparisonConstraint.SetComparisonConstraintDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasSetComparisonConstraint(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasSetComparisonConstraint(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasSetComparisonConstraint(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasSetComparisonConstraint(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x0d5738fb, 0x77ef, 0x41c2, 0x82, 0xee, 0xa9, 0x8e, 0x54, 0x84, 0xb1, 0x1b);
		
		/// <summary>
		/// DomainRole Model
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetComparisonConstraint.Model
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetComparisonConstraint/Model.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetComparisonConstraint/Model.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "SetComparisonConstraintCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetComparisonConstraint/Model.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0d5738fb-77ef-41c2-82ee-a98e5484b11b")]
		public virtual ORMModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ORMModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a SetComparisonConstraint
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ORMModel GetModel(SetComparisonConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SetComparisonConstraintDomainRoleId) as ORMModel;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(SetComparisonConstraint element, ORMModel newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SetComparisonConstraintDomainRoleId, newModel);
		}
		#endregion
		#region SetComparisonConstraint domain role code
		
		/// <summary>
		/// SetComparisonConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid SetComparisonConstraintDomainRoleId = new global::System.Guid(0xc176da76, 0x1a98, 0x4369, 0xb2, 0x5f, 0xbc, 0x1d, 0xed, 0x5b, 0x38, 0x8c);
		
		/// <summary>
		/// DomainRole SetComparisonConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetComparisonConstraint.SetComparisonConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetComparisonConstraint/SetComparisonConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetComparisonConstraint/SetComparisonConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetComparisonConstraint/SetComparisonConstraint.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("c176da76-1a98-4369-b25f-bc1ded5b388c")]
		public virtual SetComparisonConstraint SetComparisonConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SetComparisonConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SetComparisonConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SetComparisonConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SetComparisonConstraintCollection of a ORMModel
		/// <summary>
		/// Gets a list of SetComparisonConstraintCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SetComparisonConstraint> GetSetComparisonConstraintCollection(ORMModel element)
		{
			return new DslModeling::LinkedElementCollection<SetComparisonConstraint>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelHasSetComparisonConstraint links to a ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetComparisonConstraint> GetLinksToSetComparisonConstraintCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetComparisonConstraint>(modelInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetComparisonConstraint.ModelDomainRoleId);
		}
		#endregion
		#region SetComparisonConstraint link accessor
		/// <summary>
		/// Get the ModelHasSetComparisonConstraint link to a SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetComparisonConstraint GetLinkToModel (global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint setComparisonConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetComparisonConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetComparisonConstraint>(setComparisonConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetComparisonConstraint.SetComparisonConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SetComparisonConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasSetComparisonConstraint instance accessors
		
		/// <summary>
		/// Get any ModelHasSetComparisonConstraint links between a given ORMModel and a SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetComparisonConstraint> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetComparisonConstraint> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetComparisonConstraint>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetComparisonConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetComparisonConstraint>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetComparisonConstraint.ModelDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetComparisonConstraint link in links )
			{
				if ( target.Equals(link.SetComparisonConstraint) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasSetComparisonConstraint link between a given ORMModeland a SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetComparisonConstraint GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetComparisonConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetComparisonConstraint>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetComparisonConstraint.ModelDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetComparisonConstraint link in links )
			{
				if ( target.Equals(link.SetComparisonConstraint) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ModelHasDataType
	/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDataType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDataType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDataType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("33611a97-9270-469e-ab75-b53a24699a2d")]
	public partial class ModelHasDataType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x33611a97, 0x9270, 0x469e, 0xab, 0x75, 0xb5, 0x3a, 0x24, 0x69, 0x9a, 0x2d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasDataType link in the same Partition as the given ORMModel
		/// </summary>
		/// <param name="source">ORMModel to use as the source of the relationship.</param>
		/// <param name="target">DataType to use as the target of the relationship.</param>
		public ModelHasDataType(ORMModel source, DataType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasDataType.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasDataType.DataTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasDataType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasDataType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasDataType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasDataType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x41f9a40e, 0xdedd, 0x4bba, 0x9c, 0x79, 0x85, 0x48, 0xac, 0xfb, 0xcb, 0x9a);
		
		/// <summary>
		/// DomainRole Model
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDataType.Model
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDataType/Model.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDataType/Model.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DataTypeCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDataType/Model.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("41f9a40e-dedd-4bba-9c79-8548acfbcb9a")]
		public virtual ORMModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ORMModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a DataType
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ORMModel GetModel(DataType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DataTypeDomainRoleId) as ORMModel;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(DataType element, ORMModel newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DataTypeDomainRoleId, newModel);
		}
		#endregion
		#region DataType domain role code
		
		/// <summary>
		/// DataType domain role Id.
		/// </summary>
		public static readonly global::System.Guid DataTypeDomainRoleId = new global::System.Guid(0xff17fefb, 0x0e20, 0x4326, 0x86, 0x37, 0x4c, 0x39, 0x84, 0xb8, 0xd2, 0x0b);
		
		/// <summary>
		/// DomainRole DataType
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDataType.DataType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDataType/DataType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDataType/DataType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDataType/DataType.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("ff17fefb-0e20-4326-8637-4c3984b8d20b")]
		public virtual DataType DataType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DataType)DslModeling::DomainRoleInfo.GetRolePlayer(this, DataTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DataTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DataTypeCollection of a ORMModel
		/// <summary>
		/// Gets a list of DataTypeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DataType> GetDataTypeCollection(ORMModel element)
		{
			return new DslModeling::LinkedElementCollection<DataType>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelHasDataType links to a ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDataType> GetLinksToDataTypeCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDataType>(modelInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDataType.ModelDomainRoleId);
		}
		#endregion
		#region DataType link accessor
		/// <summary>
		/// Get the ModelHasDataType link to a DataType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDataType GetLinkToModel (global::ORMSolutions.ORMArchitect.Core.ObjectModel.DataType dataTypeInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDataType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDataType>(dataTypeInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDataType.DataTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DataType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasDataType instance accessors
		
		/// <summary>
		/// Get any ModelHasDataType links between a given ORMModel and a DataType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDataType> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DataType target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDataType> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDataType>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDataType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDataType>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDataType.ModelDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDataType link in links )
			{
				if ( target.Equals(link.DataType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasDataType link between a given ORMModeland a DataType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDataType GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DataType target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDataType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDataType>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDataType.ModelDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDataType link in links )
			{
				if ( target.Equals(link.DataType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship GenerationStateHasGenerationSetting
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.GenerationStateHasGenerationSetting
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.GenerationStateHasGenerationSetting.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.GenerationStateHasGenerationSetting.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("475ff8f0-0e0d-4cf1-8110-c132f815e2e6")]
	public partial class GenerationStateHasGenerationSetting : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// GenerationStateHasGenerationSetting domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x475ff8f0, 0x0e0d, 0x4cf1, 0x81, 0x10, 0xc1, 0x32, 0xf8, 0x15, 0xe2, 0xe6);
	
				
		/// <summary>
		/// Constructor
		/// Creates a GenerationStateHasGenerationSetting link in the same Partition as the given GenerationState
		/// </summary>
		/// <param name="source">GenerationState to use as the source of the relationship.</param>
		/// <param name="target">GenerationSetting to use as the target of the relationship.</param>
		public GenerationStateHasGenerationSetting(GenerationState source, GenerationSetting target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(GenerationStateHasGenerationSetting.GenerationStateDomainRoleId, source), new DslModeling::RoleAssignment(GenerationStateHasGenerationSetting.GenerationSettingDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public GenerationStateHasGenerationSetting(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public GenerationStateHasGenerationSetting(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public GenerationStateHasGenerationSetting(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public GenerationStateHasGenerationSetting(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region GenerationState domain role code
		
		/// <summary>
		/// GenerationState domain role Id.
		/// </summary>
		public static readonly global::System.Guid GenerationStateDomainRoleId = new global::System.Guid(0xf9949793, 0x300a, 0x4ce6, 0xb9, 0x69, 0xcf, 0xbe, 0x5a, 0x2a, 0x19, 0x82);
		
		/// <summary>
		/// DomainRole GenerationState
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.GenerationStateHasGenerationSetting.GenerationState
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.GenerationStateHasGenerationSetting/GenerationState.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.GenerationStateHasGenerationSetting/GenerationState.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "GenerationSettingCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.GenerationStateHasGenerationSetting/GenerationState.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f9949793-300a-4ce6-b969-cfbe5a2a1982")]
		public virtual GenerationState GenerationState
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (GenerationState)DslModeling::DomainRoleInfo.GetRolePlayer(this, GenerationStateDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, GenerationStateDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access GenerationState of a GenerationSetting
		/// <summary>
		/// Gets GenerationState.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static GenerationState GetGenerationState(GenerationSetting element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, GenerationSettingDomainRoleId) as GenerationState;
		}
		
		/// <summary>
		/// Sets GenerationState.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetGenerationState(GenerationSetting element, GenerationState newGenerationState)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, GenerationSettingDomainRoleId, newGenerationState);
		}
		#endregion
		#region GenerationSetting domain role code
		
		/// <summary>
		/// GenerationSetting domain role Id.
		/// </summary>
		public static readonly global::System.Guid GenerationSettingDomainRoleId = new global::System.Guid(0xafe2fc08, 0x6b47, 0x40e6, 0x9c, 0xc3, 0xb9, 0x43, 0x90, 0x0a, 0x95, 0xb2);
		
		/// <summary>
		/// DomainRole GenerationSetting
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.GenerationStateHasGenerationSetting.GenerationSetting
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.GenerationStateHasGenerationSetting/GenerationSetting.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.GenerationStateHasGenerationSetting/GenerationSetting.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "GenerationState", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.GenerationStateHasGenerationSetting/GenerationSetting.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("afe2fc08-6b47-40e6-9cc3-b943900a95b2")]
		public virtual GenerationSetting GenerationSetting
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (GenerationSetting)DslModeling::DomainRoleInfo.GetRolePlayer(this, GenerationSettingDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, GenerationSettingDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access GenerationSettingCollection of a GenerationState
		/// <summary>
		/// Gets a list of GenerationSettingCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<GenerationSetting> GetGenerationSettingCollection(GenerationState element)
		{
			return new DslModeling::LinkedElementCollection<GenerationSetting>(element, GenerationStateDomainRoleId);
		}
		#endregion
		#region GenerationState link accessor
		/// <summary>
		/// Get the list of GenerationStateHasGenerationSetting links to a GenerationState.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GenerationStateHasGenerationSetting> GetLinksToGenerationSettingCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.GenerationState generationStateInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GenerationStateHasGenerationSetting>(generationStateInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.GenerationStateHasGenerationSetting.GenerationStateDomainRoleId);
		}
		#endregion
		#region GenerationSetting link accessor
		/// <summary>
		/// Get the GenerationStateHasGenerationSetting link to a GenerationSetting.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.GenerationStateHasGenerationSetting GetLinkToGenerationState (global::ORMSolutions.ORMArchitect.Core.ObjectModel.GenerationSetting generationSettingInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GenerationStateHasGenerationSetting> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GenerationStateHasGenerationSetting>(generationSettingInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.GenerationStateHasGenerationSetting.GenerationSettingDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of GenerationSetting not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region GenerationStateHasGenerationSetting instance accessors
		
		/// <summary>
		/// Get any GenerationStateHasGenerationSetting links between a given GenerationState and a GenerationSetting.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GenerationStateHasGenerationSetting> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.GenerationState source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.GenerationSetting target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GenerationStateHasGenerationSetting> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GenerationStateHasGenerationSetting>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GenerationStateHasGenerationSetting> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GenerationStateHasGenerationSetting>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.GenerationStateHasGenerationSetting.GenerationStateDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.GenerationStateHasGenerationSetting link in links )
			{
				if ( target.Equals(link.GenerationSetting) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one GenerationStateHasGenerationSetting link between a given GenerationStateand a GenerationSetting.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.GenerationStateHasGenerationSetting GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.GenerationState source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.GenerationSetting target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GenerationStateHasGenerationSetting> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GenerationStateHasGenerationSetting>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.GenerationStateHasGenerationSetting.GenerationStateDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.GenerationStateHasGenerationSetting link in links )
			{
				if ( target.Equals(link.GenerationSetting) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship NameGeneratorRefinesNameGenerator
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesNameGenerator
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesNameGenerator.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesNameGenerator.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("6224ba97-f59f-4360-a159-7cd5ddb6493f")]
	public partial class NameGeneratorRefinesNameGenerator : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// NameGeneratorRefinesNameGenerator domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6224ba97, 0xf59f, 0x4360, 0xa1, 0x59, 0x7c, 0xd5, 0xdd, 0xb6, 0x49, 0x3f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a NameGeneratorRefinesNameGenerator link in the same Partition as the given NameGenerator
		/// </summary>
		/// <param name="source">NameGenerator to use as the source of the relationship.</param>
		/// <param name="target">NameGenerator to use as the target of the relationship.</param>
		public NameGeneratorRefinesNameGenerator(NameGenerator source, NameGenerator target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(NameGeneratorRefinesNameGenerator.ParentDomainRoleId, source), new DslModeling::RoleAssignment(NameGeneratorRefinesNameGenerator.RefinementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public NameGeneratorRefinesNameGenerator(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public NameGeneratorRefinesNameGenerator(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public NameGeneratorRefinesNameGenerator(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public NameGeneratorRefinesNameGenerator(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Parent domain role code
		
		/// <summary>
		/// Parent domain role Id.
		/// </summary>
		public static readonly global::System.Guid ParentDomainRoleId = new global::System.Guid(0xa6585a27, 0xd26a, 0x49b0, 0xbb, 0xed, 0xca, 0x13, 0x3c, 0xc1, 0xe2, 0x61);
		
		/// <summary>
		/// DomainRole Parent
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesNameGenerator.Parent
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesNameGenerator/Parent.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesNameGenerator/Parent.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "RefinedByGeneratorCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesNameGenerator/Parent.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a6585a27-d26a-49b0-bbed-ca133cc1e261")]
		public virtual NameGenerator Parent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (NameGenerator)DslModeling::DomainRoleInfo.GetRolePlayer(this, ParentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ParentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RefinesGenerator of a NameGenerator
		/// <summary>
		/// Gets RefinesGenerator.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static NameGenerator GetRefinesGenerator(NameGenerator element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RefinementDomainRoleId) as NameGenerator;
		}
		
		/// <summary>
		/// Sets RefinesGenerator.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRefinesGenerator(NameGenerator element, NameGenerator newParent)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RefinementDomainRoleId, newParent);
		}
		#endregion
		#region Refinement domain role code
		
		/// <summary>
		/// Refinement domain role Id.
		/// </summary>
		public static readonly global::System.Guid RefinementDomainRoleId = new global::System.Guid(0x05748872, 0xb408, 0x46eb, 0xab, 0x0c, 0x2b, 0xd0, 0x6e, 0x81, 0x98, 0x87);
		
		/// <summary>
		/// DomainRole Refinement
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesNameGenerator.Refinement
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesNameGenerator/Refinement.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesNameGenerator/Refinement.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "RefinesGenerator", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesNameGenerator/Refinement.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("05748872-b408-46eb-ab0c-2bd06e819887")]
		public virtual NameGenerator Refinement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (NameGenerator)DslModeling::DomainRoleInfo.GetRolePlayer(this, RefinementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RefinementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RefinedByGeneratorCollection of a NameGenerator
		/// <summary>
		/// Gets a list of RefinedByGeneratorCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<NameGenerator> GetRefinedByGeneratorCollection(NameGenerator element)
		{
			return new DslModeling::LinkedElementCollection<NameGenerator>(element, ParentDomainRoleId);
		}
		#endregion
		#region Parent link accessor
		/// <summary>
		/// Get the list of NameGeneratorRefinesNameGenerator links to a NameGenerator.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesNameGenerator> GetLinksToRefinedByGeneratorCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameGenerator parentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesNameGenerator>(parentInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesNameGenerator.ParentDomainRoleId);
		}
		#endregion
		#region Refinement link accessor
		/// <summary>
		/// Get the NameGeneratorRefinesNameGenerator link to a NameGenerator.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesNameGenerator GetLinkToRefinesGenerator (global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameGenerator refinementInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesNameGenerator> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesNameGenerator>(refinementInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesNameGenerator.RefinementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Refinement not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region NameGeneratorRefinesNameGenerator instance accessors
		
		/// <summary>
		/// Get any NameGeneratorRefinesNameGenerator links between a given NameGenerator and a NameGenerator.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesNameGenerator> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameGenerator source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameGenerator target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesNameGenerator> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesNameGenerator>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesNameGenerator> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesNameGenerator>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesNameGenerator.ParentDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesNameGenerator link in links )
			{
				if ( target.Equals(link.Refinement) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one NameGeneratorRefinesNameGenerator link between a given NameGeneratorand a NameGenerator.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesNameGenerator GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameGenerator source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameGenerator target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesNameGenerator> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesNameGenerator>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesNameGenerator.ParentDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesNameGenerator link in links )
			{
				if ( target.Equals(link.Refinement) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ElementHasAlias
	/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.ElementHasAlias
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementHasAlias.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementHasAlias.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("94f76133-eacc-40d1-b61e-1ebd32c0f81f")]
	public abstract partial class ElementHasAlias : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ElementHasAlias domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x94f76133, 0xeacc, 0x40d1, 0xb6, 0x1e, 0x1e, 0xbd, 0x32, 0xc0, 0xf8, 0x1f);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">The Partition instance containing this ElementLink</param>
		/// <param name="roleAssignments">A set of role assignments for roleplayer initialization</param>
		/// <param name="propertyAssignments">A set of attribute assignments for attribute initialization</param>
		protected ElementHasAlias(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Element domain role code
		
		/// <summary>
		/// Element domain role Id.
		/// </summary>
		public static readonly global::System.Guid ElementDomainRoleId = new global::System.Guid(0x4ccf4deb, 0xab2f, 0x402b, 0xaa, 0xf5, 0x55, 0xd5, 0x1a, 0xc0, 0xf6, 0xdb);
		
		/// <summary>
		/// DomainRole Element
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementHasAlias.Element
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementHasAlias/Element.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementHasAlias/Element.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AliasCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ElementHasAlias/Element.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("4ccf4deb-ab2f-402b-aaf5-55d51ac0f6db")]
		public abstract global::Microsoft.VisualStudio.Modeling.ModelElement Element
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access Element of a NameAlias
		/// <summary>
		/// Gets Element.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.VisualStudio.Modeling.ModelElement GetElement(NameAlias element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AliasDomainRoleId) as global::Microsoft.VisualStudio.Modeling.ModelElement;
		}
		
		/// <summary>
		/// Sets Element.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetElement(NameAlias element, global::Microsoft.VisualStudio.Modeling.ModelElement newElement)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AliasDomainRoleId, newElement);
		}
		#endregion
		#region Alias domain role code
		
		/// <summary>
		/// Alias domain role Id.
		/// </summary>
		public static readonly global::System.Guid AliasDomainRoleId = new global::System.Guid(0xdae4d333, 0xa8b3, 0x448f, 0x94, 0xc2, 0x56, 0x28, 0x6f, 0xb6, 0x0a, 0x1f);
		
		/// <summary>
		/// DomainRole Alias
		/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.ElementHasAlias.Alias
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementHasAlias/Alias.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementHasAlias/Alias.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Element", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ElementHasAlias/Alias.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("dae4d333-a8b3-448f-94c2-56286fb60a1f")]
		public abstract NameAlias Alias
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access AliasCollection of a ModelElement
		/// <summary>
		/// Gets a list of AliasCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<NameAlias> GetAliasCollection(global::Microsoft.VisualStudio.Modeling.ModelElement element)
		{
			return new DslModeling::ReadOnlyLinkedElementCollection<NameAlias>(element, ElementDomainRoleId);
		}
		#endregion
		#region Element link accessor
		/// <summary>
		/// Get the list of ElementHasAlias links to a ModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementHasAlias> GetLinksToAliasCollection ( global::Microsoft.VisualStudio.Modeling.ModelElement elementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementHasAlias>(elementInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementHasAlias.ElementDomainRoleId);
		}
		#endregion
		#region Alias link accessor
		/// <summary>
		/// Get the ElementHasAlias link to a NameAlias.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementHasAlias GetLinkToElement (global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameAlias aliasInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementHasAlias> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementHasAlias>(aliasInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementHasAlias.AliasDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Alias not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ElementHasAlias instance accessors
		
		/// <summary>
		/// Get any ElementHasAlias links between a given ModelElement and a NameAlias.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementHasAlias> GetLinks( global::Microsoft.VisualStudio.Modeling.ModelElement source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameAlias target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementHasAlias> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementHasAlias>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementHasAlias> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementHasAlias>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementHasAlias.ElementDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementHasAlias link in links )
			{
				if ( target.Equals(link.Alias) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ElementHasAlias link between a given ModelElementand a NameAlias.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementHasAlias GetLink( global::Microsoft.VisualStudio.Modeling.ModelElement source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameAlias target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementHasAlias> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementHasAlias>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementHasAlias.ElementDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementHasAlias link in links )
			{
				if ( target.Equals(link.Alias) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship NameAliasRefinesInstance
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.NameAliasRefinesInstance
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameAliasRefinesInstance.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameAliasRefinesInstance.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("93b52186-b6a2-4363-a0d6-65d963786834")]
	public sealed partial class NameAliasRefinesInstance : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// NameAliasRefinesInstance domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x93b52186, 0xb6a2, 0x4363, 0xa0, 0xd6, 0x65, 0xd9, 0x63, 0x78, 0x68, 0x34);
	
				
		/// <summary>
		/// Constructor
		/// Creates a NameAliasRefinesInstance link in the same Partition as the given NameAlias
		/// </summary>
		/// <param name="source">NameAlias to use as the source of the relationship.</param>
		/// <param name="target">ModelElement to use as the target of the relationship.</param>
		public NameAliasRefinesInstance(NameAlias source, global::Microsoft.VisualStudio.Modeling.ModelElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(NameAliasRefinesInstance.AliasDomainRoleId, source), new DslModeling::RoleAssignment(NameAliasRefinesInstance.RefinedInstanceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public NameAliasRefinesInstance(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public NameAliasRefinesInstance(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public NameAliasRefinesInstance(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public NameAliasRefinesInstance(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Alias domain role code
		
		/// <summary>
		/// Alias domain role Id.
		/// </summary>
		public static readonly global::System.Guid AliasDomainRoleId = new global::System.Guid(0x8c78b44c, 0xc3eb, 0x4dd0, 0x90, 0x8c, 0x36, 0x81, 0x46, 0x7a, 0x35, 0xa3);
		
		/// <summary>
		/// DomainRole Alias
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.NameAliasRefinesInstance.Alias
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameAliasRefinesInstance/Alias.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameAliasRefinesInstance/Alias.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "RefinedInstance", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.NameAliasRefinesInstance/Alias.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("8c78b44c-c3eb-4dd0-908c-3681467a35a3")]
		public NameAlias Alias
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (NameAlias)DslModeling::DomainRoleInfo.GetRolePlayer(this, AliasDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AliasDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RefiningAliasCollection of a ModelElement
		/// <summary>
		/// Gets a list of RefiningAliasCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<NameAlias> GetRefiningAliasCollection(global::Microsoft.VisualStudio.Modeling.ModelElement element)
		{
			return new DslModeling::LinkedElementCollection<NameAlias>(element, RefinedInstanceDomainRoleId);
		}
		#endregion
		#region RefinedInstance domain role code
		
		/// <summary>
		/// RefinedInstance domain role Id.
		/// </summary>
		public static readonly global::System.Guid RefinedInstanceDomainRoleId = new global::System.Guid(0x319fb87b, 0xa3dd, 0x436e, 0xa2, 0x21, 0xfd, 0x2f, 0x70, 0x6e, 0xdf, 0x38);
		
		/// <summary>
		/// DomainRole RefinedInstance
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.NameAliasRefinesInstance.RefinedInstance
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameAliasRefinesInstance/RefinedInstance.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameAliasRefinesInstance/RefinedInstance.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "RefiningAliasCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.NameAliasRefinesInstance/RefinedInstance.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("319fb87b-a3dd-436e-a221-fd2f706edf38")]
		public global::Microsoft.VisualStudio.Modeling.ModelElement RefinedInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::Microsoft.VisualStudio.Modeling.ModelElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, RefinedInstanceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RefinedInstanceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RefinedInstance of a NameAlias
		/// <summary>
		/// Gets RefinedInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.VisualStudio.Modeling.ModelElement GetRefinedInstance(NameAlias element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AliasDomainRoleId) as global::Microsoft.VisualStudio.Modeling.ModelElement;
		}
		
		/// <summary>
		/// Sets RefinedInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRefinedInstance(NameAlias element, global::Microsoft.VisualStudio.Modeling.ModelElement newRefinedInstance)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AliasDomainRoleId, newRefinedInstance);
		}
		#endregion
		#region Alias link accessor
		/// <summary>
		/// Get the NameAliasRefinesInstance link to a NameAlias.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameAliasRefinesInstance GetLinkToRefinedInstance (global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameAlias aliasInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameAliasRefinesInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameAliasRefinesInstance>(aliasInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameAliasRefinesInstance.AliasDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Alias not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region RefinedInstance link accessor
		/// <summary>
		/// Get the list of NameAliasRefinesInstance links to a ModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameAliasRefinesInstance> GetLinksToRefiningAliasCollection ( global::Microsoft.VisualStudio.Modeling.ModelElement refinedInstanceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameAliasRefinesInstance>(refinedInstanceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameAliasRefinesInstance.RefinedInstanceDomainRoleId);
		}
		#endregion
		#region NameAliasRefinesInstance instance accessors
		
		/// <summary>
		/// Get any NameAliasRefinesInstance links between a given NameAlias and a ModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameAliasRefinesInstance> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameAlias source, global::Microsoft.VisualStudio.Modeling.ModelElement target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameAliasRefinesInstance> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameAliasRefinesInstance>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameAliasRefinesInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameAliasRefinesInstance>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameAliasRefinesInstance.AliasDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameAliasRefinesInstance link in links )
			{
				if ( target.Equals(link.RefinedInstance) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one NameAliasRefinesInstance link between a given NameAliasand a ModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameAliasRefinesInstance GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameAlias source, global::Microsoft.VisualStudio.Modeling.ModelElement target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameAliasRefinesInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameAliasRefinesInstance>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameAliasRefinesInstance.AliasDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameAliasRefinesInstance link in links )
			{
				if ( target.Equals(link.RefinedInstance) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship NameGeneratorRefinesInstance
	/// This generator applies to a specific instance. This will be a refinement of a
	/// global name generator of the same type.
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesInstance.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesInstance.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("17e29f53-0f1f-4e01-933a-f42a500602c6")]
	public abstract partial class NameGeneratorRefinesInstance : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// NameGeneratorRefinesInstance domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x17e29f53, 0x0f1f, 0x4e01, 0x93, 0x3a, 0xf4, 0x2a, 0x50, 0x06, 0x02, 0xc6);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">The Partition instance containing this ElementLink</param>
		/// <param name="roleAssignments">A set of role assignments for roleplayer initialization</param>
		/// <param name="propertyAssignments">A set of attribute assignments for attribute initialization</param>
		protected NameGeneratorRefinesInstance(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region NameGenerator domain role code
		
		/// <summary>
		/// NameGenerator domain role Id.
		/// </summary>
		public static readonly global::System.Guid NameGeneratorDomainRoleId = new global::System.Guid(0x86b7f502, 0x8c72, 0x4beb, 0x8d, 0x7e, 0x1d, 0x4d, 0xd6, 0xcc, 0x96, 0x40);
		
		/// <summary>
		/// DomainRole NameGenerator
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesInstance.NameGenerator
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesInstance/NameGenerator.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesInstance/NameGenerator.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "RefinedInstance", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesInstance/NameGenerator.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("86b7f502-8c72-4beb-8d7e-1d4dd6cc9640")]
		public abstract NameGenerator NameGenerator
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access RefiningNameGenerators of a ModelElement
		/// <summary>
		/// Gets a list of RefiningNameGenerators.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<NameGenerator> GetRefiningNameGenerators(global::Microsoft.VisualStudio.Modeling.ModelElement element)
		{
			return new DslModeling::ReadOnlyLinkedElementCollection<NameGenerator>(element, InstanceDomainRoleId);
		}
		#endregion
		#region Instance domain role code
		
		/// <summary>
		/// Instance domain role Id.
		/// </summary>
		public static readonly global::System.Guid InstanceDomainRoleId = new global::System.Guid(0xb6bfbf71, 0x6bc7, 0x488d, 0xba, 0xa8, 0xbd, 0x7c, 0xdc, 0x3c, 0xa1, 0x2e);
		
		/// <summary>
		/// DomainRole Instance
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesInstance.Instance
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesInstance/Instance.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesInstance/Instance.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "RefiningNameGenerators", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesInstance/Instance.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b6bfbf71-6bc7-488d-baa8-bd7cdc3ca12e")]
		public abstract global::Microsoft.VisualStudio.Modeling.ModelElement Instance
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access RefinedInstance of a NameGenerator
		/// <summary>
		/// Gets RefinedInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.VisualStudio.Modeling.ModelElement GetRefinedInstance(NameGenerator element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, NameGeneratorDomainRoleId) as global::Microsoft.VisualStudio.Modeling.ModelElement;
		}
		
		/// <summary>
		/// Sets RefinedInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRefinedInstance(NameGenerator element, global::Microsoft.VisualStudio.Modeling.ModelElement newInstance)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, NameGeneratorDomainRoleId, newInstance);
		}
		#endregion
		#region NameGenerator link accessor
		/// <summary>
		/// Get the NameGeneratorRefinesInstance link to a NameGenerator.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesInstance GetLinkToRefinedInstance (global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameGenerator nameGeneratorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesInstance>(nameGeneratorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesInstance.NameGeneratorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of NameGenerator not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Instance link accessor
		/// <summary>
		/// Get the list of NameGeneratorRefinesInstance links to a ModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesInstance> GetLinksToRefiningNameGenerators ( global::Microsoft.VisualStudio.Modeling.ModelElement instanceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesInstance>(instanceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesInstance.InstanceDomainRoleId);
		}
		#endregion
		#region NameGeneratorRefinesInstance instance accessors
		
		/// <summary>
		/// Get any NameGeneratorRefinesInstance links between a given NameGenerator and a ModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesInstance> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameGenerator source, global::Microsoft.VisualStudio.Modeling.ModelElement target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesInstance> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesInstance>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesInstance>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesInstance.NameGeneratorDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesInstance link in links )
			{
				if ( target.Equals(link.Instance) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one NameGeneratorRefinesInstance link between a given NameGeneratorand a ModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesInstance GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameGenerator source, global::Microsoft.VisualStudio.Modeling.ModelElement target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesInstance>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesInstance.NameGeneratorDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesInstance link in links )
			{
				if ( target.Equals(link.Instance) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship RecognizedPhraseHasAbbreviation
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasAbbreviation
	/// </summary>
	[ORMSolutions.ORMArchitect.Core.ObjectModel.NameAliasOwnerCreationInfoAttribute(true, "6D4F2B86-2C27-4F82-84CE-8AA23DCC0EF8", "GetExistingRecognizedPhrase")]
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasAbbreviation.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasAbbreviation.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("83d9d4fb-5f40-42f2-a014-8a5e5052c24f")]
	public partial class RecognizedPhraseHasAbbreviation : ElementHasAlias
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RecognizedPhraseHasAbbreviation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x83d9d4fb, 0x5f40, 0x42f2, 0xa0, 0x14, 0x8a, 0x5e, 0x50, 0x52, 0xc2, 0x4f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RecognizedPhraseHasAbbreviation link in the same Partition as the given RecognizedPhrase
		/// </summary>
		/// <param name="source">RecognizedPhrase to use as the source of the relationship.</param>
		/// <param name="target">NameAlias to use as the target of the relationship.</param>
		public RecognizedPhraseHasAbbreviation(RecognizedPhrase source, NameAlias target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RecognizedPhraseHasAbbreviation.RecognizedPhraseDomainRoleId, source), new DslModeling::RoleAssignment(RecognizedPhraseHasAbbreviation.AbbreviationDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RecognizedPhraseHasAbbreviation(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RecognizedPhraseHasAbbreviation(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RecognizedPhraseHasAbbreviation(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RecognizedPhraseHasAbbreviation(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region RecognizedPhrase domain role code
		
		/// <summary>
		/// RecognizedPhrase domain role Id.
		/// </summary>
		public static readonly global::System.Guid RecognizedPhraseDomainRoleId = new global::System.Guid(0x64397c80, 0x2261, 0x4c8b, 0x9c, 0xf3, 0xb0, 0xcf, 0x96, 0x3e, 0xbc, 0xcf);
		
		/// <summary>
		/// DomainRole RecognizedPhrase
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasAbbreviation.RecognizedPhrase
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasAbbreviation/RecognizedPhrase.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasAbbreviation/RecognizedPhrase.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AbbreviationCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasAbbreviation/RecognizedPhrase.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("64397c80-2261-4c8b-9cf3-b0cf963ebccf")]
		public virtual RecognizedPhrase RecognizedPhrase
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RecognizedPhrase)DslModeling::DomainRoleInfo.GetRolePlayer(this, RecognizedPhraseDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RecognizedPhraseDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Element of a NameAlias
		/// <summary>
		/// Gets Element.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new RecognizedPhrase GetElement(NameAlias element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AbbreviationDomainRoleId) as RecognizedPhrase;
		}
		
		/// <summary>
		/// Sets Element.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetElement(NameAlias element, RecognizedPhrase newRecognizedPhrase)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AbbreviationDomainRoleId, newRecognizedPhrase);
		}
		#endregion
		#region Element domain role override
		
		/// <summary>
		/// Gets the element playing RecognizedPhrase domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementHasAlias.Element
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.RecognizedPhrase;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.RecognizedPhrase = (RecognizedPhrase)value;
			}
		}
		
		#endregion
		#region Abbreviation domain role code
		
		/// <summary>
		/// Abbreviation domain role Id.
		/// </summary>
		public static readonly global::System.Guid AbbreviationDomainRoleId = new global::System.Guid(0x5fef356b, 0xe9ac, 0x4522, 0x81, 0x1f, 0xe0, 0x62, 0xd8, 0x3f, 0xf9, 0xd3);
		
		/// <summary>
		/// DomainRole Abbreviation
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasAbbreviation.Abbreviation
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasAbbreviation/Abbreviation.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasAbbreviation/Abbreviation.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Element", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasAbbreviation/Abbreviation.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("5fef356b-e9ac-4522-811f-e062d83ff9d3")]
		public virtual NameAlias Abbreviation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (NameAlias)DslModeling::DomainRoleInfo.GetRolePlayer(this, AbbreviationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AbbreviationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AbbreviationCollection of a RecognizedPhrase
		/// <summary>
		/// Gets a list of AbbreviationCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<NameAlias> GetAbbreviationCollection(RecognizedPhrase element)
		{
			return new DslModeling::LinkedElementCollection<NameAlias>(element, RecognizedPhraseDomainRoleId);
		}
		#endregion
		#region Alias domain role override
		
		/// <summary>
		/// Gets the element playing Abbreviation domain role.
		/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.ElementHasAlias.Alias
		/// </summary>
		public override NameAlias Alias
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.Abbreviation;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.Abbreviation = value;
			}
		}
		
		#endregion
		#region RecognizedPhrase link accessor
		/// <summary>
		/// Get the list of RecognizedPhraseHasAbbreviation links to a RecognizedPhrase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasAbbreviation> GetLinksToAbbreviationCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhrase recognizedPhraseInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasAbbreviation>(recognizedPhraseInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasAbbreviation.RecognizedPhraseDomainRoleId);
		}
		#endregion
		#region Abbreviation link accessor
		/// <summary>
		/// Get the RecognizedPhraseHasAbbreviation link to a NameAlias.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasAbbreviation GetLinkToElement (global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameAlias abbreviationInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasAbbreviation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasAbbreviation>(abbreviationInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasAbbreviation.AbbreviationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Abbreviation not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region RecognizedPhraseHasAbbreviation instance accessors
		
		/// <summary>
		/// Get any RecognizedPhraseHasAbbreviation links between a given RecognizedPhrase and a NameAlias.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasAbbreviation> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhrase source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameAlias target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasAbbreviation> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasAbbreviation>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasAbbreviation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasAbbreviation>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasAbbreviation.RecognizedPhraseDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasAbbreviation link in links )
			{
				if ( target.Equals(link.Abbreviation) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RecognizedPhraseHasAbbreviation link between a given RecognizedPhraseand a NameAlias.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasAbbreviation GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhrase source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameAlias target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasAbbreviation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasAbbreviation>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasAbbreviation.RecognizedPhraseDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasAbbreviation link in links )
			{
				if ( target.Equals(link.Abbreviation) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ObjectTypeHasAbbreviation
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasAbbreviation
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasAbbreviation.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasAbbreviation.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("6a85513c-747f-4a8c-b45a-b5cff88314e5")]
	public partial class ObjectTypeHasAbbreviation : ElementHasAlias
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ObjectTypeHasAbbreviation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6a85513c, 0x747f, 0x4a8c, 0xb4, 0x5a, 0xb5, 0xcf, 0xf8, 0x83, 0x14, 0xe5);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ObjectTypeHasAbbreviation link in the same Partition as the given ObjectType
		/// </summary>
		/// <param name="source">ObjectType to use as the source of the relationship.</param>
		/// <param name="target">NameAlias to use as the target of the relationship.</param>
		public ObjectTypeHasAbbreviation(ObjectType source, NameAlias target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ObjectTypeHasAbbreviation.ObjectTypeDomainRoleId, source), new DslModeling::RoleAssignment(ObjectTypeHasAbbreviation.AbbreviationDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectTypeHasAbbreviation(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectTypeHasAbbreviation(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectTypeHasAbbreviation(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectTypeHasAbbreviation(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ObjectType domain role code
		
		/// <summary>
		/// ObjectType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ObjectTypeDomainRoleId = new global::System.Guid(0x2c863159, 0x2675, 0x4f32, 0xa3, 0x0d, 0x83, 0xc5, 0x73, 0xa2, 0x07, 0xc7);
		
		/// <summary>
		/// DomainRole ObjectType
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasAbbreviation.ObjectType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasAbbreviation/ObjectType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasAbbreviation/ObjectType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AbbreviationCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasAbbreviation/ObjectType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("2c863159-2675-4f32-a30d-83c573a207c7")]
		public virtual ObjectType ObjectType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjectTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjectTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Element of a NameAlias
		/// <summary>
		/// Gets Element.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new ObjectType GetElement(NameAlias element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AbbreviationDomainRoleId) as ObjectType;
		}
		
		/// <summary>
		/// Sets Element.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetElement(NameAlias element, ObjectType newObjectType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AbbreviationDomainRoleId, newObjectType);
		}
		#endregion
		#region Element domain role override
		
		/// <summary>
		/// Gets the element playing ObjectType domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementHasAlias.Element
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ObjectType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ObjectType = (ObjectType)value;
			}
		}
		
		#endregion
		#region Abbreviation domain role code
		
		/// <summary>
		/// Abbreviation domain role Id.
		/// </summary>
		public static readonly global::System.Guid AbbreviationDomainRoleId = new global::System.Guid(0x832e3923, 0xbbb7, 0x4a29, 0xa6, 0x0c, 0x66, 0xb0, 0x3e, 0x0a, 0x92, 0xda);
		
		/// <summary>
		/// DomainRole Abbreviation
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasAbbreviation.Abbreviation
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasAbbreviation/Abbreviation.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasAbbreviation/Abbreviation.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Element", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasAbbreviation/Abbreviation.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("832e3923-bbb7-4a29-a60c-66b03e0a92da")]
		public virtual NameAlias Abbreviation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (NameAlias)DslModeling::DomainRoleInfo.GetRolePlayer(this, AbbreviationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AbbreviationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AbbreviationCollection of a ObjectType
		/// <summary>
		/// Gets a list of AbbreviationCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<NameAlias> GetAbbreviationCollection(ObjectType element)
		{
			return new DslModeling::LinkedElementCollection<NameAlias>(element, ObjectTypeDomainRoleId);
		}
		#endregion
		#region Alias domain role override
		
		/// <summary>
		/// Gets the element playing Abbreviation domain role.
		/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.ElementHasAlias.Alias
		/// </summary>
		public override NameAlias Alias
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.Abbreviation;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.Abbreviation = value;
			}
		}
		
		#endregion
		#region ObjectType link accessor
		/// <summary>
		/// Get the list of ObjectTypeHasAbbreviation links to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasAbbreviation> GetLinksToAbbreviationCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType objectTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasAbbreviation>(objectTypeInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasAbbreviation.ObjectTypeDomainRoleId);
		}
		#endregion
		#region Abbreviation link accessor
		/// <summary>
		/// Get the ObjectTypeHasAbbreviation link to a NameAlias.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasAbbreviation GetLinkToElement (global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameAlias abbreviationInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasAbbreviation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasAbbreviation>(abbreviationInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasAbbreviation.AbbreviationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Abbreviation not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ObjectTypeHasAbbreviation instance accessors
		
		/// <summary>
		/// Get any ObjectTypeHasAbbreviation links between a given ObjectType and a NameAlias.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasAbbreviation> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameAlias target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasAbbreviation> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasAbbreviation>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasAbbreviation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasAbbreviation>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasAbbreviation.ObjectTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasAbbreviation link in links )
			{
				if ( target.Equals(link.Abbreviation) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ObjectTypeHasAbbreviation link between a given ObjectTypeand a NameAlias.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasAbbreviation GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameAlias target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasAbbreviation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasAbbreviation>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasAbbreviation.ObjectTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasAbbreviation link in links )
			{
				if ( target.Equals(link.Abbreviation) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ModelContainsRecognizedPhrase
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelContainsRecognizedPhrase
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelContainsRecognizedPhrase.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelContainsRecognizedPhrase.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("27ac76d9-eeda-4836-8a93-59a7197122d9")]
	public partial class ModelContainsRecognizedPhrase : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelContainsRecognizedPhrase domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x27ac76d9, 0xeeda, 0x4836, 0x8a, 0x93, 0x59, 0xa7, 0x19, 0x71, 0x22, 0xd9);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelContainsRecognizedPhrase link in the same Partition as the given ORMModel
		/// </summary>
		/// <param name="source">ORMModel to use as the source of the relationship.</param>
		/// <param name="target">RecognizedPhrase to use as the target of the relationship.</param>
		public ModelContainsRecognizedPhrase(ORMModel source, RecognizedPhrase target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelContainsRecognizedPhrase.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelContainsRecognizedPhrase.RecognizedPhraseDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelContainsRecognizedPhrase(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelContainsRecognizedPhrase(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelContainsRecognizedPhrase(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelContainsRecognizedPhrase(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x965ff527, 0xa2d6, 0x4468, 0x94, 0xde, 0x46, 0x44, 0x89, 0xe3, 0x32, 0xe2);
		
		/// <summary>
		/// DomainRole Model
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelContainsRecognizedPhrase.Model
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelContainsRecognizedPhrase/Model.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelContainsRecognizedPhrase/Model.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "RecognizedPhraseCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ModelContainsRecognizedPhrase/Model.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("965ff527-a2d6-4468-94de-464489e332e2")]
		public virtual ORMModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ORMModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a RecognizedPhrase
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ORMModel GetModel(RecognizedPhrase element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RecognizedPhraseDomainRoleId) as ORMModel;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(RecognizedPhrase element, ORMModel newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RecognizedPhraseDomainRoleId, newModel);
		}
		#endregion
		#region RecognizedPhrase domain role code
		
		/// <summary>
		/// RecognizedPhrase domain role Id.
		/// </summary>
		public static readonly global::System.Guid RecognizedPhraseDomainRoleId = new global::System.Guid(0x6d4f2b86, 0x2c27, 0x4f82, 0x84, 0xce, 0x8a, 0xa2, 0x3d, 0xcc, 0x0e, 0xf8);
		
		/// <summary>
		/// DomainRole RecognizedPhrase
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelContainsRecognizedPhrase.RecognizedPhrase
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelContainsRecognizedPhrase/RecognizedPhrase.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelContainsRecognizedPhrase/RecognizedPhrase.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ModelContainsRecognizedPhrase/RecognizedPhrase.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("6d4f2b86-2c27-4f82-84ce-8aa23dcc0ef8")]
		public virtual RecognizedPhrase RecognizedPhrase
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RecognizedPhrase)DslModeling::DomainRoleInfo.GetRolePlayer(this, RecognizedPhraseDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RecognizedPhraseDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RecognizedPhraseCollection of a ORMModel
		/// <summary>
		/// Gets a list of RecognizedPhraseCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<RecognizedPhrase> GetRecognizedPhraseCollection(ORMModel element)
		{
			return new DslModeling::LinkedElementCollection<RecognizedPhrase>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelContainsRecognizedPhrase links to a ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelContainsRecognizedPhrase> GetLinksToRecognizedPhraseCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelContainsRecognizedPhrase>(modelInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelContainsRecognizedPhrase.ModelDomainRoleId);
		}
		#endregion
		#region RecognizedPhrase link accessor
		/// <summary>
		/// Get the ModelContainsRecognizedPhrase link to a RecognizedPhrase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelContainsRecognizedPhrase GetLinkToModel (global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhrase recognizedPhraseInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelContainsRecognizedPhrase> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelContainsRecognizedPhrase>(recognizedPhraseInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelContainsRecognizedPhrase.RecognizedPhraseDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of RecognizedPhrase not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelContainsRecognizedPhrase instance accessors
		
		/// <summary>
		/// Get any ModelContainsRecognizedPhrase links between a given ORMModel and a RecognizedPhrase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelContainsRecognizedPhrase> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhrase target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelContainsRecognizedPhrase> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelContainsRecognizedPhrase>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelContainsRecognizedPhrase> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelContainsRecognizedPhrase>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelContainsRecognizedPhrase.ModelDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelContainsRecognizedPhrase link in links )
			{
				if ( target.Equals(link.RecognizedPhrase) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelContainsRecognizedPhrase link between a given ORMModeland a RecognizedPhrase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelContainsRecognizedPhrase GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhrase target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelContainsRecognizedPhrase> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelContainsRecognizedPhrase>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelContainsRecognizedPhrase.ModelDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelContainsRecognizedPhrase link in links )
			{
				if ( target.Equals(link.RecognizedPhrase) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship RecognizedPhraseHasDuplicateNameError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasDuplicateNameError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasDuplicateNameError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasDuplicateNameError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("6d1abe6f-a38b-4981-8124-4dfb48f1aa5a")]
	public partial class RecognizedPhraseHasDuplicateNameError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RecognizedPhraseHasDuplicateNameError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6d1abe6f, 0xa38b, 0x4981, 0x81, 0x24, 0x4d, 0xfb, 0x48, 0xf1, 0xaa, 0x5a);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RecognizedPhraseHasDuplicateNameError link in the same Partition as the given RecognizedPhrase
		/// </summary>
		/// <param name="source">RecognizedPhrase to use as the source of the relationship.</param>
		/// <param name="target">RecognizedPhraseDuplicateNameError to use as the target of the relationship.</param>
		public RecognizedPhraseHasDuplicateNameError(RecognizedPhrase source, RecognizedPhraseDuplicateNameError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RecognizedPhraseHasDuplicateNameError.RecognizedPhraseDomainRoleId, source), new DslModeling::RoleAssignment(RecognizedPhraseHasDuplicateNameError.DuplicateNameErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RecognizedPhraseHasDuplicateNameError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RecognizedPhraseHasDuplicateNameError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RecognizedPhraseHasDuplicateNameError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RecognizedPhraseHasDuplicateNameError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region RecognizedPhrase domain role code
		
		/// <summary>
		/// RecognizedPhrase domain role Id.
		/// </summary>
		public static readonly global::System.Guid RecognizedPhraseDomainRoleId = new global::System.Guid(0x41df5814, 0xe8e1, 0x4b5e, 0xa6, 0xd2, 0xc3, 0xc9, 0xce, 0x84, 0x59, 0xa9);
		
		/// <summary>
		/// DomainRole RecognizedPhrase
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasDuplicateNameError.RecognizedPhrase
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasDuplicateNameError/RecognizedPhrase.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasDuplicateNameError/RecognizedPhrase.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DuplicateNameError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasDuplicateNameError/RecognizedPhrase.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("41df5814-e8e1-4b5e-a6d2-c3c9ce8459a9")]
		public virtual RecognizedPhrase RecognizedPhrase
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RecognizedPhrase)DslModeling::DomainRoleInfo.GetRolePlayer(this, RecognizedPhraseDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RecognizedPhraseDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RecognizedPhraseCollection of a RecognizedPhraseDuplicateNameError
		/// <summary>
		/// Gets a list of RecognizedPhraseCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<RecognizedPhrase> GetRecognizedPhraseCollection(RecognizedPhraseDuplicateNameError element)
		{
			return new DslModeling::LinkedElementCollection<RecognizedPhrase>(element, DuplicateNameErrorDomainRoleId);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing RecognizedPhrase domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.RecognizedPhrase;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.RecognizedPhrase = (RecognizedPhrase)value;
			}
		}
		
		#endregion
		#region DuplicateNameError domain role code
		
		/// <summary>
		/// DuplicateNameError domain role Id.
		/// </summary>
		public static readonly global::System.Guid DuplicateNameErrorDomainRoleId = new global::System.Guid(0xdc8defe0, 0x274b, 0x42f5, 0x83, 0x4e, 0x42, 0xbf, 0xb1, 0x83, 0xfa, 0x9e);
		
		/// <summary>
		/// DomainRole DuplicateNameError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasDuplicateNameError.DuplicateNameError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasDuplicateNameError/DuplicateNameError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasDuplicateNameError/DuplicateNameError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "RecognizedPhraseCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasDuplicateNameError/DuplicateNameError.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("dc8defe0-274b-42f5-834e-42bfb183fa9e")]
		public virtual RecognizedPhraseDuplicateNameError DuplicateNameError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RecognizedPhraseDuplicateNameError)DslModeling::DomainRoleInfo.GetRolePlayer(this, DuplicateNameErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DuplicateNameErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DuplicateNameError of a RecognizedPhrase
		/// <summary>
		/// Gets DuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static RecognizedPhraseDuplicateNameError GetDuplicateNameError(RecognizedPhrase element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RecognizedPhraseDomainRoleId) as RecognizedPhraseDuplicateNameError;
		}
		
		/// <summary>
		/// Sets DuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDuplicateNameError(RecognizedPhrase element, RecognizedPhraseDuplicateNameError newDuplicateNameError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RecognizedPhraseDomainRoleId, newDuplicateNameError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing DuplicateNameError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.DuplicateNameError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.DuplicateNameError = (RecognizedPhraseDuplicateNameError)value;
			}
		}
		
		#endregion
		#region RecognizedPhrase link accessor
		/// <summary>
		/// Get the RecognizedPhraseHasDuplicateNameError link to a RecognizedPhrase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasDuplicateNameError GetLinkToDuplicateNameError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhrase recognizedPhraseInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasDuplicateNameError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasDuplicateNameError>(recognizedPhraseInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasDuplicateNameError.RecognizedPhraseDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of RecognizedPhrase not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DuplicateNameError link accessor
		/// <summary>
		/// Get the list of RecognizedPhraseHasDuplicateNameError links to a RecognizedPhraseDuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasDuplicateNameError> GetLinksToRecognizedPhraseCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseDuplicateNameError duplicateNameErrorInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasDuplicateNameError>(duplicateNameErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasDuplicateNameError.DuplicateNameErrorDomainRoleId);
		}
		#endregion
		#region RecognizedPhraseHasDuplicateNameError instance accessors
		
		/// <summary>
		/// Get any RecognizedPhraseHasDuplicateNameError links between a given RecognizedPhrase and a RecognizedPhraseDuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasDuplicateNameError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhrase source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseDuplicateNameError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasDuplicateNameError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasDuplicateNameError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasDuplicateNameError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasDuplicateNameError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasDuplicateNameError.RecognizedPhraseDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasDuplicateNameError link in links )
			{
				if ( target.Equals(link.DuplicateNameError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RecognizedPhraseHasDuplicateNameError link between a given RecognizedPhraseand a RecognizedPhraseDuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasDuplicateNameError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhrase source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseDuplicateNameError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasDuplicateNameError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasDuplicateNameError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasDuplicateNameError.RecognizedPhraseDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasDuplicateNameError link in links )
			{
				if ( target.Equals(link.DuplicateNameError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship FunctionHasDuplicateNameError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionHasDuplicateNameError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionHasDuplicateNameError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionHasDuplicateNameError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("0ec6fed9-6561-43c7-b704-9bc56d7474fe")]
	public partial class FunctionHasDuplicateNameError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FunctionHasDuplicateNameError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0ec6fed9, 0x6561, 0x43c7, 0xb7, 0x04, 0x9b, 0xc5, 0x6d, 0x74, 0x74, 0xfe);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FunctionHasDuplicateNameError link in the same Partition as the given Function
		/// </summary>
		/// <param name="source">Function to use as the source of the relationship.</param>
		/// <param name="target">FunctionDuplicateNameError to use as the target of the relationship.</param>
		public FunctionHasDuplicateNameError(Function source, FunctionDuplicateNameError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FunctionHasDuplicateNameError.FunctionDomainRoleId, source), new DslModeling::RoleAssignment(FunctionHasDuplicateNameError.DuplicateNameErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FunctionHasDuplicateNameError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FunctionHasDuplicateNameError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FunctionHasDuplicateNameError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FunctionHasDuplicateNameError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Function domain role code
		
		/// <summary>
		/// Function domain role Id.
		/// </summary>
		public static readonly global::System.Guid FunctionDomainRoleId = new global::System.Guid(0xa9a2cadb, 0x325a, 0x416b, 0xaf, 0xd6, 0x32, 0x15, 0x81, 0x4b, 0xf4, 0x6a);
		
		/// <summary>
		/// DomainRole Function
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionHasDuplicateNameError.Function
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionHasDuplicateNameError/Function.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionHasDuplicateNameError/Function.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DuplicateNameError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionHasDuplicateNameError/Function.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("a9a2cadb-325a-416b-afd6-3215814bf46a")]
		public virtual Function Function
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Function)DslModeling::DomainRoleInfo.GetRolePlayer(this, FunctionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FunctionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FunctionCollection of a FunctionDuplicateNameError
		/// <summary>
		/// Gets a list of FunctionCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Function> GetFunctionCollection(FunctionDuplicateNameError element)
		{
			return new DslModeling::LinkedElementCollection<Function>(element, DuplicateNameErrorDomainRoleId);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing Function domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.Function;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.Function = (Function)value;
			}
		}
		
		#endregion
		#region DuplicateNameError domain role code
		
		/// <summary>
		/// DuplicateNameError domain role Id.
		/// </summary>
		public static readonly global::System.Guid DuplicateNameErrorDomainRoleId = new global::System.Guid(0x7c4c1204, 0x9bac, 0x4e3e, 0xba, 0xbc, 0x4d, 0x84, 0x9f, 0x4c, 0xf3, 0x0a);
		
		/// <summary>
		/// DomainRole DuplicateNameError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionHasDuplicateNameError.DuplicateNameError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionHasDuplicateNameError/DuplicateNameError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionHasDuplicateNameError/DuplicateNameError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FunctionCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionHasDuplicateNameError/DuplicateNameError.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("7c4c1204-9bac-4e3e-babc-4d849f4cf30a")]
		public virtual FunctionDuplicateNameError DuplicateNameError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FunctionDuplicateNameError)DslModeling::DomainRoleInfo.GetRolePlayer(this, DuplicateNameErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DuplicateNameErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DuplicateNameError of a Function
		/// <summary>
		/// Gets DuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FunctionDuplicateNameError GetDuplicateNameError(Function element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FunctionDomainRoleId) as FunctionDuplicateNameError;
		}
		
		/// <summary>
		/// Sets DuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDuplicateNameError(Function element, FunctionDuplicateNameError newDuplicateNameError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FunctionDomainRoleId, newDuplicateNameError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing DuplicateNameError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.DuplicateNameError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.DuplicateNameError = (FunctionDuplicateNameError)value;
			}
		}
		
		#endregion
		#region Function link accessor
		/// <summary>
		/// Get the FunctionHasDuplicateNameError link to a Function.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionHasDuplicateNameError GetLinkToDuplicateNameError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.Function functionInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionHasDuplicateNameError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionHasDuplicateNameError>(functionInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionHasDuplicateNameError.FunctionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Function not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DuplicateNameError link accessor
		/// <summary>
		/// Get the list of FunctionHasDuplicateNameError links to a FunctionDuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionHasDuplicateNameError> GetLinksToFunctionCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionDuplicateNameError duplicateNameErrorInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionHasDuplicateNameError>(duplicateNameErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionHasDuplicateNameError.DuplicateNameErrorDomainRoleId);
		}
		#endregion
		#region FunctionHasDuplicateNameError instance accessors
		
		/// <summary>
		/// Get any FunctionHasDuplicateNameError links between a given Function and a FunctionDuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionHasDuplicateNameError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.Function source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionDuplicateNameError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionHasDuplicateNameError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionHasDuplicateNameError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionHasDuplicateNameError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionHasDuplicateNameError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionHasDuplicateNameError.FunctionDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionHasDuplicateNameError link in links )
			{
				if ( target.Equals(link.DuplicateNameError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FunctionHasDuplicateNameError link between a given Functionand a FunctionDuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionHasDuplicateNameError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.Function source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionDuplicateNameError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionHasDuplicateNameError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionHasDuplicateNameError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionHasDuplicateNameError.FunctionDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionHasDuplicateNameError link in links )
			{
				if ( target.Equals(link.DuplicateNameError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ReadingHasDuplicateSignatureError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasDuplicateSignatureError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasDuplicateSignatureError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasDuplicateSignatureError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("e0f0ba86-0330-49f7-a931-a99f7ed79500")]
	public partial class ReadingHasDuplicateSignatureError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ReadingHasDuplicateSignatureError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe0f0ba86, 0x0330, 0x49f7, 0xa9, 0x31, 0xa9, 0x9f, 0x7e, 0xd7, 0x95, 0x00);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ReadingHasDuplicateSignatureError link in the same Partition as the given Reading
		/// </summary>
		/// <param name="source">Reading to use as the source of the relationship.</param>
		/// <param name="target">DuplicateReadingSignatureError to use as the target of the relationship.</param>
		public ReadingHasDuplicateSignatureError(Reading source, DuplicateReadingSignatureError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ReadingHasDuplicateSignatureError.ReadingDomainRoleId, source), new DslModeling::RoleAssignment(ReadingHasDuplicateSignatureError.DuplicateSignatureErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ReadingHasDuplicateSignatureError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ReadingHasDuplicateSignatureError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ReadingHasDuplicateSignatureError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ReadingHasDuplicateSignatureError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Reading domain role code
		
		/// <summary>
		/// Reading domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReadingDomainRoleId = new global::System.Guid(0xb5033d2d, 0x59ea, 0x4e81, 0x8b, 0x1d, 0x73, 0xf4, 0x23, 0xeb, 0x19, 0xd8);
		
		/// <summary>
		/// DomainRole Reading
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasDuplicateSignatureError.Reading
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasDuplicateSignatureError/Reading.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasDuplicateSignatureError/Reading.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DuplicateSignatureError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasDuplicateSignatureError/Reading.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("b5033d2d-59ea-4e81-8b1d-73f423eb19d8")]
		public virtual Reading Reading
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Reading)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReadingDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReadingDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ReadingCollection of a DuplicateReadingSignatureError
		/// <summary>
		/// Gets a list of ReadingCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Reading> GetReadingCollection(DuplicateReadingSignatureError element)
		{
			return new DslModeling::LinkedElementCollection<Reading>(element, DuplicateSignatureErrorDomainRoleId);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing Reading domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.Reading;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.Reading = (Reading)value;
			}
		}
		
		#endregion
		#region DuplicateSignatureError domain role code
		
		/// <summary>
		/// DuplicateSignatureError domain role Id.
		/// </summary>
		public static readonly global::System.Guid DuplicateSignatureErrorDomainRoleId = new global::System.Guid(0x2ef193a3, 0x51e9, 0x407a, 0xa4, 0xe6, 0x14, 0x91, 0x80, 0x5b, 0xfd, 0x14);
		
		/// <summary>
		/// DomainRole DuplicateSignatureError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasDuplicateSignatureError.DuplicateSignatureError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasDuplicateSignatureError/DuplicateSignatureError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasDuplicateSignatureError/DuplicateSignatureError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ReadingCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasDuplicateSignatureError/DuplicateSignatureError.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("2ef193a3-51e9-407a-a4e6-1491805bfd14")]
		public virtual DuplicateReadingSignatureError DuplicateSignatureError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DuplicateReadingSignatureError)DslModeling::DomainRoleInfo.GetRolePlayer(this, DuplicateSignatureErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DuplicateSignatureErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DuplicateSignatureError of a Reading
		/// <summary>
		/// Gets DuplicateSignatureError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DuplicateReadingSignatureError GetDuplicateSignatureError(Reading element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ReadingDomainRoleId) as DuplicateReadingSignatureError;
		}
		
		/// <summary>
		/// Sets DuplicateSignatureError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDuplicateSignatureError(Reading element, DuplicateReadingSignatureError newDuplicateSignatureError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ReadingDomainRoleId, newDuplicateSignatureError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing DuplicateSignatureError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.DuplicateSignatureError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.DuplicateSignatureError = (DuplicateReadingSignatureError)value;
			}
		}
		
		#endregion
		#region Reading link accessor
		/// <summary>
		/// Get the ReadingHasDuplicateSignatureError link to a Reading.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasDuplicateSignatureError GetLinkToDuplicateSignatureError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.Reading readingInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasDuplicateSignatureError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasDuplicateSignatureError>(readingInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasDuplicateSignatureError.ReadingDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Reading not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DuplicateSignatureError link accessor
		/// <summary>
		/// Get the list of ReadingHasDuplicateSignatureError links to a DuplicateReadingSignatureError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasDuplicateSignatureError> GetLinksToReadingCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.DuplicateReadingSignatureError duplicateSignatureErrorInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasDuplicateSignatureError>(duplicateSignatureErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasDuplicateSignatureError.DuplicateSignatureErrorDomainRoleId);
		}
		#endregion
		#region ReadingHasDuplicateSignatureError instance accessors
		
		/// <summary>
		/// Get any ReadingHasDuplicateSignatureError links between a given Reading and a DuplicateReadingSignatureError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasDuplicateSignatureError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.Reading source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DuplicateReadingSignatureError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasDuplicateSignatureError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasDuplicateSignatureError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasDuplicateSignatureError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasDuplicateSignatureError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasDuplicateSignatureError.ReadingDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasDuplicateSignatureError link in links )
			{
				if ( target.Equals(link.DuplicateSignatureError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ReadingHasDuplicateSignatureError link between a given Readingand a DuplicateReadingSignatureError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasDuplicateSignatureError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.Reading source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DuplicateReadingSignatureError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasDuplicateSignatureError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasDuplicateSignatureError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasDuplicateSignatureError.ReadingDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasDuplicateSignatureError link in links )
			{
				if ( target.Equals(link.DuplicateSignatureError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ExternalRoleConstraint
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ExternalRoleConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ExternalRoleConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ExternalRoleConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("9692d61f-13ae-4fee-9f76-8e0d9a5ff976")]
	public partial class ExternalRoleConstraint : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ExternalRoleConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9692d61f, 0x13ae, 0x4fee, 0x9f, 0x76, 0x8e, 0x0d, 0x9a, 0x5f, 0xf9, 0x76);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ExternalRoleConstraint link in the same Partition as the given ConstraintRoleSequenceHasRole
		/// </summary>
		/// <param name="source">ConstraintRoleSequenceHasRole to use as the source of the relationship.</param>
		/// <param name="target">FactConstraint to use as the target of the relationship.</param>
		public ExternalRoleConstraint(ConstraintRoleSequenceHasRole source, FactConstraint target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ExternalRoleConstraint.ConstrainedRoleDomainRoleId, source), new DslModeling::RoleAssignment(ExternalRoleConstraint.FactConstraintDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExternalRoleConstraint(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExternalRoleConstraint(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExternalRoleConstraint(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExternalRoleConstraint(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ConstrainedRole domain role code
		
		/// <summary>
		/// ConstrainedRole domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConstrainedRoleDomainRoleId = new global::System.Guid(0xf87a3ec5, 0xc735, 0x4e45, 0xa9, 0xee, 0xda, 0xde, 0x8e, 0x2c, 0xfd, 0x37);
		
		/// <summary>
		/// DomainRole ConstrainedRole
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ExternalRoleConstraint.ConstrainedRole
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ExternalRoleConstraint/ConstrainedRole.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ExternalRoleConstraint/ConstrainedRole.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "FactConstraintCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ExternalRoleConstraint/ConstrainedRole.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("f87a3ec5-c735-4e45-a9ee-dade8e2cfd37")]
		public virtual ConstraintRoleSequenceHasRole ConstrainedRole
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConstraintRoleSequenceHasRole)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConstrainedRoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConstrainedRoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConstrainedRoleCollection of a FactConstraint
		/// <summary>
		/// Gets a list of ConstrainedRoleCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ConstraintRoleSequenceHasRole> GetConstrainedRoleCollection(FactConstraint element)
		{
			return new DslModeling::LinkedElementCollection<ConstraintRoleSequenceHasRole>(element, FactConstraintDomainRoleId);
		}
		#endregion
		#region FactConstraint domain role code
		
		/// <summary>
		/// FactConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid FactConstraintDomainRoleId = new global::System.Guid(0x8e11e9e0, 0xdec5, 0x405d, 0x87, 0x57, 0xe3, 0x45, 0x82, 0x33, 0x93, 0x84);
		
		/// <summary>
		/// DomainRole FactConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ExternalRoleConstraint.FactConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ExternalRoleConstraint/FactConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ExternalRoleConstraint/FactConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ConstrainedRoleCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ExternalRoleConstraint/FactConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("8e11e9e0-dec5-405d-8757-e34582339384")]
		public virtual FactConstraint FactConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FactConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, FactConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FactConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FactConstraintCollection of a ConstraintRoleSequenceHasRole
		/// <summary>
		/// Gets a list of FactConstraintCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FactConstraint> GetFactConstraintCollection(ConstraintRoleSequenceHasRole element)
		{
			return new DslModeling::LinkedElementCollection<FactConstraint>(element, ConstrainedRoleDomainRoleId);
		}
		#endregion
		#region ConstrainedRole link accessor
		/// <summary>
		/// Get the list of ExternalRoleConstraint links to a ConstraintRoleSequenceHasRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExternalRoleConstraint> GetLinksToFactConstraintCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasRole constrainedRoleInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExternalRoleConstraint>(constrainedRoleInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExternalRoleConstraint.ConstrainedRoleDomainRoleId);
		}
		#endregion
		#region FactConstraint link accessor
		/// <summary>
		/// Get the list of ExternalRoleConstraint links to a FactConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExternalRoleConstraint> GetLinksToConstrainedRoleCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactConstraint factConstraintInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExternalRoleConstraint>(factConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExternalRoleConstraint.FactConstraintDomainRoleId);
		}
		#endregion
		#region ExternalRoleConstraint instance accessors
		
		/// <summary>
		/// Get any ExternalRoleConstraint links between a given ConstraintRoleSequenceHasRole and a FactConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExternalRoleConstraint> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasRole source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactConstraint target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExternalRoleConstraint> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExternalRoleConstraint>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExternalRoleConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExternalRoleConstraint>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExternalRoleConstraint.ConstrainedRoleDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExternalRoleConstraint link in links )
			{
				if ( target.Equals(link.FactConstraint) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ExternalRoleConstraint link between a given ConstraintRoleSequenceHasRoleand a FactConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExternalRoleConstraint GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasRole source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactConstraint target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExternalRoleConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExternalRoleConstraint>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExternalRoleConstraint.ConstrainedRoleDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExternalRoleConstraint link in links )
			{
				if ( target.Equals(link.FactConstraint) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ExclusiveOrConstraintCoupler
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusiveOrConstraintCoupler
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusiveOrConstraintCoupler.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusiveOrConstraintCoupler.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("f2244a4c-bbe0-463b-9e8b-6a768c5c1469")]
	public partial class ExclusiveOrConstraintCoupler : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ExclusiveOrConstraintCoupler domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf2244a4c, 0xbbe0, 0x463b, 0x9e, 0x8b, 0x6a, 0x76, 0x8c, 0x5c, 0x14, 0x69);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ExclusiveOrConstraintCoupler link in the same Partition as the given MandatoryConstraint
		/// </summary>
		/// <param name="source">MandatoryConstraint to use as the source of the relationship.</param>
		/// <param name="target">ExclusionConstraint to use as the target of the relationship.</param>
		public ExclusiveOrConstraintCoupler(MandatoryConstraint source, ExclusionConstraint target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ExclusiveOrConstraintCoupler.MandatoryConstraintDomainRoleId, source), new DslModeling::RoleAssignment(ExclusiveOrConstraintCoupler.ExclusionConstraintDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExclusiveOrConstraintCoupler(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExclusiveOrConstraintCoupler(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExclusiveOrConstraintCoupler(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExclusiveOrConstraintCoupler(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MandatoryConstraint domain role code
		
		/// <summary>
		/// MandatoryConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid MandatoryConstraintDomainRoleId = new global::System.Guid(0x5cb84560, 0xb945, 0x4d22, 0xbd, 0x70, 0x52, 0x3d, 0x50, 0x2f, 0xbb, 0x95);
		
		/// <summary>
		/// DomainRole MandatoryConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusiveOrConstraintCoupler.MandatoryConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusiveOrConstraintCoupler/MandatoryConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusiveOrConstraintCoupler/MandatoryConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ExclusiveOrExclusionConstraint", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusiveOrConstraintCoupler/MandatoryConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("5cb84560-b945-4d22-bd70-523d502fbb95")]
		public virtual MandatoryConstraint MandatoryConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MandatoryConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, MandatoryConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MandatoryConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ExclusiveOrMandatoryConstraint of a ExclusionConstraint
		/// <summary>
		/// Gets ExclusiveOrMandatoryConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static MandatoryConstraint GetExclusiveOrMandatoryConstraint(ExclusionConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ExclusionConstraintDomainRoleId) as MandatoryConstraint;
		}
		
		/// <summary>
		/// Sets ExclusiveOrMandatoryConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetExclusiveOrMandatoryConstraint(ExclusionConstraint element, MandatoryConstraint newMandatoryConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ExclusionConstraintDomainRoleId, newMandatoryConstraint);
		}
		#endregion
		#region ExclusionConstraint domain role code
		
		/// <summary>
		/// ExclusionConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid ExclusionConstraintDomainRoleId = new global::System.Guid(0x6413ee7e, 0xa13f, 0x4330, 0xa4, 0x5e, 0x79, 0x72, 0x7e, 0xa4, 0x9a, 0x30);
		
		/// <summary>
		/// DomainRole ExclusionConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusiveOrConstraintCoupler.ExclusionConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusiveOrConstraintCoupler/ExclusionConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusiveOrConstraintCoupler/ExclusionConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ExclusiveOrMandatoryConstraint", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusiveOrConstraintCoupler/ExclusionConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("6413ee7e-a13f-4330-a45e-79727ea49a30")]
		public virtual ExclusionConstraint ExclusionConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ExclusionConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, ExclusionConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ExclusionConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ExclusiveOrExclusionConstraint of a MandatoryConstraint
		/// <summary>
		/// Gets ExclusiveOrExclusionConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ExclusionConstraint GetExclusiveOrExclusionConstraint(MandatoryConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, MandatoryConstraintDomainRoleId) as ExclusionConstraint;
		}
		
		/// <summary>
		/// Sets ExclusiveOrExclusionConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetExclusiveOrExclusionConstraint(MandatoryConstraint element, ExclusionConstraint newExclusionConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, MandatoryConstraintDomainRoleId, newExclusionConstraint);
		}
		#endregion
		#region MandatoryConstraint link accessor
		/// <summary>
		/// Get the ExclusiveOrConstraintCoupler link to a MandatoryConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusiveOrConstraintCoupler GetLinkToExclusiveOrExclusionConstraint (global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraint mandatoryConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusiveOrConstraintCoupler> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusiveOrConstraintCoupler>(mandatoryConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusiveOrConstraintCoupler.MandatoryConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of MandatoryConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ExclusionConstraint link accessor
		/// <summary>
		/// Get the ExclusiveOrConstraintCoupler link to a ExclusionConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusiveOrConstraintCoupler GetLinkToExclusiveOrMandatoryConstraint (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionConstraint exclusionConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusiveOrConstraintCoupler> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusiveOrConstraintCoupler>(exclusionConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusiveOrConstraintCoupler.ExclusionConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ExclusionConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ExclusiveOrConstraintCoupler instance accessors
		
		/// <summary>
		/// Get any ExclusiveOrConstraintCoupler links between a given MandatoryConstraint and a ExclusionConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusiveOrConstraintCoupler> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionConstraint target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusiveOrConstraintCoupler> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusiveOrConstraintCoupler>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusiveOrConstraintCoupler> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusiveOrConstraintCoupler>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusiveOrConstraintCoupler.MandatoryConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusiveOrConstraintCoupler link in links )
			{
				if ( target.Equals(link.ExclusionConstraint) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ExclusiveOrConstraintCoupler link between a given MandatoryConstraintand a ExclusionConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusiveOrConstraintCoupler GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionConstraint target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusiveOrConstraintCoupler> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusiveOrConstraintCoupler>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusiveOrConstraintCoupler.MandatoryConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusiveOrConstraintCoupler link in links )
			{
				if ( target.Equals(link.ExclusionConstraint) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship SetComparisonConstraintHasRoleSequence
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasRoleSequence
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasRoleSequence.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasRoleSequence.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("84b13bea-fc8c-446c-b643-9688b99af1b6")]
	public partial class SetComparisonConstraintHasRoleSequence : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SetComparisonConstraintHasRoleSequence domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x84b13bea, 0xfc8c, 0x446c, 0xb6, 0x43, 0x96, 0x88, 0xb9, 0x9a, 0xf1, 0xb6);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SetComparisonConstraintHasRoleSequence link in the same Partition as the given SetComparisonConstraint
		/// </summary>
		/// <param name="source">SetComparisonConstraint to use as the source of the relationship.</param>
		/// <param name="target">SetComparisonConstraintRoleSequence to use as the target of the relationship.</param>
		public SetComparisonConstraintHasRoleSequence(SetComparisonConstraint source, SetComparisonConstraintRoleSequence target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SetComparisonConstraintHasRoleSequence.ExternalConstraintDomainRoleId, source), new DslModeling::RoleAssignment(SetComparisonConstraintHasRoleSequence.RoleSequenceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetComparisonConstraintHasRoleSequence(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetComparisonConstraintHasRoleSequence(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetComparisonConstraintHasRoleSequence(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetComparisonConstraintHasRoleSequence(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ExternalConstraint domain role code
		
		/// <summary>
		/// ExternalConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid ExternalConstraintDomainRoleId = new global::System.Guid(0x1d11fc93, 0x6110, 0x44f7, 0xbf, 0xe1, 0x38, 0xfc, 0x7d, 0xc8, 0x11, 0x70);
		
		/// <summary>
		/// DomainRole ExternalConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasRoleSequence.ExternalConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasRoleSequence/ExternalConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasRoleSequence/ExternalConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "RoleSequenceCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasRoleSequence/ExternalConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("1d11fc93-6110-44f7-bfe1-38fc7dc81170")]
		public virtual SetComparisonConstraint ExternalConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SetComparisonConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, ExternalConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ExternalConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ExternalConstraint of a SetComparisonConstraintRoleSequence
		/// <summary>
		/// Gets ExternalConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SetComparisonConstraint GetExternalConstraint(SetComparisonConstraintRoleSequence element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RoleSequenceDomainRoleId) as SetComparisonConstraint;
		}
		
		/// <summary>
		/// Sets ExternalConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetExternalConstraint(SetComparisonConstraintRoleSequence element, SetComparisonConstraint newExternalConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RoleSequenceDomainRoleId, newExternalConstraint);
		}
		#endregion
		#region RoleSequence domain role code
		
		/// <summary>
		/// RoleSequence domain role Id.
		/// </summary>
		public static readonly global::System.Guid RoleSequenceDomainRoleId = new global::System.Guid(0x603112cd, 0xeef4, 0x4659, 0x84, 0xf2, 0xf2, 0x10, 0xc8, 0xb2, 0x34, 0xd5);
		
		/// <summary>
		/// DomainRole RoleSequence
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasRoleSequence.RoleSequence
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasRoleSequence/RoleSequence.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasRoleSequence/RoleSequence.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ExternalConstraint", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasRoleSequence/RoleSequence.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("603112cd-eef4-4659-84f2-f210c8b234d5")]
		public virtual SetComparisonConstraintRoleSequence RoleSequence
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SetComparisonConstraintRoleSequence)DslModeling::DomainRoleInfo.GetRolePlayer(this, RoleSequenceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RoleSequenceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RoleSequenceCollection of a SetComparisonConstraint
		/// <summary>
		/// Gets a list of RoleSequenceCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SetComparisonConstraintRoleSequence> GetRoleSequenceCollection(SetComparisonConstraint element)
		{
			return new DslModeling::LinkedElementCollection<SetComparisonConstraintRoleSequence>(element, ExternalConstraintDomainRoleId);
		}
		#endregion
		#region ExternalConstraint link accessor
		/// <summary>
		/// Get the list of SetComparisonConstraintHasRoleSequence links to a SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasRoleSequence> GetLinksToRoleSequenceCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint externalConstraintInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasRoleSequence>(externalConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasRoleSequence.ExternalConstraintDomainRoleId);
		}
		#endregion
		#region RoleSequence link accessor
		/// <summary>
		/// Get the SetComparisonConstraintHasRoleSequence link to a SetComparisonConstraintRoleSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasRoleSequence GetLinkToExternalConstraint (global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintRoleSequence roleSequenceInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasRoleSequence> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasRoleSequence>(roleSequenceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasRoleSequence.RoleSequenceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of RoleSequence not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SetComparisonConstraintHasRoleSequence instance accessors
		
		/// <summary>
		/// Get any SetComparisonConstraintHasRoleSequence links between a given SetComparisonConstraint and a SetComparisonConstraintRoleSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasRoleSequence> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintRoleSequence target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasRoleSequence> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasRoleSequence>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasRoleSequence> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasRoleSequence>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasRoleSequence.ExternalConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasRoleSequence link in links )
			{
				if ( target.Equals(link.RoleSequence) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SetComparisonConstraintHasRoleSequence link between a given SetComparisonConstraintand a SetComparisonConstraintRoleSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasRoleSequence GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintRoleSequence target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasRoleSequence> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasRoleSequence>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasRoleSequence.ExternalConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasRoleSequence link in links )
			{
				if ( target.Equals(link.RoleSequence) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ConstraintRoleSequenceHasRole
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasRole
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasRole.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasRole.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("bd1a0274-1152-4a54-b4a5-58bd023ce710")]
	public partial class ConstraintRoleSequenceHasRole : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConstraintRoleSequenceHasRole domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbd1a0274, 0x1152, 0x4a54, 0xb4, 0xa5, 0x58, 0xbd, 0x02, 0x3c, 0xe7, 0x10);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConstraintRoleSequenceHasRole link in the same Partition as the given ConstraintRoleSequence
		/// </summary>
		/// <param name="source">ConstraintRoleSequence to use as the source of the relationship.</param>
		/// <param name="target">Role to use as the target of the relationship.</param>
		public ConstraintRoleSequenceHasRole(ConstraintRoleSequence source, Role target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConstraintRoleSequenceHasRole.ConstraintRoleSequenceDomainRoleId, source), new DslModeling::RoleAssignment(ConstraintRoleSequenceHasRole.RoleDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConstraintRoleSequenceHasRole(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConstraintRoleSequenceHasRole(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConstraintRoleSequenceHasRole(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConstraintRoleSequenceHasRole(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ConstraintRoleSequence domain role code
		
		/// <summary>
		/// ConstraintRoleSequence domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConstraintRoleSequenceDomainRoleId = new global::System.Guid(0x9ad53904, 0x280a, 0x4329, 0xa6, 0xf0, 0x20, 0xe2, 0xc4, 0x4f, 0x56, 0x07);
		
		/// <summary>
		/// DomainRole ConstraintRoleSequence
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasRole.ConstraintRoleSequence
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasRole/ConstraintRoleSequence.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasRole/ConstraintRoleSequence.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "RoleCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasRole/ConstraintRoleSequence.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("9ad53904-280a-4329-a6f0-20e2c44f5607")]
		public virtual ConstraintRoleSequence ConstraintRoleSequence
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConstraintRoleSequence)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConstraintRoleSequenceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConstraintRoleSequenceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConstraintRoleSequenceCollection of a Role
		/// <summary>
		/// Gets a list of ConstraintRoleSequenceCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ConstraintRoleSequence> GetConstraintRoleSequenceCollection(Role element)
		{
			return new DslModeling::LinkedElementCollection<ConstraintRoleSequence>(element, RoleDomainRoleId);
		}
		#endregion
		#region Role domain role code
		
		/// <summary>
		/// Role domain role Id.
		/// </summary>
		public static readonly global::System.Guid RoleDomainRoleId = new global::System.Guid(0x1a5a347e, 0x1d5d, 0x4045, 0x9e, 0xa0, 0x13, 0xb2, 0x33, 0x8f, 0xc8, 0x98);
		
		/// <summary>
		/// DomainRole Role
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasRole.Role
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasRole/Role.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasRole/Role.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ConstraintRoleSequenceCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasRole/Role.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("1a5a347e-1d5d-4045-9ea0-13b2338fc898")]
		public virtual Role Role
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Role)DslModeling::DomainRoleInfo.GetRolePlayer(this, RoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RoleCollection of a ConstraintRoleSequence
		/// <summary>
		/// Gets a list of RoleCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Role> GetRoleCollection(ConstraintRoleSequence element)
		{
			return new DslModeling::LinkedElementCollection<Role>(element, ConstraintRoleSequenceDomainRoleId);
		}
		#endregion
		#region Accessors for roles that this REL plays in other RELs
		#region FactConstraintCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of FactConstraintCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ExternalRoleConstraint.ConstrainedRole
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<FactConstraint> FactConstraintCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<FactConstraint>(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExternalRoleConstraint.ConstrainedRoleDomainRoleId);
			}
		}
		#endregion
		#region JoinPathProjectionCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of JoinPathProjectionCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjection.ProjectedConstraintRole
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ConstraintRoleSequenceJoinPathProjection> JoinPathProjectionCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ConstraintRoleSequenceJoinPathProjection>(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjection.ProjectedConstraintRoleDomainRoleId);
			}
		}
		#endregion
		#endregion
		#region ConstraintRoleSequence link accessor
		/// <summary>
		/// Get the list of ConstraintRoleSequenceHasRole links to a ConstraintRoleSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasRole> GetLinksToRoleCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequence constraintRoleSequenceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasRole>(constraintRoleSequenceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasRole.ConstraintRoleSequenceDomainRoleId);
		}
		#endregion
		#region Role link accessor
		/// <summary>
		/// Get the list of ConstraintRoleSequenceHasRole links to a Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasRole> GetLinksToConstraintRoleSequenceCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.Role roleInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasRole>(roleInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasRole.RoleDomainRoleId);
		}
		#endregion
		#region ConstraintRoleSequenceHasRole instance accessors
		
		/// <summary>
		/// Get any ConstraintRoleSequenceHasRole links between a given ConstraintRoleSequence and a Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasRole> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequence source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Role target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasRole> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasRole>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasRole>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasRole.ConstraintRoleSequenceDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasRole link in links )
			{
				if ( target.Equals(link.Role) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConstraintRoleSequenceHasRole link between a given ConstraintRoleSequenceand a Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasRole GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequence source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Role target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasRole>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasRole.ConstraintRoleSequenceDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasRole link in links )
			{
				if ( target.Equals(link.Role) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship SetComparisonConstraintHasTooFewRoleSequencesError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("3167f5d3-c234-46e3-aac2-4ceb791dfb9c")]
	public partial class SetComparisonConstraintHasTooFewRoleSequencesError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SetComparisonConstraintHasTooFewRoleSequencesError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3167f5d3, 0xc234, 0x46e3, 0xaa, 0xc2, 0x4c, 0xeb, 0x79, 0x1d, 0xfb, 0x9c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SetComparisonConstraintHasTooFewRoleSequencesError link in the same Partition as the given SetComparisonConstraint
		/// </summary>
		/// <param name="source">SetComparisonConstraint to use as the source of the relationship.</param>
		/// <param name="target">TooFewRoleSequencesError to use as the target of the relationship.</param>
		public SetComparisonConstraintHasTooFewRoleSequencesError(SetComparisonConstraint source, TooFewRoleSequencesError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SetComparisonConstraintHasTooFewRoleSequencesError.SetComparisonConstraintDomainRoleId, source), new DslModeling::RoleAssignment(SetComparisonConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetComparisonConstraintHasTooFewRoleSequencesError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetComparisonConstraintHasTooFewRoleSequencesError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetComparisonConstraintHasTooFewRoleSequencesError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetComparisonConstraintHasTooFewRoleSequencesError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SetComparisonConstraint domain role code
		
		/// <summary>
		/// SetComparisonConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid SetComparisonConstraintDomainRoleId = new global::System.Guid(0x0178c877, 0x8906, 0x4bdc, 0xb3, 0xf8, 0x03, 0x22, 0xa5, 0x78, 0x74, 0x1d);
		
		/// <summary>
		/// DomainRole SetComparisonConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.SetComparisonConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError/SetComparisonConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError/SetComparisonConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TooFewRoleSequencesError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError/SetComparisonConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("0178c877-8906-4bdc-b3f8-0322a578741d")]
		public virtual SetComparisonConstraint SetComparisonConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SetComparisonConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SetComparisonConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SetComparisonConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SetComparisonConstraint of a TooFewRoleSequencesError
		/// <summary>
		/// Gets SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SetComparisonConstraint GetSetComparisonConstraint(TooFewRoleSequencesError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TooFewRoleSequencesErrorDomainRoleId) as SetComparisonConstraint;
		}
		
		/// <summary>
		/// Sets SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSetComparisonConstraint(TooFewRoleSequencesError element, SetComparisonConstraint newSetComparisonConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TooFewRoleSequencesErrorDomainRoleId, newSetComparisonConstraint);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing SetComparisonConstraint domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.SetComparisonConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.SetComparisonConstraint = (SetComparisonConstraint)value;
			}
		}
		
		#endregion
		#region TooFewRoleSequencesError domain role code
		
		/// <summary>
		/// TooFewRoleSequencesError domain role Id.
		/// </summary>
		public static readonly global::System.Guid TooFewRoleSequencesErrorDomainRoleId = new global::System.Guid(0x1ba9841f, 0x59a2, 0x475c, 0xbb, 0x3f, 0x74, 0x97, 0xb7, 0xf6, 0x31, 0x5e);
		
		/// <summary>
		/// DomainRole TooFewRoleSequencesError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError/TooFewRoleSequencesError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError/TooFewRoleSequencesError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SetComparisonConstraint", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError/TooFewRoleSequencesError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("1ba9841f-59a2-475c-bb3f-7497b7f6315e")]
		public virtual TooFewRoleSequencesError TooFewRoleSequencesError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TooFewRoleSequencesError)DslModeling::DomainRoleInfo.GetRolePlayer(this, TooFewRoleSequencesErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TooFewRoleSequencesErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TooFewRoleSequencesError of a SetComparisonConstraint
		/// <summary>
		/// Gets TooFewRoleSequencesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static TooFewRoleSequencesError GetTooFewRoleSequencesError(SetComparisonConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SetComparisonConstraintDomainRoleId) as TooFewRoleSequencesError;
		}
		
		/// <summary>
		/// Sets TooFewRoleSequencesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTooFewRoleSequencesError(SetComparisonConstraint element, TooFewRoleSequencesError newTooFewRoleSequencesError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SetComparisonConstraintDomainRoleId, newTooFewRoleSequencesError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing TooFewRoleSequencesError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.TooFewRoleSequencesError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.TooFewRoleSequencesError = (TooFewRoleSequencesError)value;
			}
		}
		
		#endregion
		#region SetComparisonConstraint link accessor
		/// <summary>
		/// Get the SetComparisonConstraintHasTooFewRoleSequencesError link to a SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError GetLinkToTooFewRoleSequencesError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint setComparisonConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError>(setComparisonConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.SetComparisonConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SetComparisonConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TooFewRoleSequencesError link accessor
		/// <summary>
		/// Get the SetComparisonConstraintHasTooFewRoleSequencesError link to a TooFewRoleSequencesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError GetLinkToSetComparisonConstraint (global::ORMSolutions.ORMArchitect.Core.ObjectModel.TooFewRoleSequencesError tooFewRoleSequencesErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError>(tooFewRoleSequencesErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TooFewRoleSequencesError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SetComparisonConstraintHasTooFewRoleSequencesError instance accessors
		
		/// <summary>
		/// Get any SetComparisonConstraintHasTooFewRoleSequencesError links between a given SetComparisonConstraint and a TooFewRoleSequencesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.TooFewRoleSequencesError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.SetComparisonConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError link in links )
			{
				if ( target.Equals(link.TooFewRoleSequencesError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SetComparisonConstraintHasTooFewRoleSequencesError link between a given SetComparisonConstraintand a TooFewRoleSequencesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.TooFewRoleSequencesError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.SetComparisonConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError link in links )
			{
				if ( target.Equals(link.TooFewRoleSequencesError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship SetComparisonConstraintHasTooManyRoleSequencesError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("e7c33130-2d1f-4f95-b988-bd7608cf2d1c")]
	public partial class SetComparisonConstraintHasTooManyRoleSequencesError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SetComparisonConstraintHasTooManyRoleSequencesError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe7c33130, 0x2d1f, 0x4f95, 0xb9, 0x88, 0xbd, 0x76, 0x08, 0xcf, 0x2d, 0x1c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SetComparisonConstraintHasTooManyRoleSequencesError link in the same Partition as the given SetComparisonConstraint
		/// </summary>
		/// <param name="source">SetComparisonConstraint to use as the source of the relationship.</param>
		/// <param name="target">TooManyRoleSequencesError to use as the target of the relationship.</param>
		public SetComparisonConstraintHasTooManyRoleSequencesError(SetComparisonConstraint source, TooManyRoleSequencesError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SetComparisonConstraintHasTooManyRoleSequencesError.SetComparisonConstraintDomainRoleId, source), new DslModeling::RoleAssignment(SetComparisonConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetComparisonConstraintHasTooManyRoleSequencesError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetComparisonConstraintHasTooManyRoleSequencesError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetComparisonConstraintHasTooManyRoleSequencesError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetComparisonConstraintHasTooManyRoleSequencesError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SetComparisonConstraint domain role code
		
		/// <summary>
		/// SetComparisonConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid SetComparisonConstraintDomainRoleId = new global::System.Guid(0x76082669, 0x3e03, 0x4837, 0x88, 0x24, 0x52, 0x6b, 0xb2, 0x5d, 0xac, 0xb8);
		
		/// <summary>
		/// DomainRole SetComparisonConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.SetComparisonConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError/SetComparisonConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError/SetComparisonConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TooManyRoleSequencesError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError/SetComparisonConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("76082669-3e03-4837-8824-526bb25dacb8")]
		public virtual SetComparisonConstraint SetComparisonConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SetComparisonConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SetComparisonConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SetComparisonConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SetComparisonConstraint of a TooManyRoleSequencesError
		/// <summary>
		/// Gets SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SetComparisonConstraint GetSetComparisonConstraint(TooManyRoleSequencesError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TooManyRoleSequencesErrorDomainRoleId) as SetComparisonConstraint;
		}
		
		/// <summary>
		/// Sets SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSetComparisonConstraint(TooManyRoleSequencesError element, SetComparisonConstraint newSetComparisonConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TooManyRoleSequencesErrorDomainRoleId, newSetComparisonConstraint);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing SetComparisonConstraint domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.SetComparisonConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.SetComparisonConstraint = (SetComparisonConstraint)value;
			}
		}
		
		#endregion
		#region TooManyRoleSequencesError domain role code
		
		/// <summary>
		/// TooManyRoleSequencesError domain role Id.
		/// </summary>
		public static readonly global::System.Guid TooManyRoleSequencesErrorDomainRoleId = new global::System.Guid(0xc4c9e95c, 0xb71c, 0x4eec, 0xa1, 0x01, 0x6c, 0xa8, 0x27, 0x16, 0x95, 0x45);
		
		/// <summary>
		/// DomainRole TooManyRoleSequencesError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError/TooManyRoleSequencesError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError/TooManyRoleSequencesError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SetComparisonConstraint", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError/TooManyRoleSequencesError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("c4c9e95c-b71c-4eec-a101-6ca827169545")]
		public virtual TooManyRoleSequencesError TooManyRoleSequencesError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TooManyRoleSequencesError)DslModeling::DomainRoleInfo.GetRolePlayer(this, TooManyRoleSequencesErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TooManyRoleSequencesErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TooManyRoleSequencesError of a SetComparisonConstraint
		/// <summary>
		/// Gets TooManyRoleSequencesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static TooManyRoleSequencesError GetTooManyRoleSequencesError(SetComparisonConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SetComparisonConstraintDomainRoleId) as TooManyRoleSequencesError;
		}
		
		/// <summary>
		/// Sets TooManyRoleSequencesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTooManyRoleSequencesError(SetComparisonConstraint element, TooManyRoleSequencesError newTooManyRoleSequencesError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SetComparisonConstraintDomainRoleId, newTooManyRoleSequencesError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing TooManyRoleSequencesError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.TooManyRoleSequencesError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.TooManyRoleSequencesError = (TooManyRoleSequencesError)value;
			}
		}
		
		#endregion
		#region SetComparisonConstraint link accessor
		/// <summary>
		/// Get the SetComparisonConstraintHasTooManyRoleSequencesError link to a SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError GetLinkToTooManyRoleSequencesError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint setComparisonConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError>(setComparisonConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.SetComparisonConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SetComparisonConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TooManyRoleSequencesError link accessor
		/// <summary>
		/// Get the SetComparisonConstraintHasTooManyRoleSequencesError link to a TooManyRoleSequencesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError GetLinkToSetComparisonConstraint (global::ORMSolutions.ORMArchitect.Core.ObjectModel.TooManyRoleSequencesError tooManyRoleSequencesErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError>(tooManyRoleSequencesErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TooManyRoleSequencesError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SetComparisonConstraintHasTooManyRoleSequencesError instance accessors
		
		/// <summary>
		/// Get any SetComparisonConstraintHasTooManyRoleSequencesError links between a given SetComparisonConstraint and a TooManyRoleSequencesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.TooManyRoleSequencesError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.SetComparisonConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError link in links )
			{
				if ( target.Equals(link.TooManyRoleSequencesError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SetComparisonConstraintHasTooManyRoleSequencesError link between a given SetComparisonConstraintand a TooManyRoleSequencesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.TooManyRoleSequencesError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.SetComparisonConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError link in links )
			{
				if ( target.Equals(link.TooManyRoleSequencesError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ObjectTypeHasDuplicateNameError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDuplicateNameError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDuplicateNameError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDuplicateNameError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("bc1031eb-8590-4a14-abbd-f12a18622855")]
	public partial class ObjectTypeHasDuplicateNameError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ObjectTypeHasDuplicateNameError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbc1031eb, 0x8590, 0x4a14, 0xab, 0xbd, 0xf1, 0x2a, 0x18, 0x62, 0x28, 0x55);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ObjectTypeHasDuplicateNameError link in the same Partition as the given ObjectType
		/// </summary>
		/// <param name="source">ObjectType to use as the source of the relationship.</param>
		/// <param name="target">ObjectTypeDuplicateNameError to use as the target of the relationship.</param>
		public ObjectTypeHasDuplicateNameError(ObjectType source, ObjectTypeDuplicateNameError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ObjectTypeHasDuplicateNameError.ObjectTypeDomainRoleId, source), new DslModeling::RoleAssignment(ObjectTypeHasDuplicateNameError.DuplicateNameErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectTypeHasDuplicateNameError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectTypeHasDuplicateNameError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectTypeHasDuplicateNameError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectTypeHasDuplicateNameError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ObjectType domain role code
		
		/// <summary>
		/// ObjectType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ObjectTypeDomainRoleId = new global::System.Guid(0xa2252380, 0x7cac, 0x4d36, 0x88, 0x57, 0x24, 0x26, 0xae, 0x55, 0x8c, 0x08);
		
		/// <summary>
		/// DomainRole ObjectType
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDuplicateNameError.ObjectType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDuplicateNameError/ObjectType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDuplicateNameError/ObjectType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DuplicateNameError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDuplicateNameError/ObjectType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("a2252380-7cac-4d36-8857-2426ae558c08")]
		public virtual ObjectType ObjectType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjectTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjectTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ObjectTypeCollection of a ObjectTypeDuplicateNameError
		/// <summary>
		/// Gets a list of ObjectTypeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ObjectType> GetObjectTypeCollection(ObjectTypeDuplicateNameError element)
		{
			return new DslModeling::LinkedElementCollection<ObjectType>(element, DuplicateNameErrorDomainRoleId);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing ObjectType domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ObjectType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ObjectType = (ObjectType)value;
			}
		}
		
		#endregion
		#region DuplicateNameError domain role code
		
		/// <summary>
		/// DuplicateNameError domain role Id.
		/// </summary>
		public static readonly global::System.Guid DuplicateNameErrorDomainRoleId = new global::System.Guid(0x40422aa2, 0xb5fd, 0x4056, 0xab, 0xbf, 0xd3, 0x93, 0x35, 0x8b, 0xc0, 0x1a);
		
		/// <summary>
		/// DomainRole DuplicateNameError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDuplicateNameError.DuplicateNameError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDuplicateNameError/DuplicateNameError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDuplicateNameError/DuplicateNameError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ObjectTypeCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDuplicateNameError/DuplicateNameError.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("40422aa2-b5fd-4056-abbf-d393358bc01a")]
		public virtual ObjectTypeDuplicateNameError DuplicateNameError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectTypeDuplicateNameError)DslModeling::DomainRoleInfo.GetRolePlayer(this, DuplicateNameErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DuplicateNameErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DuplicateNameError of a ObjectType
		/// <summary>
		/// Gets DuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ObjectTypeDuplicateNameError GetDuplicateNameError(ObjectType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ObjectTypeDomainRoleId) as ObjectTypeDuplicateNameError;
		}
		
		/// <summary>
		/// Sets DuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDuplicateNameError(ObjectType element, ObjectTypeDuplicateNameError newDuplicateNameError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ObjectTypeDomainRoleId, newDuplicateNameError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing DuplicateNameError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.DuplicateNameError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.DuplicateNameError = (ObjectTypeDuplicateNameError)value;
			}
		}
		
		#endregion
		#region ObjectType link accessor
		/// <summary>
		/// Get the ObjectTypeHasDuplicateNameError link to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDuplicateNameError GetLinkToDuplicateNameError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType objectTypeInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDuplicateNameError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDuplicateNameError>(objectTypeInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDuplicateNameError.ObjectTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ObjectType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DuplicateNameError link accessor
		/// <summary>
		/// Get the list of ObjectTypeHasDuplicateNameError links to a ObjectTypeDuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDuplicateNameError> GetLinksToObjectTypeCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeDuplicateNameError duplicateNameErrorInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDuplicateNameError>(duplicateNameErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDuplicateNameError.DuplicateNameErrorDomainRoleId);
		}
		#endregion
		#region ObjectTypeHasDuplicateNameError instance accessors
		
		/// <summary>
		/// Get any ObjectTypeHasDuplicateNameError links between a given ObjectType and a ObjectTypeDuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDuplicateNameError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeDuplicateNameError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDuplicateNameError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDuplicateNameError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDuplicateNameError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDuplicateNameError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDuplicateNameError.ObjectTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDuplicateNameError link in links )
			{
				if ( target.Equals(link.DuplicateNameError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ObjectTypeHasDuplicateNameError link between a given ObjectTypeand a ObjectTypeDuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDuplicateNameError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeDuplicateNameError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDuplicateNameError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDuplicateNameError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDuplicateNameError.ObjectTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDuplicateNameError link in links )
			{
				if ( target.Equals(link.DuplicateNameError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship RoleInstanceHasPopulationUniquenessError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstanceHasPopulationUniquenessError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstanceHasPopulationUniquenessError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstanceHasPopulationUniquenessError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("5dbe50cd-a939-484d-9b96-700cb6cc7813")]
	public abstract partial class RoleInstanceHasPopulationUniquenessError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RoleInstanceHasPopulationUniquenessError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5dbe50cd, 0xa939, 0x484d, 0x9b, 0x96, 0x70, 0x0c, 0xb6, 0xcc, 0x78, 0x13);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">The Partition instance containing this ElementLink</param>
		/// <param name="roleAssignments">A set of role assignments for roleplayer initialization</param>
		/// <param name="propertyAssignments">A set of attribute assignments for attribute initialization</param>
		protected RoleInstanceHasPopulationUniquenessError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region RoleInstance domain role code
		
		/// <summary>
		/// RoleInstance domain role Id.
		/// </summary>
		public static readonly global::System.Guid RoleInstanceDomainRoleId = new global::System.Guid(0x527ffaeb, 0x8f4a, 0x4dff, 0xb0, 0x2f, 0x49, 0x82, 0x2f, 0xce, 0x2f, 0x3d);
		
		/// <summary>
		/// DomainRole RoleInstance
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstanceHasPopulationUniquenessError.RoleInstance
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstanceHasPopulationUniquenessError/RoleInstance.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstanceHasPopulationUniquenessError/RoleInstance.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "PopulationUniquenessError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstanceHasPopulationUniquenessError/RoleInstance.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("527ffaeb-8f4a-4dff-b02f-49822fce2f3d")]
		public abstract RoleInstance RoleInstance
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access RoleInstanceCollection of a PopulationUniquenessError
		/// <summary>
		/// Gets a list of RoleInstanceCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<RoleInstance> GetRoleInstanceCollection(PopulationUniquenessError element)
		{
			return new DslModeling::ReadOnlyLinkedElementCollection<RoleInstance>(element, PopulationUniquenessErrorDomainRoleId);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing RoleInstance domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.RoleInstance;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.RoleInstance = (RoleInstance)value;
			}
		}
		
		#endregion
		#region PopulationUniquenessError domain role code
		
		/// <summary>
		/// PopulationUniquenessError domain role Id.
		/// </summary>
		public static readonly global::System.Guid PopulationUniquenessErrorDomainRoleId = new global::System.Guid(0x3ae1d857, 0xc7e7, 0x4053, 0xa4, 0x61, 0x3e, 0xb9, 0x65, 0x66, 0x6f, 0x2c);
		
		/// <summary>
		/// DomainRole PopulationUniquenessError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstanceHasPopulationUniquenessError.PopulationUniquenessError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstanceHasPopulationUniquenessError/PopulationUniquenessError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstanceHasPopulationUniquenessError/PopulationUniquenessError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "RoleInstanceCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstanceHasPopulationUniquenessError/PopulationUniquenessError.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("3ae1d857-c7e7-4053-a461-3eb965666f2c")]
		public abstract PopulationUniquenessError PopulationUniquenessError
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access PopulationUniquenessError of a RoleInstance
		/// <summary>
		/// Gets PopulationUniquenessError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static PopulationUniquenessError GetPopulationUniquenessError(RoleInstance element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RoleInstanceDomainRoleId) as PopulationUniquenessError;
		}
		
		/// <summary>
		/// Sets PopulationUniquenessError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetPopulationUniquenessError(RoleInstance element, PopulationUniquenessError newPopulationUniquenessError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RoleInstanceDomainRoleId, newPopulationUniquenessError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing PopulationUniquenessError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.PopulationUniquenessError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.PopulationUniquenessError = (PopulationUniquenessError)value;
			}
		}
		
		#endregion
		#region RoleInstance link accessor
		/// <summary>
		/// Get the RoleInstanceHasPopulationUniquenessError link to a RoleInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstanceHasPopulationUniquenessError GetLinkToPopulationUniquenessError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstance roleInstanceInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstanceHasPopulationUniquenessError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstanceHasPopulationUniquenessError>(roleInstanceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstanceHasPopulationUniquenessError.RoleInstanceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of RoleInstance not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region PopulationUniquenessError link accessor
		/// <summary>
		/// Get the list of RoleInstanceHasPopulationUniquenessError links to a PopulationUniquenessError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstanceHasPopulationUniquenessError> GetLinksToRoleInstanceCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.PopulationUniquenessError populationUniquenessErrorInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstanceHasPopulationUniquenessError>(populationUniquenessErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstanceHasPopulationUniquenessError.PopulationUniquenessErrorDomainRoleId);
		}
		#endregion
		#region RoleInstanceHasPopulationUniquenessError instance accessors
		
		/// <summary>
		/// Get any RoleInstanceHasPopulationUniquenessError links between a given RoleInstance and a PopulationUniquenessError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstanceHasPopulationUniquenessError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstance source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PopulationUniquenessError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstanceHasPopulationUniquenessError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstanceHasPopulationUniquenessError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstanceHasPopulationUniquenessError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstanceHasPopulationUniquenessError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstanceHasPopulationUniquenessError.RoleInstanceDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstanceHasPopulationUniquenessError link in links )
			{
				if ( target.Equals(link.PopulationUniquenessError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RoleInstanceHasPopulationUniquenessError link between a given RoleInstanceand a PopulationUniquenessError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstanceHasPopulationUniquenessError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstance source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PopulationUniquenessError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstanceHasPopulationUniquenessError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstanceHasPopulationUniquenessError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstanceHasPopulationUniquenessError.RoleInstanceDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstanceHasPopulationUniquenessError link in links )
			{
				if ( target.Equals(link.PopulationUniquenessError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship EntityTypeRoleInstanceHasPopulationUniquenessError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("04312bef-ea3e-4525-9a1a-903497efdaf7")]
	public partial class EntityTypeRoleInstanceHasPopulationUniquenessError : RoleInstanceHasPopulationUniquenessError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityTypeRoleInstanceHasPopulationUniquenessError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x04312bef, 0xea3e, 0x4525, 0x9a, 0x1a, 0x90, 0x34, 0x97, 0xef, 0xda, 0xf7);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityTypeRoleInstanceHasPopulationUniquenessError link in the same Partition as the given EntityTypeRoleInstance
		/// </summary>
		/// <param name="source">EntityTypeRoleInstance to use as the source of the relationship.</param>
		/// <param name="target">PopulationUniquenessError to use as the target of the relationship.</param>
		public EntityTypeRoleInstanceHasPopulationUniquenessError(EntityTypeRoleInstance source, PopulationUniquenessError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityTypeRoleInstanceHasPopulationUniquenessError.RoleInstanceDomainRoleId, source), new DslModeling::RoleAssignment(EntityTypeRoleInstanceHasPopulationUniquenessError.PopulationUniquenessErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityTypeRoleInstanceHasPopulationUniquenessError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityTypeRoleInstanceHasPopulationUniquenessError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityTypeRoleInstanceHasPopulationUniquenessError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityTypeRoleInstanceHasPopulationUniquenessError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region RoleInstance domain role code
		
		/// <summary>
		/// RoleInstance domain role Id.
		/// </summary>
		public static readonly new global::System.Guid RoleInstanceDomainRoleId = new global::System.Guid(0xf3ef0d4d, 0x5f76, 0x4dab, 0xbb, 0x6e, 0xb4, 0x75, 0xe7, 0xdd, 0xa7, 0x0d);
		
		/// <summary>
		/// DomainRole RoleInstance
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError.RoleInstance
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError/RoleInstance.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError/RoleInstance.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, RolePlayer = typeof(EntityTypeRoleInstance), PropertyName = "PopulationUniquenessError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError/RoleInstance.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("f3ef0d4d-5f76-4dab-bb6e-b475e7dda70d")]
		public override RoleInstance RoleInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RoleInstance)DslModeling::DomainRoleInfo.GetRolePlayer(this, RoleInstanceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RoleInstanceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EntityTypeRoleInstanceCollection of a PopulationUniquenessError
		/// <summary>
		/// Gets a list of EntityTypeRoleInstanceCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<EntityTypeRoleInstance> GetEntityTypeRoleInstanceCollection(PopulationUniquenessError element)
		{
			return new DslModeling::LinkedElementCollection<EntityTypeRoleInstance>(element, PopulationUniquenessErrorDomainRoleId);
		}
		#endregion
		#region PopulationUniquenessError domain role code
		
		/// <summary>
		/// PopulationUniquenessError domain role Id.
		/// </summary>
		public static readonly new global::System.Guid PopulationUniquenessErrorDomainRoleId = new global::System.Guid(0x0f8036ba, 0x33aa, 0x48bc, 0xb0, 0x58, 0x1b, 0xd9, 0x90, 0xa6, 0xe2, 0x64);
		
		/// <summary>
		/// DomainRole PopulationUniquenessError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError.PopulationUniquenessError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError/PopulationUniquenessError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError/PopulationUniquenessError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "EntityTypeRoleInstanceCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError/PopulationUniquenessError.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("0f8036ba-33aa-48bc-b058-1bd990a6e264")]
		public override PopulationUniquenessError PopulationUniquenessError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PopulationUniquenessError)DslModeling::DomainRoleInfo.GetRolePlayer(this, PopulationUniquenessErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PopulationUniquenessErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PopulationUniquenessError of a EntityTypeRoleInstance
		/// <summary>
		/// Gets PopulationUniquenessError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static PopulationUniquenessError GetPopulationUniquenessError(EntityTypeRoleInstance element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RoleInstanceDomainRoleId) as PopulationUniquenessError;
		}
		
		/// <summary>
		/// Sets PopulationUniquenessError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetPopulationUniquenessError(EntityTypeRoleInstance element, PopulationUniquenessError newPopulationUniquenessError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RoleInstanceDomainRoleId, newPopulationUniquenessError);
		}
		#endregion
		#region RoleInstance link accessor
		/// <summary>
		/// Get the EntityTypeRoleInstanceHasPopulationUniquenessError link to a EntityTypeRoleInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError GetLinkToPopulationUniquenessError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstance roleInstanceInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError>(roleInstanceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError.RoleInstanceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of RoleInstance not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region PopulationUniquenessError link accessor
		/// <summary>
		/// Get the list of EntityTypeRoleInstanceHasPopulationUniquenessError links to a PopulationUniquenessError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError> GetLinksToEntityTypeRoleInstanceCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.PopulationUniquenessError populationUniquenessErrorInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError>(populationUniquenessErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError.PopulationUniquenessErrorDomainRoleId);
		}
		#endregion
		#region EntityTypeRoleInstanceHasPopulationUniquenessError instance accessors
		
		/// <summary>
		/// Get any EntityTypeRoleInstanceHasPopulationUniquenessError links between a given EntityTypeRoleInstance and a PopulationUniquenessError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstance source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PopulationUniquenessError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError.RoleInstanceDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError link in links )
			{
				if ( target.Equals(link.PopulationUniquenessError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityTypeRoleInstanceHasPopulationUniquenessError link between a given EntityTypeRoleInstanceand a PopulationUniquenessError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstance source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PopulationUniquenessError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError.RoleInstanceDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError link in links )
			{
				if ( target.Equals(link.PopulationUniquenessError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship FactTypeRoleInstanceHasPopulationUniquenessError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("a483fdfe-53ef-4352-8d97-986bf2c0e8e7")]
	public partial class FactTypeRoleInstanceHasPopulationUniquenessError : RoleInstanceHasPopulationUniquenessError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FactTypeRoleInstanceHasPopulationUniquenessError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa483fdfe, 0x53ef, 0x4352, 0x8d, 0x97, 0x98, 0x6b, 0xf2, 0xc0, 0xe8, 0xe7);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FactTypeRoleInstanceHasPopulationUniquenessError link in the same Partition as the given FactTypeRoleInstance
		/// </summary>
		/// <param name="source">FactTypeRoleInstance to use as the source of the relationship.</param>
		/// <param name="target">PopulationUniquenessError to use as the target of the relationship.</param>
		public FactTypeRoleInstanceHasPopulationUniquenessError(FactTypeRoleInstance source, PopulationUniquenessError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FactTypeRoleInstanceHasPopulationUniquenessError.RoleInstanceDomainRoleId, source), new DslModeling::RoleAssignment(FactTypeRoleInstanceHasPopulationUniquenessError.PopulationUniquenessErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeRoleInstanceHasPopulationUniquenessError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeRoleInstanceHasPopulationUniquenessError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeRoleInstanceHasPopulationUniquenessError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeRoleInstanceHasPopulationUniquenessError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region RoleInstance domain role code
		
		/// <summary>
		/// RoleInstance domain role Id.
		/// </summary>
		public static readonly new global::System.Guid RoleInstanceDomainRoleId = new global::System.Guid(0x14bf8cdb, 0x9685, 0x49ac, 0xa7, 0xb9, 0x69, 0x6a, 0x72, 0xd6, 0xd9, 0x7c);
		
		/// <summary>
		/// DomainRole RoleInstance
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError.RoleInstance
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError/RoleInstance.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError/RoleInstance.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, RolePlayer = typeof(FactTypeRoleInstance), PropertyName = "PopulationUniquenessError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError/RoleInstance.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("14bf8cdb-9685-49ac-a7b9-696a72d6d97c")]
		public override RoleInstance RoleInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RoleInstance)DslModeling::DomainRoleInfo.GetRolePlayer(this, RoleInstanceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RoleInstanceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FactTypeRoleInstanceCollection of a PopulationUniquenessError
		/// <summary>
		/// Gets a list of FactTypeRoleInstanceCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FactTypeRoleInstance> GetFactTypeRoleInstanceCollection(PopulationUniquenessError element)
		{
			return new DslModeling::LinkedElementCollection<FactTypeRoleInstance>(element, PopulationUniquenessErrorDomainRoleId);
		}
		#endregion
		#region PopulationUniquenessError domain role code
		
		/// <summary>
		/// PopulationUniquenessError domain role Id.
		/// </summary>
		public static readonly new global::System.Guid PopulationUniquenessErrorDomainRoleId = new global::System.Guid(0xf00366b7, 0xa23f, 0x48d7, 0x89, 0x77, 0x00, 0x78, 0xeb, 0x2c, 0xd7, 0xb6);
		
		/// <summary>
		/// DomainRole PopulationUniquenessError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError.PopulationUniquenessError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError/PopulationUniquenessError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError/PopulationUniquenessError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FactTypeRoleInstanceCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError/PopulationUniquenessError.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("f00366b7-a23f-48d7-8977-0078eb2cd7b6")]
		public override PopulationUniquenessError PopulationUniquenessError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PopulationUniquenessError)DslModeling::DomainRoleInfo.GetRolePlayer(this, PopulationUniquenessErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PopulationUniquenessErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PopulationUniquenessError of a FactTypeRoleInstance
		/// <summary>
		/// Gets PopulationUniquenessError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static PopulationUniquenessError GetPopulationUniquenessError(FactTypeRoleInstance element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RoleInstanceDomainRoleId) as PopulationUniquenessError;
		}
		
		/// <summary>
		/// Sets PopulationUniquenessError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetPopulationUniquenessError(FactTypeRoleInstance element, PopulationUniquenessError newPopulationUniquenessError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RoleInstanceDomainRoleId, newPopulationUniquenessError);
		}
		#endregion
		#region RoleInstance link accessor
		/// <summary>
		/// Get the FactTypeRoleInstanceHasPopulationUniquenessError link to a FactTypeRoleInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError GetLinkToPopulationUniquenessError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstance roleInstanceInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError>(roleInstanceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError.RoleInstanceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of RoleInstance not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region PopulationUniquenessError link accessor
		/// <summary>
		/// Get the list of FactTypeRoleInstanceHasPopulationUniquenessError links to a PopulationUniquenessError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError> GetLinksToFactTypeRoleInstanceCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.PopulationUniquenessError populationUniquenessErrorInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError>(populationUniquenessErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError.PopulationUniquenessErrorDomainRoleId);
		}
		#endregion
		#region FactTypeRoleInstanceHasPopulationUniquenessError instance accessors
		
		/// <summary>
		/// Get any FactTypeRoleInstanceHasPopulationUniquenessError links between a given FactTypeRoleInstance and a PopulationUniquenessError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstance source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PopulationUniquenessError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError.RoleInstanceDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError link in links )
			{
				if ( target.Equals(link.PopulationUniquenessError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FactTypeRoleInstanceHasPopulationUniquenessError link between a given FactTypeRoleInstanceand a PopulationUniquenessError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstance source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PopulationUniquenessError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError.RoleInstanceDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError link in links )
			{
				if ( target.Equals(link.PopulationUniquenessError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship SetComparisonConstraintHasContradictionError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasContradictionError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasContradictionError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasContradictionError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("a1d4a389-9d19-4921-bd0d-d965b53897e3")]
	public abstract partial class SetComparisonConstraintHasContradictionError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SetComparisonConstraintHasContradictionError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa1d4a389, 0x9d19, 0x4921, 0xbd, 0x0d, 0xd9, 0x65, 0xb5, 0x38, 0x97, 0xe3);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">The Partition instance containing this ElementLink</param>
		/// <param name="roleAssignments">A set of role assignments for roleplayer initialization</param>
		/// <param name="propertyAssignments">A set of attribute assignments for attribute initialization</param>
		protected SetComparisonConstraintHasContradictionError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SetComparisonConstraint domain role code
		
		/// <summary>
		/// SetComparisonConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid SetComparisonConstraintDomainRoleId = new global::System.Guid(0x61f38936, 0x0f1d, 0x4d08, 0xbf, 0x95, 0x75, 0x42, 0x9d, 0x10, 0x8d, 0x6e);
		
		/// <summary>
		/// DomainRole SetComparisonConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasContradictionError.SetComparisonConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasContradictionError/SetComparisonConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasContradictionError/SetComparisonConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ContradictionError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasContradictionError/SetComparisonConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("61f38936-0f1d-4d08-bf95-75429d108d6e")]
		public abstract SetComparisonConstraint SetComparisonConstraint
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access SetComparisonConstraintCollection of a ContradictionError
		/// <summary>
		/// Gets a list of SetComparisonConstraintCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<SetComparisonConstraint> GetSetComparisonConstraintCollection(ContradictionError element)
		{
			return new DslModeling::ReadOnlyLinkedElementCollection<SetComparisonConstraint>(element, ContradictionErrorDomainRoleId);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing SetComparisonConstraint domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.SetComparisonConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.SetComparisonConstraint = (SetComparisonConstraint)value;
			}
		}
		
		#endregion
		#region ContradictionError domain role code
		
		/// <summary>
		/// ContradictionError domain role Id.
		/// </summary>
		public static readonly global::System.Guid ContradictionErrorDomainRoleId = new global::System.Guid(0x0d23d71a, 0xee1c, 0x42eb, 0xa5, 0x4b, 0xb6, 0xcc, 0x00, 0x91, 0xef, 0x58);
		
		/// <summary>
		/// DomainRole ContradictionError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasContradictionError.ContradictionError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasContradictionError/ContradictionError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasContradictionError/ContradictionError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SetComparisonConstraintCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasContradictionError/ContradictionError.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("0d23d71a-ee1c-42eb-a54b-b6cc0091ef58")]
		public abstract ContradictionError ContradictionError
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access ContradictionError of a SetComparisonConstraint
		/// <summary>
		/// Gets a list of ContradictionError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<ContradictionError> GetContradictionError(SetComparisonConstraint element)
		{
			return new DslModeling::ReadOnlyLinkedElementCollection<ContradictionError>(element, SetComparisonConstraintDomainRoleId);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing ContradictionError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ContradictionError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ContradictionError = (ContradictionError)value;
			}
		}
		
		#endregion
		#region SetComparisonConstraint link accessor
		/// <summary>
		/// Get the list of SetComparisonConstraintHasContradictionError links to a SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasContradictionError> GetLinksToContradictionError ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint setComparisonConstraintInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasContradictionError>(setComparisonConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasContradictionError.SetComparisonConstraintDomainRoleId);
		}
		#endregion
		#region ContradictionError link accessor
		/// <summary>
		/// Get the list of SetComparisonConstraintHasContradictionError links to a ContradictionError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasContradictionError> GetLinksToSetComparisonConstraintCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ContradictionError contradictionErrorInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasContradictionError>(contradictionErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasContradictionError.ContradictionErrorDomainRoleId);
		}
		#endregion
		#region SetComparisonConstraintHasContradictionError instance accessors
		
		/// <summary>
		/// Get any SetComparisonConstraintHasContradictionError links between a given SetComparisonConstraint and a ContradictionError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasContradictionError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ContradictionError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasContradictionError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasContradictionError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasContradictionError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasContradictionError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasContradictionError.SetComparisonConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasContradictionError link in links )
			{
				if ( target.Equals(link.ContradictionError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SetComparisonConstraintHasContradictionError link between a given SetComparisonConstraintand a ContradictionError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasContradictionError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ContradictionError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasContradictionError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasContradictionError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasContradictionError.SetComparisonConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasContradictionError link in links )
			{
				if ( target.Equals(link.ContradictionError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship SetComparisonConstraintHasExclusionContradictsEqualityError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("e7e85549-6312-4e65-ad48-4ddf51e8139c")]
	public partial class SetComparisonConstraintHasExclusionContradictsEqualityError : SetComparisonConstraintHasContradictionError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SetComparisonConstraintHasExclusionContradictsEqualityError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe7e85549, 0x6312, 0x4e65, 0xad, 0x48, 0x4d, 0xdf, 0x51, 0xe8, 0x13, 0x9c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SetComparisonConstraintHasExclusionContradictsEqualityError link in the same Partition as the given SetComparisonConstraint
		/// </summary>
		/// <param name="source">SetComparisonConstraint to use as the source of the relationship.</param>
		/// <param name="target">ExclusionContradictsEqualityError to use as the target of the relationship.</param>
		public SetComparisonConstraintHasExclusionContradictsEqualityError(SetComparisonConstraint source, ExclusionContradictsEqualityError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SetComparisonConstraintHasExclusionContradictsEqualityError.SetComparisonConstraintDomainRoleId, source), new DslModeling::RoleAssignment(SetComparisonConstraintHasExclusionContradictsEqualityError.ExclusionContradictsEqualityErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetComparisonConstraintHasExclusionContradictsEqualityError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetComparisonConstraintHasExclusionContradictsEqualityError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetComparisonConstraintHasExclusionContradictsEqualityError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetComparisonConstraintHasExclusionContradictsEqualityError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SetComparisonConstraint domain role code
		
		/// <summary>
		/// SetComparisonConstraint domain role Id.
		/// </summary>
		public static readonly new global::System.Guid SetComparisonConstraintDomainRoleId = new global::System.Guid(0xa1cae6f2, 0x1ff6, 0x455c, 0xb3, 0x45, 0xfe, 0x1e, 0xab, 0xa5, 0x4c, 0xc9);
		
		/// <summary>
		/// DomainRole SetComparisonConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError.SetComparisonConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError/SetComparisonConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError/SetComparisonConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ExclusionContradictsEqualityError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError/SetComparisonConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("a1cae6f2-1ff6-455c-b345-fe1eaba54cc9")]
		public override SetComparisonConstraint SetComparisonConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SetComparisonConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SetComparisonConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SetComparisonConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SetComparisonConstraintCollection of a ExclusionContradictsEqualityError
		/// <summary>
		/// Gets a list of SetComparisonConstraintCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SetComparisonConstraint> GetSetComparisonConstraintCollection(ExclusionContradictsEqualityError element)
		{
			return new DslModeling::LinkedElementCollection<SetComparisonConstraint>(element, ExclusionContradictsEqualityErrorDomainRoleId);
		}
		#endregion
		#region ExclusionContradictsEqualityError domain role code
		
		/// <summary>
		/// ExclusionContradictsEqualityError domain role Id.
		/// </summary>
		public static readonly global::System.Guid ExclusionContradictsEqualityErrorDomainRoleId = new global::System.Guid(0x550fe83e, 0x6dd2, 0x49fe, 0xb1, 0x25, 0xca, 0x26, 0xda, 0x12, 0x89, 0x7f);
		
		/// <summary>
		/// DomainRole ExclusionContradictsEqualityError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError.ExclusionContradictsEqualityError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError/ExclusionContradictsEqualityError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError/ExclusionContradictsEqualityError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SetComparisonConstraintCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError/ExclusionContradictsEqualityError.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("550fe83e-6dd2-49fe-b125-ca26da12897f")]
		public virtual ExclusionContradictsEqualityError ExclusionContradictsEqualityError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ExclusionContradictsEqualityError)DslModeling::DomainRoleInfo.GetRolePlayer(this, ExclusionContradictsEqualityErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ExclusionContradictsEqualityErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ExclusionContradictsEqualityError of a SetComparisonConstraint
		/// <summary>
		/// Gets ExclusionContradictsEqualityError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ExclusionContradictsEqualityError GetExclusionContradictsEqualityError(SetComparisonConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SetComparisonConstraintDomainRoleId) as ExclusionContradictsEqualityError;
		}
		
		/// <summary>
		/// Sets ExclusionContradictsEqualityError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetExclusionContradictsEqualityError(SetComparisonConstraint element, ExclusionContradictsEqualityError newExclusionContradictsEqualityError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SetComparisonConstraintDomainRoleId, newExclusionContradictsEqualityError);
		}
		#endregion
		#region ContradictionError domain role override
		
		/// <summary>
		/// Gets the element playing ExclusionContradictsEqualityError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasContradictionError.ContradictionError
		/// </summary>
		public override ContradictionError ContradictionError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ExclusionContradictsEqualityError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ExclusionContradictsEqualityError = (ExclusionContradictsEqualityError)value;
			}
		}
		
		#endregion
		#region SetComparisonConstraint link accessor
		/// <summary>
		/// Get the SetComparisonConstraintHasExclusionContradictsEqualityError link to a SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError GetLinkToExclusionContradictsEqualityError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint setComparisonConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError>(setComparisonConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError.SetComparisonConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SetComparisonConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ExclusionContradictsEqualityError link accessor
		/// <summary>
		/// Get the list of SetComparisonConstraintHasExclusionContradictsEqualityError links to a ExclusionContradictsEqualityError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError> GetLinksToSetComparisonConstraintCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionContradictsEqualityError exclusionContradictsEqualityErrorInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError>(exclusionContradictsEqualityErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError.ExclusionContradictsEqualityErrorDomainRoleId);
		}
		#endregion
		#region SetComparisonConstraintHasExclusionContradictsEqualityError instance accessors
		
		/// <summary>
		/// Get any SetComparisonConstraintHasExclusionContradictsEqualityError links between a given SetComparisonConstraint and a ExclusionContradictsEqualityError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionContradictsEqualityError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError.SetComparisonConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError link in links )
			{
				if ( target.Equals(link.ExclusionContradictsEqualityError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SetComparisonConstraintHasExclusionContradictsEqualityError link between a given SetComparisonConstraintand a ExclusionContradictsEqualityError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionContradictsEqualityError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError.SetComparisonConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError link in links )
			{
				if ( target.Equals(link.ExclusionContradictsEqualityError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship SetComparisonConstraintHasExclusionContradictsSubsetError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("b4bba5af-05ac-4fec-8288-8d80dc0af16e")]
	public partial class SetComparisonConstraintHasExclusionContradictsSubsetError : SetComparisonConstraintHasContradictionError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SetComparisonConstraintHasExclusionContradictsSubsetError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb4bba5af, 0x05ac, 0x4fec, 0x82, 0x88, 0x8d, 0x80, 0xdc, 0x0a, 0xf1, 0x6e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SetComparisonConstraintHasExclusionContradictsSubsetError link in the same Partition as the given SetComparisonConstraint
		/// </summary>
		/// <param name="source">SetComparisonConstraint to use as the source of the relationship.</param>
		/// <param name="target">ExclusionContradictsSubsetError to use as the target of the relationship.</param>
		public SetComparisonConstraintHasExclusionContradictsSubsetError(SetComparisonConstraint source, ExclusionContradictsSubsetError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SetComparisonConstraintHasExclusionContradictsSubsetError.SetComparisonConstraintDomainRoleId, source), new DslModeling::RoleAssignment(SetComparisonConstraintHasExclusionContradictsSubsetError.ExclusionContradictsSubsetErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetComparisonConstraintHasExclusionContradictsSubsetError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetComparisonConstraintHasExclusionContradictsSubsetError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetComparisonConstraintHasExclusionContradictsSubsetError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetComparisonConstraintHasExclusionContradictsSubsetError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SetComparisonConstraint domain role code
		
		/// <summary>
		/// SetComparisonConstraint domain role Id.
		/// </summary>
		public static readonly new global::System.Guid SetComparisonConstraintDomainRoleId = new global::System.Guid(0x054006ac, 0x2b5a, 0x4084, 0xad, 0xfb, 0xdf, 0xfc, 0xce, 0xb1, 0x8b, 0x0d);
		
		/// <summary>
		/// DomainRole SetComparisonConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError.SetComparisonConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError/SetComparisonConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError/SetComparisonConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ExclusionContradictsSubsetError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError/SetComparisonConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("054006ac-2b5a-4084-adfb-dffcceb18b0d")]
		public override SetComparisonConstraint SetComparisonConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SetComparisonConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SetComparisonConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SetComparisonConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SetComparisonConstraintCollection of a ExclusionContradictsSubsetError
		/// <summary>
		/// Gets a list of SetComparisonConstraintCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SetComparisonConstraint> GetSetComparisonConstraintCollection(ExclusionContradictsSubsetError element)
		{
			return new DslModeling::LinkedElementCollection<SetComparisonConstraint>(element, ExclusionContradictsSubsetErrorDomainRoleId);
		}
		#endregion
		#region ExclusionContradictsSubsetError domain role code
		
		/// <summary>
		/// ExclusionContradictsSubsetError domain role Id.
		/// </summary>
		public static readonly global::System.Guid ExclusionContradictsSubsetErrorDomainRoleId = new global::System.Guid(0x94efa870, 0x8061, 0x41fb, 0x8d, 0x99, 0xfc, 0xdd, 0xba, 0xe7, 0xff, 0x54);
		
		/// <summary>
		/// DomainRole ExclusionContradictsSubsetError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError.ExclusionContradictsSubsetError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError/ExclusionContradictsSubsetError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError/ExclusionContradictsSubsetError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SetComparisonConstraintCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError/ExclusionContradictsSubsetError.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("94efa870-8061-41fb-8d99-fcddbae7ff54")]
		public virtual ExclusionContradictsSubsetError ExclusionContradictsSubsetError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ExclusionContradictsSubsetError)DslModeling::DomainRoleInfo.GetRolePlayer(this, ExclusionContradictsSubsetErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ExclusionContradictsSubsetErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ExclusionContradictsSubsetError of a SetComparisonConstraint
		/// <summary>
		/// Gets ExclusionContradictsSubsetError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ExclusionContradictsSubsetError GetExclusionContradictsSubsetError(SetComparisonConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SetComparisonConstraintDomainRoleId) as ExclusionContradictsSubsetError;
		}
		
		/// <summary>
		/// Sets ExclusionContradictsSubsetError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetExclusionContradictsSubsetError(SetComparisonConstraint element, ExclusionContradictsSubsetError newExclusionContradictsSubsetError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SetComparisonConstraintDomainRoleId, newExclusionContradictsSubsetError);
		}
		#endregion
		#region ContradictionError domain role override
		
		/// <summary>
		/// Gets the element playing ExclusionContradictsSubsetError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasContradictionError.ContradictionError
		/// </summary>
		public override ContradictionError ContradictionError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ExclusionContradictsSubsetError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ExclusionContradictsSubsetError = (ExclusionContradictsSubsetError)value;
			}
		}
		
		#endregion
		#region SetComparisonConstraint link accessor
		/// <summary>
		/// Get the SetComparisonConstraintHasExclusionContradictsSubsetError link to a SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError GetLinkToExclusionContradictsSubsetError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint setComparisonConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError>(setComparisonConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError.SetComparisonConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SetComparisonConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ExclusionContradictsSubsetError link accessor
		/// <summary>
		/// Get the list of SetComparisonConstraintHasExclusionContradictsSubsetError links to a ExclusionContradictsSubsetError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError> GetLinksToSetComparisonConstraintCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionContradictsSubsetError exclusionContradictsSubsetErrorInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError>(exclusionContradictsSubsetErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError.ExclusionContradictsSubsetErrorDomainRoleId);
		}
		#endregion
		#region SetComparisonConstraintHasExclusionContradictsSubsetError instance accessors
		
		/// <summary>
		/// Get any SetComparisonConstraintHasExclusionContradictsSubsetError links between a given SetComparisonConstraint and a ExclusionContradictsSubsetError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionContradictsSubsetError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError.SetComparisonConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError link in links )
			{
				if ( target.Equals(link.ExclusionContradictsSubsetError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SetComparisonConstraintHasExclusionContradictsSubsetError link between a given SetComparisonConstraintand a ExclusionContradictsSubsetError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionContradictsSubsetError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError.SetComparisonConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError link in links )
			{
				if ( target.Equals(link.ExclusionContradictsSubsetError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ExclusionConstraintHasExclusionContradictsMandatoryError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("e638e328-24a9-42c0-bbb1-f1ebc4b6e218")]
	public partial class ExclusionConstraintHasExclusionContradictsMandatoryError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ExclusionConstraintHasExclusionContradictsMandatoryError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe638e328, 0x24a9, 0x42c0, 0xbb, 0xb1, 0xf1, 0xeb, 0xc4, 0xb6, 0xe2, 0x18);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ExclusionConstraintHasExclusionContradictsMandatoryError link in the same Partition as the given ExclusionConstraint
		/// </summary>
		/// <param name="source">ExclusionConstraint to use as the source of the relationship.</param>
		/// <param name="target">ExclusionContradictsMandatoryError to use as the target of the relationship.</param>
		public ExclusionConstraintHasExclusionContradictsMandatoryError(ExclusionConstraint source, ExclusionContradictsMandatoryError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ExclusionConstraintHasExclusionContradictsMandatoryError.ExclusionConstraintDomainRoleId, source), new DslModeling::RoleAssignment(ExclusionConstraintHasExclusionContradictsMandatoryError.ExclusionContradictsMandatoryErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExclusionConstraintHasExclusionContradictsMandatoryError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExclusionConstraintHasExclusionContradictsMandatoryError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExclusionConstraintHasExclusionContradictsMandatoryError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExclusionConstraintHasExclusionContradictsMandatoryError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ExclusionConstraint domain role code
		
		/// <summary>
		/// ExclusionConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid ExclusionConstraintDomainRoleId = new global::System.Guid(0xdac3feeb, 0x4c79, 0x46bc, 0x87, 0x6f, 0x69, 0xce, 0xa0, 0xda, 0x8e, 0x7c);
		
		/// <summary>
		/// DomainRole ExclusionConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError.ExclusionConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError/ExclusionConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError/ExclusionConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ExclusionContradictsMandatoryError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError/ExclusionConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("dac3feeb-4c79-46bc-876f-69cea0da8e7c")]
		public virtual ExclusionConstraint ExclusionConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ExclusionConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, ExclusionConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ExclusionConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ExclusionConstraint of a ExclusionContradictsMandatoryError
		/// <summary>
		/// Gets a list of ExclusionConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ExclusionConstraint> GetExclusionConstraint(ExclusionContradictsMandatoryError element)
		{
			return new DslModeling::LinkedElementCollection<ExclusionConstraint>(element, ExclusionContradictsMandatoryErrorDomainRoleId);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing ExclusionConstraint domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ExclusionConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ExclusionConstraint = (ExclusionConstraint)value;
			}
		}
		
		#endregion
		#region ExclusionContradictsMandatoryError domain role code
		
		/// <summary>
		/// ExclusionContradictsMandatoryError domain role Id.
		/// </summary>
		public static readonly global::System.Guid ExclusionContradictsMandatoryErrorDomainRoleId = new global::System.Guid(0x1d5f486e, 0x469d, 0x42b0, 0x88, 0x76, 0x55, 0x12, 0xcd, 0x22, 0xe8, 0x08);
		
		/// <summary>
		/// DomainRole ExclusionContradictsMandatoryError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError.ExclusionContradictsMandatoryError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError/ExclusionContradictsMandatoryError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError/ExclusionContradictsMandatoryError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ExclusionConstraint", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError/ExclusionContradictsMandatoryError.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("1d5f486e-469d-42b0-8876-5512cd22e808")]
		public virtual ExclusionContradictsMandatoryError ExclusionContradictsMandatoryError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ExclusionContradictsMandatoryError)DslModeling::DomainRoleInfo.GetRolePlayer(this, ExclusionContradictsMandatoryErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ExclusionContradictsMandatoryErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ExclusionContradictsMandatoryError of a ExclusionConstraint
		/// <summary>
		/// Gets ExclusionContradictsMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ExclusionContradictsMandatoryError GetExclusionContradictsMandatoryError(ExclusionConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ExclusionConstraintDomainRoleId) as ExclusionContradictsMandatoryError;
		}
		
		/// <summary>
		/// Sets ExclusionContradictsMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetExclusionContradictsMandatoryError(ExclusionConstraint element, ExclusionContradictsMandatoryError newExclusionContradictsMandatoryError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ExclusionConstraintDomainRoleId, newExclusionContradictsMandatoryError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing ExclusionContradictsMandatoryError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ExclusionContradictsMandatoryError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ExclusionContradictsMandatoryError = (ExclusionContradictsMandatoryError)value;
			}
		}
		
		#endregion
		#region ExclusionConstraint link accessor
		/// <summary>
		/// Get the ExclusionConstraintHasExclusionContradictsMandatoryError link to a ExclusionConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError GetLinkToExclusionContradictsMandatoryError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionConstraint exclusionConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError>(exclusionConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError.ExclusionConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ExclusionConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ExclusionContradictsMandatoryError link accessor
		/// <summary>
		/// Get the list of ExclusionConstraintHasExclusionContradictsMandatoryError links to a ExclusionContradictsMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError> GetLinksToExclusionConstraint ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionContradictsMandatoryError exclusionContradictsMandatoryErrorInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError>(exclusionContradictsMandatoryErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError.ExclusionContradictsMandatoryErrorDomainRoleId);
		}
		#endregion
		#region ExclusionConstraintHasExclusionContradictsMandatoryError instance accessors
		
		/// <summary>
		/// Get any ExclusionConstraintHasExclusionContradictsMandatoryError links between a given ExclusionConstraint and a ExclusionContradictsMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionContradictsMandatoryError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError.ExclusionConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError link in links )
			{
				if ( target.Equals(link.ExclusionContradictsMandatoryError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ExclusionConstraintHasExclusionContradictsMandatoryError link between a given ExclusionConstraintand a ExclusionContradictsMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionContradictsMandatoryError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError.ExclusionConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError link in links )
			{
				if ( target.Equals(link.ExclusionContradictsMandatoryError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship MandatoryConstraintHasExclusionContradictsMandatoryError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("6cdda5a5-c6fe-4e9b-9248-17512f9c891a")]
	public partial class MandatoryConstraintHasExclusionContradictsMandatoryError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MandatoryConstraintHasExclusionContradictsMandatoryError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6cdda5a5, 0xc6fe, 0x4e9b, 0x92, 0x48, 0x17, 0x51, 0x2f, 0x9c, 0x89, 0x1a);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MandatoryConstraintHasExclusionContradictsMandatoryError link in the same Partition as the given MandatoryConstraint
		/// </summary>
		/// <param name="source">MandatoryConstraint to use as the source of the relationship.</param>
		/// <param name="target">ExclusionContradictsMandatoryError to use as the target of the relationship.</param>
		public MandatoryConstraintHasExclusionContradictsMandatoryError(MandatoryConstraint source, ExclusionContradictsMandatoryError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MandatoryConstraintHasExclusionContradictsMandatoryError.MandatoryConstraintDomainRoleId, source), new DslModeling::RoleAssignment(MandatoryConstraintHasExclusionContradictsMandatoryError.ExclusionContradictsMandatoryErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MandatoryConstraintHasExclusionContradictsMandatoryError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MandatoryConstraintHasExclusionContradictsMandatoryError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MandatoryConstraintHasExclusionContradictsMandatoryError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MandatoryConstraintHasExclusionContradictsMandatoryError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MandatoryConstraint domain role code
		
		/// <summary>
		/// MandatoryConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid MandatoryConstraintDomainRoleId = new global::System.Guid(0x7687a52f, 0x3510, 0x4d26, 0x86, 0x1d, 0x58, 0x9a, 0xe3, 0x42, 0x97, 0x90);
		
		/// <summary>
		/// DomainRole MandatoryConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError.MandatoryConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError/MandatoryConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError/MandatoryConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ExclusionContradictsMandatoryError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError/MandatoryConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("7687a52f-3510-4d26-861d-589ae3429790")]
		public virtual MandatoryConstraint MandatoryConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MandatoryConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, MandatoryConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MandatoryConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MandatoryConstraint of a ExclusionContradictsMandatoryError
		/// <summary>
		/// Gets a list of MandatoryConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<MandatoryConstraint> GetMandatoryConstraint(ExclusionContradictsMandatoryError element)
		{
			return new DslModeling::LinkedElementCollection<MandatoryConstraint>(element, ExclusionContradictsMandatoryErrorDomainRoleId);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing MandatoryConstraint domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.MandatoryConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.MandatoryConstraint = (MandatoryConstraint)value;
			}
		}
		
		#endregion
		#region ExclusionContradictsMandatoryError domain role code
		
		/// <summary>
		/// ExclusionContradictsMandatoryError domain role Id.
		/// </summary>
		public static readonly global::System.Guid ExclusionContradictsMandatoryErrorDomainRoleId = new global::System.Guid(0x65aeac10, 0x914e, 0x46a1, 0x9c, 0x0b, 0x16, 0x53, 0xf4, 0x9a, 0x1a, 0xf3);
		
		/// <summary>
		/// DomainRole ExclusionContradictsMandatoryError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError.ExclusionContradictsMandatoryError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError/ExclusionContradictsMandatoryError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError/ExclusionContradictsMandatoryError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "MandatoryConstraint", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError/ExclusionContradictsMandatoryError.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("65aeac10-914e-46a1-9c0b-1653f49a1af3")]
		public virtual ExclusionContradictsMandatoryError ExclusionContradictsMandatoryError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ExclusionContradictsMandatoryError)DslModeling::DomainRoleInfo.GetRolePlayer(this, ExclusionContradictsMandatoryErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ExclusionContradictsMandatoryErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ExclusionContradictsMandatoryError of a MandatoryConstraint
		/// <summary>
		/// Gets ExclusionContradictsMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ExclusionContradictsMandatoryError GetExclusionContradictsMandatoryError(MandatoryConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, MandatoryConstraintDomainRoleId) as ExclusionContradictsMandatoryError;
		}
		
		/// <summary>
		/// Sets ExclusionContradictsMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetExclusionContradictsMandatoryError(MandatoryConstraint element, ExclusionContradictsMandatoryError newExclusionContradictsMandatoryError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, MandatoryConstraintDomainRoleId, newExclusionContradictsMandatoryError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing ExclusionContradictsMandatoryError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ExclusionContradictsMandatoryError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ExclusionContradictsMandatoryError = (ExclusionContradictsMandatoryError)value;
			}
		}
		
		#endregion
		#region MandatoryConstraint link accessor
		/// <summary>
		/// Get the MandatoryConstraintHasExclusionContradictsMandatoryError link to a MandatoryConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError GetLinkToExclusionContradictsMandatoryError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraint mandatoryConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError>(mandatoryConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError.MandatoryConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of MandatoryConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ExclusionContradictsMandatoryError link accessor
		/// <summary>
		/// Get the list of MandatoryConstraintHasExclusionContradictsMandatoryError links to a ExclusionContradictsMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError> GetLinksToMandatoryConstraint ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionContradictsMandatoryError exclusionContradictsMandatoryErrorInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError>(exclusionContradictsMandatoryErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError.ExclusionContradictsMandatoryErrorDomainRoleId);
		}
		#endregion
		#region MandatoryConstraintHasExclusionContradictsMandatoryError instance accessors
		
		/// <summary>
		/// Get any MandatoryConstraintHasExclusionContradictsMandatoryError links between a given MandatoryConstraint and a ExclusionContradictsMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionContradictsMandatoryError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError.MandatoryConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError link in links )
			{
				if ( target.Equals(link.ExclusionContradictsMandatoryError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MandatoryConstraintHasExclusionContradictsMandatoryError link between a given MandatoryConstraintand a ExclusionContradictsMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionContradictsMandatoryError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError.MandatoryConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError link in links )
			{
				if ( target.Equals(link.ExclusionContradictsMandatoryError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship SubsetConstraintHasNotWellModeledSubsetAndMandatoryError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("4ba72b40-a736-49d4-9fde-8b07ee4a61a6")]
	public partial class SubsetConstraintHasNotWellModeledSubsetAndMandatoryError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SubsetConstraintHasNotWellModeledSubsetAndMandatoryError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4ba72b40, 0xa736, 0x49d4, 0x9f, 0xde, 0x8b, 0x07, 0xee, 0x4a, 0x61, 0xa6);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SubsetConstraintHasNotWellModeledSubsetAndMandatoryError link in the same Partition as the given SubsetConstraint
		/// </summary>
		/// <param name="source">SubsetConstraint to use as the source of the relationship.</param>
		/// <param name="target">NotWellModeledSubsetAndMandatoryError to use as the target of the relationship.</param>
		public SubsetConstraintHasNotWellModeledSubsetAndMandatoryError(SubsetConstraint source, NotWellModeledSubsetAndMandatoryError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SubsetConstraintHasNotWellModeledSubsetAndMandatoryError.SubsetConstraintDomainRoleId, source), new DslModeling::RoleAssignment(SubsetConstraintHasNotWellModeledSubsetAndMandatoryError.NotWellModeledSubsetAndMandatoryErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubsetConstraintHasNotWellModeledSubsetAndMandatoryError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubsetConstraintHasNotWellModeledSubsetAndMandatoryError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubsetConstraintHasNotWellModeledSubsetAndMandatoryError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubsetConstraintHasNotWellModeledSubsetAndMandatoryError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SubsetConstraint domain role code
		
		/// <summary>
		/// SubsetConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubsetConstraintDomainRoleId = new global::System.Guid(0x9dc05203, 0x7e4e, 0x485d, 0x9d, 0xd8, 0x35, 0xe8, 0x7a, 0x7b, 0x36, 0x7a);
		
		/// <summary>
		/// DomainRole SubsetConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError.SubsetConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError/SubsetConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError/SubsetConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "NotWellModeledSubsetAndMandatoryError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError/SubsetConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("9dc05203-7e4e-485d-9dd8-35e87a7b367a")]
		public virtual SubsetConstraint SubsetConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SubsetConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubsetConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubsetConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SubsetConstraint of a NotWellModeledSubsetAndMandatoryError
		/// <summary>
		/// Gets SubsetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SubsetConstraint GetSubsetConstraint(NotWellModeledSubsetAndMandatoryError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, NotWellModeledSubsetAndMandatoryErrorDomainRoleId) as SubsetConstraint;
		}
		
		/// <summary>
		/// Sets SubsetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSubsetConstraint(NotWellModeledSubsetAndMandatoryError element, SubsetConstraint newSubsetConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, NotWellModeledSubsetAndMandatoryErrorDomainRoleId, newSubsetConstraint);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing SubsetConstraint domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.SubsetConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.SubsetConstraint = (SubsetConstraint)value;
			}
		}
		
		#endregion
		#region NotWellModeledSubsetAndMandatoryError domain role code
		
		/// <summary>
		/// NotWellModeledSubsetAndMandatoryError domain role Id.
		/// </summary>
		public static readonly global::System.Guid NotWellModeledSubsetAndMandatoryErrorDomainRoleId = new global::System.Guid(0xd48f7913, 0xb297, 0x4d19, 0x83, 0x3c, 0x81, 0x11, 0x94, 0xfa, 0xe9, 0xfa);
		
		/// <summary>
		/// DomainRole NotWellModeledSubsetAndMandatoryError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError.NotWellModeledSubsetAndMandatoryError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError/NotWellModeledSubsetAndMandatoryError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError/NotWellModeledSubsetAndMandatoryError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SubsetConstraint", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError/NotWellModeledSubsetAndMandatoryError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("d48f7913-b297-4d19-833c-811194fae9fa")]
		public virtual NotWellModeledSubsetAndMandatoryError NotWellModeledSubsetAndMandatoryError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (NotWellModeledSubsetAndMandatoryError)DslModeling::DomainRoleInfo.GetRolePlayer(this, NotWellModeledSubsetAndMandatoryErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, NotWellModeledSubsetAndMandatoryErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access NotWellModeledSubsetAndMandatoryError of a SubsetConstraint
		/// <summary>
		/// Gets NotWellModeledSubsetAndMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static NotWellModeledSubsetAndMandatoryError GetNotWellModeledSubsetAndMandatoryError(SubsetConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SubsetConstraintDomainRoleId) as NotWellModeledSubsetAndMandatoryError;
		}
		
		/// <summary>
		/// Sets NotWellModeledSubsetAndMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetNotWellModeledSubsetAndMandatoryError(SubsetConstraint element, NotWellModeledSubsetAndMandatoryError newNotWellModeledSubsetAndMandatoryError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SubsetConstraintDomainRoleId, newNotWellModeledSubsetAndMandatoryError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing NotWellModeledSubsetAndMandatoryError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.NotWellModeledSubsetAndMandatoryError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.NotWellModeledSubsetAndMandatoryError = (NotWellModeledSubsetAndMandatoryError)value;
			}
		}
		
		#endregion
		#region SubsetConstraint link accessor
		/// <summary>
		/// Get the SubsetConstraintHasNotWellModeledSubsetAndMandatoryError link to a SubsetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError GetLinkToNotWellModeledSubsetAndMandatoryError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraint subsetConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError>(subsetConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError.SubsetConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SubsetConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region NotWellModeledSubsetAndMandatoryError link accessor
		/// <summary>
		/// Get the SubsetConstraintHasNotWellModeledSubsetAndMandatoryError link to a NotWellModeledSubsetAndMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError GetLinkToSubsetConstraint (global::ORMSolutions.ORMArchitect.Core.ObjectModel.NotWellModeledSubsetAndMandatoryError notWellModeledSubsetAndMandatoryErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError>(notWellModeledSubsetAndMandatoryErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError.NotWellModeledSubsetAndMandatoryErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of NotWellModeledSubsetAndMandatoryError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SubsetConstraintHasNotWellModeledSubsetAndMandatoryError instance accessors
		
		/// <summary>
		/// Get any SubsetConstraintHasNotWellModeledSubsetAndMandatoryError links between a given SubsetConstraint and a NotWellModeledSubsetAndMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.NotWellModeledSubsetAndMandatoryError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError.SubsetConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError link in links )
			{
				if ( target.Equals(link.NotWellModeledSubsetAndMandatoryError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SubsetConstraintHasNotWellModeledSubsetAndMandatoryError link between a given SubsetConstraintand a NotWellModeledSubsetAndMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.NotWellModeledSubsetAndMandatoryError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError.SubsetConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError link in links )
			{
				if ( target.Equals(link.NotWellModeledSubsetAndMandatoryError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("475557a9-6e11-4d1c-a5a0-9d06daed3ee5")]
	public partial class MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x475557a9, 0x6e11, 0x4d1c, 0xa5, 0xa0, 0x9d, 0x06, 0xda, 0xed, 0x3e, 0xe5);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError link in the same Partition as the given MandatoryConstraint
		/// </summary>
		/// <param name="source">MandatoryConstraint to use as the source of the relationship.</param>
		/// <param name="target">NotWellModeledSubsetAndMandatoryError to use as the target of the relationship.</param>
		public MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError(MandatoryConstraint source, NotWellModeledSubsetAndMandatoryError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError.MandatoryConstraintDomainRoleId, source), new DslModeling::RoleAssignment(MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError.NotWellModeledSubsetAndMandatoryErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MandatoryConstraint domain role code
		
		/// <summary>
		/// MandatoryConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid MandatoryConstraintDomainRoleId = new global::System.Guid(0x7d6bcce4, 0x5f44, 0x473a, 0xaa, 0x5d, 0x3e, 0xd9, 0x11, 0x5c, 0xd6, 0xc6);
		
		/// <summary>
		/// DomainRole MandatoryConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError.MandatoryConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError/MandatoryConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError/MandatoryConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "NotWellModeledSubsetAndMandatoryError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError/MandatoryConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("7d6bcce4-5f44-473a-aa5d-3ed9115cd6c6")]
		public virtual MandatoryConstraint MandatoryConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MandatoryConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, MandatoryConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MandatoryConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MandatoryConstraint of a NotWellModeledSubsetAndMandatoryError
		/// <summary>
		/// Gets MandatoryConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static MandatoryConstraint GetMandatoryConstraint(NotWellModeledSubsetAndMandatoryError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, NotWellModeledSubsetAndMandatoryErrorDomainRoleId) as MandatoryConstraint;
		}
		
		/// <summary>
		/// Sets MandatoryConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetMandatoryConstraint(NotWellModeledSubsetAndMandatoryError element, MandatoryConstraint newMandatoryConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, NotWellModeledSubsetAndMandatoryErrorDomainRoleId, newMandatoryConstraint);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing MandatoryConstraint domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.MandatoryConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.MandatoryConstraint = (MandatoryConstraint)value;
			}
		}
		
		#endregion
		#region NotWellModeledSubsetAndMandatoryError domain role code
		
		/// <summary>
		/// NotWellModeledSubsetAndMandatoryError domain role Id.
		/// </summary>
		public static readonly global::System.Guid NotWellModeledSubsetAndMandatoryErrorDomainRoleId = new global::System.Guid(0x1d06c86d, 0xf4d2, 0x4d52, 0x94, 0xcb, 0x05, 0xb0, 0x62, 0x5b, 0x5a, 0xa0);
		
		/// <summary>
		/// DomainRole NotWellModeledSubsetAndMandatoryError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError.NotWellModeledSubsetAndMandatoryError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError/NotWellModeledSubsetAndMandatoryError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError/NotWellModeledSubsetAndMandatoryError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "MandatoryConstraint", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError/NotWellModeledSubsetAndMandatoryError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("1d06c86d-f4d2-4d52-94cb-05b0625b5aa0")]
		public virtual NotWellModeledSubsetAndMandatoryError NotWellModeledSubsetAndMandatoryError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (NotWellModeledSubsetAndMandatoryError)DslModeling::DomainRoleInfo.GetRolePlayer(this, NotWellModeledSubsetAndMandatoryErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, NotWellModeledSubsetAndMandatoryErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access NotWellModeledSubsetAndMandatoryError of a MandatoryConstraint
		/// <summary>
		/// Gets NotWellModeledSubsetAndMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static NotWellModeledSubsetAndMandatoryError GetNotWellModeledSubsetAndMandatoryError(MandatoryConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, MandatoryConstraintDomainRoleId) as NotWellModeledSubsetAndMandatoryError;
		}
		
		/// <summary>
		/// Sets NotWellModeledSubsetAndMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetNotWellModeledSubsetAndMandatoryError(MandatoryConstraint element, NotWellModeledSubsetAndMandatoryError newNotWellModeledSubsetAndMandatoryError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, MandatoryConstraintDomainRoleId, newNotWellModeledSubsetAndMandatoryError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing NotWellModeledSubsetAndMandatoryError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.NotWellModeledSubsetAndMandatoryError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.NotWellModeledSubsetAndMandatoryError = (NotWellModeledSubsetAndMandatoryError)value;
			}
		}
		
		#endregion
		#region MandatoryConstraint link accessor
		/// <summary>
		/// Get the MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError link to a MandatoryConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError GetLinkToNotWellModeledSubsetAndMandatoryError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraint mandatoryConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError>(mandatoryConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError.MandatoryConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of MandatoryConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region NotWellModeledSubsetAndMandatoryError link accessor
		/// <summary>
		/// Get the MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError link to a NotWellModeledSubsetAndMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError GetLinkToMandatoryConstraint (global::ORMSolutions.ORMArchitect.Core.ObjectModel.NotWellModeledSubsetAndMandatoryError notWellModeledSubsetAndMandatoryErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError>(notWellModeledSubsetAndMandatoryErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError.NotWellModeledSubsetAndMandatoryErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of NotWellModeledSubsetAndMandatoryError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError instance accessors
		
		/// <summary>
		/// Get any MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError links between a given MandatoryConstraint and a NotWellModeledSubsetAndMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.NotWellModeledSubsetAndMandatoryError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError.MandatoryConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError link in links )
			{
				if ( target.Equals(link.NotWellModeledSubsetAndMandatoryError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError link between a given MandatoryConstraintand a NotWellModeledSubsetAndMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.NotWellModeledSubsetAndMandatoryError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError.MandatoryConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError link in links )
			{
				if ( target.Equals(link.NotWellModeledSubsetAndMandatoryError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship MandatoryConstraintHasPopulationMandatoryError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasPopulationMandatoryError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasPopulationMandatoryError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasPopulationMandatoryError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("9a93dd53-8683-47f4-9ee7-4f1f244a218e")]
	public partial class MandatoryConstraintHasPopulationMandatoryError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MandatoryConstraintHasPopulationMandatoryError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9a93dd53, 0x8683, 0x47f4, 0x9e, 0xe7, 0x4f, 0x1f, 0x24, 0x4a, 0x21, 0x8e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MandatoryConstraintHasPopulationMandatoryError link in the same Partition as the given MandatoryConstraint
		/// </summary>
		/// <param name="source">MandatoryConstraint to use as the source of the relationship.</param>
		/// <param name="target">PopulationMandatoryError to use as the target of the relationship.</param>
		public MandatoryConstraintHasPopulationMandatoryError(MandatoryConstraint source, PopulationMandatoryError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MandatoryConstraintHasPopulationMandatoryError.MandatoryConstraintDomainRoleId, source), new DslModeling::RoleAssignment(MandatoryConstraintHasPopulationMandatoryError.PopulationMandatoryErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MandatoryConstraintHasPopulationMandatoryError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MandatoryConstraintHasPopulationMandatoryError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MandatoryConstraintHasPopulationMandatoryError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MandatoryConstraintHasPopulationMandatoryError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MandatoryConstraint domain role code
		
		/// <summary>
		/// MandatoryConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid MandatoryConstraintDomainRoleId = new global::System.Guid(0xaf065878, 0x27b3, 0x456a, 0x9c, 0xd4, 0xe1, 0xb8, 0x1d, 0xff, 0xad, 0x2d);
		
		/// <summary>
		/// DomainRole MandatoryConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasPopulationMandatoryError.MandatoryConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasPopulationMandatoryError/MandatoryConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasPopulationMandatoryError/MandatoryConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "PopulationMandatoryErrorCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasPopulationMandatoryError/MandatoryConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("af065878-27b3-456a-9cd4-e1b81dffad2d")]
		public virtual MandatoryConstraint MandatoryConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MandatoryConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, MandatoryConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MandatoryConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MandatoryConstraint of a PopulationMandatoryError
		/// <summary>
		/// Gets MandatoryConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static MandatoryConstraint GetMandatoryConstraint(PopulationMandatoryError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PopulationMandatoryErrorDomainRoleId) as MandatoryConstraint;
		}
		
		/// <summary>
		/// Sets MandatoryConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetMandatoryConstraint(PopulationMandatoryError element, MandatoryConstraint newMandatoryConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PopulationMandatoryErrorDomainRoleId, newMandatoryConstraint);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing MandatoryConstraint domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.MandatoryConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.MandatoryConstraint = (MandatoryConstraint)value;
			}
		}
		
		#endregion
		#region PopulationMandatoryError domain role code
		
		/// <summary>
		/// PopulationMandatoryError domain role Id.
		/// </summary>
		public static readonly global::System.Guid PopulationMandatoryErrorDomainRoleId = new global::System.Guid(0x35ec4e97, 0x2248, 0x4aa0, 0x85, 0xaf, 0x08, 0x91, 0xed, 0xb7, 0x80, 0x3b);
		
		/// <summary>
		/// DomainRole PopulationMandatoryError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasPopulationMandatoryError.PopulationMandatoryError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasPopulationMandatoryError/PopulationMandatoryError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasPopulationMandatoryError/PopulationMandatoryError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "MandatoryConstraint", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasPopulationMandatoryError/PopulationMandatoryError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("35ec4e97-2248-4aa0-85af-0891edb7803b")]
		public virtual PopulationMandatoryError PopulationMandatoryError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PopulationMandatoryError)DslModeling::DomainRoleInfo.GetRolePlayer(this, PopulationMandatoryErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PopulationMandatoryErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PopulationMandatoryErrorCollection of a MandatoryConstraint
		/// <summary>
		/// Gets a list of PopulationMandatoryErrorCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<PopulationMandatoryError> GetPopulationMandatoryErrorCollection(MandatoryConstraint element)
		{
			return new DslModeling::LinkedElementCollection<PopulationMandatoryError>(element, MandatoryConstraintDomainRoleId);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing PopulationMandatoryError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.PopulationMandatoryError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.PopulationMandatoryError = (PopulationMandatoryError)value;
			}
		}
		
		#endregion
		#region MandatoryConstraint link accessor
		/// <summary>
		/// Get the list of MandatoryConstraintHasPopulationMandatoryError links to a MandatoryConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasPopulationMandatoryError> GetLinksToPopulationMandatoryErrorCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraint mandatoryConstraintInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasPopulationMandatoryError>(mandatoryConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasPopulationMandatoryError.MandatoryConstraintDomainRoleId);
		}
		#endregion
		#region PopulationMandatoryError link accessor
		/// <summary>
		/// Get the MandatoryConstraintHasPopulationMandatoryError link to a PopulationMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasPopulationMandatoryError GetLinkToMandatoryConstraint (global::ORMSolutions.ORMArchitect.Core.ObjectModel.PopulationMandatoryError populationMandatoryErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasPopulationMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasPopulationMandatoryError>(populationMandatoryErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasPopulationMandatoryError.PopulationMandatoryErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of PopulationMandatoryError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MandatoryConstraintHasPopulationMandatoryError instance accessors
		
		/// <summary>
		/// Get any MandatoryConstraintHasPopulationMandatoryError links between a given MandatoryConstraint and a PopulationMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasPopulationMandatoryError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PopulationMandatoryError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasPopulationMandatoryError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasPopulationMandatoryError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasPopulationMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasPopulationMandatoryError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasPopulationMandatoryError.MandatoryConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasPopulationMandatoryError link in links )
			{
				if ( target.Equals(link.PopulationMandatoryError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MandatoryConstraintHasPopulationMandatoryError link between a given MandatoryConstraintand a PopulationMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasPopulationMandatoryError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PopulationMandatoryError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasPopulationMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasPopulationMandatoryError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasPopulationMandatoryError.MandatoryConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasPopulationMandatoryError link in links )
			{
				if ( target.Equals(link.PopulationMandatoryError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ObjectTypeInstanceHasPopulationMandatoryError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("e0f0750e-47cb-44c6-b348-a9a1101475a7")]
	public partial class ObjectTypeInstanceHasPopulationMandatoryError : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ObjectTypeInstanceHasPopulationMandatoryError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe0f0750e, 0x47cb, 0x44c6, 0xb3, 0x48, 0xa9, 0xa1, 0x10, 0x14, 0x75, 0xa7);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ObjectTypeInstanceHasPopulationMandatoryError link in the same Partition as the given ObjectTypeInstance
		/// </summary>
		/// <param name="source">ObjectTypeInstance to use as the source of the relationship.</param>
		/// <param name="target">PopulationMandatoryError to use as the target of the relationship.</param>
		public ObjectTypeInstanceHasPopulationMandatoryError(ObjectTypeInstance source, PopulationMandatoryError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ObjectTypeInstanceHasPopulationMandatoryError.ObjectTypeInstanceDomainRoleId, source), new DslModeling::RoleAssignment(ObjectTypeInstanceHasPopulationMandatoryError.PopulationMandatoryErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectTypeInstanceHasPopulationMandatoryError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectTypeInstanceHasPopulationMandatoryError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectTypeInstanceHasPopulationMandatoryError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectTypeInstanceHasPopulationMandatoryError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ObjectTypeInstance domain role code
		
		/// <summary>
		/// ObjectTypeInstance domain role Id.
		/// </summary>
		public static readonly global::System.Guid ObjectTypeInstanceDomainRoleId = new global::System.Guid(0x4a0b3b52, 0xb579, 0x4e07, 0x97, 0x2c, 0x59, 0xf4, 0xf9, 0x8b, 0xea, 0xc3);
		
		/// <summary>
		/// DomainRole ObjectTypeInstance
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError.ObjectTypeInstance
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError/ObjectTypeInstance.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError/ObjectTypeInstance.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "PopulationMandatoryErrorCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError/ObjectTypeInstance.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("4a0b3b52-b579-4e07-972c-59f4f98beac3")]
		public virtual ObjectTypeInstance ObjectTypeInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectTypeInstance)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjectTypeInstanceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjectTypeInstanceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ObjectTypeInstance of a PopulationMandatoryError
		/// <summary>
		/// Gets ObjectTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ObjectTypeInstance GetObjectTypeInstance(PopulationMandatoryError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PopulationMandatoryErrorDomainRoleId) as ObjectTypeInstance;
		}
		
		/// <summary>
		/// Sets ObjectTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetObjectTypeInstance(PopulationMandatoryError element, ObjectTypeInstance newObjectTypeInstance)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PopulationMandatoryErrorDomainRoleId, newObjectTypeInstance);
		}
		#endregion
		#region PopulationMandatoryError domain role code
		
		/// <summary>
		/// PopulationMandatoryError domain role Id.
		/// </summary>
		public static readonly global::System.Guid PopulationMandatoryErrorDomainRoleId = new global::System.Guid(0x078cf514, 0x9f4c, 0x44c2, 0x91, 0x73, 0x3a, 0x5f, 0x3e, 0xdf, 0xaf, 0xcb);
		
		/// <summary>
		/// DomainRole PopulationMandatoryError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError.PopulationMandatoryError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError/PopulationMandatoryError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError/PopulationMandatoryError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ObjectTypeInstance", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError/PopulationMandatoryError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("078cf514-9f4c-44c2-9173-3a5f3edfafcb")]
		public virtual PopulationMandatoryError PopulationMandatoryError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PopulationMandatoryError)DslModeling::DomainRoleInfo.GetRolePlayer(this, PopulationMandatoryErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PopulationMandatoryErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PopulationMandatoryErrorCollection of a ObjectTypeInstance
		/// <summary>
		/// Gets a list of PopulationMandatoryErrorCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<PopulationMandatoryError> GetPopulationMandatoryErrorCollection(ObjectTypeInstance element)
		{
			return new DslModeling::LinkedElementCollection<PopulationMandatoryError>(element, ObjectTypeInstanceDomainRoleId);
		}
		#endregion
		#region ObjectTypeInstance link accessor
		/// <summary>
		/// Get the list of ObjectTypeInstanceHasPopulationMandatoryError links to a ObjectTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError> GetLinksToPopulationMandatoryErrorCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstance objectTypeInstanceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError>(objectTypeInstanceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError.ObjectTypeInstanceDomainRoleId);
		}
		#endregion
		#region PopulationMandatoryError link accessor
		/// <summary>
		/// Get the ObjectTypeInstanceHasPopulationMandatoryError link to a PopulationMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError GetLinkToObjectTypeInstance (global::ORMSolutions.ORMArchitect.Core.ObjectModel.PopulationMandatoryError populationMandatoryErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError>(populationMandatoryErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError.PopulationMandatoryErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of PopulationMandatoryError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ObjectTypeInstanceHasPopulationMandatoryError instance accessors
		
		/// <summary>
		/// Get any ObjectTypeInstanceHasPopulationMandatoryError links between a given ObjectTypeInstance and a PopulationMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstance source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PopulationMandatoryError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError.ObjectTypeInstanceDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError link in links )
			{
				if ( target.Equals(link.PopulationMandatoryError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ObjectTypeInstanceHasPopulationMandatoryError link between a given ObjectTypeInstanceand a PopulationMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstance source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PopulationMandatoryError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError.ObjectTypeInstanceDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError link in links )
			{
				if ( target.Equals(link.PopulationMandatoryError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ReadingOrderHasReading
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasReading
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasReading.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasReading.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("f945750f-2f77-43f4-8314-e5b351913902")]
	public partial class ReadingOrderHasReading : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ReadingOrderHasReading domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf945750f, 0x2f77, 0x43f4, 0x83, 0x14, 0xe5, 0xb3, 0x51, 0x91, 0x39, 0x02);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ReadingOrderHasReading link in the same Partition as the given ReadingOrder
		/// </summary>
		/// <param name="source">ReadingOrder to use as the source of the relationship.</param>
		/// <param name="target">Reading to use as the target of the relationship.</param>
		public ReadingOrderHasReading(ReadingOrder source, Reading target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ReadingOrderHasReading.ReadingOrderDomainRoleId, source), new DslModeling::RoleAssignment(ReadingOrderHasReading.ReadingDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ReadingOrderHasReading(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ReadingOrderHasReading(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ReadingOrderHasReading(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ReadingOrderHasReading(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ReadingOrder domain role code
		
		/// <summary>
		/// ReadingOrder domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReadingOrderDomainRoleId = new global::System.Guid(0x02c96e32, 0x5a2a, 0x4cfc, 0xab, 0x29, 0xdf, 0x81, 0xb4, 0x0f, 0xf0, 0xce);
		
		/// <summary>
		/// DomainRole ReadingOrder
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasReading.ReadingOrder
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasReading/ReadingOrder.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasReading/ReadingOrder.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ReadingCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasReading/ReadingOrder.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("02c96e32-5a2a-4cfc-ab29-df81b40ff0ce")]
		public virtual ReadingOrder ReadingOrder
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ReadingOrder)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReadingOrderDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReadingOrderDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ReadingOrder of a Reading
		/// <summary>
		/// Gets ReadingOrder.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ReadingOrder GetReadingOrder(Reading element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ReadingDomainRoleId) as ReadingOrder;
		}
		
		/// <summary>
		/// Sets ReadingOrder.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetReadingOrder(Reading element, ReadingOrder newReadingOrder)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ReadingDomainRoleId, newReadingOrder);
		}
		#endregion
		#region Reading domain role code
		
		/// <summary>
		/// Reading domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReadingDomainRoleId = new global::System.Guid(0xdb4abbcb, 0xfcf0, 0x43c9, 0x94, 0xe5, 0xae, 0x45, 0x8b, 0xa6, 0xee, 0x03);
		
		/// <summary>
		/// DomainRole Reading
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasReading.Reading
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasReading/Reading.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasReading/Reading.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ReadingOrder", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasReading/Reading.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("db4abbcb-fcf0-43c9-94e5-ae458ba6ee03")]
		public virtual Reading Reading
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Reading)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReadingDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReadingDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ReadingCollection of a ReadingOrder
		/// <summary>
		/// Gets a list of ReadingCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Reading> GetReadingCollection(ReadingOrder element)
		{
			return new DslModeling::LinkedElementCollection<Reading>(element, ReadingOrderDomainRoleId);
		}
		#endregion
		#region ReadingOrder link accessor
		/// <summary>
		/// Get the list of ReadingOrderHasReading links to a ReadingOrder.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasReading> GetLinksToReadingCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrder readingOrderInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasReading>(readingOrderInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasReading.ReadingOrderDomainRoleId);
		}
		#endregion
		#region Reading link accessor
		/// <summary>
		/// Get the ReadingOrderHasReading link to a Reading.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasReading GetLinkToReadingOrder (global::ORMSolutions.ORMArchitect.Core.ObjectModel.Reading readingInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasReading> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasReading>(readingInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasReading.ReadingDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Reading not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ReadingOrderHasReading instance accessors
		
		/// <summary>
		/// Get any ReadingOrderHasReading links between a given ReadingOrder and a Reading.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasReading> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrder source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Reading target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasReading> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasReading>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasReading> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasReading>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasReading.ReadingOrderDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasReading link in links )
			{
				if ( target.Equals(link.Reading) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ReadingOrderHasReading link between a given ReadingOrderand a Reading.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasReading GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrder source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Reading target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasReading> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasReading>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasReading.ReadingOrderDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasReading link in links )
			{
				if ( target.Equals(link.Reading) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship FactTypeHasReadingOrder
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasReadingOrder
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasReadingOrder.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasReadingOrder.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("14c7d6cb-0c30-4326-a877-d3aee7a9fadf")]
	public partial class FactTypeHasReadingOrder : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FactTypeHasReadingOrder domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x14c7d6cb, 0x0c30, 0x4326, 0xa8, 0x77, 0xd3, 0xae, 0xe7, 0xa9, 0xfa, 0xdf);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FactTypeHasReadingOrder link in the same Partition as the given FactType
		/// </summary>
		/// <param name="source">FactType to use as the source of the relationship.</param>
		/// <param name="target">ReadingOrder to use as the target of the relationship.</param>
		public FactTypeHasReadingOrder(FactType source, ReadingOrder target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FactTypeHasReadingOrder.FactTypeDomainRoleId, source), new DslModeling::RoleAssignment(FactTypeHasReadingOrder.ReadingOrderDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeHasReadingOrder(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeHasReadingOrder(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeHasReadingOrder(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeHasReadingOrder(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region FactType domain role code
		
		/// <summary>
		/// FactType domain role Id.
		/// </summary>
		public static readonly global::System.Guid FactTypeDomainRoleId = new global::System.Guid(0xd77a6514, 0xb8f0, 0x4c0c, 0xb8, 0x56, 0xee, 0x74, 0xdb, 0xbc, 0x1c, 0x41);
		
		/// <summary>
		/// DomainRole FactType
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasReadingOrder.FactType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasReadingOrder/FactType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasReadingOrder/FactType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ReadingOrderCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasReadingOrder/FactType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("d77a6514-b8f0-4c0c-b856-ee74dbbc1c41")]
		public virtual FactType FactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FactType)DslModeling::DomainRoleInfo.GetRolePlayer(this, FactTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FactTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FactType of a ReadingOrder
		/// <summary>
		/// Gets FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FactType GetFactType(ReadingOrder element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ReadingOrderDomainRoleId) as FactType;
		}
		
		/// <summary>
		/// Sets FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFactType(ReadingOrder element, FactType newFactType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ReadingOrderDomainRoleId, newFactType);
		}
		#endregion
		#region ReadingOrder domain role code
		
		/// <summary>
		/// ReadingOrder domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReadingOrderDomainRoleId = new global::System.Guid(0x53267e0c, 0xc487, 0x4cb6, 0xb2, 0xfd, 0x98, 0x0c, 0xa3, 0x0f, 0xfe, 0x99);
		
		/// <summary>
		/// DomainRole ReadingOrder
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasReadingOrder.ReadingOrder
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasReadingOrder/ReadingOrder.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasReadingOrder/ReadingOrder.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FactType", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasReadingOrder/ReadingOrder.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("53267e0c-c487-4cb6-b2fd-980ca30ffe99")]
		public virtual ReadingOrder ReadingOrder
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ReadingOrder)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReadingOrderDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReadingOrderDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ReadingOrderCollection of a FactType
		/// <summary>
		/// Gets a list of ReadingOrderCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ReadingOrder> GetReadingOrderCollection(FactType element)
		{
			return new DslModeling::LinkedElementCollection<ReadingOrder>(element, FactTypeDomainRoleId);
		}
		#endregion
		#region FactType link accessor
		/// <summary>
		/// Get the list of FactTypeHasReadingOrder links to a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasReadingOrder> GetLinksToReadingOrderCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType factTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasReadingOrder>(factTypeInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasReadingOrder.FactTypeDomainRoleId);
		}
		#endregion
		#region ReadingOrder link accessor
		/// <summary>
		/// Get the FactTypeHasReadingOrder link to a ReadingOrder.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasReadingOrder GetLinkToFactType (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrder readingOrderInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasReadingOrder> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasReadingOrder>(readingOrderInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasReadingOrder.ReadingOrderDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ReadingOrder not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FactTypeHasReadingOrder instance accessors
		
		/// <summary>
		/// Get any FactTypeHasReadingOrder links between a given FactType and a ReadingOrder.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasReadingOrder> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrder target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasReadingOrder> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasReadingOrder>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasReadingOrder> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasReadingOrder>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasReadingOrder.FactTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasReadingOrder link in links )
			{
				if ( target.Equals(link.ReadingOrder) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FactTypeHasReadingOrder link between a given FactTypeand a ReadingOrder.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasReadingOrder GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrder target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasReadingOrder> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasReadingOrder>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasReadingOrder.FactTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasReadingOrder link in links )
			{
				if ( target.Equals(link.ReadingOrder) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ReferenceModeHasReferenceModeKind
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeHasReferenceModeKind
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeHasReferenceModeKind.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeHasReferenceModeKind.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("8b022051-e094-435e-b985-688ffc89dc6d")]
	public partial class ReferenceModeHasReferenceModeKind : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ReferenceModeHasReferenceModeKind domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8b022051, 0xe094, 0x435e, 0xb9, 0x85, 0x68, 0x8f, 0xfc, 0x89, 0xdc, 0x6d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ReferenceModeHasReferenceModeKind link in the same Partition as the given ReferenceMode
		/// </summary>
		/// <param name="source">ReferenceMode to use as the source of the relationship.</param>
		/// <param name="target">ReferenceModeKind to use as the target of the relationship.</param>
		public ReferenceModeHasReferenceModeKind(ReferenceMode source, ReferenceModeKind target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ReferenceModeHasReferenceModeKind.ReferenceModeDomainRoleId, source), new DslModeling::RoleAssignment(ReferenceModeHasReferenceModeKind.KindDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ReferenceModeHasReferenceModeKind(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ReferenceModeHasReferenceModeKind(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ReferenceModeHasReferenceModeKind(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ReferenceModeHasReferenceModeKind(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ReferenceMode domain role code
		
		/// <summary>
		/// ReferenceMode domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReferenceModeDomainRoleId = new global::System.Guid(0x67f35299, 0xd67f, 0x4ae2, 0x91, 0x59, 0xe5, 0xef, 0xf1, 0xff, 0x85, 0x44);
		
		/// <summary>
		/// DomainRole ReferenceMode
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeHasReferenceModeKind.ReferenceMode
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeHasReferenceModeKind/ReferenceMode.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeHasReferenceModeKind/ReferenceMode.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Kind", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeHasReferenceModeKind/ReferenceMode.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("67f35299-d67f-4ae2-9159-e5eff1ff8544")]
		public virtual ReferenceMode ReferenceMode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ReferenceMode)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReferenceModeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReferenceModeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ReferenceModeCollection of a ReferenceModeKind
		/// <summary>
		/// Gets a list of ReferenceModeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ReferenceMode> GetReferenceModeCollection(ReferenceModeKind element)
		{
			return new DslModeling::LinkedElementCollection<ReferenceMode>(element, KindDomainRoleId);
		}
		#endregion
		#region Kind domain role code
		
		/// <summary>
		/// Kind domain role Id.
		/// </summary>
		public static readonly global::System.Guid KindDomainRoleId = new global::System.Guid(0xcd7ed96f, 0xddb9, 0x4242, 0x94, 0xcf, 0xb1, 0x02, 0x55, 0x82, 0x2f, 0x66);
		
		/// <summary>
		/// DomainRole Kind
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeHasReferenceModeKind.Kind
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeHasReferenceModeKind/Kind.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeHasReferenceModeKind/Kind.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ReferenceModeCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeHasReferenceModeKind/Kind.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("cd7ed96f-ddb9-4242-94cf-b10255822f66")]
		public virtual ReferenceModeKind Kind
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ReferenceModeKind)DslModeling::DomainRoleInfo.GetRolePlayer(this, KindDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, KindDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Kind of a ReferenceMode
		/// <summary>
		/// Gets Kind.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ReferenceModeKind GetKind(ReferenceMode element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ReferenceModeDomainRoleId) as ReferenceModeKind;
		}
		
		/// <summary>
		/// Sets Kind.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetKind(ReferenceMode element, ReferenceModeKind newKind)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ReferenceModeDomainRoleId, newKind);
		}
		#endregion
		#region ReferenceMode link accessor
		/// <summary>
		/// Get the ReferenceModeHasReferenceModeKind link to a ReferenceMode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeHasReferenceModeKind GetLinkToKind (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceMode referenceModeInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeHasReferenceModeKind> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeHasReferenceModeKind>(referenceModeInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeHasReferenceModeKind.ReferenceModeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ReferenceMode not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Kind link accessor
		/// <summary>
		/// Get the list of ReferenceModeHasReferenceModeKind links to a ReferenceModeKind.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeHasReferenceModeKind> GetLinksToReferenceModeCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeKind kindInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeHasReferenceModeKind>(kindInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeHasReferenceModeKind.KindDomainRoleId);
		}
		#endregion
		#region ReferenceModeHasReferenceModeKind instance accessors
		
		/// <summary>
		/// Get any ReferenceModeHasReferenceModeKind links between a given ReferenceMode and a ReferenceModeKind.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeHasReferenceModeKind> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceMode source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeKind target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeHasReferenceModeKind> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeHasReferenceModeKind>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeHasReferenceModeKind> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeHasReferenceModeKind>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeHasReferenceModeKind.ReferenceModeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeHasReferenceModeKind link in links )
			{
				if ( target.Equals(link.Kind) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ReferenceModeHasReferenceModeKind link between a given ReferenceModeand a ReferenceModeKind.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeHasReferenceModeKind GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceMode source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeKind target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeHasReferenceModeKind> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeHasReferenceModeKind>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeHasReferenceModeKind.ReferenceModeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeHasReferenceModeKind link in links )
			{
				if ( target.Equals(link.Kind) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship SetConstraintHasDuplicateNameError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDuplicateNameError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDuplicateNameError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDuplicateNameError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("cb5df90f-3917-4bd1-9807-a24f6d7c52f9")]
	public partial class SetConstraintHasDuplicateNameError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SetConstraintHasDuplicateNameError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xcb5df90f, 0x3917, 0x4bd1, 0x98, 0x07, 0xa2, 0x4f, 0x6d, 0x7c, 0x52, 0xf9);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SetConstraintHasDuplicateNameError link in the same Partition as the given SetConstraint
		/// </summary>
		/// <param name="source">SetConstraint to use as the source of the relationship.</param>
		/// <param name="target">ConstraintDuplicateNameError to use as the target of the relationship.</param>
		public SetConstraintHasDuplicateNameError(SetConstraint source, ConstraintDuplicateNameError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SetConstraintHasDuplicateNameError.SetConstraintDomainRoleId, source), new DslModeling::RoleAssignment(SetConstraintHasDuplicateNameError.DuplicateNameErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetConstraintHasDuplicateNameError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetConstraintHasDuplicateNameError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetConstraintHasDuplicateNameError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetConstraintHasDuplicateNameError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SetConstraint domain role code
		
		/// <summary>
		/// SetConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid SetConstraintDomainRoleId = new global::System.Guid(0xb4623963, 0x690d, 0x4687, 0xa9, 0x5e, 0x0f, 0xc9, 0x98, 0xaa, 0x59, 0xec);
		
		/// <summary>
		/// DomainRole SetConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDuplicateNameError.SetConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDuplicateNameError/SetConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDuplicateNameError/SetConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DuplicateNameError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDuplicateNameError/SetConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("b4623963-690d-4687-a95e-0fc998aa59ec")]
		public virtual SetConstraint SetConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SetConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SetConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SetConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SetConstraintCollection of a ConstraintDuplicateNameError
		/// <summary>
		/// Gets a list of SetConstraintCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SetConstraint> GetSetConstraintCollection(ConstraintDuplicateNameError element)
		{
			return new DslModeling::LinkedElementCollection<SetConstraint>(element, DuplicateNameErrorDomainRoleId);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing SetConstraint domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.SetConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.SetConstraint = (SetConstraint)value;
			}
		}
		
		#endregion
		#region DuplicateNameError domain role code
		
		/// <summary>
		/// DuplicateNameError domain role Id.
		/// </summary>
		public static readonly global::System.Guid DuplicateNameErrorDomainRoleId = new global::System.Guid(0x250acf2e, 0x45f0, 0x48b9, 0x84, 0x29, 0x21, 0x85, 0x9d, 0xcb, 0x70, 0x1c);
		
		/// <summary>
		/// DomainRole DuplicateNameError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDuplicateNameError.DuplicateNameError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDuplicateNameError/DuplicateNameError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDuplicateNameError/DuplicateNameError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SetConstraintCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDuplicateNameError/DuplicateNameError.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("250acf2e-45f0-48b9-8429-21859dcb701c")]
		public virtual ConstraintDuplicateNameError DuplicateNameError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConstraintDuplicateNameError)DslModeling::DomainRoleInfo.GetRolePlayer(this, DuplicateNameErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DuplicateNameErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DuplicateNameError of a SetConstraint
		/// <summary>
		/// Gets DuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ConstraintDuplicateNameError GetDuplicateNameError(SetConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SetConstraintDomainRoleId) as ConstraintDuplicateNameError;
		}
		
		/// <summary>
		/// Sets DuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDuplicateNameError(SetConstraint element, ConstraintDuplicateNameError newDuplicateNameError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SetConstraintDomainRoleId, newDuplicateNameError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing DuplicateNameError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.DuplicateNameError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.DuplicateNameError = (ConstraintDuplicateNameError)value;
			}
		}
		
		#endregion
		#region SetConstraint link accessor
		/// <summary>
		/// Get the SetConstraintHasDuplicateNameError link to a SetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDuplicateNameError GetLinkToDuplicateNameError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint setConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDuplicateNameError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDuplicateNameError>(setConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDuplicateNameError.SetConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SetConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DuplicateNameError link accessor
		/// <summary>
		/// Get the list of SetConstraintHasDuplicateNameError links to a ConstraintDuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDuplicateNameError> GetLinksToSetConstraintCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintDuplicateNameError duplicateNameErrorInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDuplicateNameError>(duplicateNameErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDuplicateNameError.DuplicateNameErrorDomainRoleId);
		}
		#endregion
		#region SetConstraintHasDuplicateNameError instance accessors
		
		/// <summary>
		/// Get any SetConstraintHasDuplicateNameError links between a given SetConstraint and a ConstraintDuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDuplicateNameError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintDuplicateNameError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDuplicateNameError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDuplicateNameError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDuplicateNameError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDuplicateNameError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDuplicateNameError.SetConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDuplicateNameError link in links )
			{
				if ( target.Equals(link.DuplicateNameError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SetConstraintHasDuplicateNameError link between a given SetConstraintand a ConstraintDuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDuplicateNameError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintDuplicateNameError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDuplicateNameError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDuplicateNameError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDuplicateNameError.SetConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDuplicateNameError link in links )
			{
				if ( target.Equals(link.DuplicateNameError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship SetComparisonConstraintHasDuplicateNameError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDuplicateNameError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDuplicateNameError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDuplicateNameError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("cf7af531-f3d3-42e4-a9f7-d44536da9e53")]
	public partial class SetComparisonConstraintHasDuplicateNameError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SetComparisonConstraintHasDuplicateNameError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xcf7af531, 0xf3d3, 0x42e4, 0xa9, 0xf7, 0xd4, 0x45, 0x36, 0xda, 0x9e, 0x53);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SetComparisonConstraintHasDuplicateNameError link in the same Partition as the given SetComparisonConstraint
		/// </summary>
		/// <param name="source">SetComparisonConstraint to use as the source of the relationship.</param>
		/// <param name="target">ConstraintDuplicateNameError to use as the target of the relationship.</param>
		public SetComparisonConstraintHasDuplicateNameError(SetComparisonConstraint source, ConstraintDuplicateNameError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SetComparisonConstraintHasDuplicateNameError.SetComparisonConstraintDomainRoleId, source), new DslModeling::RoleAssignment(SetComparisonConstraintHasDuplicateNameError.DuplicateNameErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetComparisonConstraintHasDuplicateNameError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetComparisonConstraintHasDuplicateNameError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetComparisonConstraintHasDuplicateNameError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetComparisonConstraintHasDuplicateNameError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SetComparisonConstraint domain role code
		
		/// <summary>
		/// SetComparisonConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid SetComparisonConstraintDomainRoleId = new global::System.Guid(0x86a9cb44, 0x0050, 0x4e7c, 0x9d, 0xf5, 0x69, 0x2f, 0x98, 0x0f, 0x96, 0xec);
		
		/// <summary>
		/// DomainRole SetComparisonConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDuplicateNameError.SetComparisonConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDuplicateNameError/SetComparisonConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDuplicateNameError/SetComparisonConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DuplicateNameError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDuplicateNameError/SetComparisonConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("86a9cb44-0050-4e7c-9df5-692f980f96ec")]
		public virtual SetComparisonConstraint SetComparisonConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SetComparisonConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SetComparisonConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SetComparisonConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SetComparisonConstraintCollection of a ConstraintDuplicateNameError
		/// <summary>
		/// Gets a list of SetComparisonConstraintCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SetComparisonConstraint> GetSetComparisonConstraintCollection(ConstraintDuplicateNameError element)
		{
			return new DslModeling::LinkedElementCollection<SetComparisonConstraint>(element, DuplicateNameErrorDomainRoleId);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing SetComparisonConstraint domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.SetComparisonConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.SetComparisonConstraint = (SetComparisonConstraint)value;
			}
		}
		
		#endregion
		#region DuplicateNameError domain role code
		
		/// <summary>
		/// DuplicateNameError domain role Id.
		/// </summary>
		public static readonly global::System.Guid DuplicateNameErrorDomainRoleId = new global::System.Guid(0x1711998f, 0x52c3, 0x4bc4, 0x9f, 0x95, 0x02, 0x58, 0x9c, 0x1b, 0x30, 0x1e);
		
		/// <summary>
		/// DomainRole DuplicateNameError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDuplicateNameError.DuplicateNameError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDuplicateNameError/DuplicateNameError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDuplicateNameError/DuplicateNameError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SetComparisonConstraintCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDuplicateNameError/DuplicateNameError.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("1711998f-52c3-4bc4-9f95-02589c1b301e")]
		public virtual ConstraintDuplicateNameError DuplicateNameError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConstraintDuplicateNameError)DslModeling::DomainRoleInfo.GetRolePlayer(this, DuplicateNameErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DuplicateNameErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DuplicateNameError of a SetComparisonConstraint
		/// <summary>
		/// Gets DuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ConstraintDuplicateNameError GetDuplicateNameError(SetComparisonConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SetComparisonConstraintDomainRoleId) as ConstraintDuplicateNameError;
		}
		
		/// <summary>
		/// Sets DuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDuplicateNameError(SetComparisonConstraint element, ConstraintDuplicateNameError newDuplicateNameError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SetComparisonConstraintDomainRoleId, newDuplicateNameError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing DuplicateNameError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.DuplicateNameError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.DuplicateNameError = (ConstraintDuplicateNameError)value;
			}
		}
		
		#endregion
		#region SetComparisonConstraint link accessor
		/// <summary>
		/// Get the SetComparisonConstraintHasDuplicateNameError link to a SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDuplicateNameError GetLinkToDuplicateNameError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint setComparisonConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDuplicateNameError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDuplicateNameError>(setComparisonConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDuplicateNameError.SetComparisonConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SetComparisonConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DuplicateNameError link accessor
		/// <summary>
		/// Get the list of SetComparisonConstraintHasDuplicateNameError links to a ConstraintDuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDuplicateNameError> GetLinksToSetComparisonConstraintCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintDuplicateNameError duplicateNameErrorInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDuplicateNameError>(duplicateNameErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDuplicateNameError.DuplicateNameErrorDomainRoleId);
		}
		#endregion
		#region SetComparisonConstraintHasDuplicateNameError instance accessors
		
		/// <summary>
		/// Get any SetComparisonConstraintHasDuplicateNameError links between a given SetComparisonConstraint and a ConstraintDuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDuplicateNameError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintDuplicateNameError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDuplicateNameError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDuplicateNameError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDuplicateNameError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDuplicateNameError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDuplicateNameError.SetComparisonConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDuplicateNameError link in links )
			{
				if ( target.Equals(link.DuplicateNameError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SetComparisonConstraintHasDuplicateNameError link between a given SetComparisonConstraintand a ConstraintDuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDuplicateNameError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintDuplicateNameError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDuplicateNameError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDuplicateNameError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDuplicateNameError.SetComparisonConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDuplicateNameError link in links )
			{
				if ( target.Equals(link.DuplicateNameError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship EntityTypeHasPreferredIdentifier
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasPreferredIdentifier
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasPreferredIdentifier.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasPreferredIdentifier.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("8ff87866-8213-4a03-85a8-b0275a265793")]
	public partial class EntityTypeHasPreferredIdentifier : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityTypeHasPreferredIdentifier domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8ff87866, 0x8213, 0x4a03, 0x85, 0xa8, 0xb0, 0x27, 0x5a, 0x26, 0x57, 0x93);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityTypeHasPreferredIdentifier link in the same Partition as the given ObjectType
		/// </summary>
		/// <param name="source">ObjectType to use as the source of the relationship.</param>
		/// <param name="target">UniquenessConstraint to use as the target of the relationship.</param>
		public EntityTypeHasPreferredIdentifier(ObjectType source, UniquenessConstraint target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityTypeHasPreferredIdentifier.PreferredIdentifierForDomainRoleId, source), new DslModeling::RoleAssignment(EntityTypeHasPreferredIdentifier.PreferredIdentifierDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityTypeHasPreferredIdentifier(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityTypeHasPreferredIdentifier(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityTypeHasPreferredIdentifier(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityTypeHasPreferredIdentifier(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region PreferredIdentifierFor domain role code
		
		/// <summary>
		/// PreferredIdentifierFor domain role Id.
		/// </summary>
		public static readonly global::System.Guid PreferredIdentifierForDomainRoleId = new global::System.Guid(0x04d998ee, 0x030e, 0x4a81, 0x88, 0xbc, 0x66, 0x6c, 0xe4, 0xef, 0xb3, 0xed);
		
		/// <summary>
		/// DomainRole PreferredIdentifierFor
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifierFor
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasPreferredIdentifier/PreferredIdentifierFor.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasPreferredIdentifier/PreferredIdentifierFor.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "PreferredIdentifier", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasPreferredIdentifier/PreferredIdentifierFor.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("04d998ee-030e-4a81-88bc-666ce4efb3ed")]
		public virtual ObjectType PreferredIdentifierFor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, PreferredIdentifierForDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PreferredIdentifierForDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PreferredIdentifierFor of a UniquenessConstraint
		/// <summary>
		/// Gets PreferredIdentifierFor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ObjectType GetPreferredIdentifierFor(UniquenessConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PreferredIdentifierDomainRoleId) as ObjectType;
		}
		
		/// <summary>
		/// Sets PreferredIdentifierFor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetPreferredIdentifierFor(UniquenessConstraint element, ObjectType newPreferredIdentifierFor)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PreferredIdentifierDomainRoleId, newPreferredIdentifierFor);
		}
		#endregion
		#region PreferredIdentifier domain role code
		
		/// <summary>
		/// PreferredIdentifier domain role Id.
		/// </summary>
		public static readonly global::System.Guid PreferredIdentifierDomainRoleId = new global::System.Guid(0x6195ce84, 0x7ca8, 0x4e13, 0xb8, 0xc8, 0x24, 0x43, 0x8e, 0x2c, 0xf3, 0x00);
		
		/// <summary>
		/// DomainRole PreferredIdentifier
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifier
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasPreferredIdentifier/PreferredIdentifier.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasPreferredIdentifier/PreferredIdentifier.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "PreferredIdentifierFor", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasPreferredIdentifier/PreferredIdentifier.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("6195ce84-7ca8-4e13-b8c8-24438e2cf300")]
		public virtual UniquenessConstraint PreferredIdentifier
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (UniquenessConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, PreferredIdentifierDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PreferredIdentifierDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PreferredIdentifier of a ObjectType
		/// <summary>
		/// Gets PreferredIdentifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static UniquenessConstraint GetPreferredIdentifier(ObjectType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PreferredIdentifierForDomainRoleId) as UniquenessConstraint;
		}
		
		/// <summary>
		/// Sets PreferredIdentifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetPreferredIdentifier(ObjectType element, UniquenessConstraint newPreferredIdentifier)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PreferredIdentifierForDomainRoleId, newPreferredIdentifier);
		}
		#endregion
		#region PreferredIdentifierFor link accessor
		/// <summary>
		/// Get the EntityTypeHasPreferredIdentifier link to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasPreferredIdentifier GetLinkToPreferredIdentifier (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType preferredIdentifierForInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasPreferredIdentifier> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasPreferredIdentifier>(preferredIdentifierForInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifierForDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of PreferredIdentifierFor not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region PreferredIdentifier link accessor
		/// <summary>
		/// Get the EntityTypeHasPreferredIdentifier link to a UniquenessConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasPreferredIdentifier GetLinkToPreferredIdentifierFor (global::ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraint preferredIdentifierInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasPreferredIdentifier> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasPreferredIdentifier>(preferredIdentifierInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifierDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of PreferredIdentifier not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EntityTypeHasPreferredIdentifier instance accessors
		
		/// <summary>
		/// Get any EntityTypeHasPreferredIdentifier links between a given ObjectType and a UniquenessConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasPreferredIdentifier> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraint target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasPreferredIdentifier> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasPreferredIdentifier>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasPreferredIdentifier> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasPreferredIdentifier>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifierForDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasPreferredIdentifier link in links )
			{
				if ( target.Equals(link.PreferredIdentifier) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityTypeHasPreferredIdentifier link between a given ObjectTypeand a UniquenessConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasPreferredIdentifier GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraint target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasPreferredIdentifier> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasPreferredIdentifier>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifierForDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasPreferredIdentifier link in links )
			{
				if ( target.Equals(link.PreferredIdentifier) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ReadingHasTooManyRolesError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooManyRolesError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooManyRolesError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooManyRolesError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("d2116bc7-25a8-455e-9347-414bd03b7546")]
	public partial class ReadingHasTooManyRolesError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ReadingHasTooManyRolesError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd2116bc7, 0x25a8, 0x455e, 0x93, 0x47, 0x41, 0x4b, 0xd0, 0x3b, 0x75, 0x46);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ReadingHasTooManyRolesError link in the same Partition as the given Reading
		/// </summary>
		/// <param name="source">Reading to use as the source of the relationship.</param>
		/// <param name="target">TooManyReadingRolesError to use as the target of the relationship.</param>
		public ReadingHasTooManyRolesError(Reading source, TooManyReadingRolesError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ReadingHasTooManyRolesError.ReadingDomainRoleId, source), new DslModeling::RoleAssignment(ReadingHasTooManyRolesError.TooManyRolesErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ReadingHasTooManyRolesError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ReadingHasTooManyRolesError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ReadingHasTooManyRolesError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ReadingHasTooManyRolesError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Reading domain role code
		
		/// <summary>
		/// Reading domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReadingDomainRoleId = new global::System.Guid(0xaa517583, 0x0a1b, 0x4129, 0x90, 0x5e, 0xa9, 0xee, 0x3f, 0x59, 0xee, 0x17);
		
		/// <summary>
		/// DomainRole Reading
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooManyRolesError.Reading
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooManyRolesError/Reading.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooManyRolesError/Reading.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TooManyRolesError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooManyRolesError/Reading.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("aa517583-0a1b-4129-905e-a9ee3f59ee17")]
		public virtual Reading Reading
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Reading)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReadingDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReadingDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Reading of a TooManyReadingRolesError
		/// <summary>
		/// Gets Reading.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Reading GetReading(TooManyReadingRolesError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TooManyRolesErrorDomainRoleId) as Reading;
		}
		
		/// <summary>
		/// Sets Reading.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetReading(TooManyReadingRolesError element, Reading newReading)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TooManyRolesErrorDomainRoleId, newReading);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing Reading domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.Reading;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.Reading = (Reading)value;
			}
		}
		
		#endregion
		#region TooManyRolesError domain role code
		
		/// <summary>
		/// TooManyRolesError domain role Id.
		/// </summary>
		public static readonly global::System.Guid TooManyRolesErrorDomainRoleId = new global::System.Guid(0x50d39649, 0x4bf7, 0x411b, 0xb6, 0xb5, 0x10, 0x23, 0x77, 0x34, 0x43, 0x79);
		
		/// <summary>
		/// DomainRole TooManyRolesError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooManyRolesError.TooManyRolesError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooManyRolesError/TooManyRolesError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooManyRolesError/TooManyRolesError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Reading", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooManyRolesError/TooManyRolesError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("50d39649-4bf7-411b-b6b5-102377344379")]
		public virtual TooManyReadingRolesError TooManyRolesError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TooManyReadingRolesError)DslModeling::DomainRoleInfo.GetRolePlayer(this, TooManyRolesErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TooManyRolesErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TooManyRolesError of a Reading
		/// <summary>
		/// Gets TooManyRolesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static TooManyReadingRolesError GetTooManyRolesError(Reading element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ReadingDomainRoleId) as TooManyReadingRolesError;
		}
		
		/// <summary>
		/// Sets TooManyRolesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTooManyRolesError(Reading element, TooManyReadingRolesError newTooManyRolesError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ReadingDomainRoleId, newTooManyRolesError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing TooManyRolesError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.TooManyRolesError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.TooManyRolesError = (TooManyReadingRolesError)value;
			}
		}
		
		#endregion
		#region Reading link accessor
		/// <summary>
		/// Get the ReadingHasTooManyRolesError link to a Reading.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooManyRolesError GetLinkToTooManyRolesError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.Reading readingInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooManyRolesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooManyRolesError>(readingInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooManyRolesError.ReadingDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Reading not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TooManyRolesError link accessor
		/// <summary>
		/// Get the ReadingHasTooManyRolesError link to a TooManyReadingRolesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooManyRolesError GetLinkToReading (global::ORMSolutions.ORMArchitect.Core.ObjectModel.TooManyReadingRolesError tooManyRolesErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooManyRolesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooManyRolesError>(tooManyRolesErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooManyRolesError.TooManyRolesErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TooManyRolesError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ReadingHasTooManyRolesError instance accessors
		
		/// <summary>
		/// Get any ReadingHasTooManyRolesError links between a given Reading and a TooManyReadingRolesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooManyRolesError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.Reading source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.TooManyReadingRolesError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooManyRolesError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooManyRolesError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooManyRolesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooManyRolesError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooManyRolesError.ReadingDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooManyRolesError link in links )
			{
				if ( target.Equals(link.TooManyRolesError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ReadingHasTooManyRolesError link between a given Readingand a TooManyReadingRolesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooManyRolesError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.Reading source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.TooManyReadingRolesError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooManyRolesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooManyRolesError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooManyRolesError.ReadingDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooManyRolesError link in links )
			{
				if ( target.Equals(link.TooManyRolesError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ReadingHasTooFewRolesError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooFewRolesError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooFewRolesError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooFewRolesError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("fc3e0a3c-40ce-4ded-8a6b-241c7b51c099")]
	public partial class ReadingHasTooFewRolesError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ReadingHasTooFewRolesError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfc3e0a3c, 0x40ce, 0x4ded, 0x8a, 0x6b, 0x24, 0x1c, 0x7b, 0x51, 0xc0, 0x99);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ReadingHasTooFewRolesError link in the same Partition as the given Reading
		/// </summary>
		/// <param name="source">Reading to use as the source of the relationship.</param>
		/// <param name="target">TooFewReadingRolesError to use as the target of the relationship.</param>
		public ReadingHasTooFewRolesError(Reading source, TooFewReadingRolesError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ReadingHasTooFewRolesError.ReadingDomainRoleId, source), new DslModeling::RoleAssignment(ReadingHasTooFewRolesError.TooFewRolesErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ReadingHasTooFewRolesError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ReadingHasTooFewRolesError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ReadingHasTooFewRolesError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ReadingHasTooFewRolesError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Reading domain role code
		
		/// <summary>
		/// Reading domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReadingDomainRoleId = new global::System.Guid(0x3a9889aa, 0x6152, 0x4e1e, 0xa1, 0xec, 0xb1, 0x00, 0xad, 0x24, 0xa6, 0x0a);
		
		/// <summary>
		/// DomainRole Reading
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooFewRolesError.Reading
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooFewRolesError/Reading.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooFewRolesError/Reading.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TooFewRolesError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooFewRolesError/Reading.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("3a9889aa-6152-4e1e-a1ec-b100ad24a60a")]
		public virtual Reading Reading
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Reading)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReadingDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReadingDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Reading of a TooFewReadingRolesError
		/// <summary>
		/// Gets Reading.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Reading GetReading(TooFewReadingRolesError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TooFewRolesErrorDomainRoleId) as Reading;
		}
		
		/// <summary>
		/// Sets Reading.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetReading(TooFewReadingRolesError element, Reading newReading)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TooFewRolesErrorDomainRoleId, newReading);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing Reading domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.Reading;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.Reading = (Reading)value;
			}
		}
		
		#endregion
		#region TooFewRolesError domain role code
		
		/// <summary>
		/// TooFewRolesError domain role Id.
		/// </summary>
		public static readonly global::System.Guid TooFewRolesErrorDomainRoleId = new global::System.Guid(0x19bfcfe6, 0xec81, 0x48dc, 0x9b, 0x4e, 0xd0, 0x26, 0xf1, 0x04, 0x0a, 0xe1);
		
		/// <summary>
		/// DomainRole TooFewRolesError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooFewRolesError.TooFewRolesError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooFewRolesError/TooFewRolesError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooFewRolesError/TooFewRolesError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Reading", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooFewRolesError/TooFewRolesError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("19bfcfe6-ec81-48dc-9b4e-d026f1040ae1")]
		public virtual TooFewReadingRolesError TooFewRolesError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TooFewReadingRolesError)DslModeling::DomainRoleInfo.GetRolePlayer(this, TooFewRolesErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TooFewRolesErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TooFewRolesError of a Reading
		/// <summary>
		/// Gets TooFewRolesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static TooFewReadingRolesError GetTooFewRolesError(Reading element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ReadingDomainRoleId) as TooFewReadingRolesError;
		}
		
		/// <summary>
		/// Sets TooFewRolesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTooFewRolesError(Reading element, TooFewReadingRolesError newTooFewRolesError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ReadingDomainRoleId, newTooFewRolesError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing TooFewRolesError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.TooFewRolesError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.TooFewRolesError = (TooFewReadingRolesError)value;
			}
		}
		
		#endregion
		#region Reading link accessor
		/// <summary>
		/// Get the ReadingHasTooFewRolesError link to a Reading.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooFewRolesError GetLinkToTooFewRolesError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.Reading readingInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooFewRolesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooFewRolesError>(readingInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooFewRolesError.ReadingDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Reading not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TooFewRolesError link accessor
		/// <summary>
		/// Get the ReadingHasTooFewRolesError link to a TooFewReadingRolesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooFewRolesError GetLinkToReading (global::ORMSolutions.ORMArchitect.Core.ObjectModel.TooFewReadingRolesError tooFewRolesErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooFewRolesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooFewRolesError>(tooFewRolesErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooFewRolesError.TooFewRolesErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TooFewRolesError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ReadingHasTooFewRolesError instance accessors
		
		/// <summary>
		/// Get any ReadingHasTooFewRolesError links between a given Reading and a TooFewReadingRolesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooFewRolesError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.Reading source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.TooFewReadingRolesError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooFewRolesError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooFewRolesError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooFewRolesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooFewRolesError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooFewRolesError.ReadingDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooFewRolesError link in links )
			{
				if ( target.Equals(link.TooFewRolesError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ReadingHasTooFewRolesError link between a given Readingand a TooFewReadingRolesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooFewRolesError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.Reading source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.TooFewReadingRolesError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooFewRolesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooFewRolesError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooFewRolesError.ReadingDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooFewRolesError link in links )
			{
				if ( target.Equals(link.TooFewRolesError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ReadingHasReadingRequiresUserModificationError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasReadingRequiresUserModificationError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasReadingRequiresUserModificationError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasReadingRequiresUserModificationError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("3b7e4bbf-06b6-489e-bdf5-72edee5b87f4")]
	public partial class ReadingHasReadingRequiresUserModificationError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ReadingHasReadingRequiresUserModificationError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3b7e4bbf, 0x06b6, 0x489e, 0xbd, 0xf5, 0x72, 0xed, 0xee, 0x5b, 0x87, 0xf4);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ReadingHasReadingRequiresUserModificationError link in the same Partition as the given Reading
		/// </summary>
		/// <param name="source">Reading to use as the source of the relationship.</param>
		/// <param name="target">ReadingRequiresUserModificationError to use as the target of the relationship.</param>
		public ReadingHasReadingRequiresUserModificationError(Reading source, ReadingRequiresUserModificationError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ReadingHasReadingRequiresUserModificationError.ReadingDomainRoleId, source), new DslModeling::RoleAssignment(ReadingHasReadingRequiresUserModificationError.RequiresUserModificationErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ReadingHasReadingRequiresUserModificationError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ReadingHasReadingRequiresUserModificationError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ReadingHasReadingRequiresUserModificationError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ReadingHasReadingRequiresUserModificationError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Reading domain role code
		
		/// <summary>
		/// Reading domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReadingDomainRoleId = new global::System.Guid(0x1258a048, 0x1355, 0x406c, 0xa9, 0xf4, 0x49, 0xbc, 0xf7, 0x04, 0x92, 0x7f);
		
		/// <summary>
		/// DomainRole Reading
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasReadingRequiresUserModificationError.Reading
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasReadingRequiresUserModificationError/Reading.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasReadingRequiresUserModificationError/Reading.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "RequiresUserModificationError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasReadingRequiresUserModificationError/Reading.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("1258a048-1355-406c-a9f4-49bcf704927f")]
		public virtual Reading Reading
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Reading)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReadingDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReadingDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Reading of a ReadingRequiresUserModificationError
		/// <summary>
		/// Gets Reading.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Reading GetReading(ReadingRequiresUserModificationError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RequiresUserModificationErrorDomainRoleId) as Reading;
		}
		
		/// <summary>
		/// Sets Reading.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetReading(ReadingRequiresUserModificationError element, Reading newReading)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RequiresUserModificationErrorDomainRoleId, newReading);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing Reading domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.Reading;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.Reading = (Reading)value;
			}
		}
		
		#endregion
		#region RequiresUserModificationError domain role code
		
		/// <summary>
		/// RequiresUserModificationError domain role Id.
		/// </summary>
		public static readonly global::System.Guid RequiresUserModificationErrorDomainRoleId = new global::System.Guid(0x31ee8a7b, 0x0a15, 0x40e8, 0xac, 0xeb, 0x30, 0xe3, 0xa2, 0x13, 0x8f, 0x93);
		
		/// <summary>
		/// DomainRole RequiresUserModificationError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasReadingRequiresUserModificationError.RequiresUserModificationError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasReadingRequiresUserModificationError/RequiresUserModificationError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasReadingRequiresUserModificationError/RequiresUserModificationError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Reading", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasReadingRequiresUserModificationError/RequiresUserModificationError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("31ee8a7b-0a15-40e8-aceb-30e3a2138f93")]
		public virtual ReadingRequiresUserModificationError RequiresUserModificationError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ReadingRequiresUserModificationError)DslModeling::DomainRoleInfo.GetRolePlayer(this, RequiresUserModificationErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RequiresUserModificationErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RequiresUserModificationError of a Reading
		/// <summary>
		/// Gets RequiresUserModificationError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ReadingRequiresUserModificationError GetRequiresUserModificationError(Reading element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ReadingDomainRoleId) as ReadingRequiresUserModificationError;
		}
		
		/// <summary>
		/// Sets RequiresUserModificationError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRequiresUserModificationError(Reading element, ReadingRequiresUserModificationError newRequiresUserModificationError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ReadingDomainRoleId, newRequiresUserModificationError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing RequiresUserModificationError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.RequiresUserModificationError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.RequiresUserModificationError = (ReadingRequiresUserModificationError)value;
			}
		}
		
		#endregion
		#region Reading link accessor
		/// <summary>
		/// Get the ReadingHasReadingRequiresUserModificationError link to a Reading.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasReadingRequiresUserModificationError GetLinkToRequiresUserModificationError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.Reading readingInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasReadingRequiresUserModificationError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasReadingRequiresUserModificationError>(readingInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasReadingRequiresUserModificationError.ReadingDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Reading not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region RequiresUserModificationError link accessor
		/// <summary>
		/// Get the ReadingHasReadingRequiresUserModificationError link to a ReadingRequiresUserModificationError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasReadingRequiresUserModificationError GetLinkToReading (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingRequiresUserModificationError requiresUserModificationErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasReadingRequiresUserModificationError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasReadingRequiresUserModificationError>(requiresUserModificationErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasReadingRequiresUserModificationError.RequiresUserModificationErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of RequiresUserModificationError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ReadingHasReadingRequiresUserModificationError instance accessors
		
		/// <summary>
		/// Get any ReadingHasReadingRequiresUserModificationError links between a given Reading and a ReadingRequiresUserModificationError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasReadingRequiresUserModificationError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.Reading source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingRequiresUserModificationError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasReadingRequiresUserModificationError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasReadingRequiresUserModificationError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasReadingRequiresUserModificationError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasReadingRequiresUserModificationError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasReadingRequiresUserModificationError.ReadingDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasReadingRequiresUserModificationError link in links )
			{
				if ( target.Equals(link.RequiresUserModificationError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ReadingHasReadingRequiresUserModificationError link between a given Readingand a ReadingRequiresUserModificationError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasReadingRequiresUserModificationError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.Reading source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingRequiresUserModificationError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasReadingRequiresUserModificationError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasReadingRequiresUserModificationError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasReadingRequiresUserModificationError.ReadingDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasReadingRequiresUserModificationError link in links )
			{
				if ( target.Equals(link.RequiresUserModificationError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("c5a25732-f5a7-409e-b56a-6419a951fb13")]
	public partial class SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc5a25732, 0xf5a7, 0x409e, 0xb5, 0x6a, 0x64, 0x19, 0xa9, 0x51, 0xfb, 0x13);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError link in the same Partition as the given SetComparisonConstraint
		/// </summary>
		/// <param name="source">SetComparisonConstraint to use as the source of the relationship.</param>
		/// <param name="target">ExternalConstraintRoleSequenceArityMismatchError to use as the target of the relationship.</param>
		public SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError(SetComparisonConstraint source, ExternalConstraintRoleSequenceArityMismatchError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ConstraintDomainRoleId, source), new DslModeling::RoleAssignment(SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ArityMismatchErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Constraint domain role code
		
		/// <summary>
		/// Constraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConstraintDomainRoleId = new global::System.Guid(0xe75c8b14, 0x01c7, 0x4cef, 0x87, 0x9d, 0xbe, 0x6a, 0x1d, 0x92, 0x2a, 0xa4);
		
		/// <summary>
		/// DomainRole Constraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.Constraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError/Constraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError/Constraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ArityMismatchError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError/Constraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("e75c8b14-01c7-4cef-879d-be6a1d922aa4")]
		public virtual SetComparisonConstraint Constraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SetComparisonConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Constraint of a ExternalConstraintRoleSequenceArityMismatchError
		/// <summary>
		/// Gets Constraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SetComparisonConstraint GetConstraint(ExternalConstraintRoleSequenceArityMismatchError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ArityMismatchErrorDomainRoleId) as SetComparisonConstraint;
		}
		
		/// <summary>
		/// Sets Constraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetConstraint(ExternalConstraintRoleSequenceArityMismatchError element, SetComparisonConstraint newConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ArityMismatchErrorDomainRoleId, newConstraint);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing Constraint domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.Constraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.Constraint = (SetComparisonConstraint)value;
			}
		}
		
		#endregion
		#region ArityMismatchError domain role code
		
		/// <summary>
		/// ArityMismatchError domain role Id.
		/// </summary>
		public static readonly global::System.Guid ArityMismatchErrorDomainRoleId = new global::System.Guid(0x0f5d4090, 0x69d4, 0x4e6e, 0xaa, 0x87, 0x2b, 0xdc, 0x77, 0x92, 0xd7, 0x5b);
		
		/// <summary>
		/// DomainRole ArityMismatchError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ArityMismatchError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError/ArityMismatchError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError/ArityMismatchError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Constraint", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError/ArityMismatchError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("0f5d4090-69d4-4e6e-aa87-2bdc7792d75b")]
		public virtual ExternalConstraintRoleSequenceArityMismatchError ArityMismatchError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ExternalConstraintRoleSequenceArityMismatchError)DslModeling::DomainRoleInfo.GetRolePlayer(this, ArityMismatchErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ArityMismatchErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ArityMismatchError of a SetComparisonConstraint
		/// <summary>
		/// Gets ArityMismatchError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ExternalConstraintRoleSequenceArityMismatchError GetArityMismatchError(SetComparisonConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConstraintDomainRoleId) as ExternalConstraintRoleSequenceArityMismatchError;
		}
		
		/// <summary>
		/// Sets ArityMismatchError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetArityMismatchError(SetComparisonConstraint element, ExternalConstraintRoleSequenceArityMismatchError newArityMismatchError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConstraintDomainRoleId, newArityMismatchError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing ArityMismatchError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ArityMismatchError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ArityMismatchError = (ExternalConstraintRoleSequenceArityMismatchError)value;
			}
		}
		
		#endregion
		#region Constraint link accessor
		/// <summary>
		/// Get the SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError link to a SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError GetLinkToArityMismatchError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint constraintInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError>(constraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Constraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ArityMismatchError link accessor
		/// <summary>
		/// Get the SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError link to a ExternalConstraintRoleSequenceArityMismatchError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError GetLinkToConstraint (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExternalConstraintRoleSequenceArityMismatchError arityMismatchErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError>(arityMismatchErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ArityMismatchErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ArityMismatchError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError instance accessors
		
		/// <summary>
		/// Get any SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError links between a given SetComparisonConstraint and a ExternalConstraintRoleSequenceArityMismatchError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExternalConstraintRoleSequenceArityMismatchError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError link in links )
			{
				if ( target.Equals(link.ArityMismatchError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError link between a given SetComparisonConstraintand a ExternalConstraintRoleSequenceArityMismatchError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExternalConstraintRoleSequenceArityMismatchError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError link in links )
			{
				if ( target.Equals(link.ArityMismatchError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ElementAssociatedWithModelError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("5e4032b3-ef22-447b-9732-f25caca1e613")]
	public partial class ElementAssociatedWithModelError : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ElementAssociatedWithModelError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5e4032b3, 0xef22, 0x447b, 0x97, 0x32, 0xf2, 0x5c, 0xac, 0xa1, 0xe6, 0x13);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ElementAssociatedWithModelError link in the same Partition as the given ModelElement
		/// </summary>
		/// <param name="source">ModelElement to use as the source of the relationship.</param>
		/// <param name="target">ModelError to use as the target of the relationship.</param>
		public ElementAssociatedWithModelError(global::Microsoft.VisualStudio.Modeling.ModelElement source, ModelError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ElementAssociatedWithModelError.AssociatedElementDomainRoleId, source), new DslModeling::RoleAssignment(ElementAssociatedWithModelError.ModelErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ElementAssociatedWithModelError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ElementAssociatedWithModelError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ElementAssociatedWithModelError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ElementAssociatedWithModelError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region AssociatedElement domain role code
		
		/// <summary>
		/// AssociatedElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid AssociatedElementDomainRoleId = new global::System.Guid(0x58fbb087, 0x5a43, 0x482b, 0x95, 0x65, 0x5b, 0x84, 0x51, 0xf9, 0xac, 0x8f);
		
		/// <summary>
		/// DomainRole AssociatedElement
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError/AssociatedElement.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError/AssociatedElement.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AssociatedModelErrorCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError/AssociatedElement.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("58fbb087-5a43-482b-9565-5b8451f9ac8f")]
		public virtual global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::Microsoft.VisualStudio.Modeling.ModelElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, AssociatedElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AssociatedElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AssociatedElementCollection of a ModelError
		/// <summary>
		/// Gets a list of AssociatedElementCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<global::Microsoft.VisualStudio.Modeling.ModelElement> GetAssociatedElementCollection(ModelError element)
		{
			return new DslModeling::LinkedElementCollection<global::Microsoft.VisualStudio.Modeling.ModelElement>(element, ModelErrorDomainRoleId);
		}
		#endregion
		#region ModelError domain role code
		
		/// <summary>
		/// ModelError domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelErrorDomainRoleId = new global::System.Guid(0x9b58a0ff, 0x46e2, 0x487b, 0x80, 0x32, 0x1a, 0x99, 0x22, 0x85, 0x8d, 0x2f);
		
		/// <summary>
		/// DomainRole ModelError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError/ModelError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError/ModelError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "AssociatedElementCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError/ModelError.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("9b58a0ff-46e2-487b-8032-1a9922858d2f")]
		public virtual ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelError)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AssociatedModelErrorCollection of a ModelElement
		/// <summary>
		/// Gets a list of AssociatedModelErrorCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelError> GetAssociatedModelErrorCollection(global::Microsoft.VisualStudio.Modeling.ModelElement element)
		{
			return new DslModeling::LinkedElementCollection<ModelError>(element, AssociatedElementDomainRoleId);
		}
		#endregion
		#region AssociatedElement link accessor
		/// <summary>
		/// Get the list of ElementAssociatedWithModelError links to a ModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError> GetLinksToAssociatedModelErrorCollection ( global::Microsoft.VisualStudio.Modeling.ModelElement associatedElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError>(associatedElementInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElementDomainRoleId);
		}
		#endregion
		#region ModelError link accessor
		/// <summary>
		/// Get the list of ElementAssociatedWithModelError links to a ModelError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError> GetLinksToAssociatedElementCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelError modelErrorInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError>(modelErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelErrorDomainRoleId);
		}
		#endregion
		#region ElementAssociatedWithModelError instance accessors
		
		/// <summary>
		/// Get any ElementAssociatedWithModelError links between a given ModelElement and a ModelError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError> GetLinks( global::Microsoft.VisualStudio.Modeling.ModelElement source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElementDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError link in links )
			{
				if ( target.Equals(link.ModelError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ElementAssociatedWithModelError link between a given ModelElementand a ModelError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError GetLink( global::Microsoft.VisualStudio.Modeling.ModelElement source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElementDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError link in links )
			{
				if ( target.Equals(link.ModelError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship FactTypeHasFactTypeRequiresReadingError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresReadingError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresReadingError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresReadingError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("eec8eb82-5b15-4b61-8737-da1a54199a13")]
	public partial class FactTypeHasFactTypeRequiresReadingError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FactTypeHasFactTypeRequiresReadingError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xeec8eb82, 0x5b15, 0x4b61, 0x87, 0x37, 0xda, 0x1a, 0x54, 0x19, 0x9a, 0x13);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FactTypeHasFactTypeRequiresReadingError link in the same Partition as the given FactType
		/// </summary>
		/// <param name="source">FactType to use as the source of the relationship.</param>
		/// <param name="target">FactTypeRequiresReadingError to use as the target of the relationship.</param>
		public FactTypeHasFactTypeRequiresReadingError(FactType source, FactTypeRequiresReadingError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FactTypeHasFactTypeRequiresReadingError.FactTypeDomainRoleId, source), new DslModeling::RoleAssignment(FactTypeHasFactTypeRequiresReadingError.ReadingRequiredErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeHasFactTypeRequiresReadingError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeHasFactTypeRequiresReadingError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeHasFactTypeRequiresReadingError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeHasFactTypeRequiresReadingError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region FactType domain role code
		
		/// <summary>
		/// FactType domain role Id.
		/// </summary>
		public static readonly global::System.Guid FactTypeDomainRoleId = new global::System.Guid(0xc79d68bd, 0xdbed, 0x4487, 0xa4, 0x48, 0x70, 0xb9, 0xed, 0xc5, 0xe4, 0xd9);
		
		/// <summary>
		/// DomainRole FactType
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresReadingError.FactType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresReadingError/FactType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresReadingError/FactType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ReadingRequiredError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresReadingError/FactType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("c79d68bd-dbed-4487-a448-70b9edc5e4d9")]
		public virtual FactType FactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FactType)DslModeling::DomainRoleInfo.GetRolePlayer(this, FactTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FactTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FactType of a FactTypeRequiresReadingError
		/// <summary>
		/// Gets FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FactType GetFactType(FactTypeRequiresReadingError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ReadingRequiredErrorDomainRoleId) as FactType;
		}
		
		/// <summary>
		/// Sets FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFactType(FactTypeRequiresReadingError element, FactType newFactType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ReadingRequiredErrorDomainRoleId, newFactType);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing FactType domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.FactType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.FactType = (FactType)value;
			}
		}
		
		#endregion
		#region ReadingRequiredError domain role code
		
		/// <summary>
		/// ReadingRequiredError domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReadingRequiredErrorDomainRoleId = new global::System.Guid(0xe2df0d63, 0x6d67, 0x475c, 0x84, 0x70, 0x89, 0x13, 0xe2, 0x42, 0x65, 0xe9);
		
		/// <summary>
		/// DomainRole ReadingRequiredError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresReadingError.ReadingRequiredError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresReadingError/ReadingRequiredError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresReadingError/ReadingRequiredError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FactType", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresReadingError/ReadingRequiredError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("e2df0d63-6d67-475c-8470-8913e24265e9")]
		public virtual FactTypeRequiresReadingError ReadingRequiredError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FactTypeRequiresReadingError)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReadingRequiredErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReadingRequiredErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ReadingRequiredError of a FactType
		/// <summary>
		/// Gets ReadingRequiredError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FactTypeRequiresReadingError GetReadingRequiredError(FactType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FactTypeDomainRoleId) as FactTypeRequiresReadingError;
		}
		
		/// <summary>
		/// Sets ReadingRequiredError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetReadingRequiredError(FactType element, FactTypeRequiresReadingError newReadingRequiredError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FactTypeDomainRoleId, newReadingRequiredError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing ReadingRequiredError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ReadingRequiredError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ReadingRequiredError = (FactTypeRequiresReadingError)value;
			}
		}
		
		#endregion
		#region FactType link accessor
		/// <summary>
		/// Get the FactTypeHasFactTypeRequiresReadingError link to a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresReadingError GetLinkToReadingRequiredError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType factTypeInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresReadingError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresReadingError>(factTypeInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresReadingError.FactTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of FactType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ReadingRequiredError link accessor
		/// <summary>
		/// Get the FactTypeHasFactTypeRequiresReadingError link to a FactTypeRequiresReadingError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresReadingError GetLinkToFactType (global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRequiresReadingError readingRequiredErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresReadingError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresReadingError>(readingRequiredErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresReadingError.ReadingRequiredErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ReadingRequiredError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FactTypeHasFactTypeRequiresReadingError instance accessors
		
		/// <summary>
		/// Get any FactTypeHasFactTypeRequiresReadingError links between a given FactType and a FactTypeRequiresReadingError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresReadingError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRequiresReadingError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresReadingError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresReadingError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresReadingError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresReadingError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresReadingError.FactTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresReadingError link in links )
			{
				if ( target.Equals(link.ReadingRequiredError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FactTypeHasFactTypeRequiresReadingError link between a given FactTypeand a FactTypeRequiresReadingError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresReadingError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRequiresReadingError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresReadingError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresReadingError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresReadingError.FactTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresReadingError link in links )
			{
				if ( target.Equals(link.ReadingRequiredError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship FactTypeHasFactTypeRequiresInternalUniquenessConstraintError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("dd5ff7f8-7169-489b-9b8a-ede3772f52be")]
	public partial class FactTypeHasFactTypeRequiresInternalUniquenessConstraintError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FactTypeHasFactTypeRequiresInternalUniquenessConstraintError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xdd5ff7f8, 0x7169, 0x489b, 0x9b, 0x8a, 0xed, 0xe3, 0x77, 0x2f, 0x52, 0xbe);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FactTypeHasFactTypeRequiresInternalUniquenessConstraintError link in the same Partition as the given FactType
		/// </summary>
		/// <param name="source">FactType to use as the source of the relationship.</param>
		/// <param name="target">FactTypeRequiresInternalUniquenessConstraintError to use as the target of the relationship.</param>
		public FactTypeHasFactTypeRequiresInternalUniquenessConstraintError(FactType source, FactTypeRequiresInternalUniquenessConstraintError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.FactTypeDomainRoleId, source), new DslModeling::RoleAssignment(FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.InternalUniquenessConstraintRequiredErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeHasFactTypeRequiresInternalUniquenessConstraintError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeHasFactTypeRequiresInternalUniquenessConstraintError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeHasFactTypeRequiresInternalUniquenessConstraintError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeHasFactTypeRequiresInternalUniquenessConstraintError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region FactType domain role code
		
		/// <summary>
		/// FactType domain role Id.
		/// </summary>
		public static readonly global::System.Guid FactTypeDomainRoleId = new global::System.Guid(0x42aed551, 0x7f1a, 0x4f16, 0xaa, 0x39, 0x68, 0x2c, 0x9d, 0xbb, 0x86, 0x07);
		
		/// <summary>
		/// DomainRole FactType
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.FactType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError/FactType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError/FactType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "InternalUniquenessConstraintRequiredError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError/FactType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("42aed551-7f1a-4f16-aa39-682c9dbb8607")]
		public virtual FactType FactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FactType)DslModeling::DomainRoleInfo.GetRolePlayer(this, FactTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FactTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FactType of a FactTypeRequiresInternalUniquenessConstraintError
		/// <summary>
		/// Gets FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FactType GetFactType(FactTypeRequiresInternalUniquenessConstraintError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, InternalUniquenessConstraintRequiredErrorDomainRoleId) as FactType;
		}
		
		/// <summary>
		/// Sets FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFactType(FactTypeRequiresInternalUniquenessConstraintError element, FactType newFactType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, InternalUniquenessConstraintRequiredErrorDomainRoleId, newFactType);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing FactType domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.FactType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.FactType = (FactType)value;
			}
		}
		
		#endregion
		#region InternalUniquenessConstraintRequiredError domain role code
		
		/// <summary>
		/// InternalUniquenessConstraintRequiredError domain role Id.
		/// </summary>
		public static readonly global::System.Guid InternalUniquenessConstraintRequiredErrorDomainRoleId = new global::System.Guid(0x36fc676e, 0x7c82, 0x4756, 0xbe, 0xa5, 0xc4, 0xa6, 0x90, 0xb4, 0x1a, 0xb0);
		
		/// <summary>
		/// DomainRole InternalUniquenessConstraintRequiredError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.InternalUniquenessConstraintRequiredError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError/InternalUniquenessConstraintRequiredError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError/InternalUniquenessConstraintRequiredError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FactType", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError/InternalUniquenessConstraintRequiredError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("36fc676e-7c82-4756-bea5-c4a690b41ab0")]
		public virtual FactTypeRequiresInternalUniquenessConstraintError InternalUniquenessConstraintRequiredError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FactTypeRequiresInternalUniquenessConstraintError)DslModeling::DomainRoleInfo.GetRolePlayer(this, InternalUniquenessConstraintRequiredErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InternalUniquenessConstraintRequiredErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InternalUniquenessConstraintRequiredError of a FactType
		/// <summary>
		/// Gets InternalUniquenessConstraintRequiredError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FactTypeRequiresInternalUniquenessConstraintError GetInternalUniquenessConstraintRequiredError(FactType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FactTypeDomainRoleId) as FactTypeRequiresInternalUniquenessConstraintError;
		}
		
		/// <summary>
		/// Sets InternalUniquenessConstraintRequiredError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetInternalUniquenessConstraintRequiredError(FactType element, FactTypeRequiresInternalUniquenessConstraintError newInternalUniquenessConstraintRequiredError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FactTypeDomainRoleId, newInternalUniquenessConstraintRequiredError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing InternalUniquenessConstraintRequiredError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.InternalUniquenessConstraintRequiredError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.InternalUniquenessConstraintRequiredError = (FactTypeRequiresInternalUniquenessConstraintError)value;
			}
		}
		
		#endregion
		#region FactType link accessor
		/// <summary>
		/// Get the FactTypeHasFactTypeRequiresInternalUniquenessConstraintError link to a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError GetLinkToInternalUniquenessConstraintRequiredError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType factTypeInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError>(factTypeInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.FactTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of FactType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region InternalUniquenessConstraintRequiredError link accessor
		/// <summary>
		/// Get the FactTypeHasFactTypeRequiresInternalUniquenessConstraintError link to a FactTypeRequiresInternalUniquenessConstraintError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError GetLinkToFactType (global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRequiresInternalUniquenessConstraintError internalUniquenessConstraintRequiredErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError>(internalUniquenessConstraintRequiredErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.InternalUniquenessConstraintRequiredErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of InternalUniquenessConstraintRequiredError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FactTypeHasFactTypeRequiresInternalUniquenessConstraintError instance accessors
		
		/// <summary>
		/// Get any FactTypeHasFactTypeRequiresInternalUniquenessConstraintError links between a given FactType and a FactTypeRequiresInternalUniquenessConstraintError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRequiresInternalUniquenessConstraintError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.FactTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError link in links )
			{
				if ( target.Equals(link.InternalUniquenessConstraintRequiredError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FactTypeHasFactTypeRequiresInternalUniquenessConstraintError link between a given FactTypeand a FactTypeRequiresInternalUniquenessConstraintError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRequiresInternalUniquenessConstraintError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.FactTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError link in links )
			{
				if ( target.Equals(link.InternalUniquenessConstraintRequiredError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ValueTypeHasValueConstraint
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("3dd5cc0f-891e-4a88-a8b2-aeb28a4795e3")]
	public partial class ValueTypeHasValueConstraint : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ValueTypeHasValueConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3dd5cc0f, 0x891e, 0x4a88, 0xa8, 0xb2, 0xae, 0xb2, 0x8a, 0x47, 0x95, 0xe3);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ValueTypeHasValueConstraint link in the same Partition as the given ObjectType
		/// </summary>
		/// <param name="source">ObjectType to use as the source of the relationship.</param>
		/// <param name="target">ValueTypeValueConstraint to use as the target of the relationship.</param>
		public ValueTypeHasValueConstraint(ObjectType source, ValueTypeValueConstraint target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ValueTypeHasValueConstraint.ValueTypeDomainRoleId, source), new DslModeling::RoleAssignment(ValueTypeHasValueConstraint.ValueConstraintDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ValueTypeHasValueConstraint(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ValueTypeHasValueConstraint(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ValueTypeHasValueConstraint(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ValueTypeHasValueConstraint(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ValueType domain role code
		
		/// <summary>
		/// ValueType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ValueTypeDomainRoleId = new global::System.Guid(0x2f42a8fd, 0xab49, 0x4e0f, 0xaf, 0x3a, 0x10, 0x98, 0xba, 0x77, 0xa4, 0xc1);
		
		/// <summary>
		/// DomainRole ValueType
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueConstraint.ValueType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueConstraint/ValueType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueConstraint/ValueType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ValueConstraint", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueConstraint/ValueType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("2f42a8fd-ab49-4e0f-af3a-1098ba77a4c1")]
		public virtual ObjectType ValueType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ValueTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ValueTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ValueType of a ValueTypeValueConstraint
		/// <summary>
		/// Gets ValueType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ObjectType GetValueType(ValueTypeValueConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ValueConstraintDomainRoleId) as ObjectType;
		}
		
		/// <summary>
		/// Sets ValueType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetValueType(ValueTypeValueConstraint element, ObjectType newValueType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ValueConstraintDomainRoleId, newValueType);
		}
		#endregion
		#region ValueConstraint domain role code
		
		/// <summary>
		/// ValueConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid ValueConstraintDomainRoleId = new global::System.Guid(0x4a9b0738, 0xaa8e, 0x4bae, 0xb7, 0x6a, 0x00, 0x27, 0xfc, 0x06, 0x68, 0x5d);
		
		/// <summary>
		/// DomainRole ValueConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueConstraint.ValueConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueConstraint/ValueConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueConstraint/ValueConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ValueType", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueConstraint/ValueConstraint.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("4a9b0738-aa8e-4bae-b76a-0027fc06685d")]
		public virtual ValueTypeValueConstraint ValueConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ValueTypeValueConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, ValueConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ValueConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ValueConstraint of a ObjectType
		/// <summary>
		/// Gets ValueConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ValueTypeValueConstraint GetValueConstraint(ObjectType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ValueTypeDomainRoleId) as ValueTypeValueConstraint;
		}
		
		/// <summary>
		/// Sets ValueConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetValueConstraint(ObjectType element, ValueTypeValueConstraint newValueConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ValueTypeDomainRoleId, newValueConstraint);
		}
		#endregion
		#region ValueType link accessor
		/// <summary>
		/// Get the ValueTypeHasValueConstraint link to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueConstraint GetLinkToValueConstraint (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType valueTypeInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueConstraint>(valueTypeInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueConstraint.ValueTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ValueType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ValueConstraint link accessor
		/// <summary>
		/// Get the ValueTypeHasValueConstraint link to a ValueTypeValueConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueConstraint GetLinkToValueType (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeValueConstraint valueConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueConstraint>(valueConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueConstraint.ValueConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ValueConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ValueTypeHasValueConstraint instance accessors
		
		/// <summary>
		/// Get any ValueTypeHasValueConstraint links between a given ObjectType and a ValueTypeValueConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueConstraint> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeValueConstraint target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueConstraint> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueConstraint>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueConstraint>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueConstraint.ValueTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueConstraint link in links )
			{
				if ( target.Equals(link.ValueConstraint) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ValueTypeHasValueConstraint link between a given ObjectTypeand a ValueTypeValueConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueConstraint GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeValueConstraint target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueConstraint>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueConstraint.ValueTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueConstraint link in links )
			{
				if ( target.Equals(link.ValueConstraint) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ObjectTypeHasCardinalityConstraint
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCardinalityConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCardinalityConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCardinalityConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("565d3053-d67b-4f23-a81a-c9fcd1bd50c5")]
	public partial class ObjectTypeHasCardinalityConstraint : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ObjectTypeHasCardinalityConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x565d3053, 0xd67b, 0x4f23, 0xa8, 0x1a, 0xc9, 0xfc, 0xd1, 0xbd, 0x50, 0xc5);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ObjectTypeHasCardinalityConstraint link in the same Partition as the given ObjectType
		/// </summary>
		/// <param name="source">ObjectType to use as the source of the relationship.</param>
		/// <param name="target">ObjectTypeCardinalityConstraint to use as the target of the relationship.</param>
		public ObjectTypeHasCardinalityConstraint(ObjectType source, ObjectTypeCardinalityConstraint target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ObjectTypeHasCardinalityConstraint.ObjectTypeDomainRoleId, source), new DslModeling::RoleAssignment(ObjectTypeHasCardinalityConstraint.CardinalityConstraintDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectTypeHasCardinalityConstraint(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectTypeHasCardinalityConstraint(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectTypeHasCardinalityConstraint(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectTypeHasCardinalityConstraint(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ObjectType domain role code
		
		/// <summary>
		/// ObjectType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ObjectTypeDomainRoleId = new global::System.Guid(0xe5cf4336, 0x394b, 0x41fd, 0xbb, 0x9d, 0xe8, 0xeb, 0x2f, 0x93, 0xed, 0x08);
		
		/// <summary>
		/// DomainRole ObjectType
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCardinalityConstraint.ObjectType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCardinalityConstraint/ObjectType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCardinalityConstraint/ObjectType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Cardinality", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCardinalityConstraint/ObjectType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("e5cf4336-394b-41fd-bb9d-e8eb2f93ed08")]
		public virtual ObjectType ObjectType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjectTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjectTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ObjectType of a ObjectTypeCardinalityConstraint
		/// <summary>
		/// Gets ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ObjectType GetObjectType(ObjectTypeCardinalityConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CardinalityConstraintDomainRoleId) as ObjectType;
		}
		
		/// <summary>
		/// Sets ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetObjectType(ObjectTypeCardinalityConstraint element, ObjectType newObjectType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CardinalityConstraintDomainRoleId, newObjectType);
		}
		#endregion
		#region CardinalityConstraint domain role code
		
		/// <summary>
		/// CardinalityConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid CardinalityConstraintDomainRoleId = new global::System.Guid(0x0f7b4c5c, 0x9c52, 0x4342, 0xa9, 0xfa, 0xde, 0x19, 0x41, 0xf4, 0x16, 0x55);
		
		/// <summary>
		/// DomainRole CardinalityConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCardinalityConstraint.CardinalityConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCardinalityConstraint/CardinalityConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCardinalityConstraint/CardinalityConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ObjectType", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCardinalityConstraint/CardinalityConstraint.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("0f7b4c5c-9c52-4342-a9fa-de1941f41655")]
		public virtual ObjectTypeCardinalityConstraint CardinalityConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectTypeCardinalityConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, CardinalityConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CardinalityConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Cardinality of a ObjectType
		/// <summary>
		/// Gets Cardinality.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ObjectTypeCardinalityConstraint GetCardinality(ObjectType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ObjectTypeDomainRoleId) as ObjectTypeCardinalityConstraint;
		}
		
		/// <summary>
		/// Sets Cardinality.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetCardinality(ObjectType element, ObjectTypeCardinalityConstraint newCardinalityConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ObjectTypeDomainRoleId, newCardinalityConstraint);
		}
		#endregion
		#region ObjectType link accessor
		/// <summary>
		/// Get the ObjectTypeHasCardinalityConstraint link to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCardinalityConstraint GetLinkToCardinality (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType objectTypeInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCardinalityConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCardinalityConstraint>(objectTypeInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCardinalityConstraint.ObjectTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ObjectType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CardinalityConstraint link accessor
		/// <summary>
		/// Get the ObjectTypeHasCardinalityConstraint link to a ObjectTypeCardinalityConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCardinalityConstraint GetLinkToObjectType (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeCardinalityConstraint cardinalityConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCardinalityConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCardinalityConstraint>(cardinalityConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCardinalityConstraint.CardinalityConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CardinalityConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ObjectTypeHasCardinalityConstraint instance accessors
		
		/// <summary>
		/// Get any ObjectTypeHasCardinalityConstraint links between a given ObjectType and a ObjectTypeCardinalityConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCardinalityConstraint> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeCardinalityConstraint target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCardinalityConstraint> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCardinalityConstraint>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCardinalityConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCardinalityConstraint>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCardinalityConstraint.ObjectTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCardinalityConstraint link in links )
			{
				if ( target.Equals(link.CardinalityConstraint) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ObjectTypeHasCardinalityConstraint link between a given ObjectTypeand a ObjectTypeCardinalityConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCardinalityConstraint GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeCardinalityConstraint target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCardinalityConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCardinalityConstraint>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCardinalityConstraint.ObjectTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCardinalityConstraint link in links )
			{
				if ( target.Equals(link.CardinalityConstraint) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship UnaryRoleHasCardinalityConstraint
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.UnaryRoleHasCardinalityConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.UnaryRoleHasCardinalityConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.UnaryRoleHasCardinalityConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("323361eb-37a7-49d2-85fc-e1d35f734d6e")]
	public partial class UnaryRoleHasCardinalityConstraint : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// UnaryRoleHasCardinalityConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x323361eb, 0x37a7, 0x49d2, 0x85, 0xfc, 0xe1, 0xd3, 0x5f, 0x73, 0x4d, 0x6e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a UnaryRoleHasCardinalityConstraint link in the same Partition as the given Role
		/// </summary>
		/// <param name="source">Role to use as the source of the relationship.</param>
		/// <param name="target">UnaryRoleCardinalityConstraint to use as the target of the relationship.</param>
		public UnaryRoleHasCardinalityConstraint(Role source, UnaryRoleCardinalityConstraint target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(UnaryRoleHasCardinalityConstraint.UnaryRoleDomainRoleId, source), new DslModeling::RoleAssignment(UnaryRoleHasCardinalityConstraint.CardinalityConstraintDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UnaryRoleHasCardinalityConstraint(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UnaryRoleHasCardinalityConstraint(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UnaryRoleHasCardinalityConstraint(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UnaryRoleHasCardinalityConstraint(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region UnaryRole domain role code
		
		/// <summary>
		/// UnaryRole domain role Id.
		/// </summary>
		public static readonly global::System.Guid UnaryRoleDomainRoleId = new global::System.Guid(0x28f9c99d, 0xea10, 0x4bbd, 0xb7, 0x64, 0x09, 0x70, 0x20, 0x7b, 0x4d, 0x11);
		
		/// <summary>
		/// DomainRole UnaryRole
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.UnaryRoleHasCardinalityConstraint.UnaryRole
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.UnaryRoleHasCardinalityConstraint/UnaryRole.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.UnaryRoleHasCardinalityConstraint/UnaryRole.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Cardinality", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.UnaryRoleHasCardinalityConstraint/UnaryRole.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("28f9c99d-ea10-4bbd-b764-0970207b4d11")]
		public virtual Role UnaryRole
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Role)DslModeling::DomainRoleInfo.GetRolePlayer(this, UnaryRoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, UnaryRoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access UnaryRole of a UnaryRoleCardinalityConstraint
		/// <summary>
		/// Gets UnaryRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Role GetUnaryRole(UnaryRoleCardinalityConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CardinalityConstraintDomainRoleId) as Role;
		}
		
		/// <summary>
		/// Sets UnaryRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetUnaryRole(UnaryRoleCardinalityConstraint element, Role newUnaryRole)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CardinalityConstraintDomainRoleId, newUnaryRole);
		}
		#endregion
		#region CardinalityConstraint domain role code
		
		/// <summary>
		/// CardinalityConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid CardinalityConstraintDomainRoleId = new global::System.Guid(0xd1180954, 0xdcf6, 0x4251, 0xa9, 0x4f, 0xf4, 0x53, 0xd9, 0x5f, 0x1c, 0xa1);
		
		/// <summary>
		/// DomainRole CardinalityConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.UnaryRoleHasCardinalityConstraint.CardinalityConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.UnaryRoleHasCardinalityConstraint/CardinalityConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.UnaryRoleHasCardinalityConstraint/CardinalityConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "UnaryRole", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.UnaryRoleHasCardinalityConstraint/CardinalityConstraint.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("d1180954-dcf6-4251-a94f-f453d95f1ca1")]
		public virtual UnaryRoleCardinalityConstraint CardinalityConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (UnaryRoleCardinalityConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, CardinalityConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CardinalityConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Cardinality of a Role
		/// <summary>
		/// Gets Cardinality.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static UnaryRoleCardinalityConstraint GetCardinality(Role element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, UnaryRoleDomainRoleId) as UnaryRoleCardinalityConstraint;
		}
		
		/// <summary>
		/// Sets Cardinality.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetCardinality(Role element, UnaryRoleCardinalityConstraint newCardinalityConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, UnaryRoleDomainRoleId, newCardinalityConstraint);
		}
		#endregion
		#region UnaryRole link accessor
		/// <summary>
		/// Get the UnaryRoleHasCardinalityConstraint link to a Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.UnaryRoleHasCardinalityConstraint GetLinkToCardinality (global::ORMSolutions.ORMArchitect.Core.ObjectModel.Role unaryRoleInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.UnaryRoleHasCardinalityConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.UnaryRoleHasCardinalityConstraint>(unaryRoleInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.UnaryRoleHasCardinalityConstraint.UnaryRoleDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of UnaryRole not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CardinalityConstraint link accessor
		/// <summary>
		/// Get the UnaryRoleHasCardinalityConstraint link to a UnaryRoleCardinalityConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.UnaryRoleHasCardinalityConstraint GetLinkToUnaryRole (global::ORMSolutions.ORMArchitect.Core.ObjectModel.UnaryRoleCardinalityConstraint cardinalityConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.UnaryRoleHasCardinalityConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.UnaryRoleHasCardinalityConstraint>(cardinalityConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.UnaryRoleHasCardinalityConstraint.CardinalityConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CardinalityConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region UnaryRoleHasCardinalityConstraint instance accessors
		
		/// <summary>
		/// Get any UnaryRoleHasCardinalityConstraint links between a given Role and a UnaryRoleCardinalityConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.UnaryRoleHasCardinalityConstraint> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.Role source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.UnaryRoleCardinalityConstraint target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.UnaryRoleHasCardinalityConstraint> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.UnaryRoleHasCardinalityConstraint>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.UnaryRoleHasCardinalityConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.UnaryRoleHasCardinalityConstraint>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.UnaryRoleHasCardinalityConstraint.UnaryRoleDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.UnaryRoleHasCardinalityConstraint link in links )
			{
				if ( target.Equals(link.CardinalityConstraint) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one UnaryRoleHasCardinalityConstraint link between a given Roleand a UnaryRoleCardinalityConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.UnaryRoleHasCardinalityConstraint GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.Role source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.UnaryRoleCardinalityConstraint target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.UnaryRoleHasCardinalityConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.UnaryRoleHasCardinalityConstraint>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.UnaryRoleHasCardinalityConstraint.UnaryRoleDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.UnaryRoleHasCardinalityConstraint link in links )
			{
				if ( target.Equals(link.CardinalityConstraint) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship RoleHasValueConstraint
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasValueConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasValueConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasValueConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("bfb9da2a-0ea6-46ab-b608-41440bdd0d84")]
	public partial class RoleHasValueConstraint : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RoleHasValueConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbfb9da2a, 0x0ea6, 0x46ab, 0xb6, 0x08, 0x41, 0x44, 0x0b, 0xdd, 0x0d, 0x84);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RoleHasValueConstraint link in the same Partition as the given Role
		/// </summary>
		/// <param name="source">Role to use as the source of the relationship.</param>
		/// <param name="target">RoleValueConstraint to use as the target of the relationship.</param>
		public RoleHasValueConstraint(Role source, RoleValueConstraint target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RoleHasValueConstraint.RoleDomainRoleId, source), new DslModeling::RoleAssignment(RoleHasValueConstraint.ValueConstraintDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RoleHasValueConstraint(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RoleHasValueConstraint(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RoleHasValueConstraint(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RoleHasValueConstraint(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Role domain role code
		
		/// <summary>
		/// Role domain role Id.
		/// </summary>
		public static readonly global::System.Guid RoleDomainRoleId = new global::System.Guid(0xaf99b941, 0x1811, 0x4dfb, 0xbd, 0x26, 0x8f, 0x41, 0x48, 0xd3, 0xf1, 0xd9);
		
		/// <summary>
		/// DomainRole Role
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasValueConstraint.Role
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasValueConstraint/Role.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasValueConstraint/Role.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ValueConstraint", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasValueConstraint/Role.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("af99b941-1811-4dfb-bd26-8f4148d3f1d9")]
		public virtual Role Role
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Role)DslModeling::DomainRoleInfo.GetRolePlayer(this, RoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Role of a RoleValueConstraint
		/// <summary>
		/// Gets Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Role GetRole(RoleValueConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ValueConstraintDomainRoleId) as Role;
		}
		
		/// <summary>
		/// Sets Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRole(RoleValueConstraint element, Role newRole)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ValueConstraintDomainRoleId, newRole);
		}
		#endregion
		#region ValueConstraint domain role code
		
		/// <summary>
		/// ValueConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid ValueConstraintDomainRoleId = new global::System.Guid(0x464dffcf, 0x6633, 0x45cd, 0x86, 0x71, 0x2c, 0x5e, 0x92, 0xae, 0x89, 0xd2);
		
		/// <summary>
		/// DomainRole ValueConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasValueConstraint.ValueConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasValueConstraint/ValueConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasValueConstraint/ValueConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Role", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasValueConstraint/ValueConstraint.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("464dffcf-6633-45cd-8671-2c5e92ae89d2")]
		public virtual RoleValueConstraint ValueConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RoleValueConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, ValueConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ValueConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ValueConstraint of a Role
		/// <summary>
		/// Gets ValueConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static RoleValueConstraint GetValueConstraint(Role element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RoleDomainRoleId) as RoleValueConstraint;
		}
		
		/// <summary>
		/// Sets ValueConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetValueConstraint(Role element, RoleValueConstraint newValueConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RoleDomainRoleId, newValueConstraint);
		}
		#endregion
		#region Role link accessor
		/// <summary>
		/// Get the RoleHasValueConstraint link to a Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasValueConstraint GetLinkToValueConstraint (global::ORMSolutions.ORMArchitect.Core.ObjectModel.Role roleInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasValueConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasValueConstraint>(roleInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasValueConstraint.RoleDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Role not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ValueConstraint link accessor
		/// <summary>
		/// Get the RoleHasValueConstraint link to a RoleValueConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasValueConstraint GetLinkToRole (global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleValueConstraint valueConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasValueConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasValueConstraint>(valueConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasValueConstraint.ValueConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ValueConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region RoleHasValueConstraint instance accessors
		
		/// <summary>
		/// Get any RoleHasValueConstraint links between a given Role and a RoleValueConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasValueConstraint> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.Role source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleValueConstraint target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasValueConstraint> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasValueConstraint>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasValueConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasValueConstraint>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasValueConstraint.RoleDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasValueConstraint link in links )
			{
				if ( target.Equals(link.ValueConstraint) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RoleHasValueConstraint link between a given Roleand a RoleValueConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasValueConstraint GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.Role source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleValueConstraint target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasValueConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasValueConstraint>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasValueConstraint.RoleDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasValueConstraint link in links )
			{
				if ( target.Equals(link.ValueConstraint) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship PathedRoleHasValueConstraint
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasValueConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasValueConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasValueConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("c77db9ef-b86f-4b08-bbaa-b2ba2dad64d9")]
	public partial class PathedRoleHasValueConstraint : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// PathedRoleHasValueConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc77db9ef, 0xb86f, 0x4b08, 0xbb, 0xaa, 0xb2, 0xba, 0x2d, 0xad, 0x64, 0xd9);
	
				
		/// <summary>
		/// Constructor
		/// Creates a PathedRoleHasValueConstraint link in the same Partition as the given PathedRole
		/// </summary>
		/// <param name="source">PathedRole to use as the source of the relationship.</param>
		/// <param name="target">PathConditionRoleValueConstraint to use as the target of the relationship.</param>
		public PathedRoleHasValueConstraint(PathedRole source, PathConditionRoleValueConstraint target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(PathedRoleHasValueConstraint.PathedRoleDomainRoleId, source), new DslModeling::RoleAssignment(PathedRoleHasValueConstraint.ValueConstraintDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PathedRoleHasValueConstraint(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PathedRoleHasValueConstraint(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PathedRoleHasValueConstraint(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PathedRoleHasValueConstraint(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region PathedRole domain role code
		
		/// <summary>
		/// PathedRole domain role Id.
		/// </summary>
		public static readonly global::System.Guid PathedRoleDomainRoleId = new global::System.Guid(0x046a095e, 0x696d, 0x4899, 0x80, 0x51, 0x58, 0xa7, 0x0a, 0xce, 0xd2, 0x99);
		
		/// <summary>
		/// DomainRole PathedRole
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasValueConstraint.PathedRole
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasValueConstraint/PathedRole.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasValueConstraint/PathedRole.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ValueConstraint", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasValueConstraint/PathedRole.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("046a095e-696d-4899-8051-58a70aced299")]
		public virtual PathedRole PathedRole
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PathedRole)DslModeling::DomainRoleInfo.GetRolePlayer(this, PathedRoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PathedRoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PathedRole of a PathConditionRoleValueConstraint
		/// <summary>
		/// Gets PathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static PathedRole GetPathedRole(PathConditionRoleValueConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ValueConstraintDomainRoleId) as PathedRole;
		}
		
		/// <summary>
		/// Sets PathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetPathedRole(PathConditionRoleValueConstraint element, PathedRole newPathedRole)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ValueConstraintDomainRoleId, newPathedRole);
		}
		#endregion
		#region ValueConstraint domain role code
		
		/// <summary>
		/// ValueConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid ValueConstraintDomainRoleId = new global::System.Guid(0xd3438173, 0x2268, 0x4f8b, 0x82, 0x37, 0xfd, 0x56, 0x3d, 0x69, 0xa3, 0xc6);
		
		/// <summary>
		/// DomainRole ValueConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasValueConstraint.ValueConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasValueConstraint/ValueConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasValueConstraint/ValueConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "PathedRole", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasValueConstraint/ValueConstraint.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("d3438173-2268-4f8b-8237-fd563d69a3c6")]
		public virtual PathConditionRoleValueConstraint ValueConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PathConditionRoleValueConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, ValueConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ValueConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ValueConstraint of a PathedRole
		/// <summary>
		/// Gets ValueConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static PathConditionRoleValueConstraint GetValueConstraint(PathedRole element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PathedRoleDomainRoleId) as PathConditionRoleValueConstraint;
		}
		
		/// <summary>
		/// Sets ValueConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetValueConstraint(PathedRole element, PathConditionRoleValueConstraint newValueConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PathedRoleDomainRoleId, newValueConstraint);
		}
		#endregion
		#region PathedRole link accessor
		/// <summary>
		/// Get the PathedRoleHasValueConstraint link to a PathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasValueConstraint GetLinkToValueConstraint (global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole pathedRoleInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasValueConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasValueConstraint>(pathedRoleInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasValueConstraint.PathedRoleDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of PathedRole not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ValueConstraint link accessor
		/// <summary>
		/// Get the PathedRoleHasValueConstraint link to a PathConditionRoleValueConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasValueConstraint GetLinkToPathedRole (global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathConditionRoleValueConstraint valueConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasValueConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasValueConstraint>(valueConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasValueConstraint.ValueConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ValueConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region PathedRoleHasValueConstraint instance accessors
		
		/// <summary>
		/// Get any PathedRoleHasValueConstraint links between a given PathedRole and a PathConditionRoleValueConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasValueConstraint> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathConditionRoleValueConstraint target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasValueConstraint> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasValueConstraint>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasValueConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasValueConstraint>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasValueConstraint.PathedRoleDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasValueConstraint link in links )
			{
				if ( target.Equals(link.ValueConstraint) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one PathedRoleHasValueConstraint link between a given PathedRoleand a PathConditionRoleValueConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasValueConstraint GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathConditionRoleValueConstraint target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasValueConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasValueConstraint>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasValueConstraint.PathedRoleDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasValueConstraint link in links )
			{
				if ( target.Equals(link.ValueConstraint) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship RolePathRootHasValueConstraint
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathRootHasValueConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathRootHasValueConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathRootHasValueConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("77a2cd67-bc5c-446d-91d7-153920bc2748")]
	public partial class RolePathRootHasValueConstraint : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RolePathRootHasValueConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x77a2cd67, 0xbc5c, 0x446d, 0x91, 0xd7, 0x15, 0x39, 0x20, 0xbc, 0x27, 0x48);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RolePathRootHasValueConstraint link in the same Partition as the given RolePathObjectTypeRoot
		/// </summary>
		/// <param name="source">RolePathObjectTypeRoot to use as the source of the relationship.</param>
		/// <param name="target">PathConditionRootValueConstraint to use as the target of the relationship.</param>
		public RolePathRootHasValueConstraint(RolePathObjectTypeRoot source, PathConditionRootValueConstraint target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RolePathRootHasValueConstraint.PathRootDomainRoleId, source), new DslModeling::RoleAssignment(RolePathRootHasValueConstraint.ValueConstraintDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RolePathRootHasValueConstraint(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RolePathRootHasValueConstraint(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RolePathRootHasValueConstraint(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RolePathRootHasValueConstraint(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region PathRoot domain role code
		
		/// <summary>
		/// PathRoot domain role Id.
		/// </summary>
		public static readonly global::System.Guid PathRootDomainRoleId = new global::System.Guid(0x7a7d5367, 0xdb3c, 0x4129, 0x84, 0x3a, 0x2f, 0x1f, 0xcd, 0xfc, 0x8a, 0x26);
		
		/// <summary>
		/// DomainRole PathRoot
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathRootHasValueConstraint.PathRoot
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathRootHasValueConstraint/PathRoot.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathRootHasValueConstraint/PathRoot.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ValueConstraint", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathRootHasValueConstraint/PathRoot.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("7a7d5367-db3c-4129-843a-2f1fcdfc8a26")]
		public virtual RolePathObjectTypeRoot PathRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RolePathObjectTypeRoot)DslModeling::DomainRoleInfo.GetRolePlayer(this, PathRootDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PathRootDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PathRoot of a PathConditionRootValueConstraint
		/// <summary>
		/// Gets PathRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static RolePathObjectTypeRoot GetPathRoot(PathConditionRootValueConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ValueConstraintDomainRoleId) as RolePathObjectTypeRoot;
		}
		
		/// <summary>
		/// Sets PathRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetPathRoot(PathConditionRootValueConstraint element, RolePathObjectTypeRoot newPathRoot)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ValueConstraintDomainRoleId, newPathRoot);
		}
		#endregion
		#region ValueConstraint domain role code
		
		/// <summary>
		/// ValueConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid ValueConstraintDomainRoleId = new global::System.Guid(0xcf8d1b46, 0xa59d, 0x4ffb, 0xad, 0x71, 0x27, 0x71, 0x93, 0x33, 0x37, 0x35);
		
		/// <summary>
		/// DomainRole ValueConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathRootHasValueConstraint.ValueConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathRootHasValueConstraint/ValueConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathRootHasValueConstraint/ValueConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "PathRoot", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathRootHasValueConstraint/ValueConstraint.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("cf8d1b46-a59d-4ffb-ad71-277193333735")]
		public virtual PathConditionRootValueConstraint ValueConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PathConditionRootValueConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, ValueConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ValueConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ValueConstraint of a RolePathObjectTypeRoot
		/// <summary>
		/// Gets ValueConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static PathConditionRootValueConstraint GetValueConstraint(RolePathObjectTypeRoot element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PathRootDomainRoleId) as PathConditionRootValueConstraint;
		}
		
		/// <summary>
		/// Sets ValueConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetValueConstraint(RolePathObjectTypeRoot element, PathConditionRootValueConstraint newValueConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PathRootDomainRoleId, newValueConstraint);
		}
		#endregion
		#region PathRoot link accessor
		/// <summary>
		/// Get the RolePathRootHasValueConstraint link to a RolePathObjectTypeRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathRootHasValueConstraint GetLinkToValueConstraint (global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot pathRootInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathRootHasValueConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathRootHasValueConstraint>(pathRootInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathRootHasValueConstraint.PathRootDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of PathRoot not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ValueConstraint link accessor
		/// <summary>
		/// Get the RolePathRootHasValueConstraint link to a PathConditionRootValueConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathRootHasValueConstraint GetLinkToPathRoot (global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathConditionRootValueConstraint valueConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathRootHasValueConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathRootHasValueConstraint>(valueConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathRootHasValueConstraint.ValueConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ValueConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region RolePathRootHasValueConstraint instance accessors
		
		/// <summary>
		/// Get any RolePathRootHasValueConstraint links between a given RolePathObjectTypeRoot and a PathConditionRootValueConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathRootHasValueConstraint> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathConditionRootValueConstraint target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathRootHasValueConstraint> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathRootHasValueConstraint>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathRootHasValueConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathRootHasValueConstraint>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathRootHasValueConstraint.PathRootDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathRootHasValueConstraint link in links )
			{
				if ( target.Equals(link.ValueConstraint) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RolePathRootHasValueConstraint link between a given RolePathObjectTypeRootand a PathConditionRootValueConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathRootHasValueConstraint GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathConditionRootValueConstraint target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathRootHasValueConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathRootHasValueConstraint>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathRootHasValueConstraint.PathRootDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathRootHasValueConstraint link in links )
			{
				if ( target.Equals(link.ValueConstraint) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ValueConstraintHasValueRange
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRange
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRange.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRange.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("53b596ba-0506-4533-80b0-391891c61c9a")]
	public partial class ValueConstraintHasValueRange : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ValueConstraintHasValueRange domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x53b596ba, 0x0506, 0x4533, 0x80, 0xb0, 0x39, 0x18, 0x91, 0xc6, 0x1c, 0x9a);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ValueConstraintHasValueRange link in the same Partition as the given ValueConstraint
		/// </summary>
		/// <param name="source">ValueConstraint to use as the source of the relationship.</param>
		/// <param name="target">ValueRange to use as the target of the relationship.</param>
		public ValueConstraintHasValueRange(ValueConstraint source, ValueRange target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ValueConstraintHasValueRange.ValueConstraintDomainRoleId, source), new DslModeling::RoleAssignment(ValueConstraintHasValueRange.ValueRangeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ValueConstraintHasValueRange(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ValueConstraintHasValueRange(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ValueConstraintHasValueRange(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ValueConstraintHasValueRange(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ValueConstraint domain role code
		
		/// <summary>
		/// ValueConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid ValueConstraintDomainRoleId = new global::System.Guid(0xd3706490, 0xd843, 0x45c0, 0x89, 0x48, 0xc6, 0xcc, 0x6a, 0x3d, 0x80, 0x4c);
		
		/// <summary>
		/// DomainRole ValueConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRange.ValueConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRange/ValueConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRange/ValueConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ValueRangeCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRange/ValueConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("d3706490-d843-45c0-8948-c6cc6a3d804c")]
		public virtual ValueConstraint ValueConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ValueConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, ValueConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ValueConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ValueConstraint of a ValueRange
		/// <summary>
		/// Gets ValueConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ValueConstraint GetValueConstraint(ValueRange element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ValueRangeDomainRoleId) as ValueConstraint;
		}
		
		/// <summary>
		/// Sets ValueConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetValueConstraint(ValueRange element, ValueConstraint newValueConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ValueRangeDomainRoleId, newValueConstraint);
		}
		#endregion
		#region ValueRange domain role code
		
		/// <summary>
		/// ValueRange domain role Id.
		/// </summary>
		public static readonly global::System.Guid ValueRangeDomainRoleId = new global::System.Guid(0x42afa13d, 0xe73d, 0x47ca, 0x87, 0x50, 0x66, 0x05, 0xcb, 0x82, 0x01, 0x38);
		
		/// <summary>
		/// DomainRole ValueRange
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRange.ValueRange
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRange/ValueRange.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRange/ValueRange.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ValueConstraint", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRange/ValueRange.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("42afa13d-e73d-47ca-8750-6605cb820138")]
		public virtual ValueRange ValueRange
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ValueRange)DslModeling::DomainRoleInfo.GetRolePlayer(this, ValueRangeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ValueRangeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ValueRangeCollection of a ValueConstraint
		/// <summary>
		/// Gets a list of ValueRangeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ValueRange> GetValueRangeCollection(ValueConstraint element)
		{
			return new DslModeling::LinkedElementCollection<ValueRange>(element, ValueConstraintDomainRoleId);
		}
		#endregion
		#region ValueConstraint link accessor
		/// <summary>
		/// Get the list of ValueConstraintHasValueRange links to a ValueConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRange> GetLinksToValueRangeCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraint valueConstraintInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRange>(valueConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRange.ValueConstraintDomainRoleId);
		}
		#endregion
		#region ValueRange link accessor
		/// <summary>
		/// Get the ValueConstraintHasValueRange link to a ValueRange.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRange GetLinkToValueConstraint (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRange valueRangeInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRange> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRange>(valueRangeInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRange.ValueRangeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ValueRange not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ValueConstraintHasValueRange instance accessors
		
		/// <summary>
		/// Get any ValueConstraintHasValueRange links between a given ValueConstraint and a ValueRange.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRange> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRange target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRange> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRange>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRange> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRange>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRange.ValueConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRange link in links )
			{
				if ( target.Equals(link.ValueRange) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ValueConstraintHasValueRange link between a given ValueConstraintand a ValueRange.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRange GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRange target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRange> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRange>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRange.ValueConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRange link in links )
			{
				if ( target.Equals(link.ValueRange) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship CardinalityConstraintHasRange
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRange
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRange.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRange.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("cdcb9830-0f09-4524-b615-06d21aa02532")]
	public partial class CardinalityConstraintHasRange : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CardinalityConstraintHasRange domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xcdcb9830, 0x0f09, 0x4524, 0xb6, 0x15, 0x06, 0xd2, 0x1a, 0xa0, 0x25, 0x32);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CardinalityConstraintHasRange link in the same Partition as the given CardinalityConstraint
		/// </summary>
		/// <param name="source">CardinalityConstraint to use as the source of the relationship.</param>
		/// <param name="target">CardinalityRange to use as the target of the relationship.</param>
		public CardinalityConstraintHasRange(CardinalityConstraint source, CardinalityRange target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CardinalityConstraintHasRange.ConstraintDomainRoleId, source), new DslModeling::RoleAssignment(CardinalityConstraintHasRange.RangeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CardinalityConstraintHasRange(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CardinalityConstraintHasRange(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CardinalityConstraintHasRange(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CardinalityConstraintHasRange(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Constraint domain role code
		
		/// <summary>
		/// Constraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConstraintDomainRoleId = new global::System.Guid(0x871da0c3, 0x5c2e, 0x41ab, 0xb5, 0x47, 0x8d, 0xc9, 0xd0, 0xde, 0x99, 0x0d);
		
		/// <summary>
		/// DomainRole Constraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRange.Constraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRange/Constraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRange/Constraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "RangeCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRange/Constraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("871da0c3-5c2e-41ab-b547-8dc9d0de990d")]
		public virtual CardinalityConstraint Constraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CardinalityConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CardinalityConstraint of a CardinalityRange
		/// <summary>
		/// Gets CardinalityConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static CardinalityConstraint GetCardinalityConstraint(CardinalityRange element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RangeDomainRoleId) as CardinalityConstraint;
		}
		
		/// <summary>
		/// Sets CardinalityConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetCardinalityConstraint(CardinalityRange element, CardinalityConstraint newConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RangeDomainRoleId, newConstraint);
		}
		#endregion
		#region Range domain role code
		
		/// <summary>
		/// Range domain role Id.
		/// </summary>
		public static readonly global::System.Guid RangeDomainRoleId = new global::System.Guid(0x2529bb18, 0xa837, 0x41db, 0xa7, 0xf8, 0x07, 0x24, 0xb5, 0xfb, 0x42, 0x64);
		
		/// <summary>
		/// DomainRole Range
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRange.Range
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRange/Range.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRange/Range.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "CardinalityConstraint", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRange/Range.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("2529bb18-a837-41db-a7f8-0724b5fb4264")]
		public virtual CardinalityRange Range
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CardinalityRange)DslModeling::DomainRoleInfo.GetRolePlayer(this, RangeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RangeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RangeCollection of a CardinalityConstraint
		/// <summary>
		/// Gets a list of RangeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<CardinalityRange> GetRangeCollection(CardinalityConstraint element)
		{
			return new DslModeling::LinkedElementCollection<CardinalityRange>(element, ConstraintDomainRoleId);
		}
		#endregion
		#region Constraint link accessor
		/// <summary>
		/// Get the list of CardinalityConstraintHasRange links to a CardinalityConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRange> GetLinksToRangeCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraint constraintInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRange>(constraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRange.ConstraintDomainRoleId);
		}
		#endregion
		#region Range link accessor
		/// <summary>
		/// Get the CardinalityConstraintHasRange link to a CardinalityRange.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRange GetLinkToCardinalityConstraint (global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityRange rangeInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRange> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRange>(rangeInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRange.RangeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Range not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CardinalityConstraintHasRange instance accessors
		
		/// <summary>
		/// Get any CardinalityConstraintHasRange links between a given CardinalityConstraint and a CardinalityRange.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRange> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityRange target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRange> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRange>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRange> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRange>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRange.ConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRange link in links )
			{
				if ( target.Equals(link.Range) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CardinalityConstraintHasRange link between a given CardinalityConstraintand a CardinalityRange.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRange GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityRange target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRange> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRange>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRange.ConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRange link in links )
			{
				if ( target.Equals(link.Range) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship CardinalityConstraintHasRangeOverlapError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRangeOverlapError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRangeOverlapError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRangeOverlapError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("b0f6669b-c275-46a5-86d9-899abfdf4b24")]
	public partial class CardinalityConstraintHasRangeOverlapError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CardinalityConstraintHasRangeOverlapError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb0f6669b, 0xc275, 0x46a5, 0x86, 0xd9, 0x89, 0x9a, 0xbf, 0xdf, 0x4b, 0x24);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CardinalityConstraintHasRangeOverlapError link in the same Partition as the given CardinalityConstraint
		/// </summary>
		/// <param name="source">CardinalityConstraint to use as the source of the relationship.</param>
		/// <param name="target">CardinalityRangeOverlapError to use as the target of the relationship.</param>
		public CardinalityConstraintHasRangeOverlapError(CardinalityConstraint source, CardinalityRangeOverlapError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CardinalityConstraintHasRangeOverlapError.CardinalityConstraintDomainRoleId, source), new DslModeling::RoleAssignment(CardinalityConstraintHasRangeOverlapError.CardinalityRangeOverlapErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CardinalityConstraintHasRangeOverlapError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CardinalityConstraintHasRangeOverlapError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CardinalityConstraintHasRangeOverlapError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CardinalityConstraintHasRangeOverlapError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region CardinalityConstraint domain role code
		
		/// <summary>
		/// CardinalityConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid CardinalityConstraintDomainRoleId = new global::System.Guid(0x77000081, 0x0a50, 0x4573, 0x81, 0xda, 0x1f, 0x93, 0x75, 0xab, 0xb3, 0x53);
		
		/// <summary>
		/// DomainRole CardinalityConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRangeOverlapError.CardinalityConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRangeOverlapError/CardinalityConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRangeOverlapError/CardinalityConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "CardinalityRangeOverlapError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRangeOverlapError/CardinalityConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("77000081-0a50-4573-81da-1f9375abb353")]
		public virtual CardinalityConstraint CardinalityConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CardinalityConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, CardinalityConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CardinalityConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CardinalityConstraint of a CardinalityRangeOverlapError
		/// <summary>
		/// Gets CardinalityConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static CardinalityConstraint GetCardinalityConstraint(CardinalityRangeOverlapError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CardinalityRangeOverlapErrorDomainRoleId) as CardinalityConstraint;
		}
		
		/// <summary>
		/// Sets CardinalityConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetCardinalityConstraint(CardinalityRangeOverlapError element, CardinalityConstraint newCardinalityConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CardinalityRangeOverlapErrorDomainRoleId, newCardinalityConstraint);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing CardinalityConstraint domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.CardinalityConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.CardinalityConstraint = (CardinalityConstraint)value;
			}
		}
		
		#endregion
		#region CardinalityRangeOverlapError domain role code
		
		/// <summary>
		/// CardinalityRangeOverlapError domain role Id.
		/// </summary>
		public static readonly global::System.Guid CardinalityRangeOverlapErrorDomainRoleId = new global::System.Guid(0xa4dc71c4, 0x3677, 0x4f38, 0xae, 0x2e, 0x19, 0xb4, 0xe9, 0xc4, 0xe0, 0x2a);
		
		/// <summary>
		/// DomainRole CardinalityRangeOverlapError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRangeOverlapError.CardinalityRangeOverlapError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRangeOverlapError/CardinalityRangeOverlapError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRangeOverlapError/CardinalityRangeOverlapError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "CardinalityConstraint", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRangeOverlapError/CardinalityRangeOverlapError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("a4dc71c4-3677-4f38-ae2e-19b4e9c4e02a")]
		public virtual CardinalityRangeOverlapError CardinalityRangeOverlapError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CardinalityRangeOverlapError)DslModeling::DomainRoleInfo.GetRolePlayer(this, CardinalityRangeOverlapErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CardinalityRangeOverlapErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CardinalityRangeOverlapError of a CardinalityConstraint
		/// <summary>
		/// Gets CardinalityRangeOverlapError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static CardinalityRangeOverlapError GetCardinalityRangeOverlapError(CardinalityConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CardinalityConstraintDomainRoleId) as CardinalityRangeOverlapError;
		}
		
		/// <summary>
		/// Sets CardinalityRangeOverlapError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetCardinalityRangeOverlapError(CardinalityConstraint element, CardinalityRangeOverlapError newCardinalityRangeOverlapError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CardinalityConstraintDomainRoleId, newCardinalityRangeOverlapError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing CardinalityRangeOverlapError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.CardinalityRangeOverlapError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.CardinalityRangeOverlapError = (CardinalityRangeOverlapError)value;
			}
		}
		
		#endregion
		#region CardinalityConstraint link accessor
		/// <summary>
		/// Get the CardinalityConstraintHasRangeOverlapError link to a CardinalityConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRangeOverlapError GetLinkToCardinalityRangeOverlapError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraint cardinalityConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRangeOverlapError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRangeOverlapError>(cardinalityConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRangeOverlapError.CardinalityConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CardinalityConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CardinalityRangeOverlapError link accessor
		/// <summary>
		/// Get the CardinalityConstraintHasRangeOverlapError link to a CardinalityRangeOverlapError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRangeOverlapError GetLinkToCardinalityConstraint (global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityRangeOverlapError cardinalityRangeOverlapErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRangeOverlapError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRangeOverlapError>(cardinalityRangeOverlapErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRangeOverlapError.CardinalityRangeOverlapErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CardinalityRangeOverlapError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CardinalityConstraintHasRangeOverlapError instance accessors
		
		/// <summary>
		/// Get any CardinalityConstraintHasRangeOverlapError links between a given CardinalityConstraint and a CardinalityRangeOverlapError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRangeOverlapError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityRangeOverlapError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRangeOverlapError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRangeOverlapError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRangeOverlapError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRangeOverlapError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRangeOverlapError.CardinalityConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRangeOverlapError link in links )
			{
				if ( target.Equals(link.CardinalityRangeOverlapError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CardinalityConstraintHasRangeOverlapError link between a given CardinalityConstraintand a CardinalityRangeOverlapError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRangeOverlapError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityRangeOverlapError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRangeOverlapError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRangeOverlapError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRangeOverlapError.CardinalityConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRangeOverlapError link in links )
			{
				if ( target.Equals(link.CardinalityRangeOverlapError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ValueTypeHasUnspecifiedDataTypeError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasUnspecifiedDataTypeError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("f2a79e36-a317-4c36-81da-d562d2afbf09")]
	public partial class ValueTypeHasUnspecifiedDataTypeError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ValueTypeHasUnspecifiedDataTypeError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf2a79e36, 0xa317, 0x4c36, 0x81, 0xda, 0xd5, 0x62, 0xd2, 0xaf, 0xbf, 0x09);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ValueTypeHasUnspecifiedDataTypeError link in the same Partition as the given ValueTypeHasDataType
		/// </summary>
		/// <param name="source">ValueTypeHasDataType to use as the source of the relationship.</param>
		/// <param name="target">DataTypeNotSpecifiedError to use as the target of the relationship.</param>
		public ValueTypeHasUnspecifiedDataTypeError(ValueTypeHasDataType source, DataTypeNotSpecifiedError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ValueTypeHasUnspecifiedDataTypeError.ValueTypeHasDataTypeDomainRoleId, source), new DslModeling::RoleAssignment(ValueTypeHasUnspecifiedDataTypeError.DataTypeNotSpecifiedErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ValueTypeHasUnspecifiedDataTypeError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ValueTypeHasUnspecifiedDataTypeError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ValueTypeHasUnspecifiedDataTypeError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ValueTypeHasUnspecifiedDataTypeError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ValueTypeHasDataType domain role code
		
		/// <summary>
		/// ValueTypeHasDataType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ValueTypeHasDataTypeDomainRoleId = new global::System.Guid(0xe8122190, 0xae46, 0x40d8, 0x80, 0x40, 0x11, 0x8d, 0x57, 0x77, 0x35, 0xa6);
		
		/// <summary>
		/// DomainRole ValueTypeHasDataType
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.ValueTypeHasDataType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasUnspecifiedDataTypeError/ValueTypeHasDataType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasUnspecifiedDataTypeError/ValueTypeHasDataType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DataTypeNotSpecifiedError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasUnspecifiedDataTypeError/ValueTypeHasDataType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("e8122190-ae46-40d8-8040-118d577735a6")]
		public virtual ValueTypeHasDataType ValueTypeHasDataType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ValueTypeHasDataType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ValueTypeHasDataTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ValueTypeHasDataTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ValueTypeHasDataType of a DataTypeNotSpecifiedError
		/// <summary>
		/// Gets ValueTypeHasDataType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ValueTypeHasDataType GetValueTypeHasDataType(DataTypeNotSpecifiedError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DataTypeNotSpecifiedErrorDomainRoleId) as ValueTypeHasDataType;
		}
		
		/// <summary>
		/// Sets ValueTypeHasDataType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetValueTypeHasDataType(DataTypeNotSpecifiedError element, ValueTypeHasDataType newValueTypeHasDataType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DataTypeNotSpecifiedErrorDomainRoleId, newValueTypeHasDataType);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing ValueTypeHasDataType domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ValueTypeHasDataType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ValueTypeHasDataType = (ValueTypeHasDataType)value;
			}
		}
		
		#endregion
		#region DataTypeNotSpecifiedError domain role code
		
		/// <summary>
		/// DataTypeNotSpecifiedError domain role Id.
		/// </summary>
		public static readonly global::System.Guid DataTypeNotSpecifiedErrorDomainRoleId = new global::System.Guid(0x90da103d, 0x40d2, 0x421d, 0x8b, 0xce, 0x88, 0xf6, 0x57, 0xa8, 0xa9, 0x96);
		
		/// <summary>
		/// DomainRole DataTypeNotSpecifiedError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.DataTypeNotSpecifiedError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasUnspecifiedDataTypeError/DataTypeNotSpecifiedError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasUnspecifiedDataTypeError/DataTypeNotSpecifiedError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ValueTypeHasDataType", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasUnspecifiedDataTypeError/DataTypeNotSpecifiedError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("90da103d-40d2-421d-8bce-88f657a8a996")]
		public virtual DataTypeNotSpecifiedError DataTypeNotSpecifiedError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DataTypeNotSpecifiedError)DslModeling::DomainRoleInfo.GetRolePlayer(this, DataTypeNotSpecifiedErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DataTypeNotSpecifiedErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DataTypeNotSpecifiedError of a ValueTypeHasDataType
		/// <summary>
		/// Gets DataTypeNotSpecifiedError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DataTypeNotSpecifiedError GetDataTypeNotSpecifiedError(ValueTypeHasDataType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ValueTypeHasDataTypeDomainRoleId) as DataTypeNotSpecifiedError;
		}
		
		/// <summary>
		/// Sets DataTypeNotSpecifiedError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDataTypeNotSpecifiedError(ValueTypeHasDataType element, DataTypeNotSpecifiedError newDataTypeNotSpecifiedError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ValueTypeHasDataTypeDomainRoleId, newDataTypeNotSpecifiedError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing DataTypeNotSpecifiedError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.DataTypeNotSpecifiedError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.DataTypeNotSpecifiedError = (DataTypeNotSpecifiedError)value;
			}
		}
		
		#endregion
		#region ValueTypeHasDataType link accessor
		/// <summary>
		/// Get the ValueTypeHasUnspecifiedDataTypeError link to a ValueTypeHasDataType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasUnspecifiedDataTypeError GetLinkToDataTypeNotSpecifiedError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasDataType valueTypeHasDataTypeInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasUnspecifiedDataTypeError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasUnspecifiedDataTypeError>(valueTypeHasDataTypeInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.ValueTypeHasDataTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ValueTypeHasDataType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DataTypeNotSpecifiedError link accessor
		/// <summary>
		/// Get the ValueTypeHasUnspecifiedDataTypeError link to a DataTypeNotSpecifiedError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasUnspecifiedDataTypeError GetLinkToValueTypeHasDataType (global::ORMSolutions.ORMArchitect.Core.ObjectModel.DataTypeNotSpecifiedError dataTypeNotSpecifiedErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasUnspecifiedDataTypeError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasUnspecifiedDataTypeError>(dataTypeNotSpecifiedErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.DataTypeNotSpecifiedErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DataTypeNotSpecifiedError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ValueTypeHasUnspecifiedDataTypeError instance accessors
		
		/// <summary>
		/// Get any ValueTypeHasUnspecifiedDataTypeError links between a given ValueTypeHasDataType and a DataTypeNotSpecifiedError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasUnspecifiedDataTypeError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasDataType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DataTypeNotSpecifiedError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasUnspecifiedDataTypeError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasUnspecifiedDataTypeError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasUnspecifiedDataTypeError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasUnspecifiedDataTypeError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.ValueTypeHasDataTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasUnspecifiedDataTypeError link in links )
			{
				if ( target.Equals(link.DataTypeNotSpecifiedError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ValueTypeHasUnspecifiedDataTypeError link between a given ValueTypeHasDataTypeand a DataTypeNotSpecifiedError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasUnspecifiedDataTypeError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasDataType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DataTypeNotSpecifiedError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasUnspecifiedDataTypeError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasUnspecifiedDataTypeError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.ValueTypeHasDataTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasUnspecifiedDataTypeError link in links )
			{
				if ( target.Equals(link.DataTypeNotSpecifiedError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship SetComparisonConstraintHasCompatibleRolePlayerTypeError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("13410c4f-ffed-4b0f-ad0b-bd48d09b4310")]
	public partial class SetComparisonConstraintHasCompatibleRolePlayerTypeError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SetComparisonConstraintHasCompatibleRolePlayerTypeError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x13410c4f, 0xffed, 0x4b0f, 0xad, 0x0b, 0xbd, 0x48, 0xd0, 0x9b, 0x43, 0x10);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SetComparisonConstraintHasCompatibleRolePlayerTypeError link in the same Partition as the given SetComparisonConstraint
		/// </summary>
		/// <param name="source">SetComparisonConstraint to use as the source of the relationship.</param>
		/// <param name="target">CompatibleRolePlayerTypeError to use as the target of the relationship.</param>
		public SetComparisonConstraintHasCompatibleRolePlayerTypeError(SetComparisonConstraint source, CompatibleRolePlayerTypeError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SetComparisonConstraintHasCompatibleRolePlayerTypeError.SetComparisonConstraintDomainRoleId, source), new DslModeling::RoleAssignment(SetComparisonConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetComparisonConstraintHasCompatibleRolePlayerTypeError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetComparisonConstraintHasCompatibleRolePlayerTypeError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetComparisonConstraintHasCompatibleRolePlayerTypeError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetComparisonConstraintHasCompatibleRolePlayerTypeError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SetComparisonConstraint domain role code
		
		/// <summary>
		/// SetComparisonConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid SetComparisonConstraintDomainRoleId = new global::System.Guid(0xb1660d4f, 0xf77a, 0x4fe2, 0x9d, 0xdc, 0xdf, 0xbf, 0xab, 0x54, 0x5b, 0x92);
		
		/// <summary>
		/// DomainRole SetComparisonConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError.SetComparisonConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError/SetComparisonConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError/SetComparisonConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "CompatibleRolePlayerTypeErrorCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError/SetComparisonConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b1660d4f-f77a-4fe2-9ddc-dfbfab545b92")]
		public virtual SetComparisonConstraint SetComparisonConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SetComparisonConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SetComparisonConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SetComparisonConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SetComparisonConstraint of a CompatibleRolePlayerTypeError
		/// <summary>
		/// Gets SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SetComparisonConstraint GetSetComparisonConstraint(CompatibleRolePlayerTypeError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CompatibleRolePlayerTypeErrorDomainRoleId) as SetComparisonConstraint;
		}
		
		/// <summary>
		/// Sets SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSetComparisonConstraint(CompatibleRolePlayerTypeError element, SetComparisonConstraint newSetComparisonConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CompatibleRolePlayerTypeErrorDomainRoleId, newSetComparisonConstraint);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing SetComparisonConstraint domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.SetComparisonConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.SetComparisonConstraint = (SetComparisonConstraint)value;
			}
		}
		
		#endregion
		#region CompatibleRolePlayerTypeError domain role code
		
		/// <summary>
		/// CompatibleRolePlayerTypeError domain role Id.
		/// </summary>
		public static readonly global::System.Guid CompatibleRolePlayerTypeErrorDomainRoleId = new global::System.Guid(0x159eb571, 0xd8e0, 0x495e, 0x9f, 0x51, 0x85, 0xea, 0xbc, 0xf9, 0x5f, 0x0c);
		
		/// <summary>
		/// DomainRole CompatibleRolePlayerTypeError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError/CompatibleRolePlayerTypeError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError/CompatibleRolePlayerTypeError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SetComparisonConstraint", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError/CompatibleRolePlayerTypeError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("159eb571-d8e0-495e-9f51-85eabcf95f0c")]
		public virtual CompatibleRolePlayerTypeError CompatibleRolePlayerTypeError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CompatibleRolePlayerTypeError)DslModeling::DomainRoleInfo.GetRolePlayer(this, CompatibleRolePlayerTypeErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CompatibleRolePlayerTypeErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CompatibleRolePlayerTypeErrorCollection of a SetComparisonConstraint
		/// <summary>
		/// Gets a list of CompatibleRolePlayerTypeErrorCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<CompatibleRolePlayerTypeError> GetCompatibleRolePlayerTypeErrorCollection(SetComparisonConstraint element)
		{
			return new DslModeling::LinkedElementCollection<CompatibleRolePlayerTypeError>(element, SetComparisonConstraintDomainRoleId);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing CompatibleRolePlayerTypeError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.CompatibleRolePlayerTypeError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.CompatibleRolePlayerTypeError = (CompatibleRolePlayerTypeError)value;
			}
		}
		
		#endregion
		#region SetComparisonConstraint link accessor
		/// <summary>
		/// Get the list of SetComparisonConstraintHasCompatibleRolePlayerTypeError links to a SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError> GetLinksToCompatibleRolePlayerTypeErrorCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint setComparisonConstraintInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError>(setComparisonConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError.SetComparisonConstraintDomainRoleId);
		}
		#endregion
		#region CompatibleRolePlayerTypeError link accessor
		/// <summary>
		/// Get the SetComparisonConstraintHasCompatibleRolePlayerTypeError link to a CompatibleRolePlayerTypeError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError GetLinkToSetComparisonConstraint (global::ORMSolutions.ORMArchitect.Core.ObjectModel.CompatibleRolePlayerTypeError compatibleRolePlayerTypeErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError>(compatibleRolePlayerTypeErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CompatibleRolePlayerTypeError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SetComparisonConstraintHasCompatibleRolePlayerTypeError instance accessors
		
		/// <summary>
		/// Get any SetComparisonConstraintHasCompatibleRolePlayerTypeError links between a given SetComparisonConstraint and a CompatibleRolePlayerTypeError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CompatibleRolePlayerTypeError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError.SetComparisonConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError link in links )
			{
				if ( target.Equals(link.CompatibleRolePlayerTypeError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SetComparisonConstraintHasCompatibleRolePlayerTypeError link between a given SetComparisonConstraintand a CompatibleRolePlayerTypeError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CompatibleRolePlayerTypeError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError.SetComparisonConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError link in links )
			{
				if ( target.Equals(link.CompatibleRolePlayerTypeError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("15ce0dcf-338d-4b42-8cf3-7d4d144ca320")]
	public partial class SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x15ce0dcf, 0x338d, 0x4b42, 0x8c, 0xf3, 0x7d, 0x4d, 0x14, 0x4c, 0xa3, 0x20);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError link in the same Partition as the given SubsetConstraint
		/// </summary>
		/// <param name="source">SubsetConstraint to use as the source of the relationship.</param>
		/// <param name="target">SupersetRoleOfSubtypeSubsetConstraintNotSubtypeError to use as the target of the relationship.</param>
		public SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError(SubsetConstraint source, SupersetRoleOfSubtypeSubsetConstraintNotSubtypeError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError.SubsetConstraintDomainRoleId, source), new DslModeling::RoleAssignment(SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError.SupersetRoleOfSubtypeSubsetConstraintNotSubtypeErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SubsetConstraint domain role code
		
		/// <summary>
		/// SubsetConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubsetConstraintDomainRoleId = new global::System.Guid(0xbe759467, 0x09e0, 0x43fc, 0x9a, 0xb2, 0x43, 0x0c, 0xac, 0xf9, 0x08, 0xab);
		
		/// <summary>
		/// DomainRole SubsetConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError.SubsetConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError/SubsetConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError/SubsetConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "SupersetRoleOfSubtypeSubsetConstraintNotSubtypeError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError/SubsetConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("be759467-09e0-43fc-9ab2-430cacf908ab")]
		public virtual SubsetConstraint SubsetConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SubsetConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubsetConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubsetConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SubsetConstraint of a SupersetRoleOfSubtypeSubsetConstraintNotSubtypeError
		/// <summary>
		/// Gets SubsetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SubsetConstraint GetSubsetConstraint(SupersetRoleOfSubtypeSubsetConstraintNotSubtypeError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SupersetRoleOfSubtypeSubsetConstraintNotSubtypeErrorDomainRoleId) as SubsetConstraint;
		}
		
		/// <summary>
		/// Sets SubsetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSubsetConstraint(SupersetRoleOfSubtypeSubsetConstraintNotSubtypeError element, SubsetConstraint newSubsetConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SupersetRoleOfSubtypeSubsetConstraintNotSubtypeErrorDomainRoleId, newSubsetConstraint);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing SubsetConstraint domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.SubsetConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.SubsetConstraint = (SubsetConstraint)value;
			}
		}
		
		#endregion
		#region SupersetRoleOfSubtypeSubsetConstraintNotSubtypeError domain role code
		
		/// <summary>
		/// SupersetRoleOfSubtypeSubsetConstraintNotSubtypeError domain role Id.
		/// </summary>
		public static readonly global::System.Guid SupersetRoleOfSubtypeSubsetConstraintNotSubtypeErrorDomainRoleId = new global::System.Guid(0x9464f522, 0xe9a9, 0x4e9d, 0x89, 0x58, 0xd2, 0x4d, 0x51, 0x16, 0xc5, 0x23);
		
		/// <summary>
		/// DomainRole SupersetRoleOfSubtypeSubsetConstraintNotSubtypeError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError.SupersetRoleOfSubtypeSubsetConstraintNotSubtypeError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError/SupersetRoleOfSubtypeSubsetConstraintNotSubtypeError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError/SupersetRoleOfSubtypeSubsetConstraintNotSubtypeError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SubsetConstraint", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError/SupersetRoleOfSubtypeSubsetConstraintNotSubtypeError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("9464f522-e9a9-4e9d-8958-d24d5116c523")]
		public virtual SupersetRoleOfSubtypeSubsetConstraintNotSubtypeError SupersetRoleOfSubtypeSubsetConstraintNotSubtypeError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SupersetRoleOfSubtypeSubsetConstraintNotSubtypeError)DslModeling::DomainRoleInfo.GetRolePlayer(this, SupersetRoleOfSubtypeSubsetConstraintNotSubtypeErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SupersetRoleOfSubtypeSubsetConstraintNotSubtypeErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SupersetRoleOfSubtypeSubsetConstraintNotSubtypeError of a SubsetConstraint
		/// <summary>
		/// Gets SupersetRoleOfSubtypeSubsetConstraintNotSubtypeError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SupersetRoleOfSubtypeSubsetConstraintNotSubtypeError GetSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError(SubsetConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SubsetConstraintDomainRoleId) as SupersetRoleOfSubtypeSubsetConstraintNotSubtypeError;
		}
		
		/// <summary>
		/// Sets SupersetRoleOfSubtypeSubsetConstraintNotSubtypeError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError(SubsetConstraint element, SupersetRoleOfSubtypeSubsetConstraintNotSubtypeError newSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SubsetConstraintDomainRoleId, newSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing SupersetRoleOfSubtypeSubsetConstraintNotSubtypeError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.SupersetRoleOfSubtypeSubsetConstraintNotSubtypeError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.SupersetRoleOfSubtypeSubsetConstraintNotSubtypeError = (SupersetRoleOfSubtypeSubsetConstraintNotSubtypeError)value;
			}
		}
		
		#endregion
		#region SubsetConstraint link accessor
		/// <summary>
		/// Get the SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError link to a SubsetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError GetLinkToSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraint subsetConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError>(subsetConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError.SubsetConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SubsetConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SupersetRoleOfSubtypeSubsetConstraintNotSubtypeError link accessor
		/// <summary>
		/// Get the SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError link to a SupersetRoleOfSubtypeSubsetConstraintNotSubtypeError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError GetLinkToSubsetConstraint (global::ORMSolutions.ORMArchitect.Core.ObjectModel.SupersetRoleOfSubtypeSubsetConstraintNotSubtypeError supersetRoleOfSubtypeSubsetConstraintNotSubtypeErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError>(supersetRoleOfSubtypeSubsetConstraintNotSubtypeErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError.SupersetRoleOfSubtypeSubsetConstraintNotSubtypeErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SupersetRoleOfSubtypeSubsetConstraintNotSubtypeError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError instance accessors
		
		/// <summary>
		/// Get any SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError links between a given SubsetConstraint and a SupersetRoleOfSubtypeSubsetConstraintNotSubtypeError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SupersetRoleOfSubtypeSubsetConstraintNotSubtypeError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError.SubsetConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError link in links )
			{
				if ( target.Equals(link.SupersetRoleOfSubtypeSubsetConstraintNotSubtypeError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError link between a given SubsetConstraintand a SupersetRoleOfSubtypeSubsetConstraintNotSubtypeError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SupersetRoleOfSubtypeSubsetConstraintNotSubtypeError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError.SubsetConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError link in links )
			{
				if ( target.Equals(link.SupersetRoleOfSubtypeSubsetConstraintNotSubtypeError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship SetConstraintHasCompatibleRolePlayerTypeError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("91cde095-28d9-4852-b171-430fe5a29429")]
	public partial class SetConstraintHasCompatibleRolePlayerTypeError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SetConstraintHasCompatibleRolePlayerTypeError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x91cde095, 0x28d9, 0x4852, 0xb1, 0x71, 0x43, 0x0f, 0xe5, 0xa2, 0x94, 0x29);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SetConstraintHasCompatibleRolePlayerTypeError link in the same Partition as the given SetConstraint
		/// </summary>
		/// <param name="source">SetConstraint to use as the source of the relationship.</param>
		/// <param name="target">CompatibleRolePlayerTypeError to use as the target of the relationship.</param>
		public SetConstraintHasCompatibleRolePlayerTypeError(SetConstraint source, CompatibleRolePlayerTypeError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SetConstraintHasCompatibleRolePlayerTypeError.SetConstraintDomainRoleId, source), new DslModeling::RoleAssignment(SetConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetConstraintHasCompatibleRolePlayerTypeError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetConstraintHasCompatibleRolePlayerTypeError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetConstraintHasCompatibleRolePlayerTypeError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetConstraintHasCompatibleRolePlayerTypeError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SetConstraint domain role code
		
		/// <summary>
		/// SetConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid SetConstraintDomainRoleId = new global::System.Guid(0x171d82ac, 0x46ae, 0x486d, 0xb6, 0x02, 0x62, 0xa0, 0xf4, 0x9c, 0xeb, 0xc0);
		
		/// <summary>
		/// DomainRole SetConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.SetConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError/SetConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError/SetConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "CompatibleRolePlayerTypeError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError/SetConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("171d82ac-46ae-486d-b602-62a0f49cebc0")]
		public virtual SetConstraint SetConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SetConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SetConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SetConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SetConstraint of a CompatibleRolePlayerTypeError
		/// <summary>
		/// Gets SetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SetConstraint GetSetConstraint(CompatibleRolePlayerTypeError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CompatibleRolePlayerTypeErrorDomainRoleId) as SetConstraint;
		}
		
		/// <summary>
		/// Sets SetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSetConstraint(CompatibleRolePlayerTypeError element, SetConstraint newSetConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CompatibleRolePlayerTypeErrorDomainRoleId, newSetConstraint);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing SetConstraint domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.SetConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.SetConstraint = (SetConstraint)value;
			}
		}
		
		#endregion
		#region CompatibleRolePlayerTypeError domain role code
		
		/// <summary>
		/// CompatibleRolePlayerTypeError domain role Id.
		/// </summary>
		public static readonly global::System.Guid CompatibleRolePlayerTypeErrorDomainRoleId = new global::System.Guid(0x60c1d366, 0xc379, 0x41db, 0xad, 0xb6, 0x21, 0x38, 0x02, 0xda, 0x7d, 0xd4);
		
		/// <summary>
		/// DomainRole CompatibleRolePlayerTypeError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError/CompatibleRolePlayerTypeError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError/CompatibleRolePlayerTypeError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SetConstraint", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError/CompatibleRolePlayerTypeError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("60c1d366-c379-41db-adb6-213802da7dd4")]
		public virtual CompatibleRolePlayerTypeError CompatibleRolePlayerTypeError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CompatibleRolePlayerTypeError)DslModeling::DomainRoleInfo.GetRolePlayer(this, CompatibleRolePlayerTypeErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CompatibleRolePlayerTypeErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CompatibleRolePlayerTypeError of a SetConstraint
		/// <summary>
		/// Gets CompatibleRolePlayerTypeError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static CompatibleRolePlayerTypeError GetCompatibleRolePlayerTypeError(SetConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SetConstraintDomainRoleId) as CompatibleRolePlayerTypeError;
		}
		
		/// <summary>
		/// Sets CompatibleRolePlayerTypeError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetCompatibleRolePlayerTypeError(SetConstraint element, CompatibleRolePlayerTypeError newCompatibleRolePlayerTypeError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SetConstraintDomainRoleId, newCompatibleRolePlayerTypeError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing CompatibleRolePlayerTypeError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.CompatibleRolePlayerTypeError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.CompatibleRolePlayerTypeError = (CompatibleRolePlayerTypeError)value;
			}
		}
		
		#endregion
		#region SetConstraint link accessor
		/// <summary>
		/// Get the SetConstraintHasCompatibleRolePlayerTypeError link to a SetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError GetLinkToCompatibleRolePlayerTypeError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint setConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError>(setConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.SetConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SetConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CompatibleRolePlayerTypeError link accessor
		/// <summary>
		/// Get the SetConstraintHasCompatibleRolePlayerTypeError link to a CompatibleRolePlayerTypeError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError GetLinkToSetConstraint (global::ORMSolutions.ORMArchitect.Core.ObjectModel.CompatibleRolePlayerTypeError compatibleRolePlayerTypeErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError>(compatibleRolePlayerTypeErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CompatibleRolePlayerTypeError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SetConstraintHasCompatibleRolePlayerTypeError instance accessors
		
		/// <summary>
		/// Get any SetConstraintHasCompatibleRolePlayerTypeError links between a given SetConstraint and a CompatibleRolePlayerTypeError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CompatibleRolePlayerTypeError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.SetConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError link in links )
			{
				if ( target.Equals(link.CompatibleRolePlayerTypeError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SetConstraintHasCompatibleRolePlayerTypeError link between a given SetConstraintand a CompatibleRolePlayerTypeError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CompatibleRolePlayerTypeError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.SetConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError link in links )
			{
				if ( target.Equals(link.CompatibleRolePlayerTypeError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ConstraintRoleSequenceHasJoinPathRequiredError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPathRequiredError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPathRequiredError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPathRequiredError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("91c09c68-c29d-42f5-b0bc-6bddc7bbc745")]
	public partial class ConstraintRoleSequenceHasJoinPathRequiredError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConstraintRoleSequenceHasJoinPathRequiredError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x91c09c68, 0xc29d, 0x42f5, 0xb0, 0xbc, 0x6b, 0xdd, 0xc7, 0xbb, 0xc7, 0x45);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConstraintRoleSequenceHasJoinPathRequiredError link in the same Partition as the given ConstraintRoleSequence
		/// </summary>
		/// <param name="source">ConstraintRoleSequence to use as the source of the relationship.</param>
		/// <param name="target">JoinPathRequiredError to use as the target of the relationship.</param>
		public ConstraintRoleSequenceHasJoinPathRequiredError(ConstraintRoleSequence source, JoinPathRequiredError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConstraintRoleSequenceHasJoinPathRequiredError.RoleSequenceDomainRoleId, source), new DslModeling::RoleAssignment(ConstraintRoleSequenceHasJoinPathRequiredError.JoinPathRequiredErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConstraintRoleSequenceHasJoinPathRequiredError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConstraintRoleSequenceHasJoinPathRequiredError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConstraintRoleSequenceHasJoinPathRequiredError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConstraintRoleSequenceHasJoinPathRequiredError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region RoleSequence domain role code
		
		/// <summary>
		/// RoleSequence domain role Id.
		/// </summary>
		public static readonly global::System.Guid RoleSequenceDomainRoleId = new global::System.Guid(0x0d1381db, 0x9ca6, 0x465f, 0x81, 0x66, 0x02, 0x85, 0x67, 0x4e, 0xde, 0x13);
		
		/// <summary>
		/// DomainRole RoleSequence
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPathRequiredError.RoleSequence
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPathRequiredError/RoleSequence.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPathRequiredError/RoleSequence.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "JoinPathRequiredError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPathRequiredError/RoleSequence.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("0d1381db-9ca6-465f-8166-0285674ede13")]
		public virtual ConstraintRoleSequence RoleSequence
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConstraintRoleSequence)DslModeling::DomainRoleInfo.GetRolePlayer(this, RoleSequenceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RoleSequenceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RoleSequence of a JoinPathRequiredError
		/// <summary>
		/// Gets RoleSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ConstraintRoleSequence GetRoleSequence(JoinPathRequiredError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, JoinPathRequiredErrorDomainRoleId) as ConstraintRoleSequence;
		}
		
		/// <summary>
		/// Sets RoleSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRoleSequence(JoinPathRequiredError element, ConstraintRoleSequence newRoleSequence)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, JoinPathRequiredErrorDomainRoleId, newRoleSequence);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing RoleSequence domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.RoleSequence;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.RoleSequence = (ConstraintRoleSequence)value;
			}
		}
		
		#endregion
		#region JoinPathRequiredError domain role code
		
		/// <summary>
		/// JoinPathRequiredError domain role Id.
		/// </summary>
		public static readonly global::System.Guid JoinPathRequiredErrorDomainRoleId = new global::System.Guid(0xd1dd16c2, 0x97ce, 0x4615, 0xb7, 0x41, 0x47, 0xda, 0x5e, 0x06, 0xd0, 0x77);
		
		/// <summary>
		/// DomainRole JoinPathRequiredError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPathRequiredError.JoinPathRequiredError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPathRequiredError/JoinPathRequiredError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPathRequiredError/JoinPathRequiredError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "RoleSequence", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPathRequiredError/JoinPathRequiredError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("d1dd16c2-97ce-4615-b741-47da5e06d077")]
		public virtual JoinPathRequiredError JoinPathRequiredError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (JoinPathRequiredError)DslModeling::DomainRoleInfo.GetRolePlayer(this, JoinPathRequiredErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, JoinPathRequiredErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access JoinPathRequiredError of a ConstraintRoleSequence
		/// <summary>
		/// Gets JoinPathRequiredError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static JoinPathRequiredError GetJoinPathRequiredError(ConstraintRoleSequence element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RoleSequenceDomainRoleId) as JoinPathRequiredError;
		}
		
		/// <summary>
		/// Sets JoinPathRequiredError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetJoinPathRequiredError(ConstraintRoleSequence element, JoinPathRequiredError newJoinPathRequiredError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RoleSequenceDomainRoleId, newJoinPathRequiredError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing JoinPathRequiredError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.JoinPathRequiredError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.JoinPathRequiredError = (JoinPathRequiredError)value;
			}
		}
		
		#endregion
		#region RoleSequence link accessor
		/// <summary>
		/// Get the ConstraintRoleSequenceHasJoinPathRequiredError link to a ConstraintRoleSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPathRequiredError GetLinkToJoinPathRequiredError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequence roleSequenceInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPathRequiredError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPathRequiredError>(roleSequenceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPathRequiredError.RoleSequenceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of RoleSequence not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region JoinPathRequiredError link accessor
		/// <summary>
		/// Get the ConstraintRoleSequenceHasJoinPathRequiredError link to a JoinPathRequiredError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPathRequiredError GetLinkToRoleSequence (global::ORMSolutions.ORMArchitect.Core.ObjectModel.JoinPathRequiredError joinPathRequiredErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPathRequiredError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPathRequiredError>(joinPathRequiredErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPathRequiredError.JoinPathRequiredErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of JoinPathRequiredError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ConstraintRoleSequenceHasJoinPathRequiredError instance accessors
		
		/// <summary>
		/// Get any ConstraintRoleSequenceHasJoinPathRequiredError links between a given ConstraintRoleSequence and a JoinPathRequiredError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPathRequiredError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequence source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.JoinPathRequiredError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPathRequiredError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPathRequiredError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPathRequiredError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPathRequiredError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPathRequiredError.RoleSequenceDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPathRequiredError link in links )
			{
				if ( target.Equals(link.JoinPathRequiredError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConstraintRoleSequenceHasJoinPathRequiredError link between a given ConstraintRoleSequenceand a JoinPathRequiredError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPathRequiredError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequence source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.JoinPathRequiredError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPathRequiredError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPathRequiredError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPathRequiredError.RoleSequenceDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPathRequiredError link in links )
			{
				if ( target.Equals(link.JoinPathRequiredError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship UniquenessConstraintHasNMinusOneError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraintHasNMinusOneError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraintHasNMinusOneError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraintHasNMinusOneError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("429f7144-1227-4d0e-b4f8-59ad6ffc7eb3")]
	public partial class UniquenessConstraintHasNMinusOneError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// UniquenessConstraintHasNMinusOneError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x429f7144, 0x1227, 0x4d0e, 0xb4, 0xf8, 0x59, 0xad, 0x6f, 0xfc, 0x7e, 0xb3);
	
				
		/// <summary>
		/// Constructor
		/// Creates a UniquenessConstraintHasNMinusOneError link in the same Partition as the given UniquenessConstraint
		/// </summary>
		/// <param name="source">UniquenessConstraint to use as the source of the relationship.</param>
		/// <param name="target">NMinusOneError to use as the target of the relationship.</param>
		public UniquenessConstraintHasNMinusOneError(UniquenessConstraint source, NMinusOneError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(UniquenessConstraintHasNMinusOneError.ConstraintDomainRoleId, source), new DslModeling::RoleAssignment(UniquenessConstraintHasNMinusOneError.NMinusOneErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UniquenessConstraintHasNMinusOneError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UniquenessConstraintHasNMinusOneError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UniquenessConstraintHasNMinusOneError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UniquenessConstraintHasNMinusOneError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Constraint domain role code
		
		/// <summary>
		/// Constraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConstraintDomainRoleId = new global::System.Guid(0x6165ad47, 0xfb70, 0x4f43, 0x93, 0x6e, 0xe1, 0x62, 0xd0, 0xe8, 0xe9, 0x17);
		
		/// <summary>
		/// DomainRole Constraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraintHasNMinusOneError.Constraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraintHasNMinusOneError/Constraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraintHasNMinusOneError/Constraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "NMinusOneError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraintHasNMinusOneError/Constraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("6165ad47-fb70-4f43-936e-e162d0e8e917")]
		public virtual UniquenessConstraint Constraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (UniquenessConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Constraint of a NMinusOneError
		/// <summary>
		/// Gets Constraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static UniquenessConstraint GetConstraint(NMinusOneError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, NMinusOneErrorDomainRoleId) as UniquenessConstraint;
		}
		
		/// <summary>
		/// Sets Constraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetConstraint(NMinusOneError element, UniquenessConstraint newConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, NMinusOneErrorDomainRoleId, newConstraint);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing Constraint domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.Constraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.Constraint = (UniquenessConstraint)value;
			}
		}
		
		#endregion
		#region NMinusOneError domain role code
		
		/// <summary>
		/// NMinusOneError domain role Id.
		/// </summary>
		public static readonly global::System.Guid NMinusOneErrorDomainRoleId = new global::System.Guid(0x5c3edc3b, 0xe19d, 0x4841, 0xaa, 0x8a, 0x47, 0x00, 0x96, 0x92, 0x80, 0x2f);
		
		/// <summary>
		/// DomainRole NMinusOneError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraintHasNMinusOneError.NMinusOneError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraintHasNMinusOneError/NMinusOneError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraintHasNMinusOneError/NMinusOneError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Constraint", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraintHasNMinusOneError/NMinusOneError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("5c3edc3b-e19d-4841-aa8a-47009692802f")]
		public virtual NMinusOneError NMinusOneError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (NMinusOneError)DslModeling::DomainRoleInfo.GetRolePlayer(this, NMinusOneErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, NMinusOneErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access NMinusOneError of a UniquenessConstraint
		/// <summary>
		/// Gets NMinusOneError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static NMinusOneError GetNMinusOneError(UniquenessConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConstraintDomainRoleId) as NMinusOneError;
		}
		
		/// <summary>
		/// Sets NMinusOneError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetNMinusOneError(UniquenessConstraint element, NMinusOneError newNMinusOneError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConstraintDomainRoleId, newNMinusOneError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing NMinusOneError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.NMinusOneError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.NMinusOneError = (NMinusOneError)value;
			}
		}
		
		#endregion
		#region Constraint link accessor
		/// <summary>
		/// Get the UniquenessConstraintHasNMinusOneError link to a UniquenessConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraintHasNMinusOneError GetLinkToNMinusOneError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraint constraintInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraintHasNMinusOneError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraintHasNMinusOneError>(constraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraintHasNMinusOneError.ConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Constraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region NMinusOneError link accessor
		/// <summary>
		/// Get the UniquenessConstraintHasNMinusOneError link to a NMinusOneError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraintHasNMinusOneError GetLinkToConstraint (global::ORMSolutions.ORMArchitect.Core.ObjectModel.NMinusOneError nMinusOneErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraintHasNMinusOneError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraintHasNMinusOneError>(nMinusOneErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraintHasNMinusOneError.NMinusOneErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of NMinusOneError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region UniquenessConstraintHasNMinusOneError instance accessors
		
		/// <summary>
		/// Get any UniquenessConstraintHasNMinusOneError links between a given UniquenessConstraint and a NMinusOneError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraintHasNMinusOneError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.NMinusOneError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraintHasNMinusOneError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraintHasNMinusOneError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraintHasNMinusOneError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraintHasNMinusOneError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraintHasNMinusOneError.ConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraintHasNMinusOneError link in links )
			{
				if ( target.Equals(link.NMinusOneError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one UniquenessConstraintHasNMinusOneError link between a given UniquenessConstraintand a NMinusOneError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraintHasNMinusOneError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.NMinusOneError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraintHasNMinusOneError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraintHasNMinusOneError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraintHasNMinusOneError.ConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraintHasNMinusOneError link in links )
			{
				if ( target.Equals(link.NMinusOneError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship RoleHasRolePlayerRequiredError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasRolePlayerRequiredError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasRolePlayerRequiredError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasRolePlayerRequiredError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("09e6ac31-2ca1-4126-8c95-bfc571088b2d")]
	public partial class RoleHasRolePlayerRequiredError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RoleHasRolePlayerRequiredError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x09e6ac31, 0x2ca1, 0x4126, 0x8c, 0x95, 0xbf, 0xc5, 0x71, 0x08, 0x8b, 0x2d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RoleHasRolePlayerRequiredError link in the same Partition as the given Role
		/// </summary>
		/// <param name="source">Role to use as the source of the relationship.</param>
		/// <param name="target">RolePlayerRequiredError to use as the target of the relationship.</param>
		public RoleHasRolePlayerRequiredError(Role source, RolePlayerRequiredError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RoleHasRolePlayerRequiredError.RoleDomainRoleId, source), new DslModeling::RoleAssignment(RoleHasRolePlayerRequiredError.RolePlayerRequiredErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RoleHasRolePlayerRequiredError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RoleHasRolePlayerRequiredError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RoleHasRolePlayerRequiredError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RoleHasRolePlayerRequiredError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Role domain role code
		
		/// <summary>
		/// Role domain role Id.
		/// </summary>
		public static readonly global::System.Guid RoleDomainRoleId = new global::System.Guid(0x529b2bed, 0xf8f3, 0x4a9b, 0x95, 0xb7, 0x55, 0xd9, 0xa1, 0xed, 0x5b, 0x44);
		
		/// <summary>
		/// DomainRole Role
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasRolePlayerRequiredError.Role
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasRolePlayerRequiredError/Role.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasRolePlayerRequiredError/Role.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "RolePlayerRequiredError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasRolePlayerRequiredError/Role.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("529b2bed-f8f3-4a9b-95b7-55d9a1ed5b44")]
		public virtual Role Role
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Role)DslModeling::DomainRoleInfo.GetRolePlayer(this, RoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Role of a RolePlayerRequiredError
		/// <summary>
		/// Gets Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Role GetRole(RolePlayerRequiredError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RolePlayerRequiredErrorDomainRoleId) as Role;
		}
		
		/// <summary>
		/// Sets Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRole(RolePlayerRequiredError element, Role newRole)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RolePlayerRequiredErrorDomainRoleId, newRole);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing Role domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.Role;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.Role = (Role)value;
			}
		}
		
		#endregion
		#region RolePlayerRequiredError domain role code
		
		/// <summary>
		/// RolePlayerRequiredError domain role Id.
		/// </summary>
		public static readonly global::System.Guid RolePlayerRequiredErrorDomainRoleId = new global::System.Guid(0xaad1b942, 0xe191, 0x4878, 0x94, 0x21, 0x33, 0xa7, 0xf2, 0xd2, 0x01, 0xf7);
		
		/// <summary>
		/// DomainRole RolePlayerRequiredError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasRolePlayerRequiredError.RolePlayerRequiredError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasRolePlayerRequiredError/RolePlayerRequiredError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasRolePlayerRequiredError/RolePlayerRequiredError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Role", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasRolePlayerRequiredError/RolePlayerRequiredError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("aad1b942-e191-4878-9421-33a7f2d201f7")]
		public virtual RolePlayerRequiredError RolePlayerRequiredError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RolePlayerRequiredError)DslModeling::DomainRoleInfo.GetRolePlayer(this, RolePlayerRequiredErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RolePlayerRequiredErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RolePlayerRequiredError of a Role
		/// <summary>
		/// Gets RolePlayerRequiredError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static RolePlayerRequiredError GetRolePlayerRequiredError(Role element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RoleDomainRoleId) as RolePlayerRequiredError;
		}
		
		/// <summary>
		/// Sets RolePlayerRequiredError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRolePlayerRequiredError(Role element, RolePlayerRequiredError newRolePlayerRequiredError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RoleDomainRoleId, newRolePlayerRequiredError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing RolePlayerRequiredError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.RolePlayerRequiredError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.RolePlayerRequiredError = (RolePlayerRequiredError)value;
			}
		}
		
		#endregion
		#region Role link accessor
		/// <summary>
		/// Get the RoleHasRolePlayerRequiredError link to a Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasRolePlayerRequiredError GetLinkToRolePlayerRequiredError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.Role roleInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasRolePlayerRequiredError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasRolePlayerRequiredError>(roleInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasRolePlayerRequiredError.RoleDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Role not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region RolePlayerRequiredError link accessor
		/// <summary>
		/// Get the RoleHasRolePlayerRequiredError link to a RolePlayerRequiredError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasRolePlayerRequiredError GetLinkToRole (global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePlayerRequiredError rolePlayerRequiredErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasRolePlayerRequiredError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasRolePlayerRequiredError>(rolePlayerRequiredErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasRolePlayerRequiredError.RolePlayerRequiredErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of RolePlayerRequiredError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region RoleHasRolePlayerRequiredError instance accessors
		
		/// <summary>
		/// Get any RoleHasRolePlayerRequiredError links between a given Role and a RolePlayerRequiredError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasRolePlayerRequiredError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.Role source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePlayerRequiredError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasRolePlayerRequiredError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasRolePlayerRequiredError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasRolePlayerRequiredError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasRolePlayerRequiredError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasRolePlayerRequiredError.RoleDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasRolePlayerRequiredError link in links )
			{
				if ( target.Equals(link.RolePlayerRequiredError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RoleHasRolePlayerRequiredError link between a given Roleand a RolePlayerRequiredError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasRolePlayerRequiredError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.Role source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePlayerRequiredError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasRolePlayerRequiredError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasRolePlayerRequiredError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasRolePlayerRequiredError.RoleDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasRolePlayerRequiredError link in links )
			{
				if ( target.Equals(link.RolePlayerRequiredError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ObjectTypeHasEntityTypeRequiresReferenceSchemeError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("1b6cbb8c-d1a6-4949-ac4d-596dc1ce147f")]
	public partial class ObjectTypeHasEntityTypeRequiresReferenceSchemeError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ObjectTypeHasEntityTypeRequiresReferenceSchemeError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1b6cbb8c, 0xd1a6, 0x4949, 0xac, 0x4d, 0x59, 0x6d, 0xc1, 0xce, 0x14, 0x7f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ObjectTypeHasEntityTypeRequiresReferenceSchemeError link in the same Partition as the given ObjectType
		/// </summary>
		/// <param name="source">ObjectType to use as the source of the relationship.</param>
		/// <param name="target">EntityTypeRequiresReferenceSchemeError to use as the target of the relationship.</param>
		public ObjectTypeHasEntityTypeRequiresReferenceSchemeError(ObjectType source, EntityTypeRequiresReferenceSchemeError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ObjectTypeDomainRoleId, source), new DslModeling::RoleAssignment(ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ReferenceSchemeErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectTypeHasEntityTypeRequiresReferenceSchemeError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectTypeHasEntityTypeRequiresReferenceSchemeError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectTypeHasEntityTypeRequiresReferenceSchemeError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectTypeHasEntityTypeRequiresReferenceSchemeError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ObjectType domain role code
		
		/// <summary>
		/// ObjectType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ObjectTypeDomainRoleId = new global::System.Guid(0x7cff7155, 0xb46f, 0x4492, 0xa0, 0x54, 0x80, 0x28, 0x77, 0x2d, 0x75, 0x29);
		
		/// <summary>
		/// DomainRole ObjectType
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ObjectType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError/ObjectType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError/ObjectType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ReferenceSchemeError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError/ObjectType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("7cff7155-b46f-4492-a054-8028772d7529")]
		public virtual ObjectType ObjectType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjectTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjectTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ObjectType of a EntityTypeRequiresReferenceSchemeError
		/// <summary>
		/// Gets ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ObjectType GetObjectType(EntityTypeRequiresReferenceSchemeError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ReferenceSchemeErrorDomainRoleId) as ObjectType;
		}
		
		/// <summary>
		/// Sets ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetObjectType(EntityTypeRequiresReferenceSchemeError element, ObjectType newObjectType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ReferenceSchemeErrorDomainRoleId, newObjectType);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing ObjectType domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ObjectType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ObjectType = (ObjectType)value;
			}
		}
		
		#endregion
		#region ReferenceSchemeError domain role code
		
		/// <summary>
		/// ReferenceSchemeError domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReferenceSchemeErrorDomainRoleId = new global::System.Guid(0x81d1ebc1, 0x8270, 0x4cbc, 0x98, 0x12, 0x31, 0xe2, 0x41, 0x33, 0x91, 0x18);
		
		/// <summary>
		/// DomainRole ReferenceSchemeError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ReferenceSchemeError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError/ReferenceSchemeError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError/ReferenceSchemeError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ObjectType", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError/ReferenceSchemeError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("81d1ebc1-8270-4cbc-9812-31e241339118")]
		public virtual EntityTypeRequiresReferenceSchemeError ReferenceSchemeError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EntityTypeRequiresReferenceSchemeError)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReferenceSchemeErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReferenceSchemeErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ReferenceSchemeError of a ObjectType
		/// <summary>
		/// Gets ReferenceSchemeError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static EntityTypeRequiresReferenceSchemeError GetReferenceSchemeError(ObjectType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ObjectTypeDomainRoleId) as EntityTypeRequiresReferenceSchemeError;
		}
		
		/// <summary>
		/// Sets ReferenceSchemeError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetReferenceSchemeError(ObjectType element, EntityTypeRequiresReferenceSchemeError newReferenceSchemeError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ObjectTypeDomainRoleId, newReferenceSchemeError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing ReferenceSchemeError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ReferenceSchemeError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ReferenceSchemeError = (EntityTypeRequiresReferenceSchemeError)value;
			}
		}
		
		#endregion
		#region ObjectType link accessor
		/// <summary>
		/// Get the ObjectTypeHasEntityTypeRequiresReferenceSchemeError link to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError GetLinkToReferenceSchemeError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType objectTypeInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError>(objectTypeInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ObjectTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ObjectType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ReferenceSchemeError link accessor
		/// <summary>
		/// Get the ObjectTypeHasEntityTypeRequiresReferenceSchemeError link to a EntityTypeRequiresReferenceSchemeError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError GetLinkToObjectType (global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRequiresReferenceSchemeError referenceSchemeErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError>(referenceSchemeErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ReferenceSchemeErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ReferenceSchemeError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ObjectTypeHasEntityTypeRequiresReferenceSchemeError instance accessors
		
		/// <summary>
		/// Get any ObjectTypeHasEntityTypeRequiresReferenceSchemeError links between a given ObjectType and a EntityTypeRequiresReferenceSchemeError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRequiresReferenceSchemeError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ObjectTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError link in links )
			{
				if ( target.Equals(link.ReferenceSchemeError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ObjectTypeHasEntityTypeRequiresReferenceSchemeError link between a given ObjectTypeand a EntityTypeRequiresReferenceSchemeError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRequiresReferenceSchemeError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ObjectTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError link in links )
			{
				if ( target.Equals(link.ReferenceSchemeError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship FrequencyConstraintHasFrequencyConstraintMinMaxError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("2e851b91-fcb9-4b3c-9276-2c2e3a1972c9")]
	public partial class FrequencyConstraintHasFrequencyConstraintMinMaxError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FrequencyConstraintHasFrequencyConstraintMinMaxError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2e851b91, 0xfcb9, 0x4b3c, 0x92, 0x76, 0x2c, 0x2e, 0x3a, 0x19, 0x72, 0xc9);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FrequencyConstraintHasFrequencyConstraintMinMaxError link in the same Partition as the given FrequencyConstraint
		/// </summary>
		/// <param name="source">FrequencyConstraint to use as the source of the relationship.</param>
		/// <param name="target">FrequencyConstraintMinMaxError to use as the target of the relationship.</param>
		public FrequencyConstraintHasFrequencyConstraintMinMaxError(FrequencyConstraint source, FrequencyConstraintMinMaxError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintDomainRoleId, source), new DslModeling::RoleAssignment(FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintMinMaxErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FrequencyConstraintHasFrequencyConstraintMinMaxError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FrequencyConstraintHasFrequencyConstraintMinMaxError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FrequencyConstraintHasFrequencyConstraintMinMaxError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FrequencyConstraintHasFrequencyConstraintMinMaxError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region FrequencyConstraint domain role code
		
		/// <summary>
		/// FrequencyConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid FrequencyConstraintDomainRoleId = new global::System.Guid(0x80542fe3, 0x3450, 0x42ee, 0x9c, 0x22, 0xb1, 0x7e, 0x86, 0x8b, 0x76, 0x95);
		
		/// <summary>
		/// DomainRole FrequencyConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError/FrequencyConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError/FrequencyConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "FrequencyConstraintMinMaxError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError/FrequencyConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("80542fe3-3450-42ee-9c22-b17e868b7695")]
		public virtual FrequencyConstraint FrequencyConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FrequencyConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, FrequencyConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FrequencyConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FrequencyConstraint of a FrequencyConstraintMinMaxError
		/// <summary>
		/// Gets FrequencyConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FrequencyConstraint GetFrequencyConstraint(FrequencyConstraintMinMaxError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FrequencyConstraintMinMaxErrorDomainRoleId) as FrequencyConstraint;
		}
		
		/// <summary>
		/// Sets FrequencyConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFrequencyConstraint(FrequencyConstraintMinMaxError element, FrequencyConstraint newFrequencyConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FrequencyConstraintMinMaxErrorDomainRoleId, newFrequencyConstraint);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing FrequencyConstraint domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.FrequencyConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.FrequencyConstraint = (FrequencyConstraint)value;
			}
		}
		
		#endregion
		#region FrequencyConstraintMinMaxError domain role code
		
		/// <summary>
		/// FrequencyConstraintMinMaxError domain role Id.
		/// </summary>
		public static readonly global::System.Guid FrequencyConstraintMinMaxErrorDomainRoleId = new global::System.Guid(0xe25ca8cb, 0x1265, 0x4f7e, 0xaf, 0x04, 0x36, 0xde, 0xc1, 0xd3, 0x14, 0xe1);
		
		/// <summary>
		/// DomainRole FrequencyConstraintMinMaxError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintMinMaxError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError/FrequencyConstraintMinMaxError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError/FrequencyConstraintMinMaxError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FrequencyConstraint", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError/FrequencyConstraintMinMaxError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("e25ca8cb-1265-4f7e-af04-36dec1d314e1")]
		public virtual FrequencyConstraintMinMaxError FrequencyConstraintMinMaxError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FrequencyConstraintMinMaxError)DslModeling::DomainRoleInfo.GetRolePlayer(this, FrequencyConstraintMinMaxErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FrequencyConstraintMinMaxErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FrequencyConstraintMinMaxError of a FrequencyConstraint
		/// <summary>
		/// Gets FrequencyConstraintMinMaxError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FrequencyConstraintMinMaxError GetFrequencyConstraintMinMaxError(FrequencyConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FrequencyConstraintDomainRoleId) as FrequencyConstraintMinMaxError;
		}
		
		/// <summary>
		/// Sets FrequencyConstraintMinMaxError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFrequencyConstraintMinMaxError(FrequencyConstraint element, FrequencyConstraintMinMaxError newFrequencyConstraintMinMaxError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FrequencyConstraintDomainRoleId, newFrequencyConstraintMinMaxError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing FrequencyConstraintMinMaxError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.FrequencyConstraintMinMaxError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.FrequencyConstraintMinMaxError = (FrequencyConstraintMinMaxError)value;
			}
		}
		
		#endregion
		#region FrequencyConstraint link accessor
		/// <summary>
		/// Get the FrequencyConstraintHasFrequencyConstraintMinMaxError link to a FrequencyConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError GetLinkToFrequencyConstraintMinMaxError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraint frequencyConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError>(frequencyConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of FrequencyConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FrequencyConstraintMinMaxError link accessor
		/// <summary>
		/// Get the FrequencyConstraintHasFrequencyConstraintMinMaxError link to a FrequencyConstraintMinMaxError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError GetLinkToFrequencyConstraint (global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintMinMaxError frequencyConstraintMinMaxErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError>(frequencyConstraintMinMaxErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintMinMaxErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of FrequencyConstraintMinMaxError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FrequencyConstraintHasFrequencyConstraintMinMaxError instance accessors
		
		/// <summary>
		/// Get any FrequencyConstraintHasFrequencyConstraintMinMaxError links between a given FrequencyConstraint and a FrequencyConstraintMinMaxError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintMinMaxError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError link in links )
			{
				if ( target.Equals(link.FrequencyConstraintMinMaxError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FrequencyConstraintHasFrequencyConstraintMinMaxError link between a given FrequencyConstraintand a FrequencyConstraintMinMaxError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintMinMaxError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError link in links )
			{
				if ( target.Equals(link.FrequencyConstraintMinMaxError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship FrequencyConstraintHasFrequencyConstraintExactlyOneError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintExactlyOneError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintExactlyOneError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintExactlyOneError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("5a820704-a594-48c8-9c56-af2567c92d91")]
	public partial class FrequencyConstraintHasFrequencyConstraintExactlyOneError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FrequencyConstraintHasFrequencyConstraintExactlyOneError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5a820704, 0xa594, 0x48c8, 0x9c, 0x56, 0xaf, 0x25, 0x67, 0xc9, 0x2d, 0x91);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FrequencyConstraintHasFrequencyConstraintExactlyOneError link in the same Partition as the given FrequencyConstraint
		/// </summary>
		/// <param name="source">FrequencyConstraint to use as the source of the relationship.</param>
		/// <param name="target">FrequencyConstraintExactlyOneError to use as the target of the relationship.</param>
		public FrequencyConstraintHasFrequencyConstraintExactlyOneError(FrequencyConstraint source, FrequencyConstraintExactlyOneError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FrequencyConstraintHasFrequencyConstraintExactlyOneError.FrequencyConstraintDomainRoleId, source), new DslModeling::RoleAssignment(FrequencyConstraintHasFrequencyConstraintExactlyOneError.FrequencyConstraintExactlyOneErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FrequencyConstraintHasFrequencyConstraintExactlyOneError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FrequencyConstraintHasFrequencyConstraintExactlyOneError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FrequencyConstraintHasFrequencyConstraintExactlyOneError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FrequencyConstraintHasFrequencyConstraintExactlyOneError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region FrequencyConstraint domain role code
		
		/// <summary>
		/// FrequencyConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid FrequencyConstraintDomainRoleId = new global::System.Guid(0x4f690891, 0xf7a0, 0x4c47, 0xb8, 0x90, 0xf0, 0xf6, 0x12, 0x1e, 0xba, 0x3f);
		
		/// <summary>
		/// DomainRole FrequencyConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintExactlyOneError.FrequencyConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintExactlyOneError/FrequencyConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintExactlyOneError/FrequencyConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "FrequencyConstraintExactlyOneError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintExactlyOneError/FrequencyConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("4f690891-f7a0-4c47-b890-f0f6121eba3f")]
		public virtual FrequencyConstraint FrequencyConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FrequencyConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, FrequencyConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FrequencyConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FrequencyConstraint of a FrequencyConstraintExactlyOneError
		/// <summary>
		/// Gets FrequencyConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FrequencyConstraint GetFrequencyConstraint(FrequencyConstraintExactlyOneError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FrequencyConstraintExactlyOneErrorDomainRoleId) as FrequencyConstraint;
		}
		
		/// <summary>
		/// Sets FrequencyConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFrequencyConstraint(FrequencyConstraintExactlyOneError element, FrequencyConstraint newFrequencyConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FrequencyConstraintExactlyOneErrorDomainRoleId, newFrequencyConstraint);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing FrequencyConstraint domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.FrequencyConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.FrequencyConstraint = (FrequencyConstraint)value;
			}
		}
		
		#endregion
		#region FrequencyConstraintExactlyOneError domain role code
		
		/// <summary>
		/// FrequencyConstraintExactlyOneError domain role Id.
		/// </summary>
		public static readonly global::System.Guid FrequencyConstraintExactlyOneErrorDomainRoleId = new global::System.Guid(0x05d223bc, 0xa180, 0x44ef, 0x9e, 0x87, 0xe4, 0xbb, 0x3c, 0x3f, 0x4b, 0x03);
		
		/// <summary>
		/// DomainRole FrequencyConstraintExactlyOneError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintExactlyOneError.FrequencyConstraintExactlyOneError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintExactlyOneError/FrequencyConstraintExactlyOneError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintExactlyOneError/FrequencyConstraintExactlyOneError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FrequencyConstraint", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintExactlyOneError/FrequencyConstraintExactlyOneError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("05d223bc-a180-44ef-9e87-e4bb3c3f4b03")]
		public virtual FrequencyConstraintExactlyOneError FrequencyConstraintExactlyOneError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FrequencyConstraintExactlyOneError)DslModeling::DomainRoleInfo.GetRolePlayer(this, FrequencyConstraintExactlyOneErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FrequencyConstraintExactlyOneErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FrequencyConstraintExactlyOneError of a FrequencyConstraint
		/// <summary>
		/// Gets FrequencyConstraintExactlyOneError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FrequencyConstraintExactlyOneError GetFrequencyConstraintExactlyOneError(FrequencyConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FrequencyConstraintDomainRoleId) as FrequencyConstraintExactlyOneError;
		}
		
		/// <summary>
		/// Sets FrequencyConstraintExactlyOneError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFrequencyConstraintExactlyOneError(FrequencyConstraint element, FrequencyConstraintExactlyOneError newFrequencyConstraintExactlyOneError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FrequencyConstraintDomainRoleId, newFrequencyConstraintExactlyOneError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing FrequencyConstraintExactlyOneError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.FrequencyConstraintExactlyOneError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.FrequencyConstraintExactlyOneError = (FrequencyConstraintExactlyOneError)value;
			}
		}
		
		#endregion
		#region FrequencyConstraint link accessor
		/// <summary>
		/// Get the FrequencyConstraintHasFrequencyConstraintExactlyOneError link to a FrequencyConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintExactlyOneError GetLinkToFrequencyConstraintExactlyOneError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraint frequencyConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintExactlyOneError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintExactlyOneError>(frequencyConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintExactlyOneError.FrequencyConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of FrequencyConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FrequencyConstraintExactlyOneError link accessor
		/// <summary>
		/// Get the FrequencyConstraintHasFrequencyConstraintExactlyOneError link to a FrequencyConstraintExactlyOneError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintExactlyOneError GetLinkToFrequencyConstraint (global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintExactlyOneError frequencyConstraintExactlyOneErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintExactlyOneError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintExactlyOneError>(frequencyConstraintExactlyOneErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintExactlyOneError.FrequencyConstraintExactlyOneErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of FrequencyConstraintExactlyOneError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FrequencyConstraintHasFrequencyConstraintExactlyOneError instance accessors
		
		/// <summary>
		/// Get any FrequencyConstraintHasFrequencyConstraintExactlyOneError links between a given FrequencyConstraint and a FrequencyConstraintExactlyOneError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintExactlyOneError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintExactlyOneError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintExactlyOneError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintExactlyOneError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintExactlyOneError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintExactlyOneError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintExactlyOneError.FrequencyConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintExactlyOneError link in links )
			{
				if ( target.Equals(link.FrequencyConstraintExactlyOneError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FrequencyConstraintHasFrequencyConstraintExactlyOneError link between a given FrequencyConstraintand a FrequencyConstraintExactlyOneError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintExactlyOneError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintExactlyOneError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintExactlyOneError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintExactlyOneError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintExactlyOneError.FrequencyConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintExactlyOneError link in links )
			{
				if ( target.Equals(link.FrequencyConstraintExactlyOneError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("7ba83d76-f96e-4659-8f74-55faf6c529be")]
	public partial class FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7ba83d76, 0xf96e, 0x4659, 0x8f, 0x74, 0x55, 0xfa, 0xf6, 0xc5, 0x29, 0xbe);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError link in the same Partition as the given FrequencyConstraint
		/// </summary>
		/// <param name="source">FrequencyConstraint to use as the source of the relationship.</param>
		/// <param name="target">FrequencyConstraintNonRestrictiveRangeError to use as the target of the relationship.</param>
		public FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError(FrequencyConstraint source, FrequencyConstraintNonRestrictiveRangeError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError.FrequencyConstraintDomainRoleId, source), new DslModeling::RoleAssignment(FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError.FrequencyConstraintNonRestrictiveRangeErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region FrequencyConstraint domain role code
		
		/// <summary>
		/// FrequencyConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid FrequencyConstraintDomainRoleId = new global::System.Guid(0x7b2b3732, 0x4291, 0x4b13, 0xb6, 0xbc, 0xb3, 0x96, 0x2a, 0xe2, 0x0e, 0x5b);
		
		/// <summary>
		/// DomainRole FrequencyConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError.FrequencyConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError/FrequencyConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError/FrequencyConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "FrequencyConstraintNonRestrictiveRangeError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError/FrequencyConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("7b2b3732-4291-4b13-b6bc-b3962ae20e5b")]
		public virtual FrequencyConstraint FrequencyConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FrequencyConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, FrequencyConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FrequencyConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FrequencyConstraint of a FrequencyConstraintNonRestrictiveRangeError
		/// <summary>
		/// Gets FrequencyConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FrequencyConstraint GetFrequencyConstraint(FrequencyConstraintNonRestrictiveRangeError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FrequencyConstraintNonRestrictiveRangeErrorDomainRoleId) as FrequencyConstraint;
		}
		
		/// <summary>
		/// Sets FrequencyConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFrequencyConstraint(FrequencyConstraintNonRestrictiveRangeError element, FrequencyConstraint newFrequencyConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FrequencyConstraintNonRestrictiveRangeErrorDomainRoleId, newFrequencyConstraint);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing FrequencyConstraint domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.FrequencyConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.FrequencyConstraint = (FrequencyConstraint)value;
			}
		}
		
		#endregion
		#region FrequencyConstraintNonRestrictiveRangeError domain role code
		
		/// <summary>
		/// FrequencyConstraintNonRestrictiveRangeError domain role Id.
		/// </summary>
		public static readonly global::System.Guid FrequencyConstraintNonRestrictiveRangeErrorDomainRoleId = new global::System.Guid(0x3416b110, 0x9a99, 0x4939, 0xb7, 0xe3, 0xa0, 0xd3, 0xdf, 0x83, 0xc6, 0x57);
		
		/// <summary>
		/// DomainRole FrequencyConstraintNonRestrictiveRangeError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError.FrequencyConstraintNonRestrictiveRangeError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError/FrequencyConstraintNonRestrictiveRangeError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError/FrequencyConstraintNonRestrictiveRangeError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FrequencyConstraint", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError/FrequencyConstraintNonRestrictiveRangeError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("3416b110-9a99-4939-b7e3-a0d3df83c657")]
		public virtual FrequencyConstraintNonRestrictiveRangeError FrequencyConstraintNonRestrictiveRangeError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FrequencyConstraintNonRestrictiveRangeError)DslModeling::DomainRoleInfo.GetRolePlayer(this, FrequencyConstraintNonRestrictiveRangeErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FrequencyConstraintNonRestrictiveRangeErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FrequencyConstraintNonRestrictiveRangeError of a FrequencyConstraint
		/// <summary>
		/// Gets FrequencyConstraintNonRestrictiveRangeError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FrequencyConstraintNonRestrictiveRangeError GetFrequencyConstraintNonRestrictiveRangeError(FrequencyConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FrequencyConstraintDomainRoleId) as FrequencyConstraintNonRestrictiveRangeError;
		}
		
		/// <summary>
		/// Sets FrequencyConstraintNonRestrictiveRangeError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFrequencyConstraintNonRestrictiveRangeError(FrequencyConstraint element, FrequencyConstraintNonRestrictiveRangeError newFrequencyConstraintNonRestrictiveRangeError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FrequencyConstraintDomainRoleId, newFrequencyConstraintNonRestrictiveRangeError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing FrequencyConstraintNonRestrictiveRangeError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.FrequencyConstraintNonRestrictiveRangeError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.FrequencyConstraintNonRestrictiveRangeError = (FrequencyConstraintNonRestrictiveRangeError)value;
			}
		}
		
		#endregion
		#region FrequencyConstraint link accessor
		/// <summary>
		/// Get the FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError link to a FrequencyConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError GetLinkToFrequencyConstraintNonRestrictiveRangeError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraint frequencyConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError>(frequencyConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError.FrequencyConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of FrequencyConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FrequencyConstraintNonRestrictiveRangeError link accessor
		/// <summary>
		/// Get the FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError link to a FrequencyConstraintNonRestrictiveRangeError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError GetLinkToFrequencyConstraint (global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintNonRestrictiveRangeError frequencyConstraintNonRestrictiveRangeErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError>(frequencyConstraintNonRestrictiveRangeErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError.FrequencyConstraintNonRestrictiveRangeErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of FrequencyConstraintNonRestrictiveRangeError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError instance accessors
		
		/// <summary>
		/// Get any FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError links between a given FrequencyConstraint and a FrequencyConstraintNonRestrictiveRangeError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintNonRestrictiveRangeError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError.FrequencyConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError link in links )
			{
				if ( target.Equals(link.FrequencyConstraintNonRestrictiveRangeError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError link between a given FrequencyConstraintand a FrequencyConstraintNonRestrictiveRangeError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintNonRestrictiveRangeError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError.FrequencyConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError link in links )
			{
				if ( target.Equals(link.FrequencyConstraintNonRestrictiveRangeError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ObjectificationImpliesFactType
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationImpliesFactType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationImpliesFactType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationImpliesFactType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("d2706f81-78cc-493e-90c9-d54a10d33fa0")]
	public partial class ObjectificationImpliesFactType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ObjectificationImpliesFactType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd2706f81, 0x78cc, 0x493e, 0x90, 0xc9, 0xd5, 0x4a, 0x10, 0xd3, 0x3f, 0xa0);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ObjectificationImpliesFactType link in the same Partition as the given Objectification
		/// </summary>
		/// <param name="source">Objectification to use as the source of the relationship.</param>
		/// <param name="target">FactType to use as the target of the relationship.</param>
		public ObjectificationImpliesFactType(Objectification source, FactType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ObjectificationImpliesFactType.ImpliedByObjectificationDomainRoleId, source), new DslModeling::RoleAssignment(ObjectificationImpliesFactType.ImpliedFactTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectificationImpliesFactType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectificationImpliesFactType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectificationImpliesFactType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectificationImpliesFactType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ImpliedByObjectification domain role code
		
		/// <summary>
		/// ImpliedByObjectification domain role Id.
		/// </summary>
		public static readonly global::System.Guid ImpliedByObjectificationDomainRoleId = new global::System.Guid(0xfa1a0d65, 0x0a3c, 0x4300, 0xa2, 0x17, 0xec, 0x5a, 0x23, 0xca, 0x3a, 0xd9);
		
		/// <summary>
		/// DomainRole ImpliedByObjectification
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationImpliesFactType.ImpliedByObjectification
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationImpliesFactType/ImpliedByObjectification.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationImpliesFactType/ImpliedByObjectification.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ImpliedFactTypeCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationImpliesFactType/ImpliedByObjectification.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("fa1a0d65-0a3c-4300-a217-ec5a23ca3ad9")]
		public virtual Objectification ImpliedByObjectification
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Objectification)DslModeling::DomainRoleInfo.GetRolePlayer(this, ImpliedByObjectificationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ImpliedByObjectificationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ImpliedByObjectification of a FactType
		/// <summary>
		/// Gets ImpliedByObjectification.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Objectification GetImpliedByObjectification(FactType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ImpliedFactTypeDomainRoleId) as Objectification;
		}
		
		/// <summary>
		/// Sets ImpliedByObjectification.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetImpliedByObjectification(FactType element, Objectification newImpliedByObjectification)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ImpliedFactTypeDomainRoleId, newImpliedByObjectification);
		}
		#endregion
		#region ImpliedFactType domain role code
		
		/// <summary>
		/// ImpliedFactType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ImpliedFactTypeDomainRoleId = new global::System.Guid(0x9b3fb1d7, 0x01af, 0x4f66, 0xba, 0x48, 0x59, 0xa2, 0xde, 0xd5, 0xbc, 0x6b);
		
		/// <summary>
		/// DomainRole ImpliedFactType
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationImpliesFactType.ImpliedFactType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationImpliesFactType/ImpliedFactType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationImpliesFactType/ImpliedFactType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ImpliedByObjectification", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationImpliesFactType/ImpliedFactType.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("9b3fb1d7-01af-4f66-ba48-59a2ded5bc6b")]
		public virtual FactType ImpliedFactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FactType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ImpliedFactTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ImpliedFactTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ImpliedFactTypeCollection of a Objectification
		/// <summary>
		/// Gets a list of ImpliedFactTypeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FactType> GetImpliedFactTypeCollection(Objectification element)
		{
			return new DslModeling::LinkedElementCollection<FactType>(element, ImpliedByObjectificationDomainRoleId);
		}
		#endregion
		#region ImpliedByObjectification link accessor
		/// <summary>
		/// Get the list of ObjectificationImpliesFactType links to a Objectification.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationImpliesFactType> GetLinksToImpliedFactTypeCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.Objectification impliedByObjectificationInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationImpliesFactType>(impliedByObjectificationInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationImpliesFactType.ImpliedByObjectificationDomainRoleId);
		}
		#endregion
		#region ImpliedFactType link accessor
		/// <summary>
		/// Get the ObjectificationImpliesFactType link to a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationImpliesFactType GetLinkToImpliedByObjectification (global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType impliedFactTypeInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationImpliesFactType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationImpliesFactType>(impliedFactTypeInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationImpliesFactType.ImpliedFactTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ImpliedFactType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ObjectificationImpliesFactType instance accessors
		
		/// <summary>
		/// Get any ObjectificationImpliesFactType links between a given Objectification and a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationImpliesFactType> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.Objectification source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationImpliesFactType> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationImpliesFactType>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationImpliesFactType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationImpliesFactType>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationImpliesFactType.ImpliedByObjectificationDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationImpliesFactType link in links )
			{
				if ( target.Equals(link.ImpliedFactType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ObjectificationImpliesFactType link between a given Objectificationand a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationImpliesFactType GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.Objectification source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationImpliesFactType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationImpliesFactType>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationImpliesFactType.ImpliedByObjectificationDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationImpliesFactType link in links )
			{
				if ( target.Equals(link.ImpliedFactType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ValueRangeHasMaxValueMismatchError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMaxValueMismatchError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMaxValueMismatchError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMaxValueMismatchError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("1d2620be-40ac-4f10-b420-5cd52687dd49")]
	public partial class ValueRangeHasMaxValueMismatchError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ValueRangeHasMaxValueMismatchError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1d2620be, 0x40ac, 0x4f10, 0xb4, 0x20, 0x5c, 0xd5, 0x26, 0x87, 0xdd, 0x49);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ValueRangeHasMaxValueMismatchError link in the same Partition as the given ValueRange
		/// </summary>
		/// <param name="source">ValueRange to use as the source of the relationship.</param>
		/// <param name="target">MaxValueMismatchError to use as the target of the relationship.</param>
		public ValueRangeHasMaxValueMismatchError(ValueRange source, MaxValueMismatchError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ValueRangeHasMaxValueMismatchError.ValueRangeDomainRoleId, source), new DslModeling::RoleAssignment(ValueRangeHasMaxValueMismatchError.MaxValueMismatchErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ValueRangeHasMaxValueMismatchError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ValueRangeHasMaxValueMismatchError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ValueRangeHasMaxValueMismatchError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ValueRangeHasMaxValueMismatchError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ValueRange domain role code
		
		/// <summary>
		/// ValueRange domain role Id.
		/// </summary>
		public static readonly global::System.Guid ValueRangeDomainRoleId = new global::System.Guid(0xa5f8e444, 0x85da, 0x40d0, 0x97, 0xe2, 0x91, 0xeb, 0x8e, 0x36, 0xa6, 0xb0);
		
		/// <summary>
		/// DomainRole ValueRange
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMaxValueMismatchError.ValueRange
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMaxValueMismatchError/ValueRange.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMaxValueMismatchError/ValueRange.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "MaxValueMismatchError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMaxValueMismatchError/ValueRange.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("a5f8e444-85da-40d0-97e2-91eb8e36a6b0")]
		public virtual ValueRange ValueRange
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ValueRange)DslModeling::DomainRoleInfo.GetRolePlayer(this, ValueRangeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ValueRangeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ValueRange of a MaxValueMismatchError
		/// <summary>
		/// Gets ValueRange.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ValueRange GetValueRange(MaxValueMismatchError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, MaxValueMismatchErrorDomainRoleId) as ValueRange;
		}
		
		/// <summary>
		/// Sets ValueRange.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetValueRange(MaxValueMismatchError element, ValueRange newValueRange)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, MaxValueMismatchErrorDomainRoleId, newValueRange);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing ValueRange domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ValueRange;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ValueRange = (ValueRange)value;
			}
		}
		
		#endregion
		#region MaxValueMismatchError domain role code
		
		/// <summary>
		/// MaxValueMismatchError domain role Id.
		/// </summary>
		public static readonly global::System.Guid MaxValueMismatchErrorDomainRoleId = new global::System.Guid(0x673115e6, 0xa4c7, 0x4cd4, 0xb7, 0xf2, 0xaf, 0x9d, 0x2e, 0x64, 0x9a, 0xcc);
		
		/// <summary>
		/// DomainRole MaxValueMismatchError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMaxValueMismatchError.MaxValueMismatchError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMaxValueMismatchError/MaxValueMismatchError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMaxValueMismatchError/MaxValueMismatchError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ValueRange", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMaxValueMismatchError/MaxValueMismatchError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("673115e6-a4c7-4cd4-b7f2-af9d2e649acc")]
		public virtual MaxValueMismatchError MaxValueMismatchError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MaxValueMismatchError)DslModeling::DomainRoleInfo.GetRolePlayer(this, MaxValueMismatchErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MaxValueMismatchErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MaxValueMismatchError of a ValueRange
		/// <summary>
		/// Gets MaxValueMismatchError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static MaxValueMismatchError GetMaxValueMismatchError(ValueRange element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ValueRangeDomainRoleId) as MaxValueMismatchError;
		}
		
		/// <summary>
		/// Sets MaxValueMismatchError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetMaxValueMismatchError(ValueRange element, MaxValueMismatchError newMaxValueMismatchError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ValueRangeDomainRoleId, newMaxValueMismatchError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing MaxValueMismatchError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.MaxValueMismatchError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.MaxValueMismatchError = (MaxValueMismatchError)value;
			}
		}
		
		#endregion
		#region ValueRange link accessor
		/// <summary>
		/// Get the ValueRangeHasMaxValueMismatchError link to a ValueRange.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMaxValueMismatchError GetLinkToMaxValueMismatchError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRange valueRangeInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMaxValueMismatchError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMaxValueMismatchError>(valueRangeInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMaxValueMismatchError.ValueRangeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ValueRange not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MaxValueMismatchError link accessor
		/// <summary>
		/// Get the ValueRangeHasMaxValueMismatchError link to a MaxValueMismatchError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMaxValueMismatchError GetLinkToValueRange (global::ORMSolutions.ORMArchitect.Core.ObjectModel.MaxValueMismatchError maxValueMismatchErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMaxValueMismatchError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMaxValueMismatchError>(maxValueMismatchErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMaxValueMismatchError.MaxValueMismatchErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of MaxValueMismatchError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ValueRangeHasMaxValueMismatchError instance accessors
		
		/// <summary>
		/// Get any ValueRangeHasMaxValueMismatchError links between a given ValueRange and a MaxValueMismatchError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMaxValueMismatchError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRange source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.MaxValueMismatchError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMaxValueMismatchError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMaxValueMismatchError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMaxValueMismatchError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMaxValueMismatchError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMaxValueMismatchError.ValueRangeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMaxValueMismatchError link in links )
			{
				if ( target.Equals(link.MaxValueMismatchError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ValueRangeHasMaxValueMismatchError link between a given ValueRangeand a MaxValueMismatchError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMaxValueMismatchError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRange source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.MaxValueMismatchError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMaxValueMismatchError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMaxValueMismatchError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMaxValueMismatchError.ValueRangeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMaxValueMismatchError link in links )
			{
				if ( target.Equals(link.MaxValueMismatchError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ValueRangeHasMinValueMismatchError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMinValueMismatchError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMinValueMismatchError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMinValueMismatchError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("0e8be672-bcbe-412b-9589-76bfa88fde38")]
	public partial class ValueRangeHasMinValueMismatchError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ValueRangeHasMinValueMismatchError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0e8be672, 0xbcbe, 0x412b, 0x95, 0x89, 0x76, 0xbf, 0xa8, 0x8f, 0xde, 0x38);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ValueRangeHasMinValueMismatchError link in the same Partition as the given ValueRange
		/// </summary>
		/// <param name="source">ValueRange to use as the source of the relationship.</param>
		/// <param name="target">MinValueMismatchError to use as the target of the relationship.</param>
		public ValueRangeHasMinValueMismatchError(ValueRange source, MinValueMismatchError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ValueRangeHasMinValueMismatchError.ValueRangeDomainRoleId, source), new DslModeling::RoleAssignment(ValueRangeHasMinValueMismatchError.MinValueMismatchErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ValueRangeHasMinValueMismatchError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ValueRangeHasMinValueMismatchError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ValueRangeHasMinValueMismatchError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ValueRangeHasMinValueMismatchError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ValueRange domain role code
		
		/// <summary>
		/// ValueRange domain role Id.
		/// </summary>
		public static readonly global::System.Guid ValueRangeDomainRoleId = new global::System.Guid(0xcfafda20, 0xc375, 0x431d, 0x89, 0xdf, 0xcd, 0xbf, 0x14, 0x41, 0x97, 0x73);
		
		/// <summary>
		/// DomainRole ValueRange
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMinValueMismatchError.ValueRange
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMinValueMismatchError/ValueRange.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMinValueMismatchError/ValueRange.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "MinValueMismatchError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMinValueMismatchError/ValueRange.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("cfafda20-c375-431d-89df-cdbf14419773")]
		public virtual ValueRange ValueRange
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ValueRange)DslModeling::DomainRoleInfo.GetRolePlayer(this, ValueRangeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ValueRangeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ValueRange of a MinValueMismatchError
		/// <summary>
		/// Gets ValueRange.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ValueRange GetValueRange(MinValueMismatchError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, MinValueMismatchErrorDomainRoleId) as ValueRange;
		}
		
		/// <summary>
		/// Sets ValueRange.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetValueRange(MinValueMismatchError element, ValueRange newValueRange)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, MinValueMismatchErrorDomainRoleId, newValueRange);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing ValueRange domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ValueRange;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ValueRange = (ValueRange)value;
			}
		}
		
		#endregion
		#region MinValueMismatchError domain role code
		
		/// <summary>
		/// MinValueMismatchError domain role Id.
		/// </summary>
		public static readonly global::System.Guid MinValueMismatchErrorDomainRoleId = new global::System.Guid(0xc56b78d7, 0x91b1, 0x49e3, 0xac, 0xb8, 0x29, 0x13, 0x83, 0x27, 0x48, 0x84);
		
		/// <summary>
		/// DomainRole MinValueMismatchError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMinValueMismatchError.MinValueMismatchError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMinValueMismatchError/MinValueMismatchError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMinValueMismatchError/MinValueMismatchError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ValueRange", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMinValueMismatchError/MinValueMismatchError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("c56b78d7-91b1-49e3-acb8-291383274884")]
		public virtual MinValueMismatchError MinValueMismatchError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MinValueMismatchError)DslModeling::DomainRoleInfo.GetRolePlayer(this, MinValueMismatchErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MinValueMismatchErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MinValueMismatchError of a ValueRange
		/// <summary>
		/// Gets MinValueMismatchError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static MinValueMismatchError GetMinValueMismatchError(ValueRange element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ValueRangeDomainRoleId) as MinValueMismatchError;
		}
		
		/// <summary>
		/// Sets MinValueMismatchError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetMinValueMismatchError(ValueRange element, MinValueMismatchError newMinValueMismatchError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ValueRangeDomainRoleId, newMinValueMismatchError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing MinValueMismatchError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.MinValueMismatchError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.MinValueMismatchError = (MinValueMismatchError)value;
			}
		}
		
		#endregion
		#region ValueRange link accessor
		/// <summary>
		/// Get the ValueRangeHasMinValueMismatchError link to a ValueRange.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMinValueMismatchError GetLinkToMinValueMismatchError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRange valueRangeInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMinValueMismatchError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMinValueMismatchError>(valueRangeInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMinValueMismatchError.ValueRangeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ValueRange not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MinValueMismatchError link accessor
		/// <summary>
		/// Get the ValueRangeHasMinValueMismatchError link to a MinValueMismatchError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMinValueMismatchError GetLinkToValueRange (global::ORMSolutions.ORMArchitect.Core.ObjectModel.MinValueMismatchError minValueMismatchErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMinValueMismatchError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMinValueMismatchError>(minValueMismatchErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMinValueMismatchError.MinValueMismatchErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of MinValueMismatchError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ValueRangeHasMinValueMismatchError instance accessors
		
		/// <summary>
		/// Get any ValueRangeHasMinValueMismatchError links between a given ValueRange and a MinValueMismatchError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMinValueMismatchError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRange source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.MinValueMismatchError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMinValueMismatchError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMinValueMismatchError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMinValueMismatchError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMinValueMismatchError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMinValueMismatchError.ValueRangeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMinValueMismatchError link in links )
			{
				if ( target.Equals(link.MinValueMismatchError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ValueRangeHasMinValueMismatchError link between a given ValueRangeand a MinValueMismatchError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMinValueMismatchError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRange source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.MinValueMismatchError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMinValueMismatchError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMinValueMismatchError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMinValueMismatchError.ValueRangeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMinValueMismatchError link in links )
			{
				if ( target.Equals(link.MinValueMismatchError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship FactTypeHasImpliedInternalUniquenessConstraintError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("32d5a7e1-5a80-44ab-bc2e-96a15a4d92cb")]
	public partial class FactTypeHasImpliedInternalUniquenessConstraintError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FactTypeHasImpliedInternalUniquenessConstraintError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x32d5a7e1, 0x5a80, 0x44ab, 0xbc, 0x2e, 0x96, 0xa1, 0x5a, 0x4d, 0x92, 0xcb);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FactTypeHasImpliedInternalUniquenessConstraintError link in the same Partition as the given FactType
		/// </summary>
		/// <param name="source">FactType to use as the source of the relationship.</param>
		/// <param name="target">ImpliedInternalUniquenessConstraintError to use as the target of the relationship.</param>
		public FactTypeHasImpliedInternalUniquenessConstraintError(FactType source, ImpliedInternalUniquenessConstraintError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FactTypeHasImpliedInternalUniquenessConstraintError.FactTypeDomainRoleId, source), new DslModeling::RoleAssignment(FactTypeHasImpliedInternalUniquenessConstraintError.ImpliedInternalUniquenessConstraintErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeHasImpliedInternalUniquenessConstraintError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeHasImpliedInternalUniquenessConstraintError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeHasImpliedInternalUniquenessConstraintError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeHasImpliedInternalUniquenessConstraintError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region FactType domain role code
		
		/// <summary>
		/// FactType domain role Id.
		/// </summary>
		public static readonly global::System.Guid FactTypeDomainRoleId = new global::System.Guid(0x87737b64, 0x9709, 0x4dde, 0x8d, 0x77, 0x29, 0x0a, 0x2c, 0xce, 0xed, 0x1c);
		
		/// <summary>
		/// DomainRole FactType
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.FactType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError/FactType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError/FactType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ImpliedInternalUniquenessConstraintError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError/FactType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("87737b64-9709-4dde-8d77-290a2cceed1c")]
		public virtual FactType FactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FactType)DslModeling::DomainRoleInfo.GetRolePlayer(this, FactTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FactTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FactType of a ImpliedInternalUniquenessConstraintError
		/// <summary>
		/// Gets FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FactType GetFactType(ImpliedInternalUniquenessConstraintError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ImpliedInternalUniquenessConstraintErrorDomainRoleId) as FactType;
		}
		
		/// <summary>
		/// Sets FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFactType(ImpliedInternalUniquenessConstraintError element, FactType newFactType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ImpliedInternalUniquenessConstraintErrorDomainRoleId, newFactType);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing FactType domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.FactType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.FactType = (FactType)value;
			}
		}
		
		#endregion
		#region ImpliedInternalUniquenessConstraintError domain role code
		
		/// <summary>
		/// ImpliedInternalUniquenessConstraintError domain role Id.
		/// </summary>
		public static readonly global::System.Guid ImpliedInternalUniquenessConstraintErrorDomainRoleId = new global::System.Guid(0x67d87b16, 0x4d08, 0x4d96, 0xad, 0xfd, 0xde, 0xd8, 0xeb, 0x84, 0xe7, 0x86);
		
		/// <summary>
		/// DomainRole ImpliedInternalUniquenessConstraintError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.ImpliedInternalUniquenessConstraintError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError/ImpliedInternalUniquenessConstraintError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError/ImpliedInternalUniquenessConstraintError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FactType", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError/ImpliedInternalUniquenessConstraintError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("67d87b16-4d08-4d96-adfd-ded8eb84e786")]
		public virtual ImpliedInternalUniquenessConstraintError ImpliedInternalUniquenessConstraintError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ImpliedInternalUniquenessConstraintError)DslModeling::DomainRoleInfo.GetRolePlayer(this, ImpliedInternalUniquenessConstraintErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ImpliedInternalUniquenessConstraintErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ImpliedInternalUniquenessConstraintError of a FactType
		/// <summary>
		/// Gets ImpliedInternalUniquenessConstraintError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ImpliedInternalUniquenessConstraintError GetImpliedInternalUniquenessConstraintError(FactType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FactTypeDomainRoleId) as ImpliedInternalUniquenessConstraintError;
		}
		
		/// <summary>
		/// Sets ImpliedInternalUniquenessConstraintError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetImpliedInternalUniquenessConstraintError(FactType element, ImpliedInternalUniquenessConstraintError newImpliedInternalUniquenessConstraintError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FactTypeDomainRoleId, newImpliedInternalUniquenessConstraintError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing ImpliedInternalUniquenessConstraintError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ImpliedInternalUniquenessConstraintError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ImpliedInternalUniquenessConstraintError = (ImpliedInternalUniquenessConstraintError)value;
			}
		}
		
		#endregion
		#region FactType link accessor
		/// <summary>
		/// Get the FactTypeHasImpliedInternalUniquenessConstraintError link to a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError GetLinkToImpliedInternalUniquenessConstraintError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType factTypeInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError>(factTypeInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.FactTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of FactType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ImpliedInternalUniquenessConstraintError link accessor
		/// <summary>
		/// Get the FactTypeHasImpliedInternalUniquenessConstraintError link to a ImpliedInternalUniquenessConstraintError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError GetLinkToFactType (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ImpliedInternalUniquenessConstraintError impliedInternalUniquenessConstraintErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError>(impliedInternalUniquenessConstraintErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.ImpliedInternalUniquenessConstraintErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ImpliedInternalUniquenessConstraintError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FactTypeHasImpliedInternalUniquenessConstraintError instance accessors
		
		/// <summary>
		/// Get any FactTypeHasImpliedInternalUniquenessConstraintError links between a given FactType and a ImpliedInternalUniquenessConstraintError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ImpliedInternalUniquenessConstraintError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.FactTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError link in links )
			{
				if ( target.Equals(link.ImpliedInternalUniquenessConstraintError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FactTypeHasImpliedInternalUniquenessConstraintError link between a given FactTypeand a ImpliedInternalUniquenessConstraintError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ImpliedInternalUniquenessConstraintError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.FactTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError link in links )
			{
				if ( target.Equals(link.ImpliedInternalUniquenessConstraintError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship SetConstraintHasTooFewRoleSequencesError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooFewRoleSequencesError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooFewRoleSequencesError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooFewRoleSequencesError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("6409dbe5-5c44-42af-b0c6-fb1ee7e3af2a")]
	public partial class SetConstraintHasTooFewRoleSequencesError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SetConstraintHasTooFewRoleSequencesError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6409dbe5, 0x5c44, 0x42af, 0xb0, 0xc6, 0xfb, 0x1e, 0xe7, 0xe3, 0xaf, 0x2a);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SetConstraintHasTooFewRoleSequencesError link in the same Partition as the given SetConstraint
		/// </summary>
		/// <param name="source">SetConstraint to use as the source of the relationship.</param>
		/// <param name="target">TooFewRoleSequencesError to use as the target of the relationship.</param>
		public SetConstraintHasTooFewRoleSequencesError(SetConstraint source, TooFewRoleSequencesError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SetConstraintHasTooFewRoleSequencesError.SetConstraintDomainRoleId, source), new DslModeling::RoleAssignment(SetConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetConstraintHasTooFewRoleSequencesError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetConstraintHasTooFewRoleSequencesError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetConstraintHasTooFewRoleSequencesError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetConstraintHasTooFewRoleSequencesError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SetConstraint domain role code
		
		/// <summary>
		/// SetConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid SetConstraintDomainRoleId = new global::System.Guid(0x1df0f9d7, 0x63bd, 0x4577, 0x8c, 0x8f, 0xfc, 0xab, 0x97, 0xff, 0xf9, 0x8c);
		
		/// <summary>
		/// DomainRole SetConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooFewRoleSequencesError.SetConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooFewRoleSequencesError/SetConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooFewRoleSequencesError/SetConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TooFewRoleSequencesError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooFewRoleSequencesError/SetConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("1df0f9d7-63bd-4577-8c8f-fcab97fff98c")]
		public virtual SetConstraint SetConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SetConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SetConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SetConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SetConstraint of a TooFewRoleSequencesError
		/// <summary>
		/// Gets SetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SetConstraint GetSetConstraint(TooFewRoleSequencesError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TooFewRoleSequencesErrorDomainRoleId) as SetConstraint;
		}
		
		/// <summary>
		/// Sets SetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSetConstraint(TooFewRoleSequencesError element, SetConstraint newSetConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TooFewRoleSequencesErrorDomainRoleId, newSetConstraint);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing SetConstraint domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.SetConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.SetConstraint = (SetConstraint)value;
			}
		}
		
		#endregion
		#region TooFewRoleSequencesError domain role code
		
		/// <summary>
		/// TooFewRoleSequencesError domain role Id.
		/// </summary>
		public static readonly global::System.Guid TooFewRoleSequencesErrorDomainRoleId = new global::System.Guid(0x504b2551, 0x4db1, 0x4411, 0xb2, 0x78, 0xdb, 0xc6, 0xa5, 0x23, 0x3b, 0xf1);
		
		/// <summary>
		/// DomainRole TooFewRoleSequencesError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooFewRoleSequencesError/TooFewRoleSequencesError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooFewRoleSequencesError/TooFewRoleSequencesError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SetConstraint", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooFewRoleSequencesError/TooFewRoleSequencesError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("504b2551-4db1-4411-b278-dbc6a5233bf1")]
		public virtual TooFewRoleSequencesError TooFewRoleSequencesError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TooFewRoleSequencesError)DslModeling::DomainRoleInfo.GetRolePlayer(this, TooFewRoleSequencesErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TooFewRoleSequencesErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TooFewRoleSequencesError of a SetConstraint
		/// <summary>
		/// Gets TooFewRoleSequencesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static TooFewRoleSequencesError GetTooFewRoleSequencesError(SetConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SetConstraintDomainRoleId) as TooFewRoleSequencesError;
		}
		
		/// <summary>
		/// Sets TooFewRoleSequencesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTooFewRoleSequencesError(SetConstraint element, TooFewRoleSequencesError newTooFewRoleSequencesError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SetConstraintDomainRoleId, newTooFewRoleSequencesError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing TooFewRoleSequencesError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.TooFewRoleSequencesError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.TooFewRoleSequencesError = (TooFewRoleSequencesError)value;
			}
		}
		
		#endregion
		#region SetConstraint link accessor
		/// <summary>
		/// Get the SetConstraintHasTooFewRoleSequencesError link to a SetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooFewRoleSequencesError GetLinkToTooFewRoleSequencesError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint setConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooFewRoleSequencesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooFewRoleSequencesError>(setConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooFewRoleSequencesError.SetConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SetConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TooFewRoleSequencesError link accessor
		/// <summary>
		/// Get the SetConstraintHasTooFewRoleSequencesError link to a TooFewRoleSequencesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooFewRoleSequencesError GetLinkToSetConstraint (global::ORMSolutions.ORMArchitect.Core.ObjectModel.TooFewRoleSequencesError tooFewRoleSequencesErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooFewRoleSequencesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooFewRoleSequencesError>(tooFewRoleSequencesErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TooFewRoleSequencesError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SetConstraintHasTooFewRoleSequencesError instance accessors
		
		/// <summary>
		/// Get any SetConstraintHasTooFewRoleSequencesError links between a given SetConstraint and a TooFewRoleSequencesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooFewRoleSequencesError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.TooFewRoleSequencesError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooFewRoleSequencesError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooFewRoleSequencesError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooFewRoleSequencesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooFewRoleSequencesError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooFewRoleSequencesError.SetConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooFewRoleSequencesError link in links )
			{
				if ( target.Equals(link.TooFewRoleSequencesError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SetConstraintHasTooFewRoleSequencesError link between a given SetConstraintand a TooFewRoleSequencesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooFewRoleSequencesError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.TooFewRoleSequencesError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooFewRoleSequencesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooFewRoleSequencesError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooFewRoleSequencesError.SetConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooFewRoleSequencesError link in links )
			{
				if ( target.Equals(link.TooFewRoleSequencesError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship SetConstraintHasTooManyRoleSequencesError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooManyRoleSequencesError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooManyRoleSequencesError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooManyRoleSequencesError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("d54eb064-7fc6-4bcd-af30-c73e2d586fc4")]
	public partial class SetConstraintHasTooManyRoleSequencesError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SetConstraintHasTooManyRoleSequencesError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd54eb064, 0x7fc6, 0x4bcd, 0xaf, 0x30, 0xc7, 0x3e, 0x2d, 0x58, 0x6f, 0xc4);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SetConstraintHasTooManyRoleSequencesError link in the same Partition as the given SetConstraint
		/// </summary>
		/// <param name="source">SetConstraint to use as the source of the relationship.</param>
		/// <param name="target">TooManyRoleSequencesError to use as the target of the relationship.</param>
		public SetConstraintHasTooManyRoleSequencesError(SetConstraint source, TooManyRoleSequencesError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SetConstraintHasTooManyRoleSequencesError.SetConstraintDomainRoleId, source), new DslModeling::RoleAssignment(SetConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetConstraintHasTooManyRoleSequencesError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetConstraintHasTooManyRoleSequencesError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetConstraintHasTooManyRoleSequencesError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetConstraintHasTooManyRoleSequencesError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SetConstraint domain role code
		
		/// <summary>
		/// SetConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid SetConstraintDomainRoleId = new global::System.Guid(0xf7eedd61, 0x28a3, 0x48cc, 0xb8, 0x3d, 0xc1, 0x8e, 0xce, 0xe2, 0xd5, 0x82);
		
		/// <summary>
		/// DomainRole SetConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooManyRoleSequencesError.SetConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooManyRoleSequencesError/SetConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooManyRoleSequencesError/SetConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TooManyRoleSequencesError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooManyRoleSequencesError/SetConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("f7eedd61-28a3-48cc-b83d-c18ecee2d582")]
		public virtual SetConstraint SetConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SetConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SetConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SetConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SetConstraint of a TooManyRoleSequencesError
		/// <summary>
		/// Gets SetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SetConstraint GetSetConstraint(TooManyRoleSequencesError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TooManyRoleSequencesErrorDomainRoleId) as SetConstraint;
		}
		
		/// <summary>
		/// Sets SetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSetConstraint(TooManyRoleSequencesError element, SetConstraint newSetConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TooManyRoleSequencesErrorDomainRoleId, newSetConstraint);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing SetConstraint domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.SetConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.SetConstraint = (SetConstraint)value;
			}
		}
		
		#endregion
		#region TooManyRoleSequencesError domain role code
		
		/// <summary>
		/// TooManyRoleSequencesError domain role Id.
		/// </summary>
		public static readonly global::System.Guid TooManyRoleSequencesErrorDomainRoleId = new global::System.Guid(0xcee80ff1, 0x0811, 0x4b22, 0x9c, 0xa2, 0xb7, 0x73, 0xf2, 0x0b, 0xc7, 0xe1);
		
		/// <summary>
		/// DomainRole TooManyRoleSequencesError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooManyRoleSequencesError/TooManyRoleSequencesError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooManyRoleSequencesError/TooManyRoleSequencesError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SetConstraint", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooManyRoleSequencesError/TooManyRoleSequencesError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("cee80ff1-0811-4b22-9ca2-b773f20bc7e1")]
		public virtual TooManyRoleSequencesError TooManyRoleSequencesError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TooManyRoleSequencesError)DslModeling::DomainRoleInfo.GetRolePlayer(this, TooManyRoleSequencesErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TooManyRoleSequencesErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TooManyRoleSequencesError of a SetConstraint
		/// <summary>
		/// Gets TooManyRoleSequencesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static TooManyRoleSequencesError GetTooManyRoleSequencesError(SetConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SetConstraintDomainRoleId) as TooManyRoleSequencesError;
		}
		
		/// <summary>
		/// Sets TooManyRoleSequencesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTooManyRoleSequencesError(SetConstraint element, TooManyRoleSequencesError newTooManyRoleSequencesError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SetConstraintDomainRoleId, newTooManyRoleSequencesError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing TooManyRoleSequencesError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.TooManyRoleSequencesError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.TooManyRoleSequencesError = (TooManyRoleSequencesError)value;
			}
		}
		
		#endregion
		#region SetConstraint link accessor
		/// <summary>
		/// Get the SetConstraintHasTooManyRoleSequencesError link to a SetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooManyRoleSequencesError GetLinkToTooManyRoleSequencesError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint setConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooManyRoleSequencesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooManyRoleSequencesError>(setConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooManyRoleSequencesError.SetConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SetConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TooManyRoleSequencesError link accessor
		/// <summary>
		/// Get the SetConstraintHasTooManyRoleSequencesError link to a TooManyRoleSequencesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooManyRoleSequencesError GetLinkToSetConstraint (global::ORMSolutions.ORMArchitect.Core.ObjectModel.TooManyRoleSequencesError tooManyRoleSequencesErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooManyRoleSequencesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooManyRoleSequencesError>(tooManyRoleSequencesErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TooManyRoleSequencesError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SetConstraintHasTooManyRoleSequencesError instance accessors
		
		/// <summary>
		/// Get any SetConstraintHasTooManyRoleSequencesError links between a given SetConstraint and a TooManyRoleSequencesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooManyRoleSequencesError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.TooManyRoleSequencesError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooManyRoleSequencesError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooManyRoleSequencesError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooManyRoleSequencesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooManyRoleSequencesError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooManyRoleSequencesError.SetConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooManyRoleSequencesError link in links )
			{
				if ( target.Equals(link.TooManyRoleSequencesError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SetConstraintHasTooManyRoleSequencesError link between a given SetConstraintand a TooManyRoleSequencesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooManyRoleSequencesError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.TooManyRoleSequencesError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooManyRoleSequencesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooManyRoleSequencesError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooManyRoleSequencesError.SetConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooManyRoleSequencesError link in links )
			{
				if ( target.Equals(link.TooManyRoleSequencesError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("f6b8084d-4406-4ab3-9ba9-c89fb7bba074")]
	public partial class FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf6b8084d, 0x4406, 0x4ab3, 0x9b, 0xa9, 0xc8, 0x9f, 0xb7, 0xbb, 0xa0, 0x74);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError link in the same Partition as the given FrequencyConstraint
		/// </summary>
		/// <param name="source">FrequencyConstraint to use as the source of the relationship.</param>
		/// <param name="target">FrequencyConstraintViolatedByUniquenessConstraintError to use as the target of the relationship.</param>
		public FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError(FrequencyConstraint source, FrequencyConstraintViolatedByUniquenessConstraintError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError.FrequencyConstraintDomainRoleId, source), new DslModeling::RoleAssignment(FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError.FrequencyConstraintViolatedByUniquenessConstraintErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region FrequencyConstraint domain role code
		
		/// <summary>
		/// FrequencyConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid FrequencyConstraintDomainRoleId = new global::System.Guid(0xd0f67cc7, 0x1a3d, 0x4875, 0xb7, 0xc1, 0x26, 0x7c, 0x0c, 0xaa, 0x2d, 0x98);
		
		/// <summary>
		/// DomainRole FrequencyConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError.FrequencyConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError/FrequencyConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError/FrequencyConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "FrequencyConstraintViolatedByUniquenessConstraintError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError/FrequencyConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("d0f67cc7-1a3d-4875-b7c1-267c0caa2d98")]
		public virtual FrequencyConstraint FrequencyConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FrequencyConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, FrequencyConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FrequencyConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FrequencyConstraint of a FrequencyConstraintViolatedByUniquenessConstraintError
		/// <summary>
		/// Gets FrequencyConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FrequencyConstraint GetFrequencyConstraint(FrequencyConstraintViolatedByUniquenessConstraintError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FrequencyConstraintViolatedByUniquenessConstraintErrorDomainRoleId) as FrequencyConstraint;
		}
		
		/// <summary>
		/// Sets FrequencyConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFrequencyConstraint(FrequencyConstraintViolatedByUniquenessConstraintError element, FrequencyConstraint newFrequencyConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FrequencyConstraintViolatedByUniquenessConstraintErrorDomainRoleId, newFrequencyConstraint);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing FrequencyConstraint domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.FrequencyConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.FrequencyConstraint = (FrequencyConstraint)value;
			}
		}
		
		#endregion
		#region FrequencyConstraintViolatedByUniquenessConstraintError domain role code
		
		/// <summary>
		/// FrequencyConstraintViolatedByUniquenessConstraintError domain role Id.
		/// </summary>
		public static readonly global::System.Guid FrequencyConstraintViolatedByUniquenessConstraintErrorDomainRoleId = new global::System.Guid(0x758254c3, 0xbc61, 0x4fd6, 0xbf, 0xfb, 0x29, 0xba, 0xe5, 0x06, 0xb2, 0x04);
		
		/// <summary>
		/// DomainRole FrequencyConstraintViolatedByUniquenessConstraintError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError.FrequencyConstraintViolatedByUniquenessConstraintError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError/FrequencyConstraintViolatedByUniquenessConstraintError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError/FrequencyConstraintViolatedByUniquenessConstraintError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FrequencyConstraint", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError/FrequencyConstraintViolatedByUniquenessConstraintError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("758254c3-bc61-4fd6-bffb-29bae506b204")]
		public virtual FrequencyConstraintViolatedByUniquenessConstraintError FrequencyConstraintViolatedByUniquenessConstraintError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FrequencyConstraintViolatedByUniquenessConstraintError)DslModeling::DomainRoleInfo.GetRolePlayer(this, FrequencyConstraintViolatedByUniquenessConstraintErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FrequencyConstraintViolatedByUniquenessConstraintErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FrequencyConstraintViolatedByUniquenessConstraintError of a FrequencyConstraint
		/// <summary>
		/// Gets FrequencyConstraintViolatedByUniquenessConstraintError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FrequencyConstraintViolatedByUniquenessConstraintError GetFrequencyConstraintViolatedByUniquenessConstraintError(FrequencyConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FrequencyConstraintDomainRoleId) as FrequencyConstraintViolatedByUniquenessConstraintError;
		}
		
		/// <summary>
		/// Sets FrequencyConstraintViolatedByUniquenessConstraintError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFrequencyConstraintViolatedByUniquenessConstraintError(FrequencyConstraint element, FrequencyConstraintViolatedByUniquenessConstraintError newFrequencyConstraintViolatedByUniquenessConstraintError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FrequencyConstraintDomainRoleId, newFrequencyConstraintViolatedByUniquenessConstraintError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing FrequencyConstraintViolatedByUniquenessConstraintError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.FrequencyConstraintViolatedByUniquenessConstraintError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.FrequencyConstraintViolatedByUniquenessConstraintError = (FrequencyConstraintViolatedByUniquenessConstraintError)value;
			}
		}
		
		#endregion
		#region FrequencyConstraint link accessor
		/// <summary>
		/// Get the FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError link to a FrequencyConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError GetLinkToFrequencyConstraintViolatedByUniquenessConstraintError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraint frequencyConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError>(frequencyConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError.FrequencyConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of FrequencyConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FrequencyConstraintViolatedByUniquenessConstraintError link accessor
		/// <summary>
		/// Get the FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError link to a FrequencyConstraintViolatedByUniquenessConstraintError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError GetLinkToFrequencyConstraint (global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintViolatedByUniquenessConstraintError frequencyConstraintViolatedByUniquenessConstraintErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError>(frequencyConstraintViolatedByUniquenessConstraintErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError.FrequencyConstraintViolatedByUniquenessConstraintErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of FrequencyConstraintViolatedByUniquenessConstraintError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError instance accessors
		
		/// <summary>
		/// Get any FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError links between a given FrequencyConstraint and a FrequencyConstraintViolatedByUniquenessConstraintError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintViolatedByUniquenessConstraintError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError.FrequencyConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError link in links )
			{
				if ( target.Equals(link.FrequencyConstraintViolatedByUniquenessConstraintError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError link between a given FrequencyConstraintand a FrequencyConstraintViolatedByUniquenessConstraintError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintViolatedByUniquenessConstraintError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError.FrequencyConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError link in links )
			{
				if ( target.Equals(link.FrequencyConstraintViolatedByUniquenessConstraintError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship RingConstraintHasRingConstraintTypeNotSpecifiedError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("62e65e16-efa7-43d0-9759-8715d0c8b914")]
	public partial class RingConstraintHasRingConstraintTypeNotSpecifiedError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RingConstraintHasRingConstraintTypeNotSpecifiedError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x62e65e16, 0xefa7, 0x43d0, 0x97, 0x59, 0x87, 0x15, 0xd0, 0xc8, 0xb9, 0x14);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RingConstraintHasRingConstraintTypeNotSpecifiedError link in the same Partition as the given RingConstraint
		/// </summary>
		/// <param name="source">RingConstraint to use as the source of the relationship.</param>
		/// <param name="target">RingConstraintTypeNotSpecifiedError to use as the target of the relationship.</param>
		public RingConstraintHasRingConstraintTypeNotSpecifiedError(RingConstraint source, RingConstraintTypeNotSpecifiedError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintDomainRoleId, source), new DslModeling::RoleAssignment(RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintTypeNotSpecifiedErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RingConstraintHasRingConstraintTypeNotSpecifiedError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RingConstraintHasRingConstraintTypeNotSpecifiedError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RingConstraintHasRingConstraintTypeNotSpecifiedError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RingConstraintHasRingConstraintTypeNotSpecifiedError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region RingConstraint domain role code
		
		/// <summary>
		/// RingConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid RingConstraintDomainRoleId = new global::System.Guid(0x4e7dea3b, 0xacf3, 0x4e71, 0xa4, 0xf2, 0x5c, 0x08, 0xfb, 0x80, 0x77, 0xd2);
		
		/// <summary>
		/// DomainRole RingConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError/RingConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError/RingConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "RingConstraintTypeNotSpecifiedError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError/RingConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("4e7dea3b-acf3-4e71-a4f2-5c08fb8077d2")]
		public virtual RingConstraint RingConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RingConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, RingConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RingConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RingConstraint of a RingConstraintTypeNotSpecifiedError
		/// <summary>
		/// Gets RingConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static RingConstraint GetRingConstraint(RingConstraintTypeNotSpecifiedError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RingConstraintTypeNotSpecifiedErrorDomainRoleId) as RingConstraint;
		}
		
		/// <summary>
		/// Sets RingConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRingConstraint(RingConstraintTypeNotSpecifiedError element, RingConstraint newRingConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RingConstraintTypeNotSpecifiedErrorDomainRoleId, newRingConstraint);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing RingConstraint domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.RingConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.RingConstraint = (RingConstraint)value;
			}
		}
		
		#endregion
		#region RingConstraintTypeNotSpecifiedError domain role code
		
		/// <summary>
		/// RingConstraintTypeNotSpecifiedError domain role Id.
		/// </summary>
		public static readonly global::System.Guid RingConstraintTypeNotSpecifiedErrorDomainRoleId = new global::System.Guid(0x46f7ef6e, 0x7a37, 0x44a3, 0xa2, 0x21, 0x26, 0xd0, 0xd9, 0x9a, 0xe4, 0xbd);
		
		/// <summary>
		/// DomainRole RingConstraintTypeNotSpecifiedError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintTypeNotSpecifiedError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError/RingConstraintTypeNotSpecifiedError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError/RingConstraintTypeNotSpecifiedError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "RingConstraint", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError/RingConstraintTypeNotSpecifiedError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("46f7ef6e-7a37-44a3-a221-26d0d99ae4bd")]
		public virtual RingConstraintTypeNotSpecifiedError RingConstraintTypeNotSpecifiedError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RingConstraintTypeNotSpecifiedError)DslModeling::DomainRoleInfo.GetRolePlayer(this, RingConstraintTypeNotSpecifiedErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RingConstraintTypeNotSpecifiedErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RingConstraintTypeNotSpecifiedError of a RingConstraint
		/// <summary>
		/// Gets RingConstraintTypeNotSpecifiedError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static RingConstraintTypeNotSpecifiedError GetRingConstraintTypeNotSpecifiedError(RingConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RingConstraintDomainRoleId) as RingConstraintTypeNotSpecifiedError;
		}
		
		/// <summary>
		/// Sets RingConstraintTypeNotSpecifiedError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRingConstraintTypeNotSpecifiedError(RingConstraint element, RingConstraintTypeNotSpecifiedError newRingConstraintTypeNotSpecifiedError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RingConstraintDomainRoleId, newRingConstraintTypeNotSpecifiedError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing RingConstraintTypeNotSpecifiedError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.RingConstraintTypeNotSpecifiedError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.RingConstraintTypeNotSpecifiedError = (RingConstraintTypeNotSpecifiedError)value;
			}
		}
		
		#endregion
		#region RingConstraint link accessor
		/// <summary>
		/// Get the RingConstraintHasRingConstraintTypeNotSpecifiedError link to a RingConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError GetLinkToRingConstraintTypeNotSpecifiedError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraint ringConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError>(ringConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of RingConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region RingConstraintTypeNotSpecifiedError link accessor
		/// <summary>
		/// Get the RingConstraintHasRingConstraintTypeNotSpecifiedError link to a RingConstraintTypeNotSpecifiedError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError GetLinkToRingConstraint (global::ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintTypeNotSpecifiedError ringConstraintTypeNotSpecifiedErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError>(ringConstraintTypeNotSpecifiedErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintTypeNotSpecifiedErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of RingConstraintTypeNotSpecifiedError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region RingConstraintHasRingConstraintTypeNotSpecifiedError instance accessors
		
		/// <summary>
		/// Get any RingConstraintHasRingConstraintTypeNotSpecifiedError links between a given RingConstraint and a RingConstraintTypeNotSpecifiedError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintTypeNotSpecifiedError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError link in links )
			{
				if ( target.Equals(link.RingConstraintTypeNotSpecifiedError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RingConstraintHasRingConstraintTypeNotSpecifiedError link between a given RingConstraintand a RingConstraintTypeNotSpecifiedError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintTypeNotSpecifiedError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError link in links )
			{
				if ( target.Equals(link.RingConstraintTypeNotSpecifiedError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ValueComparisonConstraintHasOperatorNotSpecifiedError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasOperatorNotSpecifiedError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasOperatorNotSpecifiedError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasOperatorNotSpecifiedError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("8736ddc0-c274-4f19-80d1-63372345edf8")]
	public partial class ValueComparisonConstraintHasOperatorNotSpecifiedError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ValueComparisonConstraintHasOperatorNotSpecifiedError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8736ddc0, 0xc274, 0x4f19, 0x80, 0xd1, 0x63, 0x37, 0x23, 0x45, 0xed, 0xf8);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ValueComparisonConstraintHasOperatorNotSpecifiedError link in the same Partition as the given ValueComparisonConstraint
		/// </summary>
		/// <param name="source">ValueComparisonConstraint to use as the source of the relationship.</param>
		/// <param name="target">ValueComparisonConstraintOperatorNotSpecifiedError to use as the target of the relationship.</param>
		public ValueComparisonConstraintHasOperatorNotSpecifiedError(ValueComparisonConstraint source, ValueComparisonConstraintOperatorNotSpecifiedError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ValueComparisonConstraintHasOperatorNotSpecifiedError.ValueComparisonConstraintDomainRoleId, source), new DslModeling::RoleAssignment(ValueComparisonConstraintHasOperatorNotSpecifiedError.OperatorNotSpecifiedErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ValueComparisonConstraintHasOperatorNotSpecifiedError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ValueComparisonConstraintHasOperatorNotSpecifiedError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ValueComparisonConstraintHasOperatorNotSpecifiedError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ValueComparisonConstraintHasOperatorNotSpecifiedError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ValueComparisonConstraint domain role code
		
		/// <summary>
		/// ValueComparisonConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid ValueComparisonConstraintDomainRoleId = new global::System.Guid(0x20c21e3b, 0x8bac, 0x416e, 0xb5, 0xc3, 0xbf, 0x24, 0x8e, 0x68, 0x21, 0xf3);
		
		/// <summary>
		/// DomainRole ValueComparisonConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasOperatorNotSpecifiedError.ValueComparisonConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasOperatorNotSpecifiedError/ValueComparisonConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasOperatorNotSpecifiedError/ValueComparisonConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "OperatorNotSpecifiedError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasOperatorNotSpecifiedError/ValueComparisonConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("20c21e3b-8bac-416e-b5c3-bf248e6821f3")]
		public virtual ValueComparisonConstraint ValueComparisonConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ValueComparisonConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, ValueComparisonConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ValueComparisonConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ValueComparisonConstraint of a ValueComparisonConstraintOperatorNotSpecifiedError
		/// <summary>
		/// Gets ValueComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ValueComparisonConstraint GetValueComparisonConstraint(ValueComparisonConstraintOperatorNotSpecifiedError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, OperatorNotSpecifiedErrorDomainRoleId) as ValueComparisonConstraint;
		}
		
		/// <summary>
		/// Sets ValueComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetValueComparisonConstraint(ValueComparisonConstraintOperatorNotSpecifiedError element, ValueComparisonConstraint newValueComparisonConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, OperatorNotSpecifiedErrorDomainRoleId, newValueComparisonConstraint);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing ValueComparisonConstraint domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ValueComparisonConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ValueComparisonConstraint = (ValueComparisonConstraint)value;
			}
		}
		
		#endregion
		#region OperatorNotSpecifiedError domain role code
		
		/// <summary>
		/// OperatorNotSpecifiedError domain role Id.
		/// </summary>
		public static readonly global::System.Guid OperatorNotSpecifiedErrorDomainRoleId = new global::System.Guid(0x4486d925, 0x4b7f, 0x49d1, 0xb2, 0xd5, 0x9b, 0xda, 0xc4, 0x40, 0x90, 0x12);
		
		/// <summary>
		/// DomainRole OperatorNotSpecifiedError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasOperatorNotSpecifiedError.OperatorNotSpecifiedError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasOperatorNotSpecifiedError/OperatorNotSpecifiedError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasOperatorNotSpecifiedError/OperatorNotSpecifiedError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ValueComparisonConstraint", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasOperatorNotSpecifiedError/OperatorNotSpecifiedError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("4486d925-4b7f-49d1-b2d5-9bdac4409012")]
		public virtual ValueComparisonConstraintOperatorNotSpecifiedError OperatorNotSpecifiedError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ValueComparisonConstraintOperatorNotSpecifiedError)DslModeling::DomainRoleInfo.GetRolePlayer(this, OperatorNotSpecifiedErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, OperatorNotSpecifiedErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access OperatorNotSpecifiedError of a ValueComparisonConstraint
		/// <summary>
		/// Gets OperatorNotSpecifiedError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ValueComparisonConstraintOperatorNotSpecifiedError GetOperatorNotSpecifiedError(ValueComparisonConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ValueComparisonConstraintDomainRoleId) as ValueComparisonConstraintOperatorNotSpecifiedError;
		}
		
		/// <summary>
		/// Sets OperatorNotSpecifiedError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetOperatorNotSpecifiedError(ValueComparisonConstraint element, ValueComparisonConstraintOperatorNotSpecifiedError newOperatorNotSpecifiedError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ValueComparisonConstraintDomainRoleId, newOperatorNotSpecifiedError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing OperatorNotSpecifiedError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.OperatorNotSpecifiedError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.OperatorNotSpecifiedError = (ValueComparisonConstraintOperatorNotSpecifiedError)value;
			}
		}
		
		#endregion
		#region ValueComparisonConstraint link accessor
		/// <summary>
		/// Get the ValueComparisonConstraintHasOperatorNotSpecifiedError link to a ValueComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasOperatorNotSpecifiedError GetLinkToOperatorNotSpecifiedError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraint valueComparisonConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasOperatorNotSpecifiedError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasOperatorNotSpecifiedError>(valueComparisonConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasOperatorNotSpecifiedError.ValueComparisonConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ValueComparisonConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region OperatorNotSpecifiedError link accessor
		/// <summary>
		/// Get the ValueComparisonConstraintHasOperatorNotSpecifiedError link to a ValueComparisonConstraintOperatorNotSpecifiedError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasOperatorNotSpecifiedError GetLinkToValueComparisonConstraint (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintOperatorNotSpecifiedError operatorNotSpecifiedErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasOperatorNotSpecifiedError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasOperatorNotSpecifiedError>(operatorNotSpecifiedErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasOperatorNotSpecifiedError.OperatorNotSpecifiedErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of OperatorNotSpecifiedError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ValueComparisonConstraintHasOperatorNotSpecifiedError instance accessors
		
		/// <summary>
		/// Get any ValueComparisonConstraintHasOperatorNotSpecifiedError links between a given ValueComparisonConstraint and a ValueComparisonConstraintOperatorNotSpecifiedError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasOperatorNotSpecifiedError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintOperatorNotSpecifiedError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasOperatorNotSpecifiedError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasOperatorNotSpecifiedError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasOperatorNotSpecifiedError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasOperatorNotSpecifiedError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasOperatorNotSpecifiedError.ValueComparisonConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasOperatorNotSpecifiedError link in links )
			{
				if ( target.Equals(link.OperatorNotSpecifiedError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ValueComparisonConstraintHasOperatorNotSpecifiedError link between a given ValueComparisonConstraintand a ValueComparisonConstraintOperatorNotSpecifiedError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasOperatorNotSpecifiedError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintOperatorNotSpecifiedError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasOperatorNotSpecifiedError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasOperatorNotSpecifiedError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasOperatorNotSpecifiedError.ValueComparisonConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasOperatorNotSpecifiedError link in links )
			{
				if ( target.Equals(link.OperatorNotSpecifiedError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ValueComparisonConstraintHasRolesNotComparableError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasRolesNotComparableError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasRolesNotComparableError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasRolesNotComparableError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("ac162b03-18db-4bdf-a20d-986ac12e3f15")]
	public partial class ValueComparisonConstraintHasRolesNotComparableError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ValueComparisonConstraintHasRolesNotComparableError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xac162b03, 0x18db, 0x4bdf, 0xa2, 0x0d, 0x98, 0x6a, 0xc1, 0x2e, 0x3f, 0x15);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ValueComparisonConstraintHasRolesNotComparableError link in the same Partition as the given ValueComparisonConstraint
		/// </summary>
		/// <param name="source">ValueComparisonConstraint to use as the source of the relationship.</param>
		/// <param name="target">ValueComparisonRolesNotComparableError to use as the target of the relationship.</param>
		public ValueComparisonConstraintHasRolesNotComparableError(ValueComparisonConstraint source, ValueComparisonRolesNotComparableError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ValueComparisonConstraintHasRolesNotComparableError.ValueComparisonConstraintDomainRoleId, source), new DslModeling::RoleAssignment(ValueComparisonConstraintHasRolesNotComparableError.RolesNotComparableErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ValueComparisonConstraintHasRolesNotComparableError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ValueComparisonConstraintHasRolesNotComparableError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ValueComparisonConstraintHasRolesNotComparableError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ValueComparisonConstraintHasRolesNotComparableError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ValueComparisonConstraint domain role code
		
		/// <summary>
		/// ValueComparisonConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid ValueComparisonConstraintDomainRoleId = new global::System.Guid(0x71756360, 0x7b6c, 0x45b6, 0x90, 0xc8, 0x81, 0x9b, 0x5c, 0xcd, 0xa6, 0xaf);
		
		/// <summary>
		/// DomainRole ValueComparisonConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasRolesNotComparableError.ValueComparisonConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasRolesNotComparableError/ValueComparisonConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasRolesNotComparableError/ValueComparisonConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "RolesNotComparableError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasRolesNotComparableError/ValueComparisonConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("71756360-7b6c-45b6-90c8-819b5ccda6af")]
		public virtual ValueComparisonConstraint ValueComparisonConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ValueComparisonConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, ValueComparisonConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ValueComparisonConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ValueComparisonConstraint of a ValueComparisonRolesNotComparableError
		/// <summary>
		/// Gets ValueComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ValueComparisonConstraint GetValueComparisonConstraint(ValueComparisonRolesNotComparableError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RolesNotComparableErrorDomainRoleId) as ValueComparisonConstraint;
		}
		
		/// <summary>
		/// Sets ValueComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetValueComparisonConstraint(ValueComparisonRolesNotComparableError element, ValueComparisonConstraint newValueComparisonConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RolesNotComparableErrorDomainRoleId, newValueComparisonConstraint);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing ValueComparisonConstraint domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ValueComparisonConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ValueComparisonConstraint = (ValueComparisonConstraint)value;
			}
		}
		
		#endregion
		#region RolesNotComparableError domain role code
		
		/// <summary>
		/// RolesNotComparableError domain role Id.
		/// </summary>
		public static readonly global::System.Guid RolesNotComparableErrorDomainRoleId = new global::System.Guid(0xb171c1b7, 0x73a9, 0x49a8, 0x86, 0x25, 0x3d, 0x20, 0x36, 0x48, 0x3f, 0x85);
		
		/// <summary>
		/// DomainRole RolesNotComparableError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasRolesNotComparableError.RolesNotComparableError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasRolesNotComparableError/RolesNotComparableError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasRolesNotComparableError/RolesNotComparableError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ValueComparisonConstraint", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasRolesNotComparableError/RolesNotComparableError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("b171c1b7-73a9-49a8-8625-3d2036483f85")]
		public virtual ValueComparisonRolesNotComparableError RolesNotComparableError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ValueComparisonRolesNotComparableError)DslModeling::DomainRoleInfo.GetRolePlayer(this, RolesNotComparableErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RolesNotComparableErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RolesNotComparableError of a ValueComparisonConstraint
		/// <summary>
		/// Gets RolesNotComparableError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ValueComparisonRolesNotComparableError GetRolesNotComparableError(ValueComparisonConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ValueComparisonConstraintDomainRoleId) as ValueComparisonRolesNotComparableError;
		}
		
		/// <summary>
		/// Sets RolesNotComparableError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRolesNotComparableError(ValueComparisonConstraint element, ValueComparisonRolesNotComparableError newRolesNotComparableError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ValueComparisonConstraintDomainRoleId, newRolesNotComparableError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing RolesNotComparableError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.RolesNotComparableError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.RolesNotComparableError = (ValueComparisonRolesNotComparableError)value;
			}
		}
		
		#endregion
		#region ValueComparisonConstraint link accessor
		/// <summary>
		/// Get the ValueComparisonConstraintHasRolesNotComparableError link to a ValueComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasRolesNotComparableError GetLinkToRolesNotComparableError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraint valueComparisonConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasRolesNotComparableError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasRolesNotComparableError>(valueComparisonConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasRolesNotComparableError.ValueComparisonConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ValueComparisonConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region RolesNotComparableError link accessor
		/// <summary>
		/// Get the ValueComparisonConstraintHasRolesNotComparableError link to a ValueComparisonRolesNotComparableError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasRolesNotComparableError GetLinkToValueComparisonConstraint (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonRolesNotComparableError rolesNotComparableErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasRolesNotComparableError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasRolesNotComparableError>(rolesNotComparableErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasRolesNotComparableError.RolesNotComparableErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of RolesNotComparableError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ValueComparisonConstraintHasRolesNotComparableError instance accessors
		
		/// <summary>
		/// Get any ValueComparisonConstraintHasRolesNotComparableError links between a given ValueComparisonConstraint and a ValueComparisonRolesNotComparableError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasRolesNotComparableError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonRolesNotComparableError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasRolesNotComparableError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasRolesNotComparableError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasRolesNotComparableError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasRolesNotComparableError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasRolesNotComparableError.ValueComparisonConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasRolesNotComparableError link in links )
			{
				if ( target.Equals(link.RolesNotComparableError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ValueComparisonConstraintHasRolesNotComparableError link between a given ValueComparisonConstraintand a ValueComparisonRolesNotComparableError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasRolesNotComparableError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonRolesNotComparableError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasRolesNotComparableError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasRolesNotComparableError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasRolesNotComparableError.ValueComparisonConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasRolesNotComparableError link in links )
			{
				if ( target.Equals(link.RolesNotComparableError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ValueConstraintHasDuplicateNameError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDuplicateNameError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDuplicateNameError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDuplicateNameError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("3d69f8de-6075-432b-8843-e8babc677457")]
	public partial class ValueConstraintHasDuplicateNameError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ValueConstraintHasDuplicateNameError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3d69f8de, 0x6075, 0x432b, 0x88, 0x43, 0xe8, 0xba, 0xbc, 0x67, 0x74, 0x57);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ValueConstraintHasDuplicateNameError link in the same Partition as the given ValueConstraint
		/// </summary>
		/// <param name="source">ValueConstraint to use as the source of the relationship.</param>
		/// <param name="target">ConstraintDuplicateNameError to use as the target of the relationship.</param>
		public ValueConstraintHasDuplicateNameError(ValueConstraint source, ConstraintDuplicateNameError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ValueConstraintHasDuplicateNameError.ValueConstraintDomainRoleId, source), new DslModeling::RoleAssignment(ValueConstraintHasDuplicateNameError.DuplicateNameErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ValueConstraintHasDuplicateNameError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ValueConstraintHasDuplicateNameError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ValueConstraintHasDuplicateNameError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ValueConstraintHasDuplicateNameError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ValueConstraint domain role code
		
		/// <summary>
		/// ValueConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid ValueConstraintDomainRoleId = new global::System.Guid(0x8d9cde68, 0x22d7, 0x48ff, 0xab, 0xe2, 0x16, 0x17, 0xb5, 0xd2, 0xbb, 0x92);
		
		/// <summary>
		/// DomainRole ValueConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDuplicateNameError.ValueConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDuplicateNameError/ValueConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDuplicateNameError/ValueConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DuplicateNameError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDuplicateNameError/ValueConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("8d9cde68-22d7-48ff-abe2-1617b5d2bb92")]
		public virtual ValueConstraint ValueConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ValueConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, ValueConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ValueConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ValueConstraintCollection of a ConstraintDuplicateNameError
		/// <summary>
		/// Gets a list of ValueConstraintCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ValueConstraint> GetValueConstraintCollection(ConstraintDuplicateNameError element)
		{
			return new DslModeling::LinkedElementCollection<ValueConstraint>(element, DuplicateNameErrorDomainRoleId);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing ValueConstraint domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ValueConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ValueConstraint = (ValueConstraint)value;
			}
		}
		
		#endregion
		#region DuplicateNameError domain role code
		
		/// <summary>
		/// DuplicateNameError domain role Id.
		/// </summary>
		public static readonly global::System.Guid DuplicateNameErrorDomainRoleId = new global::System.Guid(0xfa64a9fe, 0x8209, 0x4fc7, 0xbd, 0xa6, 0x7d, 0xf2, 0xc7, 0x34, 0x57, 0x3a);
		
		/// <summary>
		/// DomainRole DuplicateNameError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDuplicateNameError.DuplicateNameError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDuplicateNameError/DuplicateNameError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDuplicateNameError/DuplicateNameError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ValueConstraintCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDuplicateNameError/DuplicateNameError.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("fa64a9fe-8209-4fc7-bda6-7df2c734573a")]
		public virtual ConstraintDuplicateNameError DuplicateNameError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConstraintDuplicateNameError)DslModeling::DomainRoleInfo.GetRolePlayer(this, DuplicateNameErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DuplicateNameErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DuplicateNameError of a ValueConstraint
		/// <summary>
		/// Gets DuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ConstraintDuplicateNameError GetDuplicateNameError(ValueConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ValueConstraintDomainRoleId) as ConstraintDuplicateNameError;
		}
		
		/// <summary>
		/// Sets DuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDuplicateNameError(ValueConstraint element, ConstraintDuplicateNameError newDuplicateNameError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ValueConstraintDomainRoleId, newDuplicateNameError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing DuplicateNameError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.DuplicateNameError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.DuplicateNameError = (ConstraintDuplicateNameError)value;
			}
		}
		
		#endregion
		#region ValueConstraint link accessor
		/// <summary>
		/// Get the ValueConstraintHasDuplicateNameError link to a ValueConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDuplicateNameError GetLinkToDuplicateNameError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraint valueConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDuplicateNameError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDuplicateNameError>(valueConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDuplicateNameError.ValueConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ValueConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DuplicateNameError link accessor
		/// <summary>
		/// Get the list of ValueConstraintHasDuplicateNameError links to a ConstraintDuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDuplicateNameError> GetLinksToValueConstraintCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintDuplicateNameError duplicateNameErrorInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDuplicateNameError>(duplicateNameErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDuplicateNameError.DuplicateNameErrorDomainRoleId);
		}
		#endregion
		#region ValueConstraintHasDuplicateNameError instance accessors
		
		/// <summary>
		/// Get any ValueConstraintHasDuplicateNameError links between a given ValueConstraint and a ConstraintDuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDuplicateNameError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintDuplicateNameError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDuplicateNameError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDuplicateNameError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDuplicateNameError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDuplicateNameError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDuplicateNameError.ValueConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDuplicateNameError link in links )
			{
				if ( target.Equals(link.DuplicateNameError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ValueConstraintHasDuplicateNameError link between a given ValueConstraintand a ConstraintDuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDuplicateNameError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintDuplicateNameError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDuplicateNameError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDuplicateNameError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDuplicateNameError.ValueConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDuplicateNameError link in links )
			{
				if ( target.Equals(link.DuplicateNameError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship CardinalityConstraintHasDuplicateNameError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDuplicateNameError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDuplicateNameError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDuplicateNameError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("89a95d59-4196-43e6-90f6-9061158685d6")]
	public partial class CardinalityConstraintHasDuplicateNameError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CardinalityConstraintHasDuplicateNameError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x89a95d59, 0x4196, 0x43e6, 0x90, 0xf6, 0x90, 0x61, 0x15, 0x86, 0x85, 0xd6);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CardinalityConstraintHasDuplicateNameError link in the same Partition as the given CardinalityConstraint
		/// </summary>
		/// <param name="source">CardinalityConstraint to use as the source of the relationship.</param>
		/// <param name="target">ConstraintDuplicateNameError to use as the target of the relationship.</param>
		public CardinalityConstraintHasDuplicateNameError(CardinalityConstraint source, ConstraintDuplicateNameError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CardinalityConstraintHasDuplicateNameError.CardinalityConstraintDomainRoleId, source), new DslModeling::RoleAssignment(CardinalityConstraintHasDuplicateNameError.DuplicateNameErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CardinalityConstraintHasDuplicateNameError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CardinalityConstraintHasDuplicateNameError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CardinalityConstraintHasDuplicateNameError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CardinalityConstraintHasDuplicateNameError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region CardinalityConstraint domain role code
		
		/// <summary>
		/// CardinalityConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid CardinalityConstraintDomainRoleId = new global::System.Guid(0xf973d2e2, 0x9625, 0x4601, 0x83, 0x95, 0xf7, 0xd3, 0xb4, 0xf0, 0x40, 0x0a);
		
		/// <summary>
		/// DomainRole CardinalityConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDuplicateNameError.CardinalityConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDuplicateNameError/CardinalityConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDuplicateNameError/CardinalityConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DuplicateNameError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDuplicateNameError/CardinalityConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("f973d2e2-9625-4601-8395-f7d3b4f0400a")]
		public virtual CardinalityConstraint CardinalityConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CardinalityConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, CardinalityConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CardinalityConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CardinalityConstraintCollection of a ConstraintDuplicateNameError
		/// <summary>
		/// Gets a list of CardinalityConstraintCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<CardinalityConstraint> GetCardinalityConstraintCollection(ConstraintDuplicateNameError element)
		{
			return new DslModeling::LinkedElementCollection<CardinalityConstraint>(element, DuplicateNameErrorDomainRoleId);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing CardinalityConstraint domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.CardinalityConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.CardinalityConstraint = (CardinalityConstraint)value;
			}
		}
		
		#endregion
		#region DuplicateNameError domain role code
		
		/// <summary>
		/// DuplicateNameError domain role Id.
		/// </summary>
		public static readonly global::System.Guid DuplicateNameErrorDomainRoleId = new global::System.Guid(0xa8e71e45, 0x08c0, 0x424f, 0xaf, 0xb4, 0xad, 0xbd, 0xf6, 0xc7, 0x83, 0x8b);
		
		/// <summary>
		/// DomainRole DuplicateNameError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDuplicateNameError.DuplicateNameError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDuplicateNameError/DuplicateNameError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDuplicateNameError/DuplicateNameError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "CardinalityConstraintCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDuplicateNameError/DuplicateNameError.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("a8e71e45-08c0-424f-afb4-adbdf6c7838b")]
		public virtual ConstraintDuplicateNameError DuplicateNameError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConstraintDuplicateNameError)DslModeling::DomainRoleInfo.GetRolePlayer(this, DuplicateNameErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DuplicateNameErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DuplicateNameError of a CardinalityConstraint
		/// <summary>
		/// Gets DuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ConstraintDuplicateNameError GetDuplicateNameError(CardinalityConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CardinalityConstraintDomainRoleId) as ConstraintDuplicateNameError;
		}
		
		/// <summary>
		/// Sets DuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDuplicateNameError(CardinalityConstraint element, ConstraintDuplicateNameError newDuplicateNameError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CardinalityConstraintDomainRoleId, newDuplicateNameError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing DuplicateNameError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.DuplicateNameError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.DuplicateNameError = (ConstraintDuplicateNameError)value;
			}
		}
		
		#endregion
		#region CardinalityConstraint link accessor
		/// <summary>
		/// Get the CardinalityConstraintHasDuplicateNameError link to a CardinalityConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDuplicateNameError GetLinkToDuplicateNameError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraint cardinalityConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDuplicateNameError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDuplicateNameError>(cardinalityConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDuplicateNameError.CardinalityConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CardinalityConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DuplicateNameError link accessor
		/// <summary>
		/// Get the list of CardinalityConstraintHasDuplicateNameError links to a ConstraintDuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDuplicateNameError> GetLinksToCardinalityConstraintCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintDuplicateNameError duplicateNameErrorInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDuplicateNameError>(duplicateNameErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDuplicateNameError.DuplicateNameErrorDomainRoleId);
		}
		#endregion
		#region CardinalityConstraintHasDuplicateNameError instance accessors
		
		/// <summary>
		/// Get any CardinalityConstraintHasDuplicateNameError links between a given CardinalityConstraint and a ConstraintDuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDuplicateNameError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintDuplicateNameError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDuplicateNameError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDuplicateNameError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDuplicateNameError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDuplicateNameError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDuplicateNameError.CardinalityConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDuplicateNameError link in links )
			{
				if ( target.Equals(link.DuplicateNameError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CardinalityConstraintHasDuplicateNameError link between a given CardinalityConstraintand a ConstraintDuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDuplicateNameError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintDuplicateNameError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDuplicateNameError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDuplicateNameError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDuplicateNameError.CardinalityConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDuplicateNameError link in links )
			{
				if ( target.Equals(link.DuplicateNameError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ModelHasDefinition
	/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDefinition
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDefinition.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDefinition.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("bc513c18-d426-4e5e-907c-1cd0c87732f1")]
	public partial class ModelHasDefinition : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasDefinition domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbc513c18, 0xd426, 0x4e5e, 0x90, 0x7c, 0x1c, 0xd0, 0xc8, 0x77, 0x32, 0xf1);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasDefinition link in the same Partition as the given ORMModel
		/// </summary>
		/// <param name="source">ORMModel to use as the source of the relationship.</param>
		/// <param name="target">Definition to use as the target of the relationship.</param>
		public ModelHasDefinition(ORMModel source, Definition target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasDefinition.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasDefinition.DefinitionDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasDefinition(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasDefinition(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasDefinition(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasDefinition(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0xee4b3d9b, 0x415e, 0x4105, 0x90, 0xbd, 0xbe, 0x09, 0xd8, 0xe1, 0x35, 0xa7);
		
		/// <summary>
		/// DomainRole Model
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDefinition.Model
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDefinition/Model.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDefinition/Model.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Definition", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDefinition/Model.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("ee4b3d9b-415e-4105-90bd-be09d8e135a7")]
		public virtual ORMModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ORMModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a Definition
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ORMModel GetModel(Definition element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DefinitionDomainRoleId) as ORMModel;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(Definition element, ORMModel newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DefinitionDomainRoleId, newModel);
		}
		#endregion
		#region Definition domain role code
		
		/// <summary>
		/// Definition domain role Id.
		/// </summary>
		public static readonly global::System.Guid DefinitionDomainRoleId = new global::System.Guid(0x86f015da, 0x181f, 0x4431, 0x97, 0x73, 0x89, 0x2d, 0x82, 0xe1, 0xc4, 0x48);
		
		/// <summary>
		/// DomainRole Definition
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDefinition.Definition
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDefinition/Definition.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDefinition/Definition.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDefinition/Definition.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("86f015da-181f-4431-9773-892d82e1c448")]
		public virtual Definition Definition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Definition)DslModeling::DomainRoleInfo.GetRolePlayer(this, DefinitionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DefinitionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Definition of a ORMModel
		/// <summary>
		/// Gets Definition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Definition GetDefinition(ORMModel element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ModelDomainRoleId) as Definition;
		}
		
		/// <summary>
		/// Sets Definition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDefinition(ORMModel element, Definition newDefinition)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ModelDomainRoleId, newDefinition);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the ModelHasDefinition link to a ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDefinition GetLinkToDefinition (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel modelInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDefinition> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDefinition>(modelInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDefinition.ModelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Model not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Definition link accessor
		/// <summary>
		/// Get the ModelHasDefinition link to a Definition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDefinition GetLinkToModel (global::ORMSolutions.ORMArchitect.Core.ObjectModel.Definition definitionInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDefinition> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDefinition>(definitionInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDefinition.DefinitionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Definition not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasDefinition instance accessors
		
		/// <summary>
		/// Get any ModelHasDefinition links between a given ORMModel and a Definition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDefinition> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Definition target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDefinition> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDefinition>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDefinition> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDefinition>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDefinition.ModelDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDefinition link in links )
			{
				if ( target.Equals(link.Definition) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasDefinition link between a given ORMModeland a Definition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDefinition GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Definition target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDefinition> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDefinition>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDefinition.ModelDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDefinition link in links )
			{
				if ( target.Equals(link.Definition) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ObjectTypeHasDefinition
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDefinition
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDefinition.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDefinition.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("cc5801e2-dc99-4927-8924-f3e451f61e60")]
	public partial class ObjectTypeHasDefinition : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ObjectTypeHasDefinition domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xcc5801e2, 0xdc99, 0x4927, 0x89, 0x24, 0xf3, 0xe4, 0x51, 0xf6, 0x1e, 0x60);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ObjectTypeHasDefinition link in the same Partition as the given ObjectType
		/// </summary>
		/// <param name="source">ObjectType to use as the source of the relationship.</param>
		/// <param name="target">Definition to use as the target of the relationship.</param>
		public ObjectTypeHasDefinition(ObjectType source, Definition target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ObjectTypeHasDefinition.ObjectTypeDomainRoleId, source), new DslModeling::RoleAssignment(ObjectTypeHasDefinition.DefinitionDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectTypeHasDefinition(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectTypeHasDefinition(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectTypeHasDefinition(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectTypeHasDefinition(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ObjectType domain role code
		
		/// <summary>
		/// ObjectType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ObjectTypeDomainRoleId = new global::System.Guid(0x0d5ca68c, 0x3576, 0x4e90, 0xa9, 0x98, 0xe3, 0x74, 0x5c, 0xd2, 0x45, 0xb6);
		
		/// <summary>
		/// DomainRole ObjectType
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDefinition.ObjectType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDefinition/ObjectType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDefinition/ObjectType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Definition", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDefinition/ObjectType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("0d5ca68c-3576-4e90-a998-e3745cd245b6")]
		public virtual ObjectType ObjectType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjectTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjectTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ObjectType of a Definition
		/// <summary>
		/// Gets ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ObjectType GetObjectType(Definition element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DefinitionDomainRoleId) as ObjectType;
		}
		
		/// <summary>
		/// Sets ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetObjectType(Definition element, ObjectType newObjectType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DefinitionDomainRoleId, newObjectType);
		}
		#endregion
		#region Definition domain role code
		
		/// <summary>
		/// Definition domain role Id.
		/// </summary>
		public static readonly global::System.Guid DefinitionDomainRoleId = new global::System.Guid(0x3a176f2b, 0xd5ad, 0x485f, 0xbe, 0xc3, 0xbe, 0x61, 0x92, 0xfd, 0x6d, 0x65);
		
		/// <summary>
		/// DomainRole Definition
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDefinition.Definition
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDefinition/Definition.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDefinition/Definition.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ObjectType", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDefinition/Definition.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("3a176f2b-d5ad-485f-bec3-be6192fd6d65")]
		public virtual Definition Definition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Definition)DslModeling::DomainRoleInfo.GetRolePlayer(this, DefinitionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DefinitionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Definition of a ObjectType
		/// <summary>
		/// Gets Definition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Definition GetDefinition(ObjectType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ObjectTypeDomainRoleId) as Definition;
		}
		
		/// <summary>
		/// Sets Definition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDefinition(ObjectType element, Definition newDefinition)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ObjectTypeDomainRoleId, newDefinition);
		}
		#endregion
		#region ObjectType link accessor
		/// <summary>
		/// Get the ObjectTypeHasDefinition link to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDefinition GetLinkToDefinition (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType objectTypeInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDefinition> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDefinition>(objectTypeInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDefinition.ObjectTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ObjectType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Definition link accessor
		/// <summary>
		/// Get the ObjectTypeHasDefinition link to a Definition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDefinition GetLinkToObjectType (global::ORMSolutions.ORMArchitect.Core.ObjectModel.Definition definitionInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDefinition> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDefinition>(definitionInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDefinition.DefinitionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Definition not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ObjectTypeHasDefinition instance accessors
		
		/// <summary>
		/// Get any ObjectTypeHasDefinition links between a given ObjectType and a Definition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDefinition> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Definition target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDefinition> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDefinition>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDefinition> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDefinition>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDefinition.ObjectTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDefinition link in links )
			{
				if ( target.Equals(link.Definition) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ObjectTypeHasDefinition link between a given ObjectTypeand a Definition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDefinition GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Definition target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDefinition> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDefinition>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDefinition.ObjectTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDefinition link in links )
			{
				if ( target.Equals(link.Definition) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship FactTypeHasDefinition
	/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDefinition
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDefinition.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDefinition.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("a2b92b06-ba59-4659-905e-d1a68b5f7865")]
	public partial class FactTypeHasDefinition : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FactTypeHasDefinition domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa2b92b06, 0xba59, 0x4659, 0x90, 0x5e, 0xd1, 0xa6, 0x8b, 0x5f, 0x78, 0x65);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FactTypeHasDefinition link in the same Partition as the given FactType
		/// </summary>
		/// <param name="source">FactType to use as the source of the relationship.</param>
		/// <param name="target">Definition to use as the target of the relationship.</param>
		public FactTypeHasDefinition(FactType source, Definition target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FactTypeHasDefinition.FactTypeDomainRoleId, source), new DslModeling::RoleAssignment(FactTypeHasDefinition.DefinitionDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeHasDefinition(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeHasDefinition(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeHasDefinition(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeHasDefinition(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region FactType domain role code
		
		/// <summary>
		/// FactType domain role Id.
		/// </summary>
		public static readonly global::System.Guid FactTypeDomainRoleId = new global::System.Guid(0xa28e8432, 0x212e, 0x4723, 0xae, 0xa8, 0x5b, 0xbd, 0x20, 0x3b, 0x9b, 0xc0);
		
		/// <summary>
		/// DomainRole FactType
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDefinition.FactType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDefinition/FactType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDefinition/FactType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Definition", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDefinition/FactType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("a28e8432-212e-4723-aea8-5bbd203b9bc0")]
		public virtual FactType FactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FactType)DslModeling::DomainRoleInfo.GetRolePlayer(this, FactTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FactTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FactType of a Definition
		/// <summary>
		/// Gets FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FactType GetFactType(Definition element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DefinitionDomainRoleId) as FactType;
		}
		
		/// <summary>
		/// Sets FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFactType(Definition element, FactType newFactType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DefinitionDomainRoleId, newFactType);
		}
		#endregion
		#region Definition domain role code
		
		/// <summary>
		/// Definition domain role Id.
		/// </summary>
		public static readonly global::System.Guid DefinitionDomainRoleId = new global::System.Guid(0x4eebed3e, 0x8b32, 0x4fd7, 0xaa, 0x5c, 0x00, 0x9a, 0xe0, 0x61, 0xec, 0x71);
		
		/// <summary>
		/// DomainRole Definition
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDefinition.Definition
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDefinition/Definition.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDefinition/Definition.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FactType", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDefinition/Definition.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("4eebed3e-8b32-4fd7-aa5c-009ae061ec71")]
		public virtual Definition Definition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Definition)DslModeling::DomainRoleInfo.GetRolePlayer(this, DefinitionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DefinitionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Definition of a FactType
		/// <summary>
		/// Gets Definition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Definition GetDefinition(FactType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FactTypeDomainRoleId) as Definition;
		}
		
		/// <summary>
		/// Sets Definition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDefinition(FactType element, Definition newDefinition)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FactTypeDomainRoleId, newDefinition);
		}
		#endregion
		#region FactType link accessor
		/// <summary>
		/// Get the FactTypeHasDefinition link to a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDefinition GetLinkToDefinition (global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType factTypeInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDefinition> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDefinition>(factTypeInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDefinition.FactTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of FactType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Definition link accessor
		/// <summary>
		/// Get the FactTypeHasDefinition link to a Definition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDefinition GetLinkToFactType (global::ORMSolutions.ORMArchitect.Core.ObjectModel.Definition definitionInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDefinition> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDefinition>(definitionInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDefinition.DefinitionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Definition not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FactTypeHasDefinition instance accessors
		
		/// <summary>
		/// Get any FactTypeHasDefinition links between a given FactType and a Definition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDefinition> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Definition target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDefinition> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDefinition>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDefinition> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDefinition>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDefinition.FactTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDefinition link in links )
			{
				if ( target.Equals(link.Definition) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FactTypeHasDefinition link between a given FactTypeand a Definition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDefinition GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Definition target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDefinition> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDefinition>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDefinition.FactTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDefinition link in links )
			{
				if ( target.Equals(link.Definition) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship SetConstraintHasDefinition
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDefinition
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDefinition.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDefinition.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("7cf6a973-7693-41e1-b366-8f225b354818")]
	public partial class SetConstraintHasDefinition : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SetConstraintHasDefinition domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7cf6a973, 0x7693, 0x41e1, 0xb3, 0x66, 0x8f, 0x22, 0x5b, 0x35, 0x48, 0x18);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SetConstraintHasDefinition link in the same Partition as the given SetConstraint
		/// </summary>
		/// <param name="source">SetConstraint to use as the source of the relationship.</param>
		/// <param name="target">Definition to use as the target of the relationship.</param>
		public SetConstraintHasDefinition(SetConstraint source, Definition target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SetConstraintHasDefinition.SetConstraintDomainRoleId, source), new DslModeling::RoleAssignment(SetConstraintHasDefinition.DefinitionDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetConstraintHasDefinition(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetConstraintHasDefinition(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetConstraintHasDefinition(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetConstraintHasDefinition(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SetConstraint domain role code
		
		/// <summary>
		/// SetConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid SetConstraintDomainRoleId = new global::System.Guid(0x51269942, 0x962e, 0x49db, 0x84, 0xa0, 0x59, 0x4f, 0xf2, 0x20, 0xb2, 0x78);
		
		/// <summary>
		/// DomainRole SetConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDefinition.SetConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDefinition/SetConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDefinition/SetConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Definition", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDefinition/SetConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("51269942-962e-49db-84a0-594ff220b278")]
		public virtual SetConstraint SetConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SetConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SetConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SetConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SetConstraint of a Definition
		/// <summary>
		/// Gets SetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SetConstraint GetSetConstraint(Definition element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DefinitionDomainRoleId) as SetConstraint;
		}
		
		/// <summary>
		/// Sets SetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSetConstraint(Definition element, SetConstraint newSetConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DefinitionDomainRoleId, newSetConstraint);
		}
		#endregion
		#region Definition domain role code
		
		/// <summary>
		/// Definition domain role Id.
		/// </summary>
		public static readonly global::System.Guid DefinitionDomainRoleId = new global::System.Guid(0x004f7feb, 0x02f9, 0x4f4e, 0xb3, 0x0b, 0xb7, 0x9e, 0x92, 0x49, 0xf4, 0x79);
		
		/// <summary>
		/// DomainRole Definition
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDefinition.Definition
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDefinition/Definition.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDefinition/Definition.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SetConstraint", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDefinition/Definition.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("004f7feb-02f9-4f4e-b30b-b79e9249f479")]
		public virtual Definition Definition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Definition)DslModeling::DomainRoleInfo.GetRolePlayer(this, DefinitionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DefinitionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Definition of a SetConstraint
		/// <summary>
		/// Gets Definition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Definition GetDefinition(SetConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SetConstraintDomainRoleId) as Definition;
		}
		
		/// <summary>
		/// Sets Definition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDefinition(SetConstraint element, Definition newDefinition)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SetConstraintDomainRoleId, newDefinition);
		}
		#endregion
		#region SetConstraint link accessor
		/// <summary>
		/// Get the SetConstraintHasDefinition link to a SetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDefinition GetLinkToDefinition (global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint setConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDefinition> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDefinition>(setConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDefinition.SetConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SetConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Definition link accessor
		/// <summary>
		/// Get the SetConstraintHasDefinition link to a Definition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDefinition GetLinkToSetConstraint (global::ORMSolutions.ORMArchitect.Core.ObjectModel.Definition definitionInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDefinition> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDefinition>(definitionInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDefinition.DefinitionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Definition not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SetConstraintHasDefinition instance accessors
		
		/// <summary>
		/// Get any SetConstraintHasDefinition links between a given SetConstraint and a Definition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDefinition> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Definition target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDefinition> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDefinition>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDefinition> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDefinition>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDefinition.SetConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDefinition link in links )
			{
				if ( target.Equals(link.Definition) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SetConstraintHasDefinition link between a given SetConstraintand a Definition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDefinition GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Definition target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDefinition> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDefinition>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDefinition.SetConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDefinition link in links )
			{
				if ( target.Equals(link.Definition) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship SetComparisonConstraintHasDefinition
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDefinition
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDefinition.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDefinition.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("6134c02a-9a2c-4b67-8b61-f31067b39070")]
	public partial class SetComparisonConstraintHasDefinition : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SetComparisonConstraintHasDefinition domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6134c02a, 0x9a2c, 0x4b67, 0x8b, 0x61, 0xf3, 0x10, 0x67, 0xb3, 0x90, 0x70);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SetComparisonConstraintHasDefinition link in the same Partition as the given SetComparisonConstraint
		/// </summary>
		/// <param name="source">SetComparisonConstraint to use as the source of the relationship.</param>
		/// <param name="target">Definition to use as the target of the relationship.</param>
		public SetComparisonConstraintHasDefinition(SetComparisonConstraint source, Definition target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SetComparisonConstraintHasDefinition.SetComparisonConstraintDomainRoleId, source), new DslModeling::RoleAssignment(SetComparisonConstraintHasDefinition.DefinitionDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetComparisonConstraintHasDefinition(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetComparisonConstraintHasDefinition(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetComparisonConstraintHasDefinition(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetComparisonConstraintHasDefinition(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SetComparisonConstraint domain role code
		
		/// <summary>
		/// SetComparisonConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid SetComparisonConstraintDomainRoleId = new global::System.Guid(0xe97bb07f, 0x315b, 0x4038, 0xb8, 0x9c, 0xa8, 0xd3, 0x86, 0x73, 0x42, 0x2a);
		
		/// <summary>
		/// DomainRole SetComparisonConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDefinition.SetComparisonConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDefinition/SetComparisonConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDefinition/SetComparisonConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Definition", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDefinition/SetComparisonConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("e97bb07f-315b-4038-b89c-a8d38673422a")]
		public virtual SetComparisonConstraint SetComparisonConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SetComparisonConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SetComparisonConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SetComparisonConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SetComparisonConstraint of a Definition
		/// <summary>
		/// Gets SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SetComparisonConstraint GetSetComparisonConstraint(Definition element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DefinitionDomainRoleId) as SetComparisonConstraint;
		}
		
		/// <summary>
		/// Sets SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSetComparisonConstraint(Definition element, SetComparisonConstraint newSetComparisonConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DefinitionDomainRoleId, newSetComparisonConstraint);
		}
		#endregion
		#region Definition domain role code
		
		/// <summary>
		/// Definition domain role Id.
		/// </summary>
		public static readonly global::System.Guid DefinitionDomainRoleId = new global::System.Guid(0xd6e68100, 0x7417, 0x41af, 0x8c, 0x67, 0x82, 0xe4, 0xb3, 0x1c, 0x66, 0x39);
		
		/// <summary>
		/// DomainRole Definition
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDefinition.Definition
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDefinition/Definition.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDefinition/Definition.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SetComparisonConstraint", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDefinition/Definition.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("d6e68100-7417-41af-8c67-82e4b31c6639")]
		public virtual Definition Definition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Definition)DslModeling::DomainRoleInfo.GetRolePlayer(this, DefinitionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DefinitionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Definition of a SetComparisonConstraint
		/// <summary>
		/// Gets Definition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Definition GetDefinition(SetComparisonConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SetComparisonConstraintDomainRoleId) as Definition;
		}
		
		/// <summary>
		/// Sets Definition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDefinition(SetComparisonConstraint element, Definition newDefinition)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SetComparisonConstraintDomainRoleId, newDefinition);
		}
		#endregion
		#region SetComparisonConstraint link accessor
		/// <summary>
		/// Get the SetComparisonConstraintHasDefinition link to a SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDefinition GetLinkToDefinition (global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint setComparisonConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDefinition> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDefinition>(setComparisonConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDefinition.SetComparisonConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SetComparisonConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Definition link accessor
		/// <summary>
		/// Get the SetComparisonConstraintHasDefinition link to a Definition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDefinition GetLinkToSetComparisonConstraint (global::ORMSolutions.ORMArchitect.Core.ObjectModel.Definition definitionInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDefinition> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDefinition>(definitionInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDefinition.DefinitionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Definition not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SetComparisonConstraintHasDefinition instance accessors
		
		/// <summary>
		/// Get any SetComparisonConstraintHasDefinition links between a given SetComparisonConstraint and a Definition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDefinition> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Definition target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDefinition> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDefinition>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDefinition> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDefinition>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDefinition.SetComparisonConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDefinition link in links )
			{
				if ( target.Equals(link.Definition) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SetComparisonConstraintHasDefinition link between a given SetComparisonConstraintand a Definition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDefinition GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Definition target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDefinition> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDefinition>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDefinition.SetComparisonConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDefinition link in links )
			{
				if ( target.Equals(link.Definition) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ValueConstraintHasDefinition
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDefinition
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDefinition.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDefinition.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("94530978-1a69-47db-bf78-0f075b8a5fc9")]
	public partial class ValueConstraintHasDefinition : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ValueConstraintHasDefinition domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x94530978, 0x1a69, 0x47db, 0xbf, 0x78, 0x0f, 0x07, 0x5b, 0x8a, 0x5f, 0xc9);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ValueConstraintHasDefinition link in the same Partition as the given ValueConstraint
		/// </summary>
		/// <param name="source">ValueConstraint to use as the source of the relationship.</param>
		/// <param name="target">Definition to use as the target of the relationship.</param>
		public ValueConstraintHasDefinition(ValueConstraint source, Definition target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ValueConstraintHasDefinition.ValueConstraintDomainRoleId, source), new DslModeling::RoleAssignment(ValueConstraintHasDefinition.DefinitionDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ValueConstraintHasDefinition(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ValueConstraintHasDefinition(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ValueConstraintHasDefinition(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ValueConstraintHasDefinition(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ValueConstraint domain role code
		
		/// <summary>
		/// ValueConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid ValueConstraintDomainRoleId = new global::System.Guid(0x4402d3b6, 0x2d2f, 0x4a2a, 0x99, 0xcc, 0xbf, 0x25, 0x55, 0x46, 0x14, 0x79);
		
		/// <summary>
		/// DomainRole ValueConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDefinition.ValueConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDefinition/ValueConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDefinition/ValueConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Definition", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDefinition/ValueConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("4402d3b6-2d2f-4a2a-99cc-bf2555461479")]
		public virtual ValueConstraint ValueConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ValueConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, ValueConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ValueConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ValueConstraint of a Definition
		/// <summary>
		/// Gets ValueConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ValueConstraint GetValueConstraint(Definition element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DefinitionDomainRoleId) as ValueConstraint;
		}
		
		/// <summary>
		/// Sets ValueConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetValueConstraint(Definition element, ValueConstraint newValueConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DefinitionDomainRoleId, newValueConstraint);
		}
		#endregion
		#region Definition domain role code
		
		/// <summary>
		/// Definition domain role Id.
		/// </summary>
		public static readonly global::System.Guid DefinitionDomainRoleId = new global::System.Guid(0xb41bff8e, 0xfecf, 0x4a56, 0xaf, 0x41, 0xd1, 0xf7, 0x6d, 0x9e, 0x9d, 0xbc);
		
		/// <summary>
		/// DomainRole Definition
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDefinition.Definition
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDefinition/Definition.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDefinition/Definition.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ValueConstraint", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDefinition/Definition.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("b41bff8e-fecf-4a56-af41-d1f76d9e9dbc")]
		public virtual Definition Definition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Definition)DslModeling::DomainRoleInfo.GetRolePlayer(this, DefinitionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DefinitionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Definition of a ValueConstraint
		/// <summary>
		/// Gets Definition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Definition GetDefinition(ValueConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ValueConstraintDomainRoleId) as Definition;
		}
		
		/// <summary>
		/// Sets Definition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDefinition(ValueConstraint element, Definition newDefinition)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ValueConstraintDomainRoleId, newDefinition);
		}
		#endregion
		#region ValueConstraint link accessor
		/// <summary>
		/// Get the ValueConstraintHasDefinition link to a ValueConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDefinition GetLinkToDefinition (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraint valueConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDefinition> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDefinition>(valueConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDefinition.ValueConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ValueConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Definition link accessor
		/// <summary>
		/// Get the ValueConstraintHasDefinition link to a Definition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDefinition GetLinkToValueConstraint (global::ORMSolutions.ORMArchitect.Core.ObjectModel.Definition definitionInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDefinition> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDefinition>(definitionInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDefinition.DefinitionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Definition not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ValueConstraintHasDefinition instance accessors
		
		/// <summary>
		/// Get any ValueConstraintHasDefinition links between a given ValueConstraint and a Definition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDefinition> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Definition target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDefinition> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDefinition>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDefinition> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDefinition>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDefinition.ValueConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDefinition link in links )
			{
				if ( target.Equals(link.Definition) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ValueConstraintHasDefinition link between a given ValueConstraintand a Definition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDefinition GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Definition target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDefinition> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDefinition>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDefinition.ValueConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDefinition link in links )
			{
				if ( target.Equals(link.Definition) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship CardinalityConstraintHasDefinition
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDefinition
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDefinition.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDefinition.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("ce175f97-f842-4212-ab44-ab37187921c8")]
	public partial class CardinalityConstraintHasDefinition : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CardinalityConstraintHasDefinition domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xce175f97, 0xf842, 0x4212, 0xab, 0x44, 0xab, 0x37, 0x18, 0x79, 0x21, 0xc8);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CardinalityConstraintHasDefinition link in the same Partition as the given CardinalityConstraint
		/// </summary>
		/// <param name="source">CardinalityConstraint to use as the source of the relationship.</param>
		/// <param name="target">Definition to use as the target of the relationship.</param>
		public CardinalityConstraintHasDefinition(CardinalityConstraint source, Definition target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CardinalityConstraintHasDefinition.CardinalityConstraintDomainRoleId, source), new DslModeling::RoleAssignment(CardinalityConstraintHasDefinition.DefinitionDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CardinalityConstraintHasDefinition(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CardinalityConstraintHasDefinition(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CardinalityConstraintHasDefinition(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CardinalityConstraintHasDefinition(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region CardinalityConstraint domain role code
		
		/// <summary>
		/// CardinalityConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid CardinalityConstraintDomainRoleId = new global::System.Guid(0xad4c5971, 0x6e3f, 0x444d, 0xa9, 0xd9, 0xaa, 0x9b, 0xa1, 0xe6, 0x50, 0xc7);
		
		/// <summary>
		/// DomainRole CardinalityConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDefinition.CardinalityConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDefinition/CardinalityConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDefinition/CardinalityConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Definition", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDefinition/CardinalityConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("ad4c5971-6e3f-444d-a9d9-aa9ba1e650c7")]
		public virtual CardinalityConstraint CardinalityConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CardinalityConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, CardinalityConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CardinalityConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CardinalityConstraint of a Definition
		/// <summary>
		/// Gets CardinalityConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static CardinalityConstraint GetCardinalityConstraint(Definition element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DefinitionDomainRoleId) as CardinalityConstraint;
		}
		
		/// <summary>
		/// Sets CardinalityConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetCardinalityConstraint(Definition element, CardinalityConstraint newCardinalityConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DefinitionDomainRoleId, newCardinalityConstraint);
		}
		#endregion
		#region Definition domain role code
		
		/// <summary>
		/// Definition domain role Id.
		/// </summary>
		public static readonly global::System.Guid DefinitionDomainRoleId = new global::System.Guid(0x807ab7c5, 0x903e, 0x4adf, 0x99, 0xca, 0x6f, 0xde, 0x21, 0x7b, 0xaa, 0xf3);
		
		/// <summary>
		/// DomainRole Definition
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDefinition.Definition
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDefinition/Definition.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDefinition/Definition.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "CardinalityConstraint", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDefinition/Definition.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("807ab7c5-903e-4adf-99ca-6fde217baaf3")]
		public virtual Definition Definition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Definition)DslModeling::DomainRoleInfo.GetRolePlayer(this, DefinitionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DefinitionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Definition of a CardinalityConstraint
		/// <summary>
		/// Gets Definition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Definition GetDefinition(CardinalityConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CardinalityConstraintDomainRoleId) as Definition;
		}
		
		/// <summary>
		/// Sets Definition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDefinition(CardinalityConstraint element, Definition newDefinition)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CardinalityConstraintDomainRoleId, newDefinition);
		}
		#endregion
		#region CardinalityConstraint link accessor
		/// <summary>
		/// Get the CardinalityConstraintHasDefinition link to a CardinalityConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDefinition GetLinkToDefinition (global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraint cardinalityConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDefinition> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDefinition>(cardinalityConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDefinition.CardinalityConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CardinalityConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Definition link accessor
		/// <summary>
		/// Get the CardinalityConstraintHasDefinition link to a Definition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDefinition GetLinkToCardinalityConstraint (global::ORMSolutions.ORMArchitect.Core.ObjectModel.Definition definitionInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDefinition> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDefinition>(definitionInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDefinition.DefinitionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Definition not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CardinalityConstraintHasDefinition instance accessors
		
		/// <summary>
		/// Get any CardinalityConstraintHasDefinition links between a given CardinalityConstraint and a Definition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDefinition> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Definition target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDefinition> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDefinition>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDefinition> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDefinition>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDefinition.CardinalityConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDefinition link in links )
			{
				if ( target.Equals(link.Definition) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CardinalityConstraintHasDefinition link between a given CardinalityConstraintand a Definition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDefinition GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Definition target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDefinition> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDefinition>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDefinition.CardinalityConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDefinition link in links )
			{
				if ( target.Equals(link.Definition) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ElementGroupingHasDefinition
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDefinition
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDefinition.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDefinition.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("772a73a6-4362-494a-9f40-36228f0802c9")]
	public partial class ElementGroupingHasDefinition : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ElementGroupingHasDefinition domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x772a73a6, 0x4362, 0x494a, 0x9f, 0x40, 0x36, 0x22, 0x8f, 0x08, 0x02, 0xc9);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ElementGroupingHasDefinition link in the same Partition as the given ElementGrouping
		/// </summary>
		/// <param name="source">ElementGrouping to use as the source of the relationship.</param>
		/// <param name="target">Definition to use as the target of the relationship.</param>
		public ElementGroupingHasDefinition(ElementGrouping source, Definition target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ElementGroupingHasDefinition.GroupingDomainRoleId, source), new DslModeling::RoleAssignment(ElementGroupingHasDefinition.DefinitionDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ElementGroupingHasDefinition(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ElementGroupingHasDefinition(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ElementGroupingHasDefinition(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ElementGroupingHasDefinition(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Grouping domain role code
		
		/// <summary>
		/// Grouping domain role Id.
		/// </summary>
		public static readonly global::System.Guid GroupingDomainRoleId = new global::System.Guid(0x1df300ce, 0x7575, 0x4602, 0xbe, 0x59, 0xd3, 0x7b, 0xec, 0xc8, 0xe9, 0xba);
		
		/// <summary>
		/// DomainRole Grouping
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDefinition.Grouping
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDefinition/Grouping.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDefinition/Grouping.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Definition", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDefinition/Grouping.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("1df300ce-7575-4602-be59-d37becc8e9ba")]
		public virtual ElementGrouping Grouping
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ElementGrouping)DslModeling::DomainRoleInfo.GetRolePlayer(this, GroupingDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, GroupingDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Grouping of a Definition
		/// <summary>
		/// Gets Grouping.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ElementGrouping GetGrouping(Definition element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DefinitionDomainRoleId) as ElementGrouping;
		}
		
		/// <summary>
		/// Sets Grouping.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetGrouping(Definition element, ElementGrouping newGrouping)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DefinitionDomainRoleId, newGrouping);
		}
		#endregion
		#region Definition domain role code
		
		/// <summary>
		/// Definition domain role Id.
		/// </summary>
		public static readonly global::System.Guid DefinitionDomainRoleId = new global::System.Guid(0x8acd65f1, 0x0b2c, 0x40f1, 0xb2, 0xe8, 0xfa, 0xc3, 0xd3, 0x4f, 0x84, 0x56);
		
		/// <summary>
		/// DomainRole Definition
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDefinition.Definition
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDefinition/Definition.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDefinition/Definition.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Grouping", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDefinition/Definition.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("8acd65f1-0b2c-40f1-b2e8-fac3d34f8456")]
		public virtual Definition Definition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Definition)DslModeling::DomainRoleInfo.GetRolePlayer(this, DefinitionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DefinitionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Definition of a ElementGrouping
		/// <summary>
		/// Gets Definition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Definition GetDefinition(ElementGrouping element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, GroupingDomainRoleId) as Definition;
		}
		
		/// <summary>
		/// Sets Definition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDefinition(ElementGrouping element, Definition newDefinition)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, GroupingDomainRoleId, newDefinition);
		}
		#endregion
		#region Grouping link accessor
		/// <summary>
		/// Get the ElementGroupingHasDefinition link to a ElementGrouping.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDefinition GetLinkToDefinition (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping groupingInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDefinition> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDefinition>(groupingInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDefinition.GroupingDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Grouping not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Definition link accessor
		/// <summary>
		/// Get the ElementGroupingHasDefinition link to a Definition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDefinition GetLinkToGrouping (global::ORMSolutions.ORMArchitect.Core.ObjectModel.Definition definitionInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDefinition> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDefinition>(definitionInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDefinition.DefinitionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Definition not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ElementGroupingHasDefinition instance accessors
		
		/// <summary>
		/// Get any ElementGroupingHasDefinition links between a given ElementGrouping and a Definition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDefinition> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Definition target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDefinition> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDefinition>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDefinition> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDefinition>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDefinition.GroupingDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDefinition link in links )
			{
				if ( target.Equals(link.Definition) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ElementGroupingHasDefinition link between a given ElementGroupingand a Definition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDefinition GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Definition target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDefinition> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDefinition>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDefinition.GroupingDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDefinition link in links )
			{
				if ( target.Equals(link.Definition) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship FactTypeHasNote
	/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasNote
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasNote.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasNote.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("b41c4d61-2a9f-4c91-b948-52e53a8e525f")]
	public partial class FactTypeHasNote : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FactTypeHasNote domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb41c4d61, 0x2a9f, 0x4c91, 0xb9, 0x48, 0x52, 0xe5, 0x3a, 0x8e, 0x52, 0x5f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FactTypeHasNote link in the same Partition as the given FactType
		/// </summary>
		/// <param name="source">FactType to use as the source of the relationship.</param>
		/// <param name="target">Note to use as the target of the relationship.</param>
		public FactTypeHasNote(FactType source, Note target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FactTypeHasNote.FactTypeDomainRoleId, source), new DslModeling::RoleAssignment(FactTypeHasNote.NoteDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeHasNote(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeHasNote(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeHasNote(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeHasNote(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region FactType domain role code
		
		/// <summary>
		/// FactType domain role Id.
		/// </summary>
		public static readonly global::System.Guid FactTypeDomainRoleId = new global::System.Guid(0xbedcb56b, 0xcad7, 0x45fd, 0xb7, 0x81, 0x2a, 0x43, 0x7a, 0xef, 0x51, 0x41);
		
		/// <summary>
		/// DomainRole FactType
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasNote.FactType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasNote/FactType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasNote/FactType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Note", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasNote/FactType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("bedcb56b-cad7-45fd-b781-2a437aef5141")]
		public virtual FactType FactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FactType)DslModeling::DomainRoleInfo.GetRolePlayer(this, FactTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FactTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FactType of a Note
		/// <summary>
		/// Gets FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FactType GetFactType(Note element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, NoteDomainRoleId) as FactType;
		}
		
		/// <summary>
		/// Sets FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFactType(Note element, FactType newFactType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, NoteDomainRoleId, newFactType);
		}
		#endregion
		#region Note domain role code
		
		/// <summary>
		/// Note domain role Id.
		/// </summary>
		public static readonly global::System.Guid NoteDomainRoleId = new global::System.Guid(0x0ee3d4e9, 0x714c, 0x404f, 0xae, 0x40, 0x5c, 0x14, 0x0a, 0x33, 0x5f, 0x42);
		
		/// <summary>
		/// DomainRole Note
		/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasNote.Note
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasNote/Note.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasNote/Note.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FactType", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasNote/Note.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("0ee3d4e9-714c-404f-ae40-5c140a335f42")]
		public virtual Note Note
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Note)DslModeling::DomainRoleInfo.GetRolePlayer(this, NoteDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, NoteDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Note of a FactType
		/// <summary>
		/// Gets Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Note GetNote(FactType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FactTypeDomainRoleId) as Note;
		}
		
		/// <summary>
		/// Sets Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetNote(FactType element, Note newNote)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FactTypeDomainRoleId, newNote);
		}
		#endregion
		#region FactType link accessor
		/// <summary>
		/// Get the FactTypeHasNote link to a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasNote GetLinkToNote (global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType factTypeInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasNote>(factTypeInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasNote.FactTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of FactType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Note link accessor
		/// <summary>
		/// Get the FactTypeHasNote link to a Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasNote GetLinkToFactType (global::ORMSolutions.ORMArchitect.Core.ObjectModel.Note noteInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasNote>(noteInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasNote.NoteDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Note not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FactTypeHasNote instance accessors
		
		/// <summary>
		/// Get any FactTypeHasNote links between a given FactType and a Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasNote> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Note target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasNote> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasNote>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasNote>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasNote.FactTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasNote link in links )
			{
				if ( target.Equals(link.Note) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FactTypeHasNote link between a given FactTypeand a Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasNote GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Note target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasNote>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasNote.FactTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasNote link in links )
			{
				if ( target.Equals(link.Note) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ObjectTypeHasNote
	/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasNote
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasNote.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasNote.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("8357f61d-e61e-40f5-b98a-782b02a85b1a")]
	public partial class ObjectTypeHasNote : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ObjectTypeHasNote domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8357f61d, 0xe61e, 0x40f5, 0xb9, 0x8a, 0x78, 0x2b, 0x02, 0xa8, 0x5b, 0x1a);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ObjectTypeHasNote link in the same Partition as the given ObjectType
		/// </summary>
		/// <param name="source">ObjectType to use as the source of the relationship.</param>
		/// <param name="target">Note to use as the target of the relationship.</param>
		public ObjectTypeHasNote(ObjectType source, Note target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ObjectTypeHasNote.ObjectTypeDomainRoleId, source), new DslModeling::RoleAssignment(ObjectTypeHasNote.NoteDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectTypeHasNote(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectTypeHasNote(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectTypeHasNote(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectTypeHasNote(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ObjectType domain role code
		
		/// <summary>
		/// ObjectType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ObjectTypeDomainRoleId = new global::System.Guid(0xa75b240c, 0x06cc, 0x4f48, 0xb7, 0x87, 0x85, 0x36, 0xc5, 0x8e, 0x4c, 0xd8);
		
		/// <summary>
		/// DomainRole ObjectType
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasNote.ObjectType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasNote/ObjectType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasNote/ObjectType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Note", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasNote/ObjectType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("a75b240c-06cc-4f48-b787-8536c58e4cd8")]
		public virtual ObjectType ObjectType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjectTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjectTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ObjectType of a Note
		/// <summary>
		/// Gets ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ObjectType GetObjectType(Note element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, NoteDomainRoleId) as ObjectType;
		}
		
		/// <summary>
		/// Sets ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetObjectType(Note element, ObjectType newObjectType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, NoteDomainRoleId, newObjectType);
		}
		#endregion
		#region Note domain role code
		
		/// <summary>
		/// Note domain role Id.
		/// </summary>
		public static readonly global::System.Guid NoteDomainRoleId = new global::System.Guid(0xb2bc6ecc, 0x430a, 0x48ae, 0xa8, 0x62, 0xd4, 0xd8, 0x76, 0x74, 0x81, 0x30);
		
		/// <summary>
		/// DomainRole Note
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasNote.Note
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasNote/Note.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasNote/Note.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ObjectType", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasNote/Note.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("b2bc6ecc-430a-48ae-a862-d4d876748130")]
		public virtual Note Note
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Note)DslModeling::DomainRoleInfo.GetRolePlayer(this, NoteDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, NoteDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Note of a ObjectType
		/// <summary>
		/// Gets Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Note GetNote(ObjectType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ObjectTypeDomainRoleId) as Note;
		}
		
		/// <summary>
		/// Sets Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetNote(ObjectType element, Note newNote)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ObjectTypeDomainRoleId, newNote);
		}
		#endregion
		#region ObjectType link accessor
		/// <summary>
		/// Get the ObjectTypeHasNote link to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasNote GetLinkToNote (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType objectTypeInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasNote>(objectTypeInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasNote.ObjectTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ObjectType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Note link accessor
		/// <summary>
		/// Get the ObjectTypeHasNote link to a Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasNote GetLinkToObjectType (global::ORMSolutions.ORMArchitect.Core.ObjectModel.Note noteInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasNote>(noteInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasNote.NoteDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Note not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ObjectTypeHasNote instance accessors
		
		/// <summary>
		/// Get any ObjectTypeHasNote links between a given ObjectType and a Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasNote> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Note target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasNote> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasNote>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasNote>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasNote.ObjectTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasNote link in links )
			{
				if ( target.Equals(link.Note) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ObjectTypeHasNote link between a given ObjectTypeand a Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasNote GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Note target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasNote>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasNote.ObjectTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasNote link in links )
			{
				if ( target.Equals(link.Note) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship SetConstraintHasNote
	/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasNote
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasNote.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasNote.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("a6d0352f-f155-431a-b798-e89342c8f05f")]
	public partial class SetConstraintHasNote : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SetConstraintHasNote domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa6d0352f, 0xf155, 0x431a, 0xb7, 0x98, 0xe8, 0x93, 0x42, 0xc8, 0xf0, 0x5f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SetConstraintHasNote link in the same Partition as the given SetConstraint
		/// </summary>
		/// <param name="source">SetConstraint to use as the source of the relationship.</param>
		/// <param name="target">Note to use as the target of the relationship.</param>
		public SetConstraintHasNote(SetConstraint source, Note target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SetConstraintHasNote.SetConstraintDomainRoleId, source), new DslModeling::RoleAssignment(SetConstraintHasNote.NoteDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetConstraintHasNote(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetConstraintHasNote(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetConstraintHasNote(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetConstraintHasNote(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SetConstraint domain role code
		
		/// <summary>
		/// SetConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid SetConstraintDomainRoleId = new global::System.Guid(0x4f6a92ac, 0x0643, 0x461f, 0xbf, 0x0a, 0x09, 0xa9, 0xdd, 0x3c, 0x7e, 0x0d);
		
		/// <summary>
		/// DomainRole SetConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasNote.SetConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasNote/SetConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasNote/SetConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Note", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasNote/SetConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("4f6a92ac-0643-461f-bf0a-09a9dd3c7e0d")]
		public virtual SetConstraint SetConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SetConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SetConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SetConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SetConstraint of a Note
		/// <summary>
		/// Gets SetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SetConstraint GetSetConstraint(Note element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, NoteDomainRoleId) as SetConstraint;
		}
		
		/// <summary>
		/// Sets SetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSetConstraint(Note element, SetConstraint newSetConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, NoteDomainRoleId, newSetConstraint);
		}
		#endregion
		#region Note domain role code
		
		/// <summary>
		/// Note domain role Id.
		/// </summary>
		public static readonly global::System.Guid NoteDomainRoleId = new global::System.Guid(0xfd8d1e32, 0x54de, 0x40f6, 0xa5, 0x38, 0xcb, 0xba, 0x90, 0x9f, 0xe5, 0xbb);
		
		/// <summary>
		/// DomainRole Note
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasNote.Note
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasNote/Note.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasNote/Note.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SetConstraint", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasNote/Note.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("fd8d1e32-54de-40f6-a538-cbba909fe5bb")]
		public virtual Note Note
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Note)DslModeling::DomainRoleInfo.GetRolePlayer(this, NoteDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, NoteDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Note of a SetConstraint
		/// <summary>
		/// Gets Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Note GetNote(SetConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SetConstraintDomainRoleId) as Note;
		}
		
		/// <summary>
		/// Sets Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetNote(SetConstraint element, Note newNote)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SetConstraintDomainRoleId, newNote);
		}
		#endregion
		#region SetConstraint link accessor
		/// <summary>
		/// Get the SetConstraintHasNote link to a SetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasNote GetLinkToNote (global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint setConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasNote>(setConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasNote.SetConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SetConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Note link accessor
		/// <summary>
		/// Get the SetConstraintHasNote link to a Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasNote GetLinkToSetConstraint (global::ORMSolutions.ORMArchitect.Core.ObjectModel.Note noteInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasNote>(noteInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasNote.NoteDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Note not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SetConstraintHasNote instance accessors
		
		/// <summary>
		/// Get any SetConstraintHasNote links between a given SetConstraint and a Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasNote> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Note target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasNote> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasNote>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasNote>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasNote.SetConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasNote link in links )
			{
				if ( target.Equals(link.Note) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SetConstraintHasNote link between a given SetConstraintand a Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasNote GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Note target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasNote>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasNote.SetConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasNote link in links )
			{
				if ( target.Equals(link.Note) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship SetComparisonConstraintHasNote
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasNote
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasNote.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasNote.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("4c6469f2-688e-4475-ba7a-3722a052f935")]
	public partial class SetComparisonConstraintHasNote : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SetComparisonConstraintHasNote domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4c6469f2, 0x688e, 0x4475, 0xba, 0x7a, 0x37, 0x22, 0xa0, 0x52, 0xf9, 0x35);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SetComparisonConstraintHasNote link in the same Partition as the given SetComparisonConstraint
		/// </summary>
		/// <param name="source">SetComparisonConstraint to use as the source of the relationship.</param>
		/// <param name="target">Note to use as the target of the relationship.</param>
		public SetComparisonConstraintHasNote(SetComparisonConstraint source, Note target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SetComparisonConstraintHasNote.SetComparisonConstraintDomainRoleId, source), new DslModeling::RoleAssignment(SetComparisonConstraintHasNote.NoteDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetComparisonConstraintHasNote(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetComparisonConstraintHasNote(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetComparisonConstraintHasNote(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetComparisonConstraintHasNote(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SetComparisonConstraint domain role code
		
		/// <summary>
		/// SetComparisonConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid SetComparisonConstraintDomainRoleId = new global::System.Guid(0x7b0ac9c2, 0x0e88, 0x4f0d, 0xb5, 0x2c, 0x0f, 0x70, 0xd0, 0xaa, 0xd9, 0x74);
		
		/// <summary>
		/// DomainRole SetComparisonConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasNote.SetComparisonConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasNote/SetComparisonConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasNote/SetComparisonConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Note", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasNote/SetComparisonConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("7b0ac9c2-0e88-4f0d-b52c-0f70d0aad974")]
		public virtual SetComparisonConstraint SetComparisonConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SetComparisonConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SetComparisonConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SetComparisonConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SetComparisonConstraint of a Note
		/// <summary>
		/// Gets SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SetComparisonConstraint GetSetComparisonConstraint(Note element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, NoteDomainRoleId) as SetComparisonConstraint;
		}
		
		/// <summary>
		/// Sets SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSetComparisonConstraint(Note element, SetComparisonConstraint newSetComparisonConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, NoteDomainRoleId, newSetComparisonConstraint);
		}
		#endregion
		#region Note domain role code
		
		/// <summary>
		/// Note domain role Id.
		/// </summary>
		public static readonly global::System.Guid NoteDomainRoleId = new global::System.Guid(0xf2f2a25d, 0xd4c1, 0x47be, 0xa5, 0x67, 0xd9, 0x59, 0x39, 0xd7, 0xc8, 0xb1);
		
		/// <summary>
		/// DomainRole Note
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasNote.Note
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasNote/Note.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasNote/Note.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SetComparisonConstraint", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasNote/Note.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("f2f2a25d-d4c1-47be-a567-d95939d7c8b1")]
		public virtual Note Note
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Note)DslModeling::DomainRoleInfo.GetRolePlayer(this, NoteDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, NoteDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Note of a SetComparisonConstraint
		/// <summary>
		/// Gets Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Note GetNote(SetComparisonConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SetComparisonConstraintDomainRoleId) as Note;
		}
		
		/// <summary>
		/// Sets Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetNote(SetComparisonConstraint element, Note newNote)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SetComparisonConstraintDomainRoleId, newNote);
		}
		#endregion
		#region SetComparisonConstraint link accessor
		/// <summary>
		/// Get the SetComparisonConstraintHasNote link to a SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasNote GetLinkToNote (global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint setComparisonConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasNote>(setComparisonConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasNote.SetComparisonConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SetComparisonConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Note link accessor
		/// <summary>
		/// Get the SetComparisonConstraintHasNote link to a Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasNote GetLinkToSetComparisonConstraint (global::ORMSolutions.ORMArchitect.Core.ObjectModel.Note noteInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasNote>(noteInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasNote.NoteDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Note not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SetComparisonConstraintHasNote instance accessors
		
		/// <summary>
		/// Get any SetComparisonConstraintHasNote links between a given SetComparisonConstraint and a Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasNote> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Note target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasNote> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasNote>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasNote>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasNote.SetComparisonConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasNote link in links )
			{
				if ( target.Equals(link.Note) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SetComparisonConstraintHasNote link between a given SetComparisonConstraintand a Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasNote GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Note target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasNote>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasNote.SetComparisonConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasNote link in links )
			{
				if ( target.Equals(link.Note) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ValueConstraintHasNote
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasNote
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasNote.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasNote.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("24e5a243-aa38-458f-acf8-11b71ea3d7d3")]
	public partial class ValueConstraintHasNote : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ValueConstraintHasNote domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x24e5a243, 0xaa38, 0x458f, 0xac, 0xf8, 0x11, 0xb7, 0x1e, 0xa3, 0xd7, 0xd3);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ValueConstraintHasNote link in the same Partition as the given ValueConstraint
		/// </summary>
		/// <param name="source">ValueConstraint to use as the source of the relationship.</param>
		/// <param name="target">Note to use as the target of the relationship.</param>
		public ValueConstraintHasNote(ValueConstraint source, Note target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ValueConstraintHasNote.ValueConstraintDomainRoleId, source), new DslModeling::RoleAssignment(ValueConstraintHasNote.NoteDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ValueConstraintHasNote(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ValueConstraintHasNote(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ValueConstraintHasNote(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ValueConstraintHasNote(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ValueConstraint domain role code
		
		/// <summary>
		/// ValueConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid ValueConstraintDomainRoleId = new global::System.Guid(0xe9e038e7, 0x1054, 0x4f14, 0x99, 0xcb, 0xc6, 0x98, 0x87, 0x45, 0x45, 0x29);
		
		/// <summary>
		/// DomainRole ValueConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasNote.ValueConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasNote/ValueConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasNote/ValueConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Note", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasNote/ValueConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("e9e038e7-1054-4f14-99cb-c69887454529")]
		public virtual ValueConstraint ValueConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ValueConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, ValueConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ValueConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ValueConstraint of a Note
		/// <summary>
		/// Gets ValueConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ValueConstraint GetValueConstraint(Note element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, NoteDomainRoleId) as ValueConstraint;
		}
		
		/// <summary>
		/// Sets ValueConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetValueConstraint(Note element, ValueConstraint newValueConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, NoteDomainRoleId, newValueConstraint);
		}
		#endregion
		#region Note domain role code
		
		/// <summary>
		/// Note domain role Id.
		/// </summary>
		public static readonly global::System.Guid NoteDomainRoleId = new global::System.Guid(0x168403a0, 0x3ba7, 0x440e, 0x92, 0x02, 0x1a, 0x7c, 0xfa, 0xaf, 0x12, 0xe1);
		
		/// <summary>
		/// DomainRole Note
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasNote.Note
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasNote/Note.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasNote/Note.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ValueConstraint", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasNote/Note.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("168403a0-3ba7-440e-9202-1a7cfaaf12e1")]
		public virtual Note Note
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Note)DslModeling::DomainRoleInfo.GetRolePlayer(this, NoteDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, NoteDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Note of a ValueConstraint
		/// <summary>
		/// Gets Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Note GetNote(ValueConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ValueConstraintDomainRoleId) as Note;
		}
		
		/// <summary>
		/// Sets Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetNote(ValueConstraint element, Note newNote)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ValueConstraintDomainRoleId, newNote);
		}
		#endregion
		#region ValueConstraint link accessor
		/// <summary>
		/// Get the ValueConstraintHasNote link to a ValueConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasNote GetLinkToNote (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraint valueConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasNote>(valueConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasNote.ValueConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ValueConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Note link accessor
		/// <summary>
		/// Get the ValueConstraintHasNote link to a Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasNote GetLinkToValueConstraint (global::ORMSolutions.ORMArchitect.Core.ObjectModel.Note noteInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasNote>(noteInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasNote.NoteDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Note not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ValueConstraintHasNote instance accessors
		
		/// <summary>
		/// Get any ValueConstraintHasNote links between a given ValueConstraint and a Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasNote> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Note target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasNote> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasNote>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasNote>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasNote.ValueConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasNote link in links )
			{
				if ( target.Equals(link.Note) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ValueConstraintHasNote link between a given ValueConstraintand a Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasNote GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Note target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasNote>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasNote.ValueConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasNote link in links )
			{
				if ( target.Equals(link.Note) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship CardinalityConstraintHasNote
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasNote
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasNote.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasNote.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("efdfbd16-f086-4ff3-8862-a0a6472dc1bb")]
	public partial class CardinalityConstraintHasNote : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CardinalityConstraintHasNote domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xefdfbd16, 0xf086, 0x4ff3, 0x88, 0x62, 0xa0, 0xa6, 0x47, 0x2d, 0xc1, 0xbb);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CardinalityConstraintHasNote link in the same Partition as the given CardinalityConstraint
		/// </summary>
		/// <param name="source">CardinalityConstraint to use as the source of the relationship.</param>
		/// <param name="target">Note to use as the target of the relationship.</param>
		public CardinalityConstraintHasNote(CardinalityConstraint source, Note target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CardinalityConstraintHasNote.CardinalityConstraintDomainRoleId, source), new DslModeling::RoleAssignment(CardinalityConstraintHasNote.NoteDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CardinalityConstraintHasNote(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CardinalityConstraintHasNote(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CardinalityConstraintHasNote(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CardinalityConstraintHasNote(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region CardinalityConstraint domain role code
		
		/// <summary>
		/// CardinalityConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid CardinalityConstraintDomainRoleId = new global::System.Guid(0x25c8bc40, 0x6529, 0x4d91, 0x9f, 0x37, 0x6f, 0x91, 0x80, 0xe4, 0x62, 0xad);
		
		/// <summary>
		/// DomainRole CardinalityConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasNote.CardinalityConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasNote/CardinalityConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasNote/CardinalityConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Note", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasNote/CardinalityConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("25c8bc40-6529-4d91-9f37-6f9180e462ad")]
		public virtual CardinalityConstraint CardinalityConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CardinalityConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, CardinalityConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CardinalityConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CardinalityConstraint of a Note
		/// <summary>
		/// Gets CardinalityConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static CardinalityConstraint GetCardinalityConstraint(Note element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, NoteDomainRoleId) as CardinalityConstraint;
		}
		
		/// <summary>
		/// Sets CardinalityConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetCardinalityConstraint(Note element, CardinalityConstraint newCardinalityConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, NoteDomainRoleId, newCardinalityConstraint);
		}
		#endregion
		#region Note domain role code
		
		/// <summary>
		/// Note domain role Id.
		/// </summary>
		public static readonly global::System.Guid NoteDomainRoleId = new global::System.Guid(0xf7ef20ea, 0xc089, 0x4966, 0x98, 0x25, 0x47, 0x3c, 0x85, 0xa6, 0x47, 0x86);
		
		/// <summary>
		/// DomainRole Note
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasNote.Note
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasNote/Note.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasNote/Note.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "CardinalityConstraint", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasNote/Note.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("f7ef20ea-c089-4966-9825-473c85a64786")]
		public virtual Note Note
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Note)DslModeling::DomainRoleInfo.GetRolePlayer(this, NoteDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, NoteDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Note of a CardinalityConstraint
		/// <summary>
		/// Gets Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Note GetNote(CardinalityConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CardinalityConstraintDomainRoleId) as Note;
		}
		
		/// <summary>
		/// Sets Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetNote(CardinalityConstraint element, Note newNote)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CardinalityConstraintDomainRoleId, newNote);
		}
		#endregion
		#region CardinalityConstraint link accessor
		/// <summary>
		/// Get the CardinalityConstraintHasNote link to a CardinalityConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasNote GetLinkToNote (global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraint cardinalityConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasNote>(cardinalityConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasNote.CardinalityConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CardinalityConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Note link accessor
		/// <summary>
		/// Get the CardinalityConstraintHasNote link to a Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasNote GetLinkToCardinalityConstraint (global::ORMSolutions.ORMArchitect.Core.ObjectModel.Note noteInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasNote>(noteInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasNote.NoteDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Note not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CardinalityConstraintHasNote instance accessors
		
		/// <summary>
		/// Get any CardinalityConstraintHasNote links between a given CardinalityConstraint and a Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasNote> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Note target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasNote> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasNote>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasNote>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasNote.CardinalityConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasNote link in links )
			{
				if ( target.Equals(link.Note) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CardinalityConstraintHasNote link between a given CardinalityConstraintand a Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasNote GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Note target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasNote>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasNote.CardinalityConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasNote link in links )
			{
				if ( target.Equals(link.Note) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ElementGroupingHasNote
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasNote
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasNote.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasNote.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("090bfbf3-1514-41ab-9356-b82d8858bff6")]
	public partial class ElementGroupingHasNote : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ElementGroupingHasNote domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x090bfbf3, 0x1514, 0x41ab, 0x93, 0x56, 0xb8, 0x2d, 0x88, 0x58, 0xbf, 0xf6);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ElementGroupingHasNote link in the same Partition as the given ElementGrouping
		/// </summary>
		/// <param name="source">ElementGrouping to use as the source of the relationship.</param>
		/// <param name="target">Note to use as the target of the relationship.</param>
		public ElementGroupingHasNote(ElementGrouping source, Note target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ElementGroupingHasNote.GroupingDomainRoleId, source), new DslModeling::RoleAssignment(ElementGroupingHasNote.NoteDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ElementGroupingHasNote(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ElementGroupingHasNote(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ElementGroupingHasNote(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ElementGroupingHasNote(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Grouping domain role code
		
		/// <summary>
		/// Grouping domain role Id.
		/// </summary>
		public static readonly global::System.Guid GroupingDomainRoleId = new global::System.Guid(0x3da67e56, 0x0612, 0x4cac, 0x95, 0x13, 0x89, 0xae, 0xc5, 0xeb, 0xeb, 0xfa);
		
		/// <summary>
		/// DomainRole Grouping
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasNote.Grouping
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasNote/Grouping.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasNote/Grouping.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Note", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasNote/Grouping.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("3da67e56-0612-4cac-9513-89aec5ebebfa")]
		public virtual ElementGrouping Grouping
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ElementGrouping)DslModeling::DomainRoleInfo.GetRolePlayer(this, GroupingDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, GroupingDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Grouping of a Note
		/// <summary>
		/// Gets Grouping.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ElementGrouping GetGrouping(Note element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, NoteDomainRoleId) as ElementGrouping;
		}
		
		/// <summary>
		/// Sets Grouping.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetGrouping(Note element, ElementGrouping newGrouping)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, NoteDomainRoleId, newGrouping);
		}
		#endregion
		#region Note domain role code
		
		/// <summary>
		/// Note domain role Id.
		/// </summary>
		public static readonly global::System.Guid NoteDomainRoleId = new global::System.Guid(0x24750293, 0x0741, 0x45a9, 0xaf, 0x7f, 0xce, 0xa4, 0xb6, 0xd2, 0x0e, 0x96);
		
		/// <summary>
		/// DomainRole Note
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasNote.Note
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasNote/Note.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasNote/Note.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Grouping", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasNote/Note.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("24750293-0741-45a9-af7f-cea4b6d20e96")]
		public virtual Note Note
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Note)DslModeling::DomainRoleInfo.GetRolePlayer(this, NoteDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, NoteDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Note of a ElementGrouping
		/// <summary>
		/// Gets Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Note GetNote(ElementGrouping element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, GroupingDomainRoleId) as Note;
		}
		
		/// <summary>
		/// Sets Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetNote(ElementGrouping element, Note newNote)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, GroupingDomainRoleId, newNote);
		}
		#endregion
		#region Grouping link accessor
		/// <summary>
		/// Get the ElementGroupingHasNote link to a ElementGrouping.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasNote GetLinkToNote (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping groupingInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasNote>(groupingInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasNote.GroupingDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Grouping not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Note link accessor
		/// <summary>
		/// Get the ElementGroupingHasNote link to a Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasNote GetLinkToGrouping (global::ORMSolutions.ORMArchitect.Core.ObjectModel.Note noteInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasNote>(noteInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasNote.NoteDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Note not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ElementGroupingHasNote instance accessors
		
		/// <summary>
		/// Get any ElementGroupingHasNote links between a given ElementGrouping and a Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasNote> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Note target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasNote> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasNote>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasNote>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasNote.GroupingDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasNote link in links )
			{
				if ( target.Equals(link.Note) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ElementGroupingHasNote link between a given ElementGroupingand a Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasNote GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Note target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasNote>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasNote.GroupingDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasNote link in links )
			{
				if ( target.Equals(link.Note) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ModelHasPrimaryNote
	/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasPrimaryNote
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasPrimaryNote.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasPrimaryNote.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("bea348b0-fc00-4b2f-8285-882693fe408f")]
	public partial class ModelHasPrimaryNote : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasPrimaryNote domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbea348b0, 0xfc00, 0x4b2f, 0x82, 0x85, 0x88, 0x26, 0x93, 0xfe, 0x40, 0x8f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasPrimaryNote link in the same Partition as the given ORMModel
		/// </summary>
		/// <param name="source">ORMModel to use as the source of the relationship.</param>
		/// <param name="target">Note to use as the target of the relationship.</param>
		public ModelHasPrimaryNote(ORMModel source, Note target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasPrimaryNote.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasPrimaryNote.NoteDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasPrimaryNote(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasPrimaryNote(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasPrimaryNote(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasPrimaryNote(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x189b06e7, 0x23c1, 0x42c1, 0x9d, 0xa0, 0x25, 0xa6, 0x2a, 0xca, 0x12, 0xe1);
		
		/// <summary>
		/// DomainRole Model
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasPrimaryNote.Model
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasPrimaryNote/Model.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasPrimaryNote/Model.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Note", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasPrimaryNote/Model.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("189b06e7-23c1-42c1-9da0-25a62aca12e1")]
		public virtual ORMModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ORMModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PrimaryForModel of a Note
		/// <summary>
		/// Gets PrimaryForModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ORMModel GetPrimaryForModel(Note element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, NoteDomainRoleId) as ORMModel;
		}
		
		/// <summary>
		/// Sets PrimaryForModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetPrimaryForModel(Note element, ORMModel newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, NoteDomainRoleId, newModel);
		}
		#endregion
		#region Note domain role code
		
		/// <summary>
		/// Note domain role Id.
		/// </summary>
		public static readonly global::System.Guid NoteDomainRoleId = new global::System.Guid(0x9f33e7cb, 0xa993, 0x451f, 0xa6, 0x0e, 0x2b, 0xe8, 0xe2, 0x1b, 0x9a, 0xc3);
		
		/// <summary>
		/// DomainRole Note
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasPrimaryNote.Note
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasPrimaryNote/Note.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasPrimaryNote/Note.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "PrimaryForModel", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasPrimaryNote/Note.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("9f33e7cb-a993-451f-a60e-2be8e21b9ac3")]
		public virtual Note Note
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Note)DslModeling::DomainRoleInfo.GetRolePlayer(this, NoteDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, NoteDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Note of a ORMModel
		/// <summary>
		/// Gets Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Note GetNote(ORMModel element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ModelDomainRoleId) as Note;
		}
		
		/// <summary>
		/// Sets Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetNote(ORMModel element, Note newNote)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ModelDomainRoleId, newNote);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the ModelHasPrimaryNote link to a ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasPrimaryNote GetLinkToNote (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel modelInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasPrimaryNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasPrimaryNote>(modelInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasPrimaryNote.ModelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Model not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Note link accessor
		/// <summary>
		/// Get the ModelHasPrimaryNote link to a Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasPrimaryNote GetLinkToPrimaryForModel (global::ORMSolutions.ORMArchitect.Core.ObjectModel.Note noteInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasPrimaryNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasPrimaryNote>(noteInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasPrimaryNote.NoteDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Note not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasPrimaryNote instance accessors
		
		/// <summary>
		/// Get any ModelHasPrimaryNote links between a given ORMModel and a Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasPrimaryNote> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Note target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasPrimaryNote> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasPrimaryNote>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasPrimaryNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasPrimaryNote>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasPrimaryNote.ModelDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasPrimaryNote link in links )
			{
				if ( target.Equals(link.Note) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasPrimaryNote link between a given ORMModeland a Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasPrimaryNote GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Note target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasPrimaryNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasPrimaryNote>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasPrimaryNote.ModelDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasPrimaryNote link in links )
			{
				if ( target.Equals(link.Note) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship LeadRolePathHasNote
	/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasNote
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasNote.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasNote.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("1b654748-7209-4bb8-866d-d2593cd95a27")]
	public partial class LeadRolePathHasNote : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// LeadRolePathHasNote domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1b654748, 0x7209, 0x4bb8, 0x86, 0x6d, 0xd2, 0x59, 0x3c, 0xd9, 0x5a, 0x27);
	
				
		/// <summary>
		/// Constructor
		/// Creates a LeadRolePathHasNote link in the same Partition as the given LeadRolePath
		/// </summary>
		/// <param name="source">LeadRolePath to use as the source of the relationship.</param>
		/// <param name="target">Note to use as the target of the relationship.</param>
		public LeadRolePathHasNote(LeadRolePath source, Note target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(LeadRolePathHasNote.LeadRolePathDomainRoleId, source), new DslModeling::RoleAssignment(LeadRolePathHasNote.NoteDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public LeadRolePathHasNote(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public LeadRolePathHasNote(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public LeadRolePathHasNote(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public LeadRolePathHasNote(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region LeadRolePath domain role code
		
		/// <summary>
		/// LeadRolePath domain role Id.
		/// </summary>
		public static readonly global::System.Guid LeadRolePathDomainRoleId = new global::System.Guid(0x73b90abc, 0xb3e2, 0x4d13, 0x9a, 0x73, 0x5f, 0xb8, 0x05, 0x12, 0x23, 0x3e);
		
		/// <summary>
		/// DomainRole LeadRolePath
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasNote.LeadRolePath
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasNote/LeadRolePath.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasNote/LeadRolePath.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Note", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasNote/LeadRolePath.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("73b90abc-b3e2-4d13-9a73-5fb80512233e")]
		public virtual LeadRolePath LeadRolePath
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (LeadRolePath)DslModeling::DomainRoleInfo.GetRolePlayer(this, LeadRolePathDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, LeadRolePathDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RolePath of a Note
		/// <summary>
		/// Gets RolePath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static LeadRolePath GetRolePath(Note element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, NoteDomainRoleId) as LeadRolePath;
		}
		
		/// <summary>
		/// Sets RolePath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRolePath(Note element, LeadRolePath newLeadRolePath)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, NoteDomainRoleId, newLeadRolePath);
		}
		#endregion
		#region Note domain role code
		
		/// <summary>
		/// Note domain role Id.
		/// </summary>
		public static readonly global::System.Guid NoteDomainRoleId = new global::System.Guid(0x0313e1b6, 0x9508, 0x4715, 0xbc, 0xf3, 0xc7, 0x9e, 0x3a, 0x03, 0x47, 0xb0);
		
		/// <summary>
		/// DomainRole Note
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasNote.Note
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasNote/Note.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasNote/Note.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "RolePath", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasNote/Note.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("0313e1b6-9508-4715-bcf3-c79e3a0347b0")]
		public virtual Note Note
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Note)DslModeling::DomainRoleInfo.GetRolePlayer(this, NoteDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, NoteDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Note of a LeadRolePath
		/// <summary>
		/// Gets Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Note GetNote(LeadRolePath element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, LeadRolePathDomainRoleId) as Note;
		}
		
		/// <summary>
		/// Sets Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetNote(LeadRolePath element, Note newNote)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, LeadRolePathDomainRoleId, newNote);
		}
		#endregion
		#region LeadRolePath link accessor
		/// <summary>
		/// Get the LeadRolePathHasNote link to a LeadRolePath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasNote GetLinkToNote (global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePath leadRolePathInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasNote>(leadRolePathInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasNote.LeadRolePathDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of LeadRolePath not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Note link accessor
		/// <summary>
		/// Get the LeadRolePathHasNote link to a Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasNote GetLinkToRolePath (global::ORMSolutions.ORMArchitect.Core.ObjectModel.Note noteInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasNote>(noteInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasNote.NoteDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Note not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region LeadRolePathHasNote instance accessors
		
		/// <summary>
		/// Get any LeadRolePathHasNote links between a given LeadRolePath and a Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasNote> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePath source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Note target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasNote> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasNote>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasNote>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasNote.LeadRolePathDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasNote link in links )
			{
				if ( target.Equals(link.Note) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one LeadRolePathHasNote link between a given LeadRolePathand a Note.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasNote GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePath source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Note target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasNote>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasNote.LeadRolePathDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasNote link in links )
			{
				if ( target.Equals(link.Note) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ModelHasModelNote
	/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelNote
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelNote.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelNote.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("783ea177-e965-4c01-9d4a-a89c016203b6")]
	public partial class ModelHasModelNote : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasModelNote domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x783ea177, 0xe965, 0x4c01, 0x9d, 0x4a, 0xa8, 0x9c, 0x01, 0x62, 0x03, 0xb6);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasModelNote link in the same Partition as the given ORMModel
		/// </summary>
		/// <param name="source">ORMModel to use as the source of the relationship.</param>
		/// <param name="target">ModelNote to use as the target of the relationship.</param>
		public ModelHasModelNote(ORMModel source, ModelNote target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasModelNote.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasModelNote.NoteDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasModelNote(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasModelNote(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasModelNote(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasModelNote(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x197f0666, 0xb426, 0x44a9, 0xbc, 0xa8, 0x83, 0x3f, 0xfe, 0x54, 0x13, 0x5d);
		
		/// <summary>
		/// DomainRole Model
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelNote.Model
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelNote/Model.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelNote/Model.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "NoteCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelNote/Model.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("197f0666-b426-44a9-bca8-833ffe54135d")]
		public virtual ORMModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ORMModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a ModelNote
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ORMModel GetModel(ModelNote element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, NoteDomainRoleId) as ORMModel;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(ModelNote element, ORMModel newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, NoteDomainRoleId, newModel);
		}
		#endregion
		#region Note domain role code
		
		/// <summary>
		/// Note domain role Id.
		/// </summary>
		public static readonly global::System.Guid NoteDomainRoleId = new global::System.Guid(0xa07be562, 0x6ac3, 0x4c86, 0x96, 0x12, 0x89, 0x40, 0x48, 0xc9, 0x4e, 0x5d);
		
		/// <summary>
		/// DomainRole Note
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelNote.Note
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelNote/Note.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelNote/Note.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelNote/Note.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("a07be562-6ac3-4c86-9612-894048c94e5d")]
		public virtual ModelNote Note
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelNote)DslModeling::DomainRoleInfo.GetRolePlayer(this, NoteDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, NoteDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access NoteCollection of a ORMModel
		/// <summary>
		/// Gets a list of NoteCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelNote> GetNoteCollection(ORMModel element)
		{
			return new DslModeling::LinkedElementCollection<ModelNote>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelHasModelNote links to a ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelNote> GetLinksToNoteCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelNote>(modelInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelNote.ModelDomainRoleId);
		}
		#endregion
		#region Note link accessor
		/// <summary>
		/// Get the ModelHasModelNote link to a ModelNote.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelNote GetLinkToModel (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNote noteInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelNote>(noteInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelNote.NoteDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Note not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasModelNote instance accessors
		
		/// <summary>
		/// Get any ModelHasModelNote links between a given ORMModel and a ModelNote.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelNote> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNote target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelNote> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelNote>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelNote>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelNote.ModelDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelNote link in links )
			{
				if ( target.Equals(link.Note) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasModelNote link between a given ORMModeland a ModelNote.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelNote GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNote target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelNote>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelNote.ModelDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelNote link in links )
			{
				if ( target.Equals(link.Note) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ModelNoteReferencesModelElement
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesModelElement
	/// </summary>
	[global::System.ComponentModel.TypeDescriptionProvider(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.ElementTypeDescriptionProvider<ModelNoteReferencesModelElement, global::ORMSolutions.ORMArchitect.Framework.Design.ElementTypeDescriptor<ModelNoteReferencesModelElement>>))]
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesModelElement.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesModelElement.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("57a1d17b-db15-418a-8d82-3d44b3d1169f")]
	public abstract partial class ModelNoteReferencesModelElement : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelNoteReferencesModelElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x57a1d17b, 0xdb15, 0x418a, 0x8d, 0x82, 0x3d, 0x44, 0xb3, 0xd1, 0x16, 0x9f);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">The Partition instance containing this ElementLink</param>
		/// <param name="roleAssignments">A set of role assignments for roleplayer initialization</param>
		/// <param name="propertyAssignments">A set of attribute assignments for attribute initialization</param>
		protected ModelNoteReferencesModelElement(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Note domain role code
		
		/// <summary>
		/// Note domain role Id.
		/// </summary>
		public static readonly global::System.Guid NoteDomainRoleId = new global::System.Guid(0x9b8920d2, 0xbe41, 0x4e4a, 0xb3, 0x9f, 0x50, 0x39, 0x40, 0x50, 0xa0, 0x19);
		
		/// <summary>
		/// DomainRole Note
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesModelElement.Note
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesModelElement/Note.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesModelElement/Note.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ElementCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesModelElement/Note.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("9b8920d2-be41-4e4a-b39f-50394050a019")]
		public abstract ModelNote Note
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access ModelNoteCollection of a ModelElement
		/// <summary>
		/// Gets a list of ModelNoteCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<ModelNote> GetModelNoteCollection(global::Microsoft.VisualStudio.Modeling.ModelElement element)
		{
			return new DslModeling::ReadOnlyLinkedElementCollection<ModelNote>(element, ElementDomainRoleId);
		}
		#endregion
		#region Element domain role code
		
		/// <summary>
		/// Element domain role Id.
		/// </summary>
		public static readonly global::System.Guid ElementDomainRoleId = new global::System.Guid(0x9d0c7587, 0xf135, 0x4619, 0x86, 0xfa, 0x33, 0xc8, 0x0c, 0x4e, 0xb7, 0x69);
		
		/// <summary>
		/// DomainRole Element
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesModelElement.Element
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesModelElement/Element.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesModelElement/Element.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ModelNoteCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesModelElement/Element.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("9d0c7587-f135-4619-86fa-33c80c4eb769")]
		public abstract global::Microsoft.VisualStudio.Modeling.ModelElement Element
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access ElementCollection of a ModelNote
		/// <summary>
		/// Gets a list of ElementCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<global::Microsoft.VisualStudio.Modeling.ModelElement> GetElementCollection(ModelNote element)
		{
			return new DslModeling::ReadOnlyLinkedElementCollection<global::Microsoft.VisualStudio.Modeling.ModelElement>(element, NoteDomainRoleId);
		}
		#endregion
		#region Note link accessor
		/// <summary>
		/// Get the list of ModelNoteReferencesModelElement links to a ModelNote.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesModelElement> GetLinksToElementCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNote noteInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesModelElement>(noteInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesModelElement.NoteDomainRoleId);
		}
		#endregion
		#region Element link accessor
		/// <summary>
		/// Get the list of ModelNoteReferencesModelElement links to a ModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesModelElement> GetLinksToModelNoteCollection ( global::Microsoft.VisualStudio.Modeling.ModelElement elementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesModelElement>(elementInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesModelElement.ElementDomainRoleId);
		}
		#endregion
		#region ModelNoteReferencesModelElement instance accessors
		
		/// <summary>
		/// Get any ModelNoteReferencesModelElement links between a given ModelNote and a ModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesModelElement> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNote source, global::Microsoft.VisualStudio.Modeling.ModelElement target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesModelElement> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesModelElement>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesModelElement> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesModelElement>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesModelElement.NoteDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesModelElement link in links )
			{
				if ( target.Equals(link.Element) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelNoteReferencesModelElement link between a given ModelNoteand a ModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesModelElement GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNote source, global::Microsoft.VisualStudio.Modeling.ModelElement target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesModelElement> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesModelElement>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesModelElement.NoteDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesModelElement link in links )
			{
				if ( target.Equals(link.Element) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ModelNoteReferencesFactType
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesFactType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesFactType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesFactType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("a6f1eb10-f929-4389-b584-38dfe11a85c2")]
	public partial class ModelNoteReferencesFactType : ModelNoteReferencesModelElement
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelNoteReferencesFactType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa6f1eb10, 0xf929, 0x4389, 0xb5, 0x84, 0x38, 0xdf, 0xe1, 0x1a, 0x85, 0xc2);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelNoteReferencesFactType link in the same Partition as the given ModelNote
		/// </summary>
		/// <param name="source">ModelNote to use as the source of the relationship.</param>
		/// <param name="target">FactType to use as the target of the relationship.</param>
		public ModelNoteReferencesFactType(ModelNote source, FactType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelNoteReferencesFactType.NoteDomainRoleId, source), new DslModeling::RoleAssignment(ModelNoteReferencesFactType.ElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelNoteReferencesFactType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelNoteReferencesFactType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelNoteReferencesFactType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelNoteReferencesFactType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Note domain role code
		
		/// <summary>
		/// Note domain role Id.
		/// </summary>
		public static readonly new global::System.Guid NoteDomainRoleId = new global::System.Guid(0xb2d991e2, 0x3f04, 0x4471, 0x93, 0xf5, 0x72, 0xd4, 0xe4, 0xdd, 0xf0, 0x87);
		
		/// <summary>
		/// DomainRole Note
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesFactType.Note
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesFactType/Note.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesFactType/Note.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "FactTypeCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesFactType/Note.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b2d991e2-3f04-4471-93f5-72d4e4ddf087")]
		public override ModelNote Note
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelNote)DslModeling::DomainRoleInfo.GetRolePlayer(this, NoteDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, NoteDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelNoteCollection of a FactType
		/// <summary>
		/// Gets a list of ModelNoteCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelNote> GetModelNoteCollection(FactType element)
		{
			return new DslModeling::LinkedElementCollection<ModelNote>(element, ElementDomainRoleId);
		}
		#endregion
		#region Element domain role code
		
		/// <summary>
		/// Element domain role Id.
		/// </summary>
		public static readonly new global::System.Guid ElementDomainRoleId = new global::System.Guid(0xc176868f, 0x94e3, 0x4f5e, 0xa8, 0x55, 0xa3, 0x3c, 0xa7, 0xd6, 0x54, 0x4b);
		
		/// <summary>
		/// DomainRole Element
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesFactType.Element
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesFactType/Element.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesFactType/Element.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, RolePlayer = typeof(FactType), PropertyName = "ModelNoteCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesFactType/Element.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c176868f-94e3-4f5e-a855-a33ca7d6544b")]
		public override global::Microsoft.VisualStudio.Modeling.ModelElement Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::Microsoft.VisualStudio.Modeling.ModelElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, ElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FactTypeCollection of a ModelNote
		/// <summary>
		/// Gets a list of FactTypeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FactType> GetFactTypeCollection(ModelNote element)
		{
			return new DslModeling::LinkedElementCollection<FactType>(element, NoteDomainRoleId);
		}
		#endregion
		#region Note link accessor
		/// <summary>
		/// Get the list of ModelNoteReferencesFactType links to a ModelNote.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesFactType> GetLinksToFactTypeCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNote noteInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesFactType>(noteInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesFactType.NoteDomainRoleId);
		}
		#endregion
		#region Element link accessor
		/// <summary>
		/// Get the list of ModelNoteReferencesFactType links to a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesFactType> GetLinksToModelNoteCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType elementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesFactType>(elementInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesFactType.ElementDomainRoleId);
		}
		#endregion
		#region ModelNoteReferencesFactType instance accessors
		
		/// <summary>
		/// Get any ModelNoteReferencesFactType links between a given ModelNote and a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesFactType> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNote source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesFactType> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesFactType>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesFactType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesFactType>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesFactType.NoteDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesFactType link in links )
			{
				if ( target.Equals(link.Element) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelNoteReferencesFactType link between a given ModelNoteand a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesFactType GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNote source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesFactType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesFactType>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesFactType.NoteDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesFactType link in links )
			{
				if ( target.Equals(link.Element) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ModelNoteReferencesObjectType
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesObjectType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesObjectType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesObjectType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("cb83fd24-7819-4c34-af59-b4e14ae3be8f")]
	public partial class ModelNoteReferencesObjectType : ModelNoteReferencesModelElement
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelNoteReferencesObjectType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xcb83fd24, 0x7819, 0x4c34, 0xaf, 0x59, 0xb4, 0xe1, 0x4a, 0xe3, 0xbe, 0x8f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelNoteReferencesObjectType link in the same Partition as the given ModelNote
		/// </summary>
		/// <param name="source">ModelNote to use as the source of the relationship.</param>
		/// <param name="target">ObjectType to use as the target of the relationship.</param>
		public ModelNoteReferencesObjectType(ModelNote source, ObjectType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelNoteReferencesObjectType.NoteDomainRoleId, source), new DslModeling::RoleAssignment(ModelNoteReferencesObjectType.ElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelNoteReferencesObjectType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelNoteReferencesObjectType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelNoteReferencesObjectType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelNoteReferencesObjectType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Note domain role code
		
		/// <summary>
		/// Note domain role Id.
		/// </summary>
		public static readonly new global::System.Guid NoteDomainRoleId = new global::System.Guid(0xc1350acb, 0x4cb5, 0x444e, 0x8e, 0x97, 0x76, 0xe5, 0x25, 0x00, 0x62, 0x33);
		
		/// <summary>
		/// DomainRole Note
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesObjectType.Note
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesObjectType/Note.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesObjectType/Note.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ObjectTypeCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesObjectType/Note.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c1350acb-4cb5-444e-8e97-76e525006233")]
		public override ModelNote Note
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelNote)DslModeling::DomainRoleInfo.GetRolePlayer(this, NoteDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, NoteDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelNoteCollection of a ObjectType
		/// <summary>
		/// Gets a list of ModelNoteCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelNote> GetModelNoteCollection(ObjectType element)
		{
			return new DslModeling::LinkedElementCollection<ModelNote>(element, ElementDomainRoleId);
		}
		#endregion
		#region Element domain role code
		
		/// <summary>
		/// Element domain role Id.
		/// </summary>
		public static readonly new global::System.Guid ElementDomainRoleId = new global::System.Guid(0xfe3bf94e, 0xb5b1, 0x4152, 0x8f, 0x73, 0x2f, 0xbc, 0x16, 0xc0, 0x8b, 0xe6);
		
		/// <summary>
		/// DomainRole Element
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesObjectType.Element
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesObjectType/Element.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesObjectType/Element.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, RolePlayer = typeof(ObjectType), PropertyName = "ModelNoteCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesObjectType/Element.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("fe3bf94e-b5b1-4152-8f73-2fbc16c08be6")]
		public override global::Microsoft.VisualStudio.Modeling.ModelElement Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::Microsoft.VisualStudio.Modeling.ModelElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, ElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ObjectTypeCollection of a ModelNote
		/// <summary>
		/// Gets a list of ObjectTypeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ObjectType> GetObjectTypeCollection(ModelNote element)
		{
			return new DslModeling::LinkedElementCollection<ObjectType>(element, NoteDomainRoleId);
		}
		#endregion
		#region Note link accessor
		/// <summary>
		/// Get the list of ModelNoteReferencesObjectType links to a ModelNote.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesObjectType> GetLinksToObjectTypeCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNote noteInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesObjectType>(noteInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesObjectType.NoteDomainRoleId);
		}
		#endregion
		#region Element link accessor
		/// <summary>
		/// Get the list of ModelNoteReferencesObjectType links to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesObjectType> GetLinksToModelNoteCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType elementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesObjectType>(elementInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesObjectType.ElementDomainRoleId);
		}
		#endregion
		#region ModelNoteReferencesObjectType instance accessors
		
		/// <summary>
		/// Get any ModelNoteReferencesObjectType links between a given ModelNote and a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesObjectType> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNote source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesObjectType> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesObjectType>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesObjectType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesObjectType>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesObjectType.NoteDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesObjectType link in links )
			{
				if ( target.Equals(link.Element) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelNoteReferencesObjectType link between a given ModelNoteand a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesObjectType GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNote source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesObjectType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesObjectType>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesObjectType.NoteDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesObjectType link in links )
			{
				if ( target.Equals(link.Element) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ModelNoteReferencesSetConstraint
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("f5582a97-f2ae-45fa-a3b8-a00d62020519")]
	public partial class ModelNoteReferencesSetConstraint : ModelNoteReferencesModelElement
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelNoteReferencesSetConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf5582a97, 0xf2ae, 0x45fa, 0xa3, 0xb8, 0xa0, 0x0d, 0x62, 0x02, 0x05, 0x19);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelNoteReferencesSetConstraint link in the same Partition as the given ModelNote
		/// </summary>
		/// <param name="source">ModelNote to use as the source of the relationship.</param>
		/// <param name="target">SetConstraint to use as the target of the relationship.</param>
		public ModelNoteReferencesSetConstraint(ModelNote source, SetConstraint target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelNoteReferencesSetConstraint.NoteDomainRoleId, source), new DslModeling::RoleAssignment(ModelNoteReferencesSetConstraint.ElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelNoteReferencesSetConstraint(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelNoteReferencesSetConstraint(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelNoteReferencesSetConstraint(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelNoteReferencesSetConstraint(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Note domain role code
		
		/// <summary>
		/// Note domain role Id.
		/// </summary>
		public static readonly new global::System.Guid NoteDomainRoleId = new global::System.Guid(0x1d6bd804, 0x5f9b, 0x4558, 0x97, 0xf7, 0xca, 0xd1, 0xe0, 0xd4, 0xf1, 0x35);
		
		/// <summary>
		/// DomainRole Note
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetConstraint.Note
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetConstraint/Note.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetConstraint/Note.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "SetConstraintCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetConstraint/Note.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("1d6bd804-5f9b-4558-97f7-cad1e0d4f135")]
		public override ModelNote Note
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelNote)DslModeling::DomainRoleInfo.GetRolePlayer(this, NoteDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, NoteDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelNoteCollection of a SetConstraint
		/// <summary>
		/// Gets a list of ModelNoteCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelNote> GetModelNoteCollection(SetConstraint element)
		{
			return new DslModeling::LinkedElementCollection<ModelNote>(element, ElementDomainRoleId);
		}
		#endregion
		#region Element domain role code
		
		/// <summary>
		/// Element domain role Id.
		/// </summary>
		public static readonly new global::System.Guid ElementDomainRoleId = new global::System.Guid(0xd5ecafc4, 0x1e5c, 0x471f, 0x9e, 0x8d, 0x54, 0xaf, 0x59, 0xfc, 0x44, 0xbb);
		
		/// <summary>
		/// DomainRole Element
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetConstraint.Element
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetConstraint/Element.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetConstraint/Element.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, RolePlayer = typeof(SetConstraint), PropertyName = "ModelNoteCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetConstraint/Element.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("d5ecafc4-1e5c-471f-9e8d-54af59fc44bb")]
		public override global::Microsoft.VisualStudio.Modeling.ModelElement Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::Microsoft.VisualStudio.Modeling.ModelElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, ElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SetConstraintCollection of a ModelNote
		/// <summary>
		/// Gets a list of SetConstraintCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SetConstraint> GetSetConstraintCollection(ModelNote element)
		{
			return new DslModeling::LinkedElementCollection<SetConstraint>(element, NoteDomainRoleId);
		}
		#endregion
		#region Note link accessor
		/// <summary>
		/// Get the list of ModelNoteReferencesSetConstraint links to a ModelNote.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetConstraint> GetLinksToSetConstraintCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNote noteInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetConstraint>(noteInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetConstraint.NoteDomainRoleId);
		}
		#endregion
		#region Element link accessor
		/// <summary>
		/// Get the list of ModelNoteReferencesSetConstraint links to a SetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetConstraint> GetLinksToModelNoteCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint elementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetConstraint>(elementInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetConstraint.ElementDomainRoleId);
		}
		#endregion
		#region ModelNoteReferencesSetConstraint instance accessors
		
		/// <summary>
		/// Get any ModelNoteReferencesSetConstraint links between a given ModelNote and a SetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetConstraint> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNote source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetConstraint> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetConstraint>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetConstraint>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetConstraint.NoteDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetConstraint link in links )
			{
				if ( target.Equals(link.Element) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelNoteReferencesSetConstraint link between a given ModelNoteand a SetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetConstraint GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNote source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetConstraint>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetConstraint.NoteDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetConstraint link in links )
			{
				if ( target.Equals(link.Element) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ModelNoteReferencesSetComparisonConstraint
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetComparisonConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetComparisonConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetComparisonConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("57a31b5c-e265-4c91-8c6c-151101258e28")]
	public partial class ModelNoteReferencesSetComparisonConstraint : ModelNoteReferencesModelElement
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelNoteReferencesSetComparisonConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x57a31b5c, 0xe265, 0x4c91, 0x8c, 0x6c, 0x15, 0x11, 0x01, 0x25, 0x8e, 0x28);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelNoteReferencesSetComparisonConstraint link in the same Partition as the given ModelNote
		/// </summary>
		/// <param name="source">ModelNote to use as the source of the relationship.</param>
		/// <param name="target">SetComparisonConstraint to use as the target of the relationship.</param>
		public ModelNoteReferencesSetComparisonConstraint(ModelNote source, SetComparisonConstraint target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelNoteReferencesSetComparisonConstraint.NoteDomainRoleId, source), new DslModeling::RoleAssignment(ModelNoteReferencesSetComparisonConstraint.ElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelNoteReferencesSetComparisonConstraint(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelNoteReferencesSetComparisonConstraint(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelNoteReferencesSetComparisonConstraint(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelNoteReferencesSetComparisonConstraint(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Note domain role code
		
		/// <summary>
		/// Note domain role Id.
		/// </summary>
		public static readonly new global::System.Guid NoteDomainRoleId = new global::System.Guid(0xc8ac78ec, 0xfc49, 0x4163, 0x80, 0x7b, 0xc6, 0xa5, 0x0e, 0x90, 0x53, 0x54);
		
		/// <summary>
		/// DomainRole Note
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetComparisonConstraint.Note
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetComparisonConstraint/Note.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetComparisonConstraint/Note.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "SetComparisonConstraintCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetComparisonConstraint/Note.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c8ac78ec-fc49-4163-807b-c6a50e905354")]
		public override ModelNote Note
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelNote)DslModeling::DomainRoleInfo.GetRolePlayer(this, NoteDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, NoteDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelNoteCollection of a SetComparisonConstraint
		/// <summary>
		/// Gets a list of ModelNoteCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelNote> GetModelNoteCollection(SetComparisonConstraint element)
		{
			return new DslModeling::LinkedElementCollection<ModelNote>(element, ElementDomainRoleId);
		}
		#endregion
		#region Element domain role code
		
		/// <summary>
		/// Element domain role Id.
		/// </summary>
		public static readonly new global::System.Guid ElementDomainRoleId = new global::System.Guid(0xdf805505, 0xe31f, 0x42e8, 0x9c, 0x65, 0x70, 0x04, 0xe3, 0xf3, 0xd9, 0xbd);
		
		/// <summary>
		/// DomainRole Element
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetComparisonConstraint.Element
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetComparisonConstraint/Element.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetComparisonConstraint/Element.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, RolePlayer = typeof(SetComparisonConstraint), PropertyName = "ModelNoteCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetComparisonConstraint/Element.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("df805505-e31f-42e8-9c65-7004e3f3d9bd")]
		public override global::Microsoft.VisualStudio.Modeling.ModelElement Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::Microsoft.VisualStudio.Modeling.ModelElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, ElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SetComparisonConstraintCollection of a ModelNote
		/// <summary>
		/// Gets a list of SetComparisonConstraintCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SetComparisonConstraint> GetSetComparisonConstraintCollection(ModelNote element)
		{
			return new DslModeling::LinkedElementCollection<SetComparisonConstraint>(element, NoteDomainRoleId);
		}
		#endregion
		#region Note link accessor
		/// <summary>
		/// Get the list of ModelNoteReferencesSetComparisonConstraint links to a ModelNote.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetComparisonConstraint> GetLinksToSetComparisonConstraintCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNote noteInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetComparisonConstraint>(noteInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetComparisonConstraint.NoteDomainRoleId);
		}
		#endregion
		#region Element link accessor
		/// <summary>
		/// Get the list of ModelNoteReferencesSetComparisonConstraint links to a SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetComparisonConstraint> GetLinksToModelNoteCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint elementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetComparisonConstraint>(elementInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetComparisonConstraint.ElementDomainRoleId);
		}
		#endregion
		#region ModelNoteReferencesSetComparisonConstraint instance accessors
		
		/// <summary>
		/// Get any ModelNoteReferencesSetComparisonConstraint links between a given ModelNote and a SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetComparisonConstraint> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNote source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetComparisonConstraint> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetComparisonConstraint>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetComparisonConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetComparisonConstraint>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetComparisonConstraint.NoteDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetComparisonConstraint link in links )
			{
				if ( target.Equals(link.Element) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelNoteReferencesSetComparisonConstraint link between a given ModelNoteand a SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetComparisonConstraint GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNote source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetComparisonConstraint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetComparisonConstraint>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetComparisonConstraint.NoteDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetComparisonConstraint link in links )
			{
				if ( target.Equals(link.Element) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ObjectTypeHasCompatibleSupertypesError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCompatibleSupertypesError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCompatibleSupertypesError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCompatibleSupertypesError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("4a739f80-00fa-4f02-bd81-ed60c79defc3")]
	public partial class ObjectTypeHasCompatibleSupertypesError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ObjectTypeHasCompatibleSupertypesError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4a739f80, 0x00fa, 0x4f02, 0xbd, 0x81, 0xed, 0x60, 0xc7, 0x9d, 0xef, 0xc3);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ObjectTypeHasCompatibleSupertypesError link in the same Partition as the given ObjectType
		/// </summary>
		/// <param name="source">ObjectType to use as the source of the relationship.</param>
		/// <param name="target">CompatibleSupertypesError to use as the target of the relationship.</param>
		public ObjectTypeHasCompatibleSupertypesError(ObjectType source, CompatibleSupertypesError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ObjectTypeHasCompatibleSupertypesError.ObjectTypeDomainRoleId, source), new DslModeling::RoleAssignment(ObjectTypeHasCompatibleSupertypesError.CompatibleSupertypesErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectTypeHasCompatibleSupertypesError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectTypeHasCompatibleSupertypesError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectTypeHasCompatibleSupertypesError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectTypeHasCompatibleSupertypesError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ObjectType domain role code
		
		/// <summary>
		/// ObjectType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ObjectTypeDomainRoleId = new global::System.Guid(0xff50f039, 0xb38b, 0x41a2, 0x9d, 0x06, 0x0a, 0xef, 0xbe, 0x62, 0xc6, 0xa9);
		
		/// <summary>
		/// DomainRole ObjectType
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCompatibleSupertypesError.ObjectType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCompatibleSupertypesError/ObjectType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCompatibleSupertypesError/ObjectType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "CompatibleSupertypesError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCompatibleSupertypesError/ObjectType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("ff50f039-b38b-41a2-9d06-0aefbe62c6a9")]
		public virtual ObjectType ObjectType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjectTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjectTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ObjectType of a CompatibleSupertypesError
		/// <summary>
		/// Gets ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ObjectType GetObjectType(CompatibleSupertypesError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CompatibleSupertypesErrorDomainRoleId) as ObjectType;
		}
		
		/// <summary>
		/// Sets ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetObjectType(CompatibleSupertypesError element, ObjectType newObjectType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CompatibleSupertypesErrorDomainRoleId, newObjectType);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing ObjectType domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ObjectType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ObjectType = (ObjectType)value;
			}
		}
		
		#endregion
		#region CompatibleSupertypesError domain role code
		
		/// <summary>
		/// CompatibleSupertypesError domain role Id.
		/// </summary>
		public static readonly global::System.Guid CompatibleSupertypesErrorDomainRoleId = new global::System.Guid(0x368139c3, 0xb56f, 0x4483, 0x83, 0xae, 0x9c, 0x8e, 0x68, 0xbc, 0xa8, 0xb0);
		
		/// <summary>
		/// DomainRole CompatibleSupertypesError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCompatibleSupertypesError.CompatibleSupertypesError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCompatibleSupertypesError/CompatibleSupertypesError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCompatibleSupertypesError/CompatibleSupertypesError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ObjectType", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCompatibleSupertypesError/CompatibleSupertypesError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("368139c3-b56f-4483-83ae-9c8e68bca8b0")]
		public virtual CompatibleSupertypesError CompatibleSupertypesError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CompatibleSupertypesError)DslModeling::DomainRoleInfo.GetRolePlayer(this, CompatibleSupertypesErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CompatibleSupertypesErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CompatibleSupertypesError of a ObjectType
		/// <summary>
		/// Gets CompatibleSupertypesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static CompatibleSupertypesError GetCompatibleSupertypesError(ObjectType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ObjectTypeDomainRoleId) as CompatibleSupertypesError;
		}
		
		/// <summary>
		/// Sets CompatibleSupertypesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetCompatibleSupertypesError(ObjectType element, CompatibleSupertypesError newCompatibleSupertypesError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ObjectTypeDomainRoleId, newCompatibleSupertypesError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing CompatibleSupertypesError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.CompatibleSupertypesError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.CompatibleSupertypesError = (CompatibleSupertypesError)value;
			}
		}
		
		#endregion
		#region ObjectType link accessor
		/// <summary>
		/// Get the ObjectTypeHasCompatibleSupertypesError link to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCompatibleSupertypesError GetLinkToCompatibleSupertypesError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType objectTypeInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCompatibleSupertypesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCompatibleSupertypesError>(objectTypeInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCompatibleSupertypesError.ObjectTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ObjectType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CompatibleSupertypesError link accessor
		/// <summary>
		/// Get the ObjectTypeHasCompatibleSupertypesError link to a CompatibleSupertypesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCompatibleSupertypesError GetLinkToObjectType (global::ORMSolutions.ORMArchitect.Core.ObjectModel.CompatibleSupertypesError compatibleSupertypesErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCompatibleSupertypesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCompatibleSupertypesError>(compatibleSupertypesErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCompatibleSupertypesError.CompatibleSupertypesErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CompatibleSupertypesError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ObjectTypeHasCompatibleSupertypesError instance accessors
		
		/// <summary>
		/// Get any ObjectTypeHasCompatibleSupertypesError links between a given ObjectType and a CompatibleSupertypesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCompatibleSupertypesError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CompatibleSupertypesError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCompatibleSupertypesError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCompatibleSupertypesError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCompatibleSupertypesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCompatibleSupertypesError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCompatibleSupertypesError.ObjectTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCompatibleSupertypesError link in links )
			{
				if ( target.Equals(link.CompatibleSupertypesError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ObjectTypeHasCompatibleSupertypesError link between a given ObjectTypeand a CompatibleSupertypesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCompatibleSupertypesError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CompatibleSupertypesError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCompatibleSupertypesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCompatibleSupertypesError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCompatibleSupertypesError.ObjectTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCompatibleSupertypesError link in links )
			{
				if ( target.Equals(link.CompatibleSupertypesError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship SetConstraintHasImplicationError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasImplicationError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasImplicationError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasImplicationError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("7dea2631-58ef-46a6-b9e1-a8eda2948ae3")]
	public partial class SetConstraintHasImplicationError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SetConstraintHasImplicationError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7dea2631, 0x58ef, 0x46a6, 0xb9, 0xe1, 0xa8, 0xed, 0xa2, 0x94, 0x8a, 0xe3);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SetConstraintHasImplicationError link in the same Partition as the given SetConstraint
		/// </summary>
		/// <param name="source">SetConstraint to use as the source of the relationship.</param>
		/// <param name="target">ImplicationError to use as the target of the relationship.</param>
		public SetConstraintHasImplicationError(SetConstraint source, ImplicationError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SetConstraintHasImplicationError.SetConstraintDomainRoleId, source), new DslModeling::RoleAssignment(SetConstraintHasImplicationError.ImplicationErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetConstraintHasImplicationError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetConstraintHasImplicationError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetConstraintHasImplicationError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetConstraintHasImplicationError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SetConstraint domain role code
		
		/// <summary>
		/// SetConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid SetConstraintDomainRoleId = new global::System.Guid(0x11e75e00, 0x142e, 0x4f4f, 0xb9, 0xb1, 0xab, 0x55, 0x11, 0x21, 0x84, 0x40);
		
		/// <summary>
		/// DomainRole SetConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasImplicationError.SetConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasImplicationError/SetConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasImplicationError/SetConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ImplicationError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasImplicationError/SetConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("11e75e00-142e-4f4f-b9b1-ab5511218440")]
		public virtual SetConstraint SetConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SetConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SetConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SetConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SetConstraint of a ImplicationError
		/// <summary>
		/// Gets SetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SetConstraint GetSetConstraint(ImplicationError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ImplicationErrorDomainRoleId) as SetConstraint;
		}
		
		/// <summary>
		/// Sets SetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSetConstraint(ImplicationError element, SetConstraint newSetConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ImplicationErrorDomainRoleId, newSetConstraint);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing SetConstraint domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.SetConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.SetConstraint = (SetConstraint)value;
			}
		}
		
		#endregion
		#region ImplicationError domain role code
		
		/// <summary>
		/// ImplicationError domain role Id.
		/// </summary>
		public static readonly global::System.Guid ImplicationErrorDomainRoleId = new global::System.Guid(0x2ff88d36, 0x6636, 0x4e33, 0xb1, 0x1d, 0xdb, 0x60, 0x13, 0xfb, 0x7b, 0xa2);
		
		/// <summary>
		/// DomainRole ImplicationError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasImplicationError.ImplicationError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasImplicationError/ImplicationError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasImplicationError/ImplicationError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SetConstraint", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasImplicationError/ImplicationError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("2ff88d36-6636-4e33-b11d-db6013fb7ba2")]
		public virtual ImplicationError ImplicationError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ImplicationError)DslModeling::DomainRoleInfo.GetRolePlayer(this, ImplicationErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ImplicationErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ImplicationError of a SetConstraint
		/// <summary>
		/// Gets ImplicationError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ImplicationError GetImplicationError(SetConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SetConstraintDomainRoleId) as ImplicationError;
		}
		
		/// <summary>
		/// Sets ImplicationError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetImplicationError(SetConstraint element, ImplicationError newImplicationError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SetConstraintDomainRoleId, newImplicationError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing ImplicationError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ImplicationError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ImplicationError = (ImplicationError)value;
			}
		}
		
		#endregion
		#region SetConstraint link accessor
		/// <summary>
		/// Get the SetConstraintHasImplicationError link to a SetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasImplicationError GetLinkToImplicationError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint setConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasImplicationError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasImplicationError>(setConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasImplicationError.SetConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SetConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ImplicationError link accessor
		/// <summary>
		/// Get the SetConstraintHasImplicationError link to a ImplicationError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasImplicationError GetLinkToSetConstraint (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ImplicationError implicationErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasImplicationError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasImplicationError>(implicationErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasImplicationError.ImplicationErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ImplicationError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SetConstraintHasImplicationError instance accessors
		
		/// <summary>
		/// Get any SetConstraintHasImplicationError links between a given SetConstraint and a ImplicationError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasImplicationError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ImplicationError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasImplicationError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasImplicationError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasImplicationError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasImplicationError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasImplicationError.SetConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasImplicationError link in links )
			{
				if ( target.Equals(link.ImplicationError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SetConstraintHasImplicationError link between a given SetConstraintand a ImplicationError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasImplicationError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ImplicationError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasImplicationError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasImplicationError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasImplicationError.SetConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasImplicationError link in links )
			{
				if ( target.Equals(link.ImplicationError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship SetComparisonConstraintHasImplicationError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasImplicationError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasImplicationError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasImplicationError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("6f9e9e77-3da6-4b01-b3ab-f46fb4c43ca8")]
	public partial class SetComparisonConstraintHasImplicationError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SetComparisonConstraintHasImplicationError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6f9e9e77, 0x3da6, 0x4b01, 0xb3, 0xab, 0xf4, 0x6f, 0xb4, 0xc4, 0x3c, 0xa8);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SetComparisonConstraintHasImplicationError link in the same Partition as the given SetComparisonConstraint
		/// </summary>
		/// <param name="source">SetComparisonConstraint to use as the source of the relationship.</param>
		/// <param name="target">ImplicationError to use as the target of the relationship.</param>
		public SetComparisonConstraintHasImplicationError(SetComparisonConstraint source, ImplicationError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SetComparisonConstraintHasImplicationError.SetComparisonConstraintDomainRoleId, source), new DslModeling::RoleAssignment(SetComparisonConstraintHasImplicationError.ImplicationErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetComparisonConstraintHasImplicationError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetComparisonConstraintHasImplicationError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetComparisonConstraintHasImplicationError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetComparisonConstraintHasImplicationError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SetComparisonConstraint domain role code
		
		/// <summary>
		/// SetComparisonConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid SetComparisonConstraintDomainRoleId = new global::System.Guid(0xbce096ee, 0x2383, 0x42c8, 0xb5, 0x2c, 0xc5, 0x43, 0xcd, 0x25, 0x22, 0x64);
		
		/// <summary>
		/// DomainRole SetComparisonConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasImplicationError.SetComparisonConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasImplicationError/SetComparisonConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasImplicationError/SetComparisonConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ImplicationError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasImplicationError/SetComparisonConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("bce096ee-2383-42c8-b52c-c543cd252264")]
		public virtual SetComparisonConstraint SetComparisonConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SetComparisonConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SetComparisonConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SetComparisonConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SetComparisonConstraint of a ImplicationError
		/// <summary>
		/// Gets SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SetComparisonConstraint GetSetComparisonConstraint(ImplicationError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ImplicationErrorDomainRoleId) as SetComparisonConstraint;
		}
		
		/// <summary>
		/// Sets SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSetComparisonConstraint(ImplicationError element, SetComparisonConstraint newSetComparisonConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ImplicationErrorDomainRoleId, newSetComparisonConstraint);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing SetComparisonConstraint domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.SetComparisonConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.SetComparisonConstraint = (SetComparisonConstraint)value;
			}
		}
		
		#endregion
		#region ImplicationError domain role code
		
		/// <summary>
		/// ImplicationError domain role Id.
		/// </summary>
		public static readonly global::System.Guid ImplicationErrorDomainRoleId = new global::System.Guid(0xda7f46c4, 0xa975, 0x4dcb, 0xb1, 0xde, 0x1f, 0xc7, 0x79, 0x45, 0x28, 0x65);
		
		/// <summary>
		/// DomainRole ImplicationError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasImplicationError.ImplicationError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasImplicationError/ImplicationError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasImplicationError/ImplicationError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SetComparisonConstraint", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasImplicationError/ImplicationError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("da7f46c4-a975-4dcb-b1de-1fc779452865")]
		public virtual ImplicationError ImplicationError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ImplicationError)DslModeling::DomainRoleInfo.GetRolePlayer(this, ImplicationErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ImplicationErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ImplicationError of a SetComparisonConstraint
		/// <summary>
		/// Gets ImplicationError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ImplicationError GetImplicationError(SetComparisonConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SetComparisonConstraintDomainRoleId) as ImplicationError;
		}
		
		/// <summary>
		/// Sets ImplicationError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetImplicationError(SetComparisonConstraint element, ImplicationError newImplicationError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SetComparisonConstraintDomainRoleId, newImplicationError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing ImplicationError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ImplicationError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ImplicationError = (ImplicationError)value;
			}
		}
		
		#endregion
		#region SetComparisonConstraint link accessor
		/// <summary>
		/// Get the SetComparisonConstraintHasImplicationError link to a SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasImplicationError GetLinkToImplicationError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint setComparisonConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasImplicationError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasImplicationError>(setComparisonConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasImplicationError.SetComparisonConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SetComparisonConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ImplicationError link accessor
		/// <summary>
		/// Get the SetComparisonConstraintHasImplicationError link to a ImplicationError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasImplicationError GetLinkToSetComparisonConstraint (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ImplicationError implicationErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasImplicationError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasImplicationError>(implicationErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasImplicationError.ImplicationErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ImplicationError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SetComparisonConstraintHasImplicationError instance accessors
		
		/// <summary>
		/// Get any SetComparisonConstraintHasImplicationError links between a given SetComparisonConstraint and a ImplicationError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasImplicationError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ImplicationError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasImplicationError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasImplicationError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasImplicationError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasImplicationError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasImplicationError.SetComparisonConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasImplicationError link in links )
			{
				if ( target.Equals(link.ImplicationError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SetComparisonConstraintHasImplicationError link between a given SetComparisonConstraintand a ImplicationError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasImplicationError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ImplicationError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasImplicationError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasImplicationError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasImplicationError.SetComparisonConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasImplicationError link in links )
			{
				if ( target.Equals(link.ImplicationError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("a7ca6438-cace-4fcc-b96c-03e1ddcd3152")]
	public partial class SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa7ca6438, 0xcace, 0x4fcc, 0xb9, 0x6c, 0x03, 0xe1, 0xdd, 0xcd, 0x31, 0x52);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError link in the same Partition as the given SetComparisonConstraint
		/// </summary>
		/// <param name="source">SetComparisonConstraint to use as the source of the relationship.</param>
		/// <param name="target">EqualityOrSubsetImpliedByMandatoryError to use as the target of the relationship.</param>
		public SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError(SetComparisonConstraint source, EqualityOrSubsetImpliedByMandatoryError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError.SetComparisonConstraintDomainRoleId, source), new DslModeling::RoleAssignment(SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError.EqualityOrSubsetImpliedByMandatoryErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SetComparisonConstraint domain role code
		
		/// <summary>
		/// SetComparisonConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid SetComparisonConstraintDomainRoleId = new global::System.Guid(0x5606e453, 0xd52c, 0x4465, 0xae, 0x97, 0xef, 0x3d, 0x75, 0xe9, 0x72, 0x45);
		
		/// <summary>
		/// DomainRole SetComparisonConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError.SetComparisonConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError/SetComparisonConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError/SetComparisonConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "EqualityOrSubsetImpliedByMandatoryError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError/SetComparisonConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("5606e453-d52c-4465-ae97-ef3d75e97245")]
		public virtual SetComparisonConstraint SetComparisonConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SetComparisonConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, SetComparisonConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SetComparisonConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EqualityOrSubsetConstraint of a EqualityOrSubsetImpliedByMandatoryError
		/// <summary>
		/// Gets EqualityOrSubsetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		private static SetComparisonConstraint GetEqualityOrSubsetConstraint(EqualityOrSubsetImpliedByMandatoryError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EqualityOrSubsetImpliedByMandatoryErrorDomainRoleId) as SetComparisonConstraint;
		}
		
		/// <summary>
		/// Sets EqualityOrSubsetConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		private static void SetEqualityOrSubsetConstraint(EqualityOrSubsetImpliedByMandatoryError element, SetComparisonConstraint newSetComparisonConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EqualityOrSubsetImpliedByMandatoryErrorDomainRoleId, newSetComparisonConstraint);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing SetComparisonConstraint domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.SetComparisonConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.SetComparisonConstraint = (SetComparisonConstraint)value;
			}
		}
		
		#endregion
		#region EqualityOrSubsetImpliedByMandatoryError domain role code
		
		/// <summary>
		/// EqualityOrSubsetImpliedByMandatoryError domain role Id.
		/// </summary>
		public static readonly global::System.Guid EqualityOrSubsetImpliedByMandatoryErrorDomainRoleId = new global::System.Guid(0x6ddf4667, 0x3dd7, 0x4661, 0x9c, 0xf2, 0xaa, 0x6e, 0x3e, 0xf7, 0x82, 0xe3);
		
		/// <summary>
		/// DomainRole EqualityOrSubsetImpliedByMandatoryError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError.EqualityOrSubsetImpliedByMandatoryError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError/EqualityOrSubsetImpliedByMandatoryError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError/EqualityOrSubsetImpliedByMandatoryError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "EqualityOrSubsetConstraint", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError/EqualityOrSubsetImpliedByMandatoryError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("6ddf4667-3dd7-4661-9cf2-aa6e3ef782e3")]
		public virtual EqualityOrSubsetImpliedByMandatoryError EqualityOrSubsetImpliedByMandatoryError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EqualityOrSubsetImpliedByMandatoryError)DslModeling::DomainRoleInfo.GetRolePlayer(this, EqualityOrSubsetImpliedByMandatoryErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EqualityOrSubsetImpliedByMandatoryErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EqualityOrSubsetImpliedByMandatoryError of a SetComparisonConstraint
		/// <summary>
		/// Gets EqualityOrSubsetImpliedByMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static EqualityOrSubsetImpliedByMandatoryError GetEqualityOrSubsetImpliedByMandatoryError(SetComparisonConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SetComparisonConstraintDomainRoleId) as EqualityOrSubsetImpliedByMandatoryError;
		}
		
		/// <summary>
		/// Sets EqualityOrSubsetImpliedByMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEqualityOrSubsetImpliedByMandatoryError(SetComparisonConstraint element, EqualityOrSubsetImpliedByMandatoryError newEqualityOrSubsetImpliedByMandatoryError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SetComparisonConstraintDomainRoleId, newEqualityOrSubsetImpliedByMandatoryError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing EqualityOrSubsetImpliedByMandatoryError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.EqualityOrSubsetImpliedByMandatoryError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.EqualityOrSubsetImpliedByMandatoryError = (EqualityOrSubsetImpliedByMandatoryError)value;
			}
		}
		
		#endregion
		#region SetComparisonConstraint link accessor
		/// <summary>
		/// Get the SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError link to a SetComparisonConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError GetLinkToEqualityOrSubsetImpliedByMandatoryError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint setComparisonConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError>(setComparisonConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError.SetComparisonConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SetComparisonConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EqualityOrSubsetImpliedByMandatoryError link accessor
		/// <summary>
		/// Get the SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError link to a EqualityOrSubsetImpliedByMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		private static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError GetLinkToEqualityOrSubsetConstraint (global::ORMSolutions.ORMArchitect.Core.ObjectModel.EqualityOrSubsetImpliedByMandatoryError equalityOrSubsetImpliedByMandatoryErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError>(equalityOrSubsetImpliedByMandatoryErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError.EqualityOrSubsetImpliedByMandatoryErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of EqualityOrSubsetImpliedByMandatoryError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError instance accessors
		
		/// <summary>
		/// Get any SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError links between a given SetComparisonConstraint and a EqualityOrSubsetImpliedByMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EqualityOrSubsetImpliedByMandatoryError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError.SetComparisonConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError link in links )
			{
				if ( target.Equals(link.EqualityOrSubsetImpliedByMandatoryError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError link between a given SetComparisonConstraintand a EqualityOrSubsetImpliedByMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EqualityOrSubsetImpliedByMandatoryError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError.SetComparisonConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError link in links )
			{
				if ( target.Equals(link.EqualityOrSubsetImpliedByMandatoryError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ObjectTypeHasPreferredIdentifierRequiresMandatoryError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("31a1bff6-47dc-4f00-955b-1935082a3f25")]
	public partial class ObjectTypeHasPreferredIdentifierRequiresMandatoryError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ObjectTypeHasPreferredIdentifierRequiresMandatoryError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x31a1bff6, 0x47dc, 0x4f00, 0x95, 0x5b, 0x19, 0x35, 0x08, 0x2a, 0x3f, 0x25);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ObjectTypeHasPreferredIdentifierRequiresMandatoryError link in the same Partition as the given ObjectType
		/// </summary>
		/// <param name="source">ObjectType to use as the source of the relationship.</param>
		/// <param name="target">PreferredIdentifierRequiresMandatoryError to use as the target of the relationship.</param>
		public ObjectTypeHasPreferredIdentifierRequiresMandatoryError(ObjectType source, PreferredIdentifierRequiresMandatoryError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ObjectTypeHasPreferredIdentifierRequiresMandatoryError.ObjectTypeDomainRoleId, source), new DslModeling::RoleAssignment(ObjectTypeHasPreferredIdentifierRequiresMandatoryError.PreferredIdentifierRequiresMandatoryErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectTypeHasPreferredIdentifierRequiresMandatoryError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectTypeHasPreferredIdentifierRequiresMandatoryError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectTypeHasPreferredIdentifierRequiresMandatoryError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectTypeHasPreferredIdentifierRequiresMandatoryError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ObjectType domain role code
		
		/// <summary>
		/// ObjectType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ObjectTypeDomainRoleId = new global::System.Guid(0xe7851c84, 0xd822, 0x4ea5, 0xab, 0x3f, 0x26, 0x48, 0x53, 0x81, 0x58, 0xc5);
		
		/// <summary>
		/// DomainRole ObjectType
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.ObjectType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError/ObjectType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError/ObjectType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "PreferredIdentifierRequiresMandatoryError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError/ObjectType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("e7851c84-d822-4ea5-ab3f-2648538158c5")]
		public virtual ObjectType ObjectType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjectTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjectTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ObjectType of a PreferredIdentifierRequiresMandatoryError
		/// <summary>
		/// Gets ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ObjectType GetObjectType(PreferredIdentifierRequiresMandatoryError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PreferredIdentifierRequiresMandatoryErrorDomainRoleId) as ObjectType;
		}
		
		/// <summary>
		/// Sets ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetObjectType(PreferredIdentifierRequiresMandatoryError element, ObjectType newObjectType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PreferredIdentifierRequiresMandatoryErrorDomainRoleId, newObjectType);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing ObjectType domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ObjectType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ObjectType = (ObjectType)value;
			}
		}
		
		#endregion
		#region PreferredIdentifierRequiresMandatoryError domain role code
		
		/// <summary>
		/// PreferredIdentifierRequiresMandatoryError domain role Id.
		/// </summary>
		public static readonly global::System.Guid PreferredIdentifierRequiresMandatoryErrorDomainRoleId = new global::System.Guid(0x835d831b, 0x67a2, 0x4f84, 0x89, 0x0a, 0x7d, 0x73, 0xbc, 0x5e, 0x6d, 0xbc);
		
		/// <summary>
		/// DomainRole PreferredIdentifierRequiresMandatoryError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.PreferredIdentifierRequiresMandatoryError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError/PreferredIdentifierRequiresMandatoryError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError/PreferredIdentifierRequiresMandatoryError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ObjectType", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError/PreferredIdentifierRequiresMandatoryError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("835d831b-67a2-4f84-890a-7d73bc5e6dbc")]
		public virtual PreferredIdentifierRequiresMandatoryError PreferredIdentifierRequiresMandatoryError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PreferredIdentifierRequiresMandatoryError)DslModeling::DomainRoleInfo.GetRolePlayer(this, PreferredIdentifierRequiresMandatoryErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PreferredIdentifierRequiresMandatoryErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PreferredIdentifierRequiresMandatoryError of a ObjectType
		/// <summary>
		/// Gets PreferredIdentifierRequiresMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static PreferredIdentifierRequiresMandatoryError GetPreferredIdentifierRequiresMandatoryError(ObjectType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ObjectTypeDomainRoleId) as PreferredIdentifierRequiresMandatoryError;
		}
		
		/// <summary>
		/// Sets PreferredIdentifierRequiresMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetPreferredIdentifierRequiresMandatoryError(ObjectType element, PreferredIdentifierRequiresMandatoryError newPreferredIdentifierRequiresMandatoryError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ObjectTypeDomainRoleId, newPreferredIdentifierRequiresMandatoryError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing PreferredIdentifierRequiresMandatoryError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.PreferredIdentifierRequiresMandatoryError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.PreferredIdentifierRequiresMandatoryError = (PreferredIdentifierRequiresMandatoryError)value;
			}
		}
		
		#endregion
		#region ObjectType link accessor
		/// <summary>
		/// Get the ObjectTypeHasPreferredIdentifierRequiresMandatoryError link to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError GetLinkToPreferredIdentifierRequiresMandatoryError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType objectTypeInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError>(objectTypeInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.ObjectTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ObjectType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region PreferredIdentifierRequiresMandatoryError link accessor
		/// <summary>
		/// Get the ObjectTypeHasPreferredIdentifierRequiresMandatoryError link to a PreferredIdentifierRequiresMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError GetLinkToObjectType (global::ORMSolutions.ORMArchitect.Core.ObjectModel.PreferredIdentifierRequiresMandatoryError preferredIdentifierRequiresMandatoryErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError>(preferredIdentifierRequiresMandatoryErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.PreferredIdentifierRequiresMandatoryErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of PreferredIdentifierRequiresMandatoryError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ObjectTypeHasPreferredIdentifierRequiresMandatoryError instance accessors
		
		/// <summary>
		/// Get any ObjectTypeHasPreferredIdentifierRequiresMandatoryError links between a given ObjectType and a PreferredIdentifierRequiresMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PreferredIdentifierRequiresMandatoryError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.ObjectTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError link in links )
			{
				if ( target.Equals(link.PreferredIdentifierRequiresMandatoryError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ObjectTypeHasPreferredIdentifierRequiresMandatoryError link between a given ObjectTypeand a PreferredIdentifierRequiresMandatoryError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PreferredIdentifierRequiresMandatoryError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.ObjectTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError link in links )
			{
				if ( target.Equals(link.PreferredIdentifierRequiresMandatoryError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ValueConstraintHasValueRangeOverlapError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRangeOverlapError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRangeOverlapError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRangeOverlapError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("9044be08-d88b-4bca-b261-0841e1c73b5d")]
	public partial class ValueConstraintHasValueRangeOverlapError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ValueConstraintHasValueRangeOverlapError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9044be08, 0xd88b, 0x4bca, 0xb2, 0x61, 0x08, 0x41, 0xe1, 0xc7, 0x3b, 0x5d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ValueConstraintHasValueRangeOverlapError link in the same Partition as the given ValueConstraint
		/// </summary>
		/// <param name="source">ValueConstraint to use as the source of the relationship.</param>
		/// <param name="target">ValueRangeOverlapError to use as the target of the relationship.</param>
		public ValueConstraintHasValueRangeOverlapError(ValueConstraint source, ValueRangeOverlapError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ValueConstraintHasValueRangeOverlapError.ValueConstraintDomainRoleId, source), new DslModeling::RoleAssignment(ValueConstraintHasValueRangeOverlapError.ValueRangeOverlapErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ValueConstraintHasValueRangeOverlapError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ValueConstraintHasValueRangeOverlapError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ValueConstraintHasValueRangeOverlapError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ValueConstraintHasValueRangeOverlapError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ValueConstraint domain role code
		
		/// <summary>
		/// ValueConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid ValueConstraintDomainRoleId = new global::System.Guid(0x6011898a, 0x4cf2, 0x429a, 0x98, 0x6e, 0xf0, 0xed, 0x8d, 0x93, 0x80, 0x64);
		
		/// <summary>
		/// DomainRole ValueConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRangeOverlapError/ValueConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRangeOverlapError/ValueConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ValueRangeOverlapError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRangeOverlapError/ValueConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("6011898a-4cf2-429a-986e-f0ed8d938064")]
		public virtual ValueConstraint ValueConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ValueConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, ValueConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ValueConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ValueConstraint of a ValueRangeOverlapError
		/// <summary>
		/// Gets ValueConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ValueConstraint GetValueConstraint(ValueRangeOverlapError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ValueRangeOverlapErrorDomainRoleId) as ValueConstraint;
		}
		
		/// <summary>
		/// Sets ValueConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetValueConstraint(ValueRangeOverlapError element, ValueConstraint newValueConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ValueRangeOverlapErrorDomainRoleId, newValueConstraint);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing ValueConstraint domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ValueConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ValueConstraint = (ValueConstraint)value;
			}
		}
		
		#endregion
		#region ValueRangeOverlapError domain role code
		
		/// <summary>
		/// ValueRangeOverlapError domain role Id.
		/// </summary>
		public static readonly global::System.Guid ValueRangeOverlapErrorDomainRoleId = new global::System.Guid(0x8d12358b, 0x19f0, 0x4fc5, 0x82, 0xfb, 0x3e, 0x51, 0x2f, 0xec, 0xd4, 0x99);
		
		/// <summary>
		/// DomainRole ValueRangeOverlapError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueRangeOverlapError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRangeOverlapError/ValueRangeOverlapError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRangeOverlapError/ValueRangeOverlapError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ValueConstraint", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRangeOverlapError/ValueRangeOverlapError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("8d12358b-19f0-4fc5-82fb-3e512fecd499")]
		public virtual ValueRangeOverlapError ValueRangeOverlapError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ValueRangeOverlapError)DslModeling::DomainRoleInfo.GetRolePlayer(this, ValueRangeOverlapErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ValueRangeOverlapErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ValueRangeOverlapError of a ValueConstraint
		/// <summary>
		/// Gets ValueRangeOverlapError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ValueRangeOverlapError GetValueRangeOverlapError(ValueConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ValueConstraintDomainRoleId) as ValueRangeOverlapError;
		}
		
		/// <summary>
		/// Sets ValueRangeOverlapError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetValueRangeOverlapError(ValueConstraint element, ValueRangeOverlapError newValueRangeOverlapError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ValueConstraintDomainRoleId, newValueRangeOverlapError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing ValueRangeOverlapError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ValueRangeOverlapError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ValueRangeOverlapError = (ValueRangeOverlapError)value;
			}
		}
		
		#endregion
		#region ValueConstraint link accessor
		/// <summary>
		/// Get the ValueConstraintHasValueRangeOverlapError link to a ValueConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRangeOverlapError GetLinkToValueRangeOverlapError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraint valueConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRangeOverlapError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRangeOverlapError>(valueConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ValueConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ValueRangeOverlapError link accessor
		/// <summary>
		/// Get the ValueConstraintHasValueRangeOverlapError link to a ValueRangeOverlapError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRangeOverlapError GetLinkToValueConstraint (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeOverlapError valueRangeOverlapErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRangeOverlapError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRangeOverlapError>(valueRangeOverlapErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueRangeOverlapErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ValueRangeOverlapError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ValueConstraintHasValueRangeOverlapError instance accessors
		
		/// <summary>
		/// Get any ValueConstraintHasValueRangeOverlapError links between a given ValueConstraint and a ValueRangeOverlapError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRangeOverlapError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeOverlapError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRangeOverlapError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRangeOverlapError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRangeOverlapError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRangeOverlapError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRangeOverlapError link in links )
			{
				if ( target.Equals(link.ValueRangeOverlapError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ValueConstraintHasValueRangeOverlapError link between a given ValueConstraintand a ValueRangeOverlapError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRangeOverlapError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeOverlapError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRangeOverlapError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRangeOverlapError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRangeOverlapError link in links )
			{
				if ( target.Equals(link.ValueRangeOverlapError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ValueConstraintHasValueTypeDetachedError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueTypeDetachedError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueTypeDetachedError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueTypeDetachedError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("706b0a12-f0e1-4048-8ceb-eeb5d7bc5cb3")]
	public partial class ValueConstraintHasValueTypeDetachedError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ValueConstraintHasValueTypeDetachedError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x706b0a12, 0xf0e1, 0x4048, 0x8c, 0xeb, 0xee, 0xb5, 0xd7, 0xbc, 0x5c, 0xb3);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ValueConstraintHasValueTypeDetachedError link in the same Partition as the given ValueConstraint
		/// </summary>
		/// <param name="source">ValueConstraint to use as the source of the relationship.</param>
		/// <param name="target">ValueConstraintValueTypeDetachedError to use as the target of the relationship.</param>
		public ValueConstraintHasValueTypeDetachedError(ValueConstraint source, ValueConstraintValueTypeDetachedError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ValueConstraintHasValueTypeDetachedError.ValueConstraintDomainRoleId, source), new DslModeling::RoleAssignment(ValueConstraintHasValueTypeDetachedError.ValueTypeDetachedErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ValueConstraintHasValueTypeDetachedError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ValueConstraintHasValueTypeDetachedError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ValueConstraintHasValueTypeDetachedError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ValueConstraintHasValueTypeDetachedError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ValueConstraint domain role code
		
		/// <summary>
		/// ValueConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid ValueConstraintDomainRoleId = new global::System.Guid(0x32f093e3, 0xa3fd, 0x42d4, 0x97, 0x23, 0x38, 0x79, 0x4d, 0x10, 0x3f, 0x4a);
		
		/// <summary>
		/// DomainRole ValueConstraint
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueTypeDetachedError.ValueConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueTypeDetachedError/ValueConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueTypeDetachedError/ValueConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ValueTypeDetachedError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueTypeDetachedError/ValueConstraint.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("32f093e3-a3fd-42d4-9723-38794d103f4a")]
		public virtual ValueConstraint ValueConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ValueConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, ValueConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ValueConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ValueConstraint of a ValueConstraintValueTypeDetachedError
		/// <summary>
		/// Gets ValueConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ValueConstraint GetValueConstraint(ValueConstraintValueTypeDetachedError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ValueTypeDetachedErrorDomainRoleId) as ValueConstraint;
		}
		
		/// <summary>
		/// Sets ValueConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetValueConstraint(ValueConstraintValueTypeDetachedError element, ValueConstraint newValueConstraint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ValueTypeDetachedErrorDomainRoleId, newValueConstraint);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing ValueConstraint domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ValueConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ValueConstraint = (ValueConstraint)value;
			}
		}
		
		#endregion
		#region ValueTypeDetachedError domain role code
		
		/// <summary>
		/// ValueTypeDetachedError domain role Id.
		/// </summary>
		public static readonly global::System.Guid ValueTypeDetachedErrorDomainRoleId = new global::System.Guid(0x469a903b, 0x45cc, 0x4b7d, 0xb2, 0xef, 0xf6, 0x66, 0xc5, 0xb5, 0xd8, 0x7b);
		
		/// <summary>
		/// DomainRole ValueTypeDetachedError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueTypeDetachedError.ValueTypeDetachedError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueTypeDetachedError/ValueTypeDetachedError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueTypeDetachedError/ValueTypeDetachedError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ValueConstraint", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueTypeDetachedError/ValueTypeDetachedError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("469a903b-45cc-4b7d-b2ef-f666c5b5d87b")]
		public virtual ValueConstraintValueTypeDetachedError ValueTypeDetachedError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ValueConstraintValueTypeDetachedError)DslModeling::DomainRoleInfo.GetRolePlayer(this, ValueTypeDetachedErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ValueTypeDetachedErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ValueTypeDetachedError of a ValueConstraint
		/// <summary>
		/// Gets ValueTypeDetachedError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ValueConstraintValueTypeDetachedError GetValueTypeDetachedError(ValueConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ValueConstraintDomainRoleId) as ValueConstraintValueTypeDetachedError;
		}
		
		/// <summary>
		/// Sets ValueTypeDetachedError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetValueTypeDetachedError(ValueConstraint element, ValueConstraintValueTypeDetachedError newValueTypeDetachedError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ValueConstraintDomainRoleId, newValueTypeDetachedError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing ValueTypeDetachedError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ValueTypeDetachedError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ValueTypeDetachedError = (ValueConstraintValueTypeDetachedError)value;
			}
		}
		
		#endregion
		#region ValueConstraint link accessor
		/// <summary>
		/// Get the ValueConstraintHasValueTypeDetachedError link to a ValueConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueTypeDetachedError GetLinkToValueTypeDetachedError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraint valueConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueTypeDetachedError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueTypeDetachedError>(valueConstraintInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueTypeDetachedError.ValueConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ValueConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ValueTypeDetachedError link accessor
		/// <summary>
		/// Get the ValueConstraintHasValueTypeDetachedError link to a ValueConstraintValueTypeDetachedError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueTypeDetachedError GetLinkToValueConstraint (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintValueTypeDetachedError valueTypeDetachedErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueTypeDetachedError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueTypeDetachedError>(valueTypeDetachedErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueTypeDetachedError.ValueTypeDetachedErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ValueTypeDetachedError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ValueConstraintHasValueTypeDetachedError instance accessors
		
		/// <summary>
		/// Get any ValueConstraintHasValueTypeDetachedError links between a given ValueConstraint and a ValueConstraintValueTypeDetachedError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueTypeDetachedError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintValueTypeDetachedError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueTypeDetachedError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueTypeDetachedError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueTypeDetachedError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueTypeDetachedError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueTypeDetachedError.ValueConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueTypeDetachedError link in links )
			{
				if ( target.Equals(link.ValueTypeDetachedError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ValueConstraintHasValueTypeDetachedError link between a given ValueConstraintand a ValueConstraintValueTypeDetachedError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueTypeDetachedError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraint source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintValueTypeDetachedError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueTypeDetachedError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueTypeDetachedError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueTypeDetachedError.ValueConstraintDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueTypeDetachedError link in links )
			{
				if ( target.Equals(link.ValueTypeDetachedError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship FactTypeHasRole
	/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasRole
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasRole.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasRole.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("40f02204-f32a-4424-9fd5-5b6b943c603a")]
	public partial class FactTypeHasRole : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FactTypeHasRole domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x40f02204, 0xf32a, 0x4424, 0x9f, 0xd5, 0x5b, 0x6b, 0x94, 0x3c, 0x60, 0x3a);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FactTypeHasRole link in the same Partition as the given FactType
		/// </summary>
		/// <param name="source">FactType to use as the source of the relationship.</param>
		/// <param name="target">RoleBase to use as the target of the relationship.</param>
		public FactTypeHasRole(FactType source, RoleBase target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FactTypeHasRole.FactTypeDomainRoleId, source), new DslModeling::RoleAssignment(FactTypeHasRole.RoleDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeHasRole(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeHasRole(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeHasRole(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeHasRole(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region FactType domain role code
		
		/// <summary>
		/// FactType domain role Id.
		/// </summary>
		public static readonly global::System.Guid FactTypeDomainRoleId = new global::System.Guid(0xb40ab1f6, 0x50f6, 0x42d6, 0x99, 0x28, 0x10, 0x23, 0x20, 0xdd, 0xcf, 0xf2);
		
		/// <summary>
		/// DomainRole FactType
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasRole.FactType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasRole/FactType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasRole/FactType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "RoleCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasRole/FactType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("b40ab1f6-50f6-42d6-9928-102320ddcff2")]
		public virtual FactType FactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FactType)DslModeling::DomainRoleInfo.GetRolePlayer(this, FactTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FactTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FactType of a RoleBase
		/// <summary>
		/// Gets FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FactType GetFactType(RoleBase element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RoleDomainRoleId) as FactType;
		}
		
		/// <summary>
		/// Sets FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFactType(RoleBase element, FactType newFactType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RoleDomainRoleId, newFactType);
		}
		#endregion
		#region Role domain role code
		
		/// <summary>
		/// Role domain role Id.
		/// </summary>
		public static readonly global::System.Guid RoleDomainRoleId = new global::System.Guid(0x9199d2cb, 0x4524, 0x4afb, 0xa6, 0x47, 0xdd, 0x4d, 0xbf, 0x34, 0xcb, 0x13);
		
		/// <summary>
		/// DomainRole Role
		/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasRole.Role
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasRole/Role.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasRole/Role.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FactType", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasRole/Role.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("9199d2cb-4524-4afb-a647-dd4dbf34cb13")]
		public virtual RoleBase Role
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RoleBase)DslModeling::DomainRoleInfo.GetRolePlayer(this, RoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RoleCollection of a FactType
		/// <summary>
		/// Gets a list of RoleCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<RoleBase> GetRoleCollection(FactType element)
		{
			return new DslModeling::LinkedElementCollection<RoleBase>(element, FactTypeDomainRoleId);
		}
		#endregion
		#region FactType link accessor
		/// <summary>
		/// Get the list of FactTypeHasRole links to a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasRole> GetLinksToRoleCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType factTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasRole>(factTypeInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasRole.FactTypeDomainRoleId);
		}
		#endregion
		#region Role link accessor
		/// <summary>
		/// Get the FactTypeHasRole link to a RoleBase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasRole GetLinkToFactType (global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleBase roleInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasRole>(roleInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasRole.RoleDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Role not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FactTypeHasRole instance accessors
		
		/// <summary>
		/// Get any FactTypeHasRole links between a given FactType and a RoleBase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasRole> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleBase target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasRole> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasRole>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasRole>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasRole.FactTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasRole link in links )
			{
				if ( target.Equals(link.Role) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FactTypeHasRole link between a given FactTypeand a RoleBase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasRole GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleBase target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasRole>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasRole.FactTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasRole link in links )
			{
				if ( target.Equals(link.Role) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ReadingOrderHasRole
	/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasRole
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasRole.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasRole.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("f4d3824f-5764-434b-9abd-fd847d4b7570")]
	public partial class ReadingOrderHasRole : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ReadingOrderHasRole domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf4d3824f, 0x5764, 0x434b, 0x9a, 0xbd, 0xfd, 0x84, 0x7d, 0x4b, 0x75, 0x70);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ReadingOrderHasRole link in the same Partition as the given ReadingOrder
		/// </summary>
		/// <param name="source">ReadingOrder to use as the source of the relationship.</param>
		/// <param name="target">RoleBase to use as the target of the relationship.</param>
		public ReadingOrderHasRole(ReadingOrder source, RoleBase target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ReadingOrderHasRole.ReadingOrderDomainRoleId, source), new DslModeling::RoleAssignment(ReadingOrderHasRole.RoleDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ReadingOrderHasRole(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ReadingOrderHasRole(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ReadingOrderHasRole(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ReadingOrderHasRole(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ReadingOrder domain role code
		
		/// <summary>
		/// ReadingOrder domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReadingOrderDomainRoleId = new global::System.Guid(0xb7e469ec, 0x836d, 0x447f, 0xa0, 0xa5, 0x15, 0x5f, 0x92, 0x8b, 0xce, 0x83);
		
		/// <summary>
		/// DomainRole ReadingOrder
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasRole.ReadingOrder
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasRole/ReadingOrder.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasRole/ReadingOrder.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "RoleCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasRole/ReadingOrder.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("b7e469ec-836d-447f-a0a5-155f928bce83")]
		public virtual ReadingOrder ReadingOrder
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ReadingOrder)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReadingOrderDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReadingOrderDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ReadingOrder of a RoleBase
		/// <summary>
		/// Gets a list of ReadingOrder.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ReadingOrder> GetReadingOrder(RoleBase element)
		{
			return new DslModeling::LinkedElementCollection<ReadingOrder>(element, RoleDomainRoleId);
		}
		#endregion
		#region Role domain role code
		
		/// <summary>
		/// Role domain role Id.
		/// </summary>
		public static readonly global::System.Guid RoleDomainRoleId = new global::System.Guid(0xdaa60744, 0x9e62, 0x4277, 0xa1, 0xf0, 0xa4, 0x59, 0xd3, 0x8d, 0x95, 0xc1);
		
		/// <summary>
		/// DomainRole Role
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasRole.Role
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasRole/Role.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasRole/Role.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ReadingOrder", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasRole/Role.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("daa60744-9e62-4277-a1f0-a459d38d95c1")]
		public virtual RoleBase Role
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RoleBase)DslModeling::DomainRoleInfo.GetRolePlayer(this, RoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RoleCollection of a ReadingOrder
		/// <summary>
		/// Gets a list of RoleCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<RoleBase> GetRoleCollection(ReadingOrder element)
		{
			return new DslModeling::LinkedElementCollection<RoleBase>(element, ReadingOrderDomainRoleId);
		}
		#endregion
		#region ReadingOrder link accessor
		/// <summary>
		/// Get the list of ReadingOrderHasRole links to a ReadingOrder.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasRole> GetLinksToRoleCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrder readingOrderInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasRole>(readingOrderInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasRole.ReadingOrderDomainRoleId);
		}
		#endregion
		#region Role link accessor
		/// <summary>
		/// Get the list of ReadingOrderHasRole links to a RoleBase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasRole> GetLinksToReadingOrder ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleBase roleInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasRole>(roleInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasRole.RoleDomainRoleId);
		}
		#endregion
		#region ReadingOrderHasRole instance accessors
		
		/// <summary>
		/// Get any ReadingOrderHasRole links between a given ReadingOrder and a RoleBase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasRole> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrder source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleBase target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasRole> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasRole>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasRole>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasRole.ReadingOrderDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasRole link in links )
			{
				if ( target.Equals(link.Role) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ReadingOrderHasRole link between a given ReadingOrderand a RoleBase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasRole GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrder source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleBase target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasRole>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasRole.ReadingOrderDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasRole link in links )
			{
				if ( target.Equals(link.Role) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship RoleProxyHasRole
	/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProxyHasRole
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProxyHasRole.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProxyHasRole.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("5a3809ef-42f1-4965-8490-52fea5da30a2")]
	public partial class RoleProxyHasRole : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RoleProxyHasRole domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5a3809ef, 0x42f1, 0x4965, 0x84, 0x90, 0x52, 0xfe, 0xa5, 0xda, 0x30, 0xa2);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RoleProxyHasRole link in the same Partition as the given RoleProxy
		/// </summary>
		/// <param name="source">RoleProxy to use as the source of the relationship.</param>
		/// <param name="target">Role to use as the target of the relationship.</param>
		public RoleProxyHasRole(RoleProxy source, Role target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RoleProxyHasRole.ProxyDomainRoleId, source), new DslModeling::RoleAssignment(RoleProxyHasRole.TargetRoleDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RoleProxyHasRole(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RoleProxyHasRole(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RoleProxyHasRole(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RoleProxyHasRole(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Proxy domain role code
		
		/// <summary>
		/// Proxy domain role Id.
		/// </summary>
		public static readonly global::System.Guid ProxyDomainRoleId = new global::System.Guid(0xf9024eac, 0x69af, 0x438a, 0x85, 0xad, 0x39, 0x3b, 0x55, 0xab, 0xf9, 0x1f);
		
		/// <summary>
		/// DomainRole Proxy
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProxyHasRole.Proxy
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProxyHasRole/Proxy.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProxyHasRole/Proxy.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TargetRole", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProxyHasRole/Proxy.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("f9024eac-69af-438a-85ad-393b55abf91f")]
		public virtual RoleProxy Proxy
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RoleProxy)DslModeling::DomainRoleInfo.GetRolePlayer(this, ProxyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ProxyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Proxy of a Role
		/// <summary>
		/// Gets Proxy.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static RoleProxy GetProxy(Role element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TargetRoleDomainRoleId) as RoleProxy;
		}
		
		/// <summary>
		/// Sets Proxy.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetProxy(Role element, RoleProxy newProxy)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TargetRoleDomainRoleId, newProxy);
		}
		#endregion
		#region TargetRole domain role code
		
		/// <summary>
		/// TargetRole domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetRoleDomainRoleId = new global::System.Guid(0xae004027, 0xbe74, 0x4e53, 0x99, 0xd7, 0xd3, 0xe8, 0x94, 0xf4, 0x12, 0x4d);
		
		/// <summary>
		/// DomainRole TargetRole
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProxyHasRole.TargetRole
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProxyHasRole/TargetRole.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProxyHasRole/TargetRole.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Proxy", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProxyHasRole/TargetRole.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("ae004027-be74-4e53-99d7-d3e894f4124d")]
		public virtual Role TargetRole
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Role)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetRoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetRoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetRole of a RoleProxy
		/// <summary>
		/// Gets TargetRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Role GetTargetRole(RoleProxy element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ProxyDomainRoleId) as Role;
		}
		
		/// <summary>
		/// Sets TargetRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTargetRole(RoleProxy element, Role newTargetRole)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ProxyDomainRoleId, newTargetRole);
		}
		#endregion
		#region Proxy link accessor
		/// <summary>
		/// Get the RoleProxyHasRole link to a RoleProxy.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProxyHasRole GetLinkToTargetRole (global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProxy proxyInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProxyHasRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProxyHasRole>(proxyInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProxyHasRole.ProxyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Proxy not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TargetRole link accessor
		/// <summary>
		/// Get the RoleProxyHasRole link to a Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProxyHasRole GetLinkToProxy (global::ORMSolutions.ORMArchitect.Core.ObjectModel.Role targetRoleInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProxyHasRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProxyHasRole>(targetRoleInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProxyHasRole.TargetRoleDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TargetRole not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region RoleProxyHasRole instance accessors
		
		/// <summary>
		/// Get any RoleProxyHasRole links between a given RoleProxy and a Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProxyHasRole> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProxy source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Role target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProxyHasRole> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProxyHasRole>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProxyHasRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProxyHasRole>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProxyHasRole.ProxyDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProxyHasRole link in links )
			{
				if ( target.Equals(link.TargetRole) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RoleProxyHasRole link between a given RoleProxyand a Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProxyHasRole GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProxy source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Role target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProxyHasRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProxyHasRole>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProxyHasRole.ProxyDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProxyHasRole link in links )
			{
				if ( target.Equals(link.TargetRole) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ObjectifiedUnaryRoleHasRole
	/// Links a unary role with the objectified unary role in the implied FactType.
	/// Implies a single-column equality constraint between the two roles.
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedUnaryRoleHasRole.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedUnaryRoleHasRole.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("8455a054-c4bf-4e35-99b0-5054602675f1")]
	public partial class ObjectifiedUnaryRoleHasRole : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ObjectifiedUnaryRoleHasRole domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8455a054, 0xc4bf, 0x4e35, 0x99, 0xb0, 0x50, 0x54, 0x60, 0x26, 0x75, 0xf1);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ObjectifiedUnaryRoleHasRole link in the same Partition as the given ObjectifiedUnaryRole
		/// </summary>
		/// <param name="source">ObjectifiedUnaryRole to use as the source of the relationship.</param>
		/// <param name="target">Role to use as the target of the relationship.</param>
		public ObjectifiedUnaryRoleHasRole(ObjectifiedUnaryRole source, Role target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ObjectifiedUnaryRoleHasRole.ObjectifiedUnaryRoleDomainRoleId, source), new DslModeling::RoleAssignment(ObjectifiedUnaryRoleHasRole.TargetRoleDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectifiedUnaryRoleHasRole(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectifiedUnaryRoleHasRole(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectifiedUnaryRoleHasRole(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectifiedUnaryRoleHasRole(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ObjectifiedUnaryRole domain role code
		
		/// <summary>
		/// ObjectifiedUnaryRole domain role Id.
		/// </summary>
		public static readonly global::System.Guid ObjectifiedUnaryRoleDomainRoleId = new global::System.Guid(0x04095428, 0x688b, 0x44d0, 0x9b, 0xae, 0x84, 0xcb, 0xea, 0x13, 0x42, 0x95);
		
		/// <summary>
		/// DomainRole ObjectifiedUnaryRole
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedUnaryRoleHasRole.ObjectifiedUnaryRole
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedUnaryRoleHasRole/ObjectifiedUnaryRole.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedUnaryRoleHasRole/ObjectifiedUnaryRole.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TargetRole", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedUnaryRoleHasRole/ObjectifiedUnaryRole.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("04095428-688b-44d0-9bae-84cbea134295")]
		public virtual ObjectifiedUnaryRole ObjectifiedUnaryRole
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectifiedUnaryRole)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjectifiedUnaryRoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjectifiedUnaryRoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ObjectifiedUnaryRole of a Role
		/// <summary>
		/// Gets ObjectifiedUnaryRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ObjectifiedUnaryRole GetObjectifiedUnaryRole(Role element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TargetRoleDomainRoleId) as ObjectifiedUnaryRole;
		}
		
		/// <summary>
		/// Sets ObjectifiedUnaryRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetObjectifiedUnaryRole(Role element, ObjectifiedUnaryRole newObjectifiedUnaryRole)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TargetRoleDomainRoleId, newObjectifiedUnaryRole);
		}
		#endregion
		#region TargetRole domain role code
		
		/// <summary>
		/// TargetRole domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetRoleDomainRoleId = new global::System.Guid(0x30bbeca0, 0xccb7, 0x4a34, 0x8a, 0xed, 0x82, 0xec, 0x95, 0xcc, 0x11, 0x66);
		
		/// <summary>
		/// DomainRole TargetRole
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedUnaryRoleHasRole.TargetRole
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedUnaryRoleHasRole/TargetRole.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedUnaryRoleHasRole/TargetRole.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ObjectifiedUnaryRole", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedUnaryRoleHasRole/TargetRole.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("30bbeca0-ccb7-4a34-8aed-82ec95cc1166")]
		public virtual Role TargetRole
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Role)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetRoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetRoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetRole of a ObjectifiedUnaryRole
		/// <summary>
		/// Gets TargetRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Role GetTargetRole(ObjectifiedUnaryRole element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ObjectifiedUnaryRoleDomainRoleId) as Role;
		}
		
		/// <summary>
		/// Sets TargetRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTargetRole(ObjectifiedUnaryRole element, Role newTargetRole)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ObjectifiedUnaryRoleDomainRoleId, newTargetRole);
		}
		#endregion
		#region ObjectifiedUnaryRole link accessor
		/// <summary>
		/// Get the ObjectifiedUnaryRoleHasRole link to a ObjectifiedUnaryRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedUnaryRoleHasRole GetLinkToTargetRole (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedUnaryRole objectifiedUnaryRoleInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedUnaryRoleHasRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedUnaryRoleHasRole>(objectifiedUnaryRoleInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedUnaryRoleHasRole.ObjectifiedUnaryRoleDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ObjectifiedUnaryRole not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TargetRole link accessor
		/// <summary>
		/// Get the ObjectifiedUnaryRoleHasRole link to a Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedUnaryRoleHasRole GetLinkToObjectifiedUnaryRole (global::ORMSolutions.ORMArchitect.Core.ObjectModel.Role targetRoleInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedUnaryRoleHasRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedUnaryRoleHasRole>(targetRoleInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedUnaryRoleHasRole.TargetRoleDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TargetRole not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ObjectifiedUnaryRoleHasRole instance accessors
		
		/// <summary>
		/// Get any ObjectifiedUnaryRoleHasRole links between a given ObjectifiedUnaryRole and a Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedUnaryRoleHasRole> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedUnaryRole source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Role target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedUnaryRoleHasRole> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedUnaryRoleHasRole>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedUnaryRoleHasRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedUnaryRoleHasRole>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedUnaryRoleHasRole.ObjectifiedUnaryRoleDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedUnaryRoleHasRole link in links )
			{
				if ( target.Equals(link.TargetRole) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ObjectifiedUnaryRoleHasRole link between a given ObjectifiedUnaryRoleand a Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedUnaryRoleHasRole GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedUnaryRole source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Role target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedUnaryRoleHasRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedUnaryRoleHasRole>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedUnaryRoleHasRole.ObjectifiedUnaryRoleDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedUnaryRoleHasRole link in links )
			{
				if ( target.Equals(link.TargetRole) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship FactTypeHasDerivationExpression
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationExpression
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationExpression.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationExpression.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("27127a53-8e17-420f-9e87-9812f7c76cd8")]
	public partial class FactTypeHasDerivationExpression : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FactTypeHasDerivationExpression domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x27127a53, 0x8e17, 0x420f, 0x9e, 0x87, 0x98, 0x12, 0xf7, 0xc7, 0x6c, 0xd8);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FactTypeHasDerivationExpression link in the same Partition as the given FactType
		/// </summary>
		/// <param name="source">FactType to use as the source of the relationship.</param>
		/// <param name="target">FactTypeDerivationExpression to use as the target of the relationship.</param>
		public FactTypeHasDerivationExpression(FactType source, FactTypeDerivationExpression target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FactTypeHasDerivationExpression.FactTypeDomainRoleId, source), new DslModeling::RoleAssignment(FactTypeHasDerivationExpression.DerivationRuleDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeHasDerivationExpression(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeHasDerivationExpression(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeHasDerivationExpression(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeHasDerivationExpression(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region FactType domain role code
		
		/// <summary>
		/// FactType domain role Id.
		/// </summary>
		public static readonly global::System.Guid FactTypeDomainRoleId = new global::System.Guid(0x73b1a9d8, 0x42a4, 0x44e0, 0xb9, 0x06, 0xae, 0xf1, 0x0e, 0x34, 0x6d, 0xb6);
		
		/// <summary>
		/// DomainRole FactType
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationExpression.FactType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationExpression/FactType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationExpression/FactType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DerivationExpression", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationExpression/FactType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("73b1a9d8-42a4-44e0-b906-aef10e346db6")]
		public virtual FactType FactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FactType)DslModeling::DomainRoleInfo.GetRolePlayer(this, FactTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FactTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FactType of a FactTypeDerivationExpression
		/// <summary>
		/// Gets FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FactType GetFactType(FactTypeDerivationExpression element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DerivationRuleDomainRoleId) as FactType;
		}
		
		/// <summary>
		/// Sets FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFactType(FactTypeDerivationExpression element, FactType newFactType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DerivationRuleDomainRoleId, newFactType);
		}
		#endregion
		#region DerivationRule domain role code
		
		/// <summary>
		/// DerivationRule domain role Id.
		/// </summary>
		public static readonly global::System.Guid DerivationRuleDomainRoleId = new global::System.Guid(0xf0ebcc89, 0x95a8, 0x45e8, 0x98, 0x65, 0x61, 0x6a, 0x9a, 0xc8, 0x58, 0xf9);
		
		/// <summary>
		/// DomainRole DerivationRule
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationExpression.DerivationRule
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationExpression/DerivationRule.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationExpression/DerivationRule.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FactType", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationExpression/DerivationRule.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("f0ebcc89-95a8-45e8-9865-616a9ac858f9")]
		public virtual FactTypeDerivationExpression DerivationRule
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FactTypeDerivationExpression)DslModeling::DomainRoleInfo.GetRolePlayer(this, DerivationRuleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DerivationRuleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DerivationExpression of a FactType
		/// <summary>
		/// Gets DerivationExpression.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FactTypeDerivationExpression GetDerivationExpression(FactType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FactTypeDomainRoleId) as FactTypeDerivationExpression;
		}
		
		/// <summary>
		/// Sets DerivationExpression.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDerivationExpression(FactType element, FactTypeDerivationExpression newDerivationRule)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FactTypeDomainRoleId, newDerivationRule);
		}
		#endregion
		#region FactType link accessor
		/// <summary>
		/// Get the FactTypeHasDerivationExpression link to a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationExpression GetLinkToDerivationExpression (global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType factTypeInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationExpression> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationExpression>(factTypeInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationExpression.FactTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of FactType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DerivationRule link accessor
		/// <summary>
		/// Get the FactTypeHasDerivationExpression link to a FactTypeDerivationExpression.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationExpression GetLinkToFactType (global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationExpression derivationRuleInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationExpression> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationExpression>(derivationRuleInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationExpression.DerivationRuleDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DerivationRule not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FactTypeHasDerivationExpression instance accessors
		
		/// <summary>
		/// Get any FactTypeHasDerivationExpression links between a given FactType and a FactTypeDerivationExpression.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationExpression> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationExpression target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationExpression> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationExpression>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationExpression> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationExpression>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationExpression.FactTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationExpression link in links )
			{
				if ( target.Equals(link.DerivationRule) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FactTypeHasDerivationExpression link between a given FactTypeand a FactTypeDerivationExpression.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationExpression GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationExpression target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationExpression> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationExpression>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationExpression.FactTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationExpression link in links )
			{
				if ( target.Equals(link.DerivationRule) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship SubtypeHasDerivationExpression
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationExpression
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationExpression.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationExpression.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("efc3b143-5649-4d72-87b1-3fbbc58d9764")]
	public partial class SubtypeHasDerivationExpression : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SubtypeHasDerivationExpression domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xefc3b143, 0x5649, 0x4d72, 0x87, 0xb1, 0x3f, 0xbb, 0xc5, 0x8d, 0x97, 0x64);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SubtypeHasDerivationExpression link in the same Partition as the given ObjectType
		/// </summary>
		/// <param name="source">ObjectType to use as the source of the relationship.</param>
		/// <param name="target">SubtypeDerivationExpression to use as the target of the relationship.</param>
		public SubtypeHasDerivationExpression(ObjectType source, SubtypeDerivationExpression target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SubtypeHasDerivationExpression.SubtypeDomainRoleId, source), new DslModeling::RoleAssignment(SubtypeHasDerivationExpression.DerivationRuleDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubtypeHasDerivationExpression(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubtypeHasDerivationExpression(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubtypeHasDerivationExpression(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubtypeHasDerivationExpression(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Subtype domain role code
		
		/// <summary>
		/// Subtype domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubtypeDomainRoleId = new global::System.Guid(0x10ea88c0, 0x446d, 0x4f1c, 0x84, 0xe2, 0x72, 0x60, 0x31, 0xc1, 0x42, 0x11);
		
		/// <summary>
		/// DomainRole Subtype
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationExpression.Subtype
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationExpression/Subtype.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationExpression/Subtype.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DerivationExpression", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationExpression/Subtype.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("10ea88c0-446d-4f1c-84e2-726031c14211")]
		public virtual ObjectType Subtype
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubtypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubtypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Subtype of a SubtypeDerivationExpression
		/// <summary>
		/// Gets Subtype.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ObjectType GetSubtype(SubtypeDerivationExpression element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DerivationRuleDomainRoleId) as ObjectType;
		}
		
		/// <summary>
		/// Sets Subtype.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSubtype(SubtypeDerivationExpression element, ObjectType newSubtype)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DerivationRuleDomainRoleId, newSubtype);
		}
		#endregion
		#region DerivationRule domain role code
		
		/// <summary>
		/// DerivationRule domain role Id.
		/// </summary>
		public static readonly global::System.Guid DerivationRuleDomainRoleId = new global::System.Guid(0xaccefc08, 0xfd9d, 0x48b5, 0xb6, 0x64, 0x29, 0xb3, 0x84, 0x84, 0x32, 0x6b);
		
		/// <summary>
		/// DomainRole DerivationRule
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationExpression.DerivationRule
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationExpression/DerivationRule.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationExpression/DerivationRule.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Subtype", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationExpression/DerivationRule.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("accefc08-fd9d-48b5-b664-29b38484326b")]
		public virtual SubtypeDerivationExpression DerivationRule
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SubtypeDerivationExpression)DslModeling::DomainRoleInfo.GetRolePlayer(this, DerivationRuleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DerivationRuleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DerivationExpression of a ObjectType
		/// <summary>
		/// Gets DerivationExpression.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SubtypeDerivationExpression GetDerivationExpression(ObjectType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SubtypeDomainRoleId) as SubtypeDerivationExpression;
		}
		
		/// <summary>
		/// Sets DerivationExpression.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDerivationExpression(ObjectType element, SubtypeDerivationExpression newDerivationRule)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SubtypeDomainRoleId, newDerivationRule);
		}
		#endregion
		#region Subtype link accessor
		/// <summary>
		/// Get the SubtypeHasDerivationExpression link to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationExpression GetLinkToDerivationExpression (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType subtypeInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationExpression> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationExpression>(subtypeInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationExpression.SubtypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Subtype not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DerivationRule link accessor
		/// <summary>
		/// Get the SubtypeHasDerivationExpression link to a SubtypeDerivationExpression.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationExpression GetLinkToSubtype (global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationExpression derivationRuleInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationExpression> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationExpression>(derivationRuleInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationExpression.DerivationRuleDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DerivationRule not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SubtypeHasDerivationExpression instance accessors
		
		/// <summary>
		/// Get any SubtypeHasDerivationExpression links between a given ObjectType and a SubtypeDerivationExpression.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationExpression> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationExpression target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationExpression> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationExpression>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationExpression> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationExpression>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationExpression.SubtypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationExpression link in links )
			{
				if ( target.Equals(link.DerivationRule) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SubtypeHasDerivationExpression link between a given ObjectTypeand a SubtypeDerivationExpression.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationExpression GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationExpression target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationExpression> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationExpression>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationExpression.SubtypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationExpression link in links )
			{
				if ( target.Equals(link.DerivationRule) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ObjectTypeHasObjectTypeInstance
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasObjectTypeInstance
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasObjectTypeInstance.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasObjectTypeInstance.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("f4343cde-a3c7-402c-af81-cbdc8f092c9e")]
	public partial class ObjectTypeHasObjectTypeInstance : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ObjectTypeHasObjectTypeInstance domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf4343cde, 0xa3c7, 0x402c, 0xaf, 0x81, 0xcb, 0xdc, 0x8f, 0x09, 0x2c, 0x9e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ObjectTypeHasObjectTypeInstance link in the same Partition as the given ObjectType
		/// </summary>
		/// <param name="source">ObjectType to use as the source of the relationship.</param>
		/// <param name="target">ObjectTypeInstance to use as the target of the relationship.</param>
		public ObjectTypeHasObjectTypeInstance(ObjectType source, ObjectTypeInstance target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ObjectTypeHasObjectTypeInstance.ObjectTypeDomainRoleId, source), new DslModeling::RoleAssignment(ObjectTypeHasObjectTypeInstance.ObjectTypeInstanceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectTypeHasObjectTypeInstance(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectTypeHasObjectTypeInstance(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectTypeHasObjectTypeInstance(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectTypeHasObjectTypeInstance(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ObjectType domain role code
		
		/// <summary>
		/// ObjectType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ObjectTypeDomainRoleId = new global::System.Guid(0x4ba85c9e, 0x99d0, 0x4f84, 0x86, 0x4b, 0xb8, 0xe8, 0xc3, 0x05, 0xb2, 0xc4);
		
		/// <summary>
		/// DomainRole ObjectType
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasObjectTypeInstance.ObjectType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasObjectTypeInstance/ObjectType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasObjectTypeInstance/ObjectType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ObjectTypeInstanceCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasObjectTypeInstance/ObjectType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("4ba85c9e-99d0-4f84-864b-b8e8c305b2c4")]
		public virtual ObjectType ObjectType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjectTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjectTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ObjectType of a ObjectTypeInstance
		/// <summary>
		/// Gets ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ObjectType GetObjectType(ObjectTypeInstance element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ObjectTypeInstanceDomainRoleId) as ObjectType;
		}
		
		/// <summary>
		/// Sets ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetObjectType(ObjectTypeInstance element, ObjectType newObjectType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ObjectTypeInstanceDomainRoleId, newObjectType);
		}
		#endregion
		#region ObjectTypeInstance domain role code
		
		/// <summary>
		/// ObjectTypeInstance domain role Id.
		/// </summary>
		public static readonly global::System.Guid ObjectTypeInstanceDomainRoleId = new global::System.Guid(0x9dff9164, 0xdc48, 0x46b8, 0xa2, 0x44, 0x7b, 0x9f, 0xab, 0x85, 0x98, 0xdb);
		
		/// <summary>
		/// DomainRole ObjectTypeInstance
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasObjectTypeInstance.ObjectTypeInstance
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasObjectTypeInstance/ObjectTypeInstance.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasObjectTypeInstance/ObjectTypeInstance.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ObjectType", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasObjectTypeInstance/ObjectTypeInstance.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("9dff9164-dc48-46b8-a244-7b9fab8598db")]
		public virtual ObjectTypeInstance ObjectTypeInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectTypeInstance)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjectTypeInstanceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjectTypeInstanceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ObjectTypeInstanceCollection of a ObjectType
		/// <summary>
		/// Gets a list of ObjectTypeInstanceCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ObjectTypeInstance> GetObjectTypeInstanceCollection(ObjectType element)
		{
			return new DslModeling::LinkedElementCollection<ObjectTypeInstance>(element, ObjectTypeDomainRoleId);
		}
		#endregion
		#region ObjectType link accessor
		/// <summary>
		/// Get the list of ObjectTypeHasObjectTypeInstance links to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasObjectTypeInstance> GetLinksToObjectTypeInstanceCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType objectTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasObjectTypeInstance>(objectTypeInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasObjectTypeInstance.ObjectTypeDomainRoleId);
		}
		#endregion
		#region ObjectTypeInstance link accessor
		/// <summary>
		/// Get the ObjectTypeHasObjectTypeInstance link to a ObjectTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasObjectTypeInstance GetLinkToObjectType (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstance objectTypeInstanceInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasObjectTypeInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasObjectTypeInstance>(objectTypeInstanceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasObjectTypeInstance.ObjectTypeInstanceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ObjectTypeInstance not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ObjectTypeHasObjectTypeInstance instance accessors
		
		/// <summary>
		/// Get any ObjectTypeHasObjectTypeInstance links between a given ObjectType and a ObjectTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasObjectTypeInstance> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstance target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasObjectTypeInstance> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasObjectTypeInstance>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasObjectTypeInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasObjectTypeInstance>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasObjectTypeInstance.ObjectTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasObjectTypeInstance link in links )
			{
				if ( target.Equals(link.ObjectTypeInstance) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ObjectTypeHasObjectTypeInstance link between a given ObjectTypeand a ObjectTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasObjectTypeInstance GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstance target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasObjectTypeInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasObjectTypeInstance>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasObjectTypeInstance.ObjectTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasObjectTypeInstance link in links )
			{
				if ( target.Equals(link.ObjectTypeInstance) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship EntityTypeHasEntityTypeInstance
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasEntityTypeInstance
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasEntityTypeInstance.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasEntityTypeInstance.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("0f9cda9d-88ce-47dd-b202-93b1455e08c3")]
	public partial class EntityTypeHasEntityTypeInstance : ObjectTypeHasObjectTypeInstance
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityTypeHasEntityTypeInstance domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0f9cda9d, 0x88ce, 0x47dd, 0xb2, 0x02, 0x93, 0xb1, 0x45, 0x5e, 0x08, 0xc3);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityTypeHasEntityTypeInstance link in the same Partition as the given ObjectType
		/// </summary>
		/// <param name="source">ObjectType to use as the source of the relationship.</param>
		/// <param name="target">EntityTypeInstance to use as the target of the relationship.</param>
		public EntityTypeHasEntityTypeInstance(ObjectType source, EntityTypeInstance target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityTypeHasEntityTypeInstance.EntityTypeDomainRoleId, source), new DslModeling::RoleAssignment(EntityTypeHasEntityTypeInstance.EntityTypeInstanceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityTypeHasEntityTypeInstance(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityTypeHasEntityTypeInstance(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityTypeHasEntityTypeInstance(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityTypeHasEntityTypeInstance(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region EntityType domain role code
		
		/// <summary>
		/// EntityType domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityTypeDomainRoleId = new global::System.Guid(0x5a293722, 0x12d6, 0x4b42, 0xa3, 0x36, 0x32, 0x81, 0xa4, 0x04, 0xe7, 0x85);
		
		/// <summary>
		/// DomainRole EntityType
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasEntityTypeInstance.EntityType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasEntityTypeInstance/EntityType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasEntityTypeInstance/EntityType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "EntityTypeInstanceCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasEntityTypeInstance/EntityType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("5a293722-12d6-4b42-a336-3281a404e785")]
		public virtual ObjectType EntityType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EntityType of a EntityTypeInstance
		/// <summary>
		/// Gets EntityType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ObjectType GetEntityType(EntityTypeInstance element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EntityTypeInstanceDomainRoleId) as ObjectType;
		}
		
		/// <summary>
		/// Sets EntityType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEntityType(EntityTypeInstance element, ObjectType newEntityType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EntityTypeInstanceDomainRoleId, newEntityType);
		}
		#endregion
		#region ObjectType domain role override
		
		/// <summary>
		/// Gets the element playing EntityType domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasObjectTypeInstance.ObjectType
		/// </summary>
		public override ObjectType ObjectType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.EntityType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.EntityType = value;
			}
		}
		
		#endregion
		#region EntityTypeInstance domain role code
		
		/// <summary>
		/// EntityTypeInstance domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityTypeInstanceDomainRoleId = new global::System.Guid(0xdcb0cb77, 0x842d, 0x4b69, 0x95, 0x0d, 0x26, 0xc3, 0xc4, 0x50, 0x9b, 0x6d);
		
		/// <summary>
		/// DomainRole EntityTypeInstance
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasEntityTypeInstance.EntityTypeInstance
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasEntityTypeInstance/EntityTypeInstance.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasEntityTypeInstance/EntityTypeInstance.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "EntityType", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasEntityTypeInstance/EntityTypeInstance.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("dcb0cb77-842d-4b69-950d-26c3c4509b6d")]
		public virtual EntityTypeInstance EntityTypeInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EntityTypeInstance)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityTypeInstanceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityTypeInstanceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EntityTypeInstanceCollection of a ObjectType
		/// <summary>
		/// Gets a list of EntityTypeInstanceCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<EntityTypeInstance> GetEntityTypeInstanceCollection(ObjectType element)
		{
			return new DslModeling::LinkedElementCollection<EntityTypeInstance>(element, EntityTypeDomainRoleId);
		}
		#endregion
		#region ObjectTypeInstance domain role override
		
		/// <summary>
		/// Gets the element playing EntityTypeInstance domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasObjectTypeInstance.ObjectTypeInstance
		/// </summary>
		public override ObjectTypeInstance ObjectTypeInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.EntityTypeInstance;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.EntityTypeInstance = (EntityTypeInstance)value;
			}
		}
		
		#endregion
		#region EntityType link accessor
		/// <summary>
		/// Get the list of EntityTypeHasEntityTypeInstance links to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasEntityTypeInstance> GetLinksToEntityTypeInstanceCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType entityTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasEntityTypeInstance>(entityTypeInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasEntityTypeInstance.EntityTypeDomainRoleId);
		}
		#endregion
		#region EntityTypeInstance link accessor
		/// <summary>
		/// Get the EntityTypeHasEntityTypeInstance link to a EntityTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasEntityTypeInstance GetLinkToEntityType (global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstance entityTypeInstanceInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasEntityTypeInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasEntityTypeInstance>(entityTypeInstanceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasEntityTypeInstance.EntityTypeInstanceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of EntityTypeInstance not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EntityTypeHasEntityTypeInstance instance accessors
		
		/// <summary>
		/// Get any EntityTypeHasEntityTypeInstance links between a given ObjectType and a EntityTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasEntityTypeInstance> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstance target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasEntityTypeInstance> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasEntityTypeInstance>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasEntityTypeInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasEntityTypeInstance>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasEntityTypeInstance.EntityTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasEntityTypeInstance link in links )
			{
				if ( target.Equals(link.EntityTypeInstance) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityTypeHasEntityTypeInstance link between a given ObjectTypeand a EntityTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasEntityTypeInstance GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstance target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasEntityTypeInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasEntityTypeInstance>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasEntityTypeInstance.EntityTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasEntityTypeInstance link in links )
			{
				if ( target.Equals(link.EntityTypeInstance) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship EntityTypeSubtypeHasEntityTypeSubtypeInstance
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeHasEntityTypeSubtypeInstance
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeHasEntityTypeSubtypeInstance.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeHasEntityTypeSubtypeInstance.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("7e059bd5-d4a9-48a1-88fa-6459b77d7e23")]
	public partial class EntityTypeSubtypeHasEntityTypeSubtypeInstance : ObjectTypeHasObjectTypeInstance
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityTypeSubtypeHasEntityTypeSubtypeInstance domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7e059bd5, 0xd4a9, 0x48a1, 0x88, 0xfa, 0x64, 0x59, 0xb7, 0x7d, 0x7e, 0x23);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityTypeSubtypeHasEntityTypeSubtypeInstance link in the same Partition as the given ObjectType
		/// </summary>
		/// <param name="source">ObjectType to use as the source of the relationship.</param>
		/// <param name="target">EntityTypeSubtypeInstance to use as the target of the relationship.</param>
		public EntityTypeSubtypeHasEntityTypeSubtypeInstance(ObjectType source, EntityTypeSubtypeInstance target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityTypeSubtypeHasEntityTypeSubtypeInstance.EntityTypeSubtypeDomainRoleId, source), new DslModeling::RoleAssignment(EntityTypeSubtypeHasEntityTypeSubtypeInstance.EntityTypeSubtypeInstanceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityTypeSubtypeHasEntityTypeSubtypeInstance(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityTypeSubtypeHasEntityTypeSubtypeInstance(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityTypeSubtypeHasEntityTypeSubtypeInstance(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityTypeSubtypeHasEntityTypeSubtypeInstance(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region EntityTypeSubtype domain role code
		
		/// <summary>
		/// EntityTypeSubtype domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityTypeSubtypeDomainRoleId = new global::System.Guid(0x0dade527, 0x8ad4, 0x4234, 0x9e, 0xf4, 0xf7, 0x8f, 0xd7, 0xd3, 0x60, 0xc2);
		
		/// <summary>
		/// DomainRole EntityTypeSubtype
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeHasEntityTypeSubtypeInstance.EntityTypeSubtype
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeHasEntityTypeSubtypeInstance/EntityTypeSubtype.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeHasEntityTypeSubtypeInstance/EntityTypeSubtype.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "EntityTypeSubtypeInstanceCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeHasEntityTypeSubtypeInstance/EntityTypeSubtype.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0dade527-8ad4-4234-9ef4-f78fd7d360c2")]
		public virtual ObjectType EntityTypeSubtype
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityTypeSubtypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityTypeSubtypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EntityTypeSubtype of a EntityTypeSubtypeInstance
		/// <summary>
		/// Gets EntityTypeSubtype.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ObjectType GetEntityTypeSubtype(EntityTypeSubtypeInstance element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EntityTypeSubtypeInstanceDomainRoleId) as ObjectType;
		}
		
		/// <summary>
		/// Sets EntityTypeSubtype.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEntityTypeSubtype(EntityTypeSubtypeInstance element, ObjectType newEntityTypeSubtype)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EntityTypeSubtypeInstanceDomainRoleId, newEntityTypeSubtype);
		}
		#endregion
		#region ObjectType domain role override
		
		/// <summary>
		/// Gets the element playing EntityTypeSubtype domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasObjectTypeInstance.ObjectType
		/// </summary>
		public override ObjectType ObjectType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.EntityTypeSubtype;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.EntityTypeSubtype = value;
			}
		}
		
		#endregion
		#region EntityTypeSubtypeInstance domain role code
		
		/// <summary>
		/// EntityTypeSubtypeInstance domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityTypeSubtypeInstanceDomainRoleId = new global::System.Guid(0x9a51223a, 0x5d4d, 0x4e86, 0xbb, 0x76, 0xa4, 0x9f, 0x28, 0xde, 0xe7, 0x1d);
		
		/// <summary>
		/// DomainRole EntityTypeSubtypeInstance
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeHasEntityTypeSubtypeInstance.EntityTypeSubtypeInstance
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeHasEntityTypeSubtypeInstance/EntityTypeSubtypeInstance.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeHasEntityTypeSubtypeInstance/EntityTypeSubtypeInstance.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "EntityTypeSubtype", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeHasEntityTypeSubtypeInstance/EntityTypeSubtypeInstance.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("9a51223a-5d4d-4e86-bb76-a49f28dee71d")]
		public virtual EntityTypeSubtypeInstance EntityTypeSubtypeInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EntityTypeSubtypeInstance)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityTypeSubtypeInstanceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityTypeSubtypeInstanceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EntityTypeSubtypeInstanceCollection of a ObjectType
		/// <summary>
		/// Gets a list of EntityTypeSubtypeInstanceCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<EntityTypeSubtypeInstance> GetEntityTypeSubtypeInstanceCollection(ObjectType element)
		{
			return new DslModeling::LinkedElementCollection<EntityTypeSubtypeInstance>(element, EntityTypeSubtypeDomainRoleId);
		}
		#endregion
		#region ObjectTypeInstance domain role override
		
		/// <summary>
		/// Gets the element playing EntityTypeSubtypeInstance domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasObjectTypeInstance.ObjectTypeInstance
		/// </summary>
		public override ObjectTypeInstance ObjectTypeInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.EntityTypeSubtypeInstance;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.EntityTypeSubtypeInstance = (EntityTypeSubtypeInstance)value;
			}
		}
		
		#endregion
		#region EntityTypeSubtype link accessor
		/// <summary>
		/// Get the list of EntityTypeSubtypeHasEntityTypeSubtypeInstance links to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeHasEntityTypeSubtypeInstance> GetLinksToEntityTypeSubtypeInstanceCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType entityTypeSubtypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeHasEntityTypeSubtypeInstance>(entityTypeSubtypeInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeHasEntityTypeSubtypeInstance.EntityTypeSubtypeDomainRoleId);
		}
		#endregion
		#region EntityTypeSubtypeInstance link accessor
		/// <summary>
		/// Get the EntityTypeSubtypeHasEntityTypeSubtypeInstance link to a EntityTypeSubtypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeHasEntityTypeSubtypeInstance GetLinkToEntityTypeSubtype (global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeInstance entityTypeSubtypeInstanceInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeHasEntityTypeSubtypeInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeHasEntityTypeSubtypeInstance>(entityTypeSubtypeInstanceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeHasEntityTypeSubtypeInstance.EntityTypeSubtypeInstanceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of EntityTypeSubtypeInstance not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EntityTypeSubtypeHasEntityTypeSubtypeInstance instance accessors
		
		/// <summary>
		/// Get any EntityTypeSubtypeHasEntityTypeSubtypeInstance links between a given ObjectType and a EntityTypeSubtypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeHasEntityTypeSubtypeInstance> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeInstance target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeHasEntityTypeSubtypeInstance> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeHasEntityTypeSubtypeInstance>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeHasEntityTypeSubtypeInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeHasEntityTypeSubtypeInstance>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeHasEntityTypeSubtypeInstance.EntityTypeSubtypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeHasEntityTypeSubtypeInstance link in links )
			{
				if ( target.Equals(link.EntityTypeSubtypeInstance) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityTypeSubtypeHasEntityTypeSubtypeInstance link between a given ObjectTypeand a EntityTypeSubtypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeHasEntityTypeSubtypeInstance GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeInstance target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeHasEntityTypeSubtypeInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeHasEntityTypeSubtypeInstance>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeHasEntityTypeSubtypeInstance.EntityTypeSubtypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeHasEntityTypeSubtypeInstance link in links )
			{
				if ( target.Equals(link.EntityTypeSubtypeInstance) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ValueTypeHasValueTypeInstance
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueTypeInstance
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueTypeInstance.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueTypeInstance.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("e01b8ec6-f3bf-4963-92db-7e352501c04d")]
	public partial class ValueTypeHasValueTypeInstance : ObjectTypeHasObjectTypeInstance
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ValueTypeHasValueTypeInstance domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe01b8ec6, 0xf3bf, 0x4963, 0x92, 0xdb, 0x7e, 0x35, 0x25, 0x01, 0xc0, 0x4d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ValueTypeHasValueTypeInstance link in the same Partition as the given ObjectType
		/// </summary>
		/// <param name="source">ObjectType to use as the source of the relationship.</param>
		/// <param name="target">ValueTypeInstance to use as the target of the relationship.</param>
		public ValueTypeHasValueTypeInstance(ObjectType source, ValueTypeInstance target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ValueTypeHasValueTypeInstance.ValueTypeDomainRoleId, source), new DslModeling::RoleAssignment(ValueTypeHasValueTypeInstance.ValueTypeInstanceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ValueTypeHasValueTypeInstance(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ValueTypeHasValueTypeInstance(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ValueTypeHasValueTypeInstance(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ValueTypeHasValueTypeInstance(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ValueType domain role code
		
		/// <summary>
		/// ValueType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ValueTypeDomainRoleId = new global::System.Guid(0x9558751b, 0x6ae9, 0x424d, 0x8b, 0x62, 0x66, 0xb7, 0x1f, 0x01, 0xa2, 0x07);
		
		/// <summary>
		/// DomainRole ValueType
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueTypeInstance.ValueType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueTypeInstance/ValueType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueTypeInstance/ValueType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ValueTypeInstanceCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueTypeInstance/ValueType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("9558751b-6ae9-424d-8b62-66b71f01a207")]
		public virtual ObjectType ValueType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ValueTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ValueTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ValueType of a ValueTypeInstance
		/// <summary>
		/// Gets ValueType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ObjectType GetValueType(ValueTypeInstance element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ValueTypeInstanceDomainRoleId) as ObjectType;
		}
		
		/// <summary>
		/// Sets ValueType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetValueType(ValueTypeInstance element, ObjectType newValueType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ValueTypeInstanceDomainRoleId, newValueType);
		}
		#endregion
		#region ObjectType domain role override
		
		/// <summary>
		/// Gets the element playing ValueType domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasObjectTypeInstance.ObjectType
		/// </summary>
		public override ObjectType ObjectType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ValueType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ValueType = value;
			}
		}
		
		#endregion
		#region ValueTypeInstance domain role code
		
		/// <summary>
		/// ValueTypeInstance domain role Id.
		/// </summary>
		public static readonly global::System.Guid ValueTypeInstanceDomainRoleId = new global::System.Guid(0x17da5f43, 0x028e, 0x4f9b, 0x8e, 0x91, 0x10, 0x5d, 0xbf, 0x10, 0xae, 0xe3);
		
		/// <summary>
		/// DomainRole ValueTypeInstance
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueTypeInstance.ValueTypeInstance
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueTypeInstance/ValueTypeInstance.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueTypeInstance/ValueTypeInstance.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ValueType", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueTypeInstance/ValueTypeInstance.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("17da5f43-028e-4f9b-8e91-105dbf10aee3")]
		public virtual ValueTypeInstance ValueTypeInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ValueTypeInstance)DslModeling::DomainRoleInfo.GetRolePlayer(this, ValueTypeInstanceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ValueTypeInstanceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ValueTypeInstanceCollection of a ObjectType
		/// <summary>
		/// Gets a list of ValueTypeInstanceCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ValueTypeInstance> GetValueTypeInstanceCollection(ObjectType element)
		{
			return new DslModeling::LinkedElementCollection<ValueTypeInstance>(element, ValueTypeDomainRoleId);
		}
		#endregion
		#region ObjectTypeInstance domain role override
		
		/// <summary>
		/// Gets the element playing ValueTypeInstance domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasObjectTypeInstance.ObjectTypeInstance
		/// </summary>
		public override ObjectTypeInstance ObjectTypeInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ValueTypeInstance;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ValueTypeInstance = (ValueTypeInstance)value;
			}
		}
		
		#endregion
		#region ValueType link accessor
		/// <summary>
		/// Get the list of ValueTypeHasValueTypeInstance links to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueTypeInstance> GetLinksToValueTypeInstanceCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType valueTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueTypeInstance>(valueTypeInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueTypeInstance.ValueTypeDomainRoleId);
		}
		#endregion
		#region ValueTypeInstance link accessor
		/// <summary>
		/// Get the ValueTypeHasValueTypeInstance link to a ValueTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueTypeInstance GetLinkToValueType (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeInstance valueTypeInstanceInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueTypeInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueTypeInstance>(valueTypeInstanceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueTypeInstance.ValueTypeInstanceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ValueTypeInstance not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ValueTypeHasValueTypeInstance instance accessors
		
		/// <summary>
		/// Get any ValueTypeHasValueTypeInstance links between a given ObjectType and a ValueTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueTypeInstance> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeInstance target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueTypeInstance> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueTypeInstance>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueTypeInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueTypeInstance>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueTypeInstance.ValueTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueTypeInstance link in links )
			{
				if ( target.Equals(link.ValueTypeInstance) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ValueTypeHasValueTypeInstance link between a given ObjectTypeand a ValueTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueTypeInstance GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeInstance target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueTypeInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueTypeInstance>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueTypeInstance.ValueTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueTypeInstance link in links )
			{
				if ( target.Equals(link.ValueTypeInstance) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship RoleInstance
	/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstance
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstance.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstance.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("d3162c67-de52-4b0d-802f-824e6ed5b74b")]
	public abstract partial class RoleInstance : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RoleInstance domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd3162c67, 0xde52, 0x4b0d, 0x80, 0x2f, 0x82, 0x4e, 0x6e, 0xd5, 0xb7, 0x4b);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">The Partition instance containing this ElementLink</param>
		/// <param name="roleAssignments">A set of role assignments for roleplayer initialization</param>
		/// <param name="propertyAssignments">A set of attribute assignments for attribute initialization</param>
		protected RoleInstance(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Role domain role code
		
		/// <summary>
		/// Role domain role Id.
		/// </summary>
		public static readonly global::System.Guid RoleDomainRoleId = new global::System.Guid(0xc927c1aa, 0x2e2d, 0x41cf, 0x9d, 0x87, 0x0a, 0x69, 0xa6, 0x3f, 0x3e, 0x99);
		
		/// <summary>
		/// DomainRole Role
		/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstance.Role
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstance/Role.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstance/Role.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ObjectTypeInstanceCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstance/Role.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c927c1aa-2e2d-41cf-9d87-0a69a63f3e99")]
		public abstract Role Role
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access RoleCollection of a ObjectTypeInstance
		/// <summary>
		/// Gets a list of RoleCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<Role> GetRoleCollection(ObjectTypeInstance element)
		{
			return new DslModeling::ReadOnlyLinkedElementCollection<Role>(element, ObjectTypeInstanceDomainRoleId);
		}
		#endregion
		#region ObjectTypeInstance domain role code
		
		/// <summary>
		/// ObjectTypeInstance domain role Id.
		/// </summary>
		public static readonly global::System.Guid ObjectTypeInstanceDomainRoleId = new global::System.Guid(0x7e4356d2, 0x05d5, 0x4194, 0xbd, 0xbc, 0xf5, 0xb9, 0x6d, 0x22, 0xe4, 0x19);
		
		/// <summary>
		/// DomainRole ObjectTypeInstance
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstance.ObjectTypeInstance
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstance/ObjectTypeInstance.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstance/ObjectTypeInstance.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "RoleCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstance/ObjectTypeInstance.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("7e4356d2-05d5-4194-bdbc-f5b96d22e419")]
		public abstract ObjectTypeInstance ObjectTypeInstance
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access ObjectTypeInstanceCollection of a Role
		/// <summary>
		/// Gets a list of ObjectTypeInstanceCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<ObjectTypeInstance> GetObjectTypeInstanceCollection(Role element)
		{
			return new DslModeling::ReadOnlyLinkedElementCollection<ObjectTypeInstance>(element, RoleDomainRoleId);
		}
		#endregion
		#region Accessors for roles that this REL plays in other RELs
		#region PopulationUniquenessError opposite domain role accessor
		/// <summary>
		/// Gets or sets PopulationUniquenessError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstanceHasPopulationUniquenessError.RoleInstance
		/// </summary>
		public virtual PopulationUniquenessError PopulationUniquenessError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstanceHasPopulationUniquenessError.RoleInstanceDomainRoleId) as PopulationUniquenessError;
			}
		}
		#endregion
		#endregion
		#region Role link accessor
		/// <summary>
		/// Get the list of RoleInstance links to a Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstance> GetLinksToObjectTypeInstanceCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.Role roleInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstance>(roleInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstance.RoleDomainRoleId);
		}
		#endregion
		#region ObjectTypeInstance link accessor
		/// <summary>
		/// Get the list of RoleInstance links to a ObjectTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstance> GetLinksToRoleCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstance objectTypeInstanceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstance>(objectTypeInstanceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstance.ObjectTypeInstanceDomainRoleId);
		}
		#endregion
		#region RoleInstance instance accessors
		
		/// <summary>
		/// Get any RoleInstance links between a given Role and a ObjectTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstance> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.Role source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstance target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstance> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstance>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstance>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstance.RoleDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstance link in links )
			{
				if ( target.Equals(link.ObjectTypeInstance) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship EntityTypeRoleInstance
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstance
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstance.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstance.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("5db3a2c1-c5de-4c4a-97c2-e09ce11537d3")]
	public partial class EntityTypeRoleInstance : RoleInstance
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityTypeRoleInstance domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5db3a2c1, 0xc5de, 0x4c4a, 0x97, 0xc2, 0xe0, 0x9c, 0xe1, 0x15, 0x37, 0xd3);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityTypeRoleInstance link in the same Partition as the given Role
		/// </summary>
		/// <param name="source">Role to use as the source of the relationship.</param>
		/// <param name="target">ObjectTypeInstance to use as the target of the relationship.</param>
		public EntityTypeRoleInstance(Role source, ObjectTypeInstance target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityTypeRoleInstance.RoleDomainRoleId, source), new DslModeling::RoleAssignment(EntityTypeRoleInstance.ObjectTypeInstanceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityTypeRoleInstance(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityTypeRoleInstance(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityTypeRoleInstance(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityTypeRoleInstance(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Role domain role code
		
		/// <summary>
		/// Role domain role Id.
		/// </summary>
		public static readonly new global::System.Guid RoleDomainRoleId = new global::System.Guid(0x26d1bf78, 0xfc2b, 0x4d86, 0xbd, 0xb3, 0xc1, 0x85, 0xfe, 0x44, 0x3d, 0xac);
		
		/// <summary>
		/// DomainRole Role
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstance.Role
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstance/Role.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstance/Role.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ObjectTypeInstanceCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstance/Role.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("26d1bf78-fc2b-4d86-bdb3-c185fe443dac")]
		public override Role Role
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Role)DslModeling::DomainRoleInfo.GetRolePlayer(this, RoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RoleCollection of a ObjectTypeInstance
		/// <summary>
		/// Gets a list of RoleCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new DslModeling::LinkedElementCollection<Role> GetRoleCollection(ObjectTypeInstance element)
		{
			return new DslModeling::LinkedElementCollection<Role>(element, ObjectTypeInstanceDomainRoleId);
		}
		#endregion
		#region ObjectTypeInstance domain role code
		
		/// <summary>
		/// ObjectTypeInstance domain role Id.
		/// </summary>
		public static readonly new global::System.Guid ObjectTypeInstanceDomainRoleId = new global::System.Guid(0xb24b068f, 0xbf3c, 0x4d4a, 0x95, 0x69, 0x03, 0x05, 0xf9, 0xb5, 0xaa, 0x7e);
		
		/// <summary>
		/// DomainRole ObjectTypeInstance
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstance.ObjectTypeInstance
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstance/ObjectTypeInstance.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstance/ObjectTypeInstance.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "RoleCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstance/ObjectTypeInstance.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("b24b068f-bf3c-4d4a-9569-0305f9b5aa7e")]
		public override ObjectTypeInstance ObjectTypeInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectTypeInstance)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjectTypeInstanceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjectTypeInstanceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ObjectTypeInstanceCollection of a Role
		/// <summary>
		/// Gets a list of ObjectTypeInstanceCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new DslModeling::LinkedElementCollection<ObjectTypeInstance> GetObjectTypeInstanceCollection(Role element)
		{
			return new DslModeling::LinkedElementCollection<ObjectTypeInstance>(element, RoleDomainRoleId);
		}
		#endregion
		#region Accessors for roles that this REL plays in other RELs
		#region PopulationUniquenessError opposite domain role accessor
		/// <summary>
		/// Gets or sets PopulationUniquenessError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError.RoleInstance
		/// </summary>
		public virtual new PopulationUniquenessError PopulationUniquenessError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError.RoleInstanceDomainRoleId) as PopulationUniquenessError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError.RoleInstanceDomainRoleId, value);
			}
		}
		#endregion
		#region EntityTypeInstance opposite domain role accessor
		/// <summary>
		/// Gets or sets EntityTypeInstance.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasRoleInstance.RoleInstance
		/// </summary>
		public virtual EntityTypeInstance EntityTypeInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasRoleInstance.RoleInstanceDomainRoleId) as EntityTypeInstance;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasRoleInstance.RoleInstanceDomainRoleId, value);
			}
		}
		#endregion
		#endregion
		#region Role link accessor
		/// <summary>
		/// Get the list of EntityTypeRoleInstance links to a Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstance> GetLinksToObjectTypeInstanceCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.Role roleInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstance>(roleInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstance.RoleDomainRoleId);
		}
		#endregion
		#region ObjectTypeInstance link accessor
		/// <summary>
		/// Get the list of EntityTypeRoleInstance links to a ObjectTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstance> GetLinksToRoleCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstance objectTypeInstanceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstance>(objectTypeInstanceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstance.ObjectTypeInstanceDomainRoleId);
		}
		#endregion
		#region EntityTypeRoleInstance instance accessors
		
		/// <summary>
		/// Get any EntityTypeRoleInstance links between a given Role and a ObjectTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstance> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.Role source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstance target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstance> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstance>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstance>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstance.RoleDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstance link in links )
			{
				if ( target.Equals(link.ObjectTypeInstance) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship FactTypeRoleInstance
	/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstance
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstance.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstance.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("fc7c9715-6886-46c2-a7a0-3bfd95cd0766")]
	public partial class FactTypeRoleInstance : RoleInstance
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FactTypeRoleInstance domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfc7c9715, 0x6886, 0x46c2, 0xa7, 0xa0, 0x3b, 0xfd, 0x95, 0xcd, 0x07, 0x66);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FactTypeRoleInstance link in the same Partition as the given Role
		/// </summary>
		/// <param name="source">Role to use as the source of the relationship.</param>
		/// <param name="target">ObjectTypeInstance to use as the target of the relationship.</param>
		public FactTypeRoleInstance(Role source, ObjectTypeInstance target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FactTypeRoleInstance.RoleDomainRoleId, source), new DslModeling::RoleAssignment(FactTypeRoleInstance.ObjectTypeInstanceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeRoleInstance(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeRoleInstance(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeRoleInstance(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeRoleInstance(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Role domain role code
		
		/// <summary>
		/// Role domain role Id.
		/// </summary>
		public static readonly new global::System.Guid RoleDomainRoleId = new global::System.Guid(0xbdeb47fc, 0xdd0a, 0x4509, 0x92, 0x69, 0x2e, 0xa5, 0xc1, 0x96, 0xf6, 0x8f);
		
		/// <summary>
		/// DomainRole Role
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstance.Role
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstance/Role.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstance/Role.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ObjectTypeInstanceCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstance/Role.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("bdeb47fc-dd0a-4509-9269-2ea5c196f68f")]
		public override Role Role
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Role)DslModeling::DomainRoleInfo.GetRolePlayer(this, RoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RoleCollection of a ObjectTypeInstance
		/// <summary>
		/// Gets a list of RoleCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new DslModeling::LinkedElementCollection<Role> GetRoleCollection(ObjectTypeInstance element)
		{
			return new DslModeling::LinkedElementCollection<Role>(element, ObjectTypeInstanceDomainRoleId);
		}
		#endregion
		#region ObjectTypeInstance domain role code
		
		/// <summary>
		/// ObjectTypeInstance domain role Id.
		/// </summary>
		public static readonly new global::System.Guid ObjectTypeInstanceDomainRoleId = new global::System.Guid(0x2cde9b25, 0x54c8, 0x42b6, 0xa5, 0x4f, 0x61, 0x21, 0x03, 0x45, 0xe9, 0xa0);
		
		/// <summary>
		/// DomainRole ObjectTypeInstance
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstance.ObjectTypeInstance
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstance/ObjectTypeInstance.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstance/ObjectTypeInstance.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "RoleCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstance/ObjectTypeInstance.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("2cde9b25-54c8-42b6-a54f-61210345e9a0")]
		public override ObjectTypeInstance ObjectTypeInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectTypeInstance)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjectTypeInstanceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjectTypeInstanceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ObjectTypeInstanceCollection of a Role
		/// <summary>
		/// Gets a list of ObjectTypeInstanceCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new DslModeling::LinkedElementCollection<ObjectTypeInstance> GetObjectTypeInstanceCollection(Role element)
		{
			return new DslModeling::LinkedElementCollection<ObjectTypeInstance>(element, RoleDomainRoleId);
		}
		#endregion
		#region Accessors for roles that this REL plays in other RELs
		#region PopulationUniquenessError opposite domain role accessor
		/// <summary>
		/// Gets or sets PopulationUniquenessError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError.RoleInstance
		/// </summary>
		public virtual new PopulationUniquenessError PopulationUniquenessError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError.RoleInstanceDomainRoleId) as PopulationUniquenessError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError.RoleInstanceDomainRoleId, value);
			}
		}
		#endregion
		#region FactTypeInstance opposite domain role accessor
		/// <summary>
		/// Gets or sets FactTypeInstance.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasRoleInstance.RoleInstance
		/// </summary>
		public virtual FactTypeInstance FactTypeInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasRoleInstance.RoleInstanceDomainRoleId) as FactTypeInstance;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasRoleInstance.RoleInstanceDomainRoleId, value);
			}
		}
		#endregion
		#endregion
		#region Role link accessor
		/// <summary>
		/// Get the list of FactTypeRoleInstance links to a Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstance> GetLinksToObjectTypeInstanceCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.Role roleInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstance>(roleInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstance.RoleDomainRoleId);
		}
		#endregion
		#region ObjectTypeInstance link accessor
		/// <summary>
		/// Get the list of FactTypeRoleInstance links to a ObjectTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstance> GetLinksToRoleCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstance objectTypeInstanceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstance>(objectTypeInstanceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstance.ObjectTypeInstanceDomainRoleId);
		}
		#endregion
		#region FactTypeRoleInstance instance accessors
		
		/// <summary>
		/// Get any FactTypeRoleInstance links between a given Role and a ObjectTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstance> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.Role source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstance target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstance> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstance>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstance>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstance.RoleDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstance link in links )
			{
				if ( target.Equals(link.ObjectTypeInstance) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship EntityTypeInstanceHasRoleInstance
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasRoleInstance
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasRoleInstance.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasRoleInstance.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("05c64570-96fe-42c4-b9a6-f88d3bdc7c1f")]
	public partial class EntityTypeInstanceHasRoleInstance : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityTypeInstanceHasRoleInstance domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x05c64570, 0x96fe, 0x42c4, 0xb9, 0xa6, 0xf8, 0x8d, 0x3b, 0xdc, 0x7c, 0x1f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityTypeInstanceHasRoleInstance link in the same Partition as the given EntityTypeInstance
		/// </summary>
		/// <param name="source">EntityTypeInstance to use as the source of the relationship.</param>
		/// <param name="target">EntityTypeRoleInstance to use as the target of the relationship.</param>
		public EntityTypeInstanceHasRoleInstance(EntityTypeInstance source, EntityTypeRoleInstance target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityTypeInstanceHasRoleInstance.EntityTypeInstanceDomainRoleId, source), new DslModeling::RoleAssignment(EntityTypeInstanceHasRoleInstance.RoleInstanceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityTypeInstanceHasRoleInstance(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityTypeInstanceHasRoleInstance(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityTypeInstanceHasRoleInstance(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityTypeInstanceHasRoleInstance(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region EntityTypeInstance domain role code
		
		/// <summary>
		/// EntityTypeInstance domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityTypeInstanceDomainRoleId = new global::System.Guid(0x9997c315, 0x3b87, 0x4533, 0xa4, 0x5f, 0xc6, 0x2a, 0xfa, 0x68, 0x64, 0x7c);
		
		/// <summary>
		/// DomainRole EntityTypeInstance
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasRoleInstance.EntityTypeInstance
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasRoleInstance/EntityTypeInstance.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasRoleInstance/EntityTypeInstance.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "RoleInstanceCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasRoleInstance/EntityTypeInstance.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("9997c315-3b87-4533-a45f-c62afa68647c")]
		public virtual EntityTypeInstance EntityTypeInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EntityTypeInstance)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityTypeInstanceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityTypeInstanceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EntityTypeInstance of a EntityTypeRoleInstance
		/// <summary>
		/// Gets EntityTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static EntityTypeInstance GetEntityTypeInstance(EntityTypeRoleInstance element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RoleInstanceDomainRoleId) as EntityTypeInstance;
		}
		
		/// <summary>
		/// Sets EntityTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEntityTypeInstance(EntityTypeRoleInstance element, EntityTypeInstance newEntityTypeInstance)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RoleInstanceDomainRoleId, newEntityTypeInstance);
		}
		#endregion
		#region RoleInstance domain role code
		
		/// <summary>
		/// RoleInstance domain role Id.
		/// </summary>
		public static readonly global::System.Guid RoleInstanceDomainRoleId = new global::System.Guid(0xc85848f4, 0x9e45, 0x44e7, 0xaa, 0xaf, 0x5e, 0x63, 0x2c, 0xab, 0x6d, 0x09);
		
		/// <summary>
		/// DomainRole RoleInstance
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasRoleInstance.RoleInstance
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasRoleInstance/RoleInstance.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasRoleInstance/RoleInstance.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "EntityTypeInstance", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasRoleInstance/RoleInstance.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("c85848f4-9e45-44e7-aaaf-5e632cab6d09")]
		public virtual EntityTypeRoleInstance RoleInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EntityTypeRoleInstance)DslModeling::DomainRoleInfo.GetRolePlayer(this, RoleInstanceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RoleInstanceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RoleInstanceCollection of a EntityTypeInstance
		/// <summary>
		/// Gets a list of RoleInstanceCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<EntityTypeRoleInstance> GetRoleInstanceCollection(EntityTypeInstance element)
		{
			return new DslModeling::LinkedElementCollection<EntityTypeRoleInstance>(element, EntityTypeInstanceDomainRoleId);
		}
		#endregion
		#region EntityTypeInstance link accessor
		/// <summary>
		/// Get the list of EntityTypeInstanceHasRoleInstance links to a EntityTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasRoleInstance> GetLinksToRoleInstanceCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstance entityTypeInstanceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasRoleInstance>(entityTypeInstanceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasRoleInstance.EntityTypeInstanceDomainRoleId);
		}
		#endregion
		#region RoleInstance link accessor
		/// <summary>
		/// Get the EntityTypeInstanceHasRoleInstance link to a EntityTypeRoleInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasRoleInstance GetLinkToEntityTypeInstance (global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstance roleInstanceInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasRoleInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasRoleInstance>(roleInstanceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasRoleInstance.RoleInstanceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of RoleInstance not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EntityTypeInstanceHasRoleInstance instance accessors
		
		/// <summary>
		/// Get any EntityTypeInstanceHasRoleInstance links between a given EntityTypeInstance and a EntityTypeRoleInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasRoleInstance> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstance source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstance target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasRoleInstance> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasRoleInstance>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasRoleInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasRoleInstance>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasRoleInstance.EntityTypeInstanceDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasRoleInstance link in links )
			{
				if ( target.Equals(link.RoleInstance) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityTypeInstanceHasRoleInstance link between a given EntityTypeInstanceand a EntityTypeRoleInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasRoleInstance GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstance source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstance target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasRoleInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasRoleInstance>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasRoleInstance.EntityTypeInstanceDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasRoleInstance link in links )
			{
				if ( target.Equals(link.RoleInstance) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship EntityTypeSubtypeInstanceHasSupertypeInstance
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeInstanceHasSupertypeInstance
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeInstanceHasSupertypeInstance.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeInstanceHasSupertypeInstance.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("f11d087f-8b5b-4ac9-9b67-f967d5a5013e")]
	public partial class EntityTypeSubtypeInstanceHasSupertypeInstance : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityTypeSubtypeInstanceHasSupertypeInstance domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf11d087f, 0x8b5b, 0x4ac9, 0x9b, 0x67, 0xf9, 0x67, 0xd5, 0xa5, 0x01, 0x3e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityTypeSubtypeInstanceHasSupertypeInstance link in the same Partition as the given EntityTypeSubtypeInstance
		/// </summary>
		/// <param name="source">EntityTypeSubtypeInstance to use as the source of the relationship.</param>
		/// <param name="target">EntityTypeInstance to use as the target of the relationship.</param>
		public EntityTypeSubtypeInstanceHasSupertypeInstance(EntityTypeSubtypeInstance source, EntityTypeInstance target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityTypeSubtypeInstanceHasSupertypeInstance.EntityTypeSubtypeInstanceDomainRoleId, source), new DslModeling::RoleAssignment(EntityTypeSubtypeInstanceHasSupertypeInstance.SupertypeInstanceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityTypeSubtypeInstanceHasSupertypeInstance(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityTypeSubtypeInstanceHasSupertypeInstance(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityTypeSubtypeInstanceHasSupertypeInstance(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityTypeSubtypeInstanceHasSupertypeInstance(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region EntityTypeSubtypeInstance domain role code
		
		/// <summary>
		/// EntityTypeSubtypeInstance domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityTypeSubtypeInstanceDomainRoleId = new global::System.Guid(0x23f6cec5, 0xe016, 0x40ad, 0xa4, 0xd2, 0xb6, 0x84, 0xa9, 0xca, 0x02, 0x31);
		
		/// <summary>
		/// DomainRole EntityTypeSubtypeInstance
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeInstanceHasSupertypeInstance.EntityTypeSubtypeInstance
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeInstanceHasSupertypeInstance/EntityTypeSubtypeInstance.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeInstanceHasSupertypeInstance/EntityTypeSubtypeInstance.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "SupertypeInstance", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeInstanceHasSupertypeInstance/EntityTypeSubtypeInstance.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("23f6cec5-e016-40ad-a4d2-b684a9ca0231")]
		public virtual EntityTypeSubtypeInstance EntityTypeSubtypeInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EntityTypeSubtypeInstance)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityTypeSubtypeInstanceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityTypeSubtypeInstanceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EntityTypeSubtypeInstanceCollection of a EntityTypeInstance
		/// <summary>
		/// Gets a list of EntityTypeSubtypeInstanceCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<EntityTypeSubtypeInstance> GetEntityTypeSubtypeInstanceCollection(EntityTypeInstance element)
		{
			return new DslModeling::LinkedElementCollection<EntityTypeSubtypeInstance>(element, SupertypeInstanceDomainRoleId);
		}
		#endregion
		#region SupertypeInstance domain role code
		
		/// <summary>
		/// SupertypeInstance domain role Id.
		/// </summary>
		public static readonly global::System.Guid SupertypeInstanceDomainRoleId = new global::System.Guid(0xbc2cd94c, 0xd143, 0x4676, 0x80, 0x36, 0xd4, 0x09, 0x4a, 0x61, 0xb9, 0x70);
		
		/// <summary>
		/// DomainRole SupertypeInstance
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeInstanceHasSupertypeInstance.SupertypeInstance
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeInstanceHasSupertypeInstance/SupertypeInstance.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeInstanceHasSupertypeInstance/SupertypeInstance.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "EntityTypeSubtypeInstanceCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeInstanceHasSupertypeInstance/SupertypeInstance.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("bc2cd94c-d143-4676-8036-d4094a61b970")]
		public virtual EntityTypeInstance SupertypeInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EntityTypeInstance)DslModeling::DomainRoleInfo.GetRolePlayer(this, SupertypeInstanceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SupertypeInstanceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SupertypeInstance of a EntityTypeSubtypeInstance
		/// <summary>
		/// Gets SupertypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static EntityTypeInstance GetSupertypeInstance(EntityTypeSubtypeInstance element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EntityTypeSubtypeInstanceDomainRoleId) as EntityTypeInstance;
		}
		
		/// <summary>
		/// Sets SupertypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSupertypeInstance(EntityTypeSubtypeInstance element, EntityTypeInstance newSupertypeInstance)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EntityTypeSubtypeInstanceDomainRoleId, newSupertypeInstance);
		}
		#endregion
		#region EntityTypeSubtypeInstance link accessor
		/// <summary>
		/// Get the EntityTypeSubtypeInstanceHasSupertypeInstance link to a EntityTypeSubtypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeInstanceHasSupertypeInstance GetLinkToSupertypeInstance (global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeInstance entityTypeSubtypeInstanceInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeInstanceHasSupertypeInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeInstanceHasSupertypeInstance>(entityTypeSubtypeInstanceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeInstanceHasSupertypeInstance.EntityTypeSubtypeInstanceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of EntityTypeSubtypeInstance not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SupertypeInstance link accessor
		/// <summary>
		/// Get the list of EntityTypeSubtypeInstanceHasSupertypeInstance links to a EntityTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeInstanceHasSupertypeInstance> GetLinksToEntityTypeSubtypeInstanceCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstance supertypeInstanceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeInstanceHasSupertypeInstance>(supertypeInstanceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeInstanceHasSupertypeInstance.SupertypeInstanceDomainRoleId);
		}
		#endregion
		#region EntityTypeSubtypeInstanceHasSupertypeInstance instance accessors
		
		/// <summary>
		/// Get any EntityTypeSubtypeInstanceHasSupertypeInstance links between a given EntityTypeSubtypeInstance and a EntityTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeInstanceHasSupertypeInstance> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeInstance source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstance target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeInstanceHasSupertypeInstance> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeInstanceHasSupertypeInstance>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeInstanceHasSupertypeInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeInstanceHasSupertypeInstance>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeInstanceHasSupertypeInstance.EntityTypeSubtypeInstanceDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeInstanceHasSupertypeInstance link in links )
			{
				if ( target.Equals(link.SupertypeInstance) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityTypeSubtypeInstanceHasSupertypeInstance link between a given EntityTypeSubtypeInstanceand a EntityTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeInstanceHasSupertypeInstance GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeInstance source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstance target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeInstanceHasSupertypeInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeInstanceHasSupertypeInstance>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeInstanceHasSupertypeInstance.EntityTypeSubtypeInstanceDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeInstanceHasSupertypeInstance link in links )
			{
				if ( target.Equals(link.SupertypeInstance) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship FactTypeHasFactTypeInstance
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeInstance
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeInstance.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeInstance.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("5283f53b-0da8-4e4c-8a31-bde51057e7ef")]
	public partial class FactTypeHasFactTypeInstance : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FactTypeHasFactTypeInstance domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5283f53b, 0x0da8, 0x4e4c, 0x8a, 0x31, 0xbd, 0xe5, 0x10, 0x57, 0xe7, 0xef);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FactTypeHasFactTypeInstance link in the same Partition as the given FactType
		/// </summary>
		/// <param name="source">FactType to use as the source of the relationship.</param>
		/// <param name="target">FactTypeInstance to use as the target of the relationship.</param>
		public FactTypeHasFactTypeInstance(FactType source, FactTypeInstance target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FactTypeHasFactTypeInstance.FactTypeDomainRoleId, source), new DslModeling::RoleAssignment(FactTypeHasFactTypeInstance.FactTypeInstanceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeHasFactTypeInstance(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeHasFactTypeInstance(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeHasFactTypeInstance(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeHasFactTypeInstance(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region FactType domain role code
		
		/// <summary>
		/// FactType domain role Id.
		/// </summary>
		public static readonly global::System.Guid FactTypeDomainRoleId = new global::System.Guid(0x4690eaff, 0x667b, 0x4aa6, 0x93, 0xed, 0x94, 0x87, 0xe1, 0x09, 0xc7, 0xbc);
		
		/// <summary>
		/// DomainRole FactType
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeInstance.FactType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeInstance/FactType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeInstance/FactType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "FactTypeInstanceCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeInstance/FactType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("4690eaff-667b-4aa6-93ed-9487e109c7bc")]
		public virtual FactType FactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FactType)DslModeling::DomainRoleInfo.GetRolePlayer(this, FactTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FactTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FactType of a FactTypeInstance
		/// <summary>
		/// Gets FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FactType GetFactType(FactTypeInstance element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FactTypeInstanceDomainRoleId) as FactType;
		}
		
		/// <summary>
		/// Sets FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFactType(FactTypeInstance element, FactType newFactType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FactTypeInstanceDomainRoleId, newFactType);
		}
		#endregion
		#region FactTypeInstance domain role code
		
		/// <summary>
		/// FactTypeInstance domain role Id.
		/// </summary>
		public static readonly global::System.Guid FactTypeInstanceDomainRoleId = new global::System.Guid(0xe2961a99, 0x6eb7, 0x45d5, 0x9e, 0xaf, 0xec, 0x1c, 0x39, 0xfd, 0x02, 0x6b);
		
		/// <summary>
		/// DomainRole FactTypeInstance
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeInstance.FactTypeInstance
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeInstance/FactTypeInstance.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeInstance/FactTypeInstance.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FactType", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeInstance/FactTypeInstance.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("e2961a99-6eb7-45d5-9eaf-ec1c39fd026b")]
		public virtual FactTypeInstance FactTypeInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FactTypeInstance)DslModeling::DomainRoleInfo.GetRolePlayer(this, FactTypeInstanceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FactTypeInstanceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FactTypeInstanceCollection of a FactType
		/// <summary>
		/// Gets a list of FactTypeInstanceCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FactTypeInstance> GetFactTypeInstanceCollection(FactType element)
		{
			return new DslModeling::LinkedElementCollection<FactTypeInstance>(element, FactTypeDomainRoleId);
		}
		#endregion
		#region FactType link accessor
		/// <summary>
		/// Get the list of FactTypeHasFactTypeInstance links to a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeInstance> GetLinksToFactTypeInstanceCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType factTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeInstance>(factTypeInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeInstance.FactTypeDomainRoleId);
		}
		#endregion
		#region FactTypeInstance link accessor
		/// <summary>
		/// Get the FactTypeHasFactTypeInstance link to a FactTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeInstance GetLinkToFactType (global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstance factTypeInstanceInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeInstance>(factTypeInstanceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeInstance.FactTypeInstanceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of FactTypeInstance not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FactTypeHasFactTypeInstance instance accessors
		
		/// <summary>
		/// Get any FactTypeHasFactTypeInstance links between a given FactType and a FactTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeInstance> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstance target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeInstance> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeInstance>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeInstance>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeInstance.FactTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeInstance link in links )
			{
				if ( target.Equals(link.FactTypeInstance) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FactTypeHasFactTypeInstance link between a given FactTypeand a FactTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeInstance GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstance target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeInstance>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeInstance.FactTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeInstance link in links )
			{
				if ( target.Equals(link.FactTypeInstance) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship FactTypeInstanceHasRoleInstance
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasRoleInstance
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasRoleInstance.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasRoleInstance.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("f92b6ec1-8055-4502-bd5d-763d1f5b6849")]
	public partial class FactTypeInstanceHasRoleInstance : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FactTypeInstanceHasRoleInstance domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf92b6ec1, 0x8055, 0x4502, 0xbd, 0x5d, 0x76, 0x3d, 0x1f, 0x5b, 0x68, 0x49);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FactTypeInstanceHasRoleInstance link in the same Partition as the given FactTypeInstance
		/// </summary>
		/// <param name="source">FactTypeInstance to use as the source of the relationship.</param>
		/// <param name="target">FactTypeRoleInstance to use as the target of the relationship.</param>
		public FactTypeInstanceHasRoleInstance(FactTypeInstance source, FactTypeRoleInstance target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FactTypeInstanceHasRoleInstance.FactTypeInstanceDomainRoleId, source), new DslModeling::RoleAssignment(FactTypeInstanceHasRoleInstance.RoleInstanceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeInstanceHasRoleInstance(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeInstanceHasRoleInstance(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeInstanceHasRoleInstance(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeInstanceHasRoleInstance(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region FactTypeInstance domain role code
		
		/// <summary>
		/// FactTypeInstance domain role Id.
		/// </summary>
		public static readonly global::System.Guid FactTypeInstanceDomainRoleId = new global::System.Guid(0x82d54796, 0x2a6c, 0x48c4, 0x8b, 0x9c, 0x36, 0xce, 0x19, 0x14, 0xd3, 0xbc);
		
		/// <summary>
		/// DomainRole FactTypeInstance
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasRoleInstance.FactTypeInstance
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasRoleInstance/FactTypeInstance.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasRoleInstance/FactTypeInstance.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "RoleInstanceCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasRoleInstance/FactTypeInstance.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("82d54796-2a6c-48c4-8b9c-36ce1914d3bc")]
		public virtual FactTypeInstance FactTypeInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FactTypeInstance)DslModeling::DomainRoleInfo.GetRolePlayer(this, FactTypeInstanceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FactTypeInstanceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FactTypeInstance of a FactTypeRoleInstance
		/// <summary>
		/// Gets FactTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FactTypeInstance GetFactTypeInstance(FactTypeRoleInstance element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RoleInstanceDomainRoleId) as FactTypeInstance;
		}
		
		/// <summary>
		/// Sets FactTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFactTypeInstance(FactTypeRoleInstance element, FactTypeInstance newFactTypeInstance)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RoleInstanceDomainRoleId, newFactTypeInstance);
		}
		#endregion
		#region RoleInstance domain role code
		
		/// <summary>
		/// RoleInstance domain role Id.
		/// </summary>
		public static readonly global::System.Guid RoleInstanceDomainRoleId = new global::System.Guid(0xaf7b2192, 0x02b6, 0x49a6, 0xa6, 0xd7, 0x67, 0xa6, 0x08, 0x12, 0x4b, 0xb6);
		
		/// <summary>
		/// DomainRole RoleInstance
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasRoleInstance.RoleInstance
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasRoleInstance/RoleInstance.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasRoleInstance/RoleInstance.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FactTypeInstance", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasRoleInstance/RoleInstance.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("af7b2192-02b6-49a6-a6d7-67a608124bb6")]
		public virtual FactTypeRoleInstance RoleInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FactTypeRoleInstance)DslModeling::DomainRoleInfo.GetRolePlayer(this, RoleInstanceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RoleInstanceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RoleInstanceCollection of a FactTypeInstance
		/// <summary>
		/// Gets a list of RoleInstanceCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FactTypeRoleInstance> GetRoleInstanceCollection(FactTypeInstance element)
		{
			return new DslModeling::LinkedElementCollection<FactTypeRoleInstance>(element, FactTypeInstanceDomainRoleId);
		}
		#endregion
		#region FactTypeInstance link accessor
		/// <summary>
		/// Get the list of FactTypeInstanceHasRoleInstance links to a FactTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasRoleInstance> GetLinksToRoleInstanceCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstance factTypeInstanceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasRoleInstance>(factTypeInstanceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasRoleInstance.FactTypeInstanceDomainRoleId);
		}
		#endregion
		#region RoleInstance link accessor
		/// <summary>
		/// Get the FactTypeInstanceHasRoleInstance link to a FactTypeRoleInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasRoleInstance GetLinkToFactTypeInstance (global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstance roleInstanceInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasRoleInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasRoleInstance>(roleInstanceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasRoleInstance.RoleInstanceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of RoleInstance not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FactTypeInstanceHasRoleInstance instance accessors
		
		/// <summary>
		/// Get any FactTypeInstanceHasRoleInstance links between a given FactTypeInstance and a FactTypeRoleInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasRoleInstance> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstance source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstance target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasRoleInstance> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasRoleInstance>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasRoleInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasRoleInstance>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasRoleInstance.FactTypeInstanceDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasRoleInstance link in links )
			{
				if ( target.Equals(link.RoleInstance) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FactTypeInstanceHasRoleInstance link between a given FactTypeInstanceand a FactTypeRoleInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasRoleInstance GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstance source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstance target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasRoleInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasRoleInstance>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasRoleInstance.FactTypeInstanceDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasRoleInstance link in links )
			{
				if ( target.Equals(link.RoleInstance) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ObjectificationInstance
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationInstance
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationInstance.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationInstance.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("943f2cfd-0179-48d8-81d9-3b8277a8d449")]
	public partial class ObjectificationInstance : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ObjectificationInstance domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x943f2cfd, 0x0179, 0x48d8, 0x81, 0xd9, 0x3b, 0x82, 0x77, 0xa8, 0xd4, 0x49);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ObjectificationInstance link in the same Partition as the given FactTypeInstance
		/// </summary>
		/// <param name="source">FactTypeInstance to use as the source of the relationship.</param>
		/// <param name="target">ObjectTypeInstance to use as the target of the relationship.</param>
		public ObjectificationInstance(FactTypeInstance source, ObjectTypeInstance target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ObjectificationInstance.ObjectifiedInstanceDomainRoleId, source), new DslModeling::RoleAssignment(ObjectificationInstance.ObjectifyingInstanceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectificationInstance(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectificationInstance(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectificationInstance(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectificationInstance(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ObjectifiedInstance domain role code
		
		/// <summary>
		/// ObjectifiedInstance domain role Id.
		/// </summary>
		public static readonly global::System.Guid ObjectifiedInstanceDomainRoleId = new global::System.Guid(0x819a1d2b, 0x125b, 0x4193, 0xa3, 0x36, 0x25, 0xbe, 0x03, 0xea, 0x91, 0xc3);
		
		/// <summary>
		/// DomainRole ObjectifiedInstance
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationInstance.ObjectifiedInstance
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationInstance/ObjectifiedInstance.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationInstance/ObjectifiedInstance.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ObjectifyingInstance", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationInstance/ObjectifiedInstance.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("819a1d2b-125b-4193-a336-25be03ea91c3")]
		public virtual FactTypeInstance ObjectifiedInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FactTypeInstance)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjectifiedInstanceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjectifiedInstanceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ObjectifiedInstance of a ObjectTypeInstance
		/// <summary>
		/// Gets ObjectifiedInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FactTypeInstance GetObjectifiedInstance(ObjectTypeInstance element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ObjectifyingInstanceDomainRoleId) as FactTypeInstance;
		}
		
		/// <summary>
		/// Sets ObjectifiedInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetObjectifiedInstance(ObjectTypeInstance element, FactTypeInstance newObjectifiedInstance)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ObjectifyingInstanceDomainRoleId, newObjectifiedInstance);
		}
		#endregion
		#region ObjectifyingInstance domain role code
		
		/// <summary>
		/// ObjectifyingInstance domain role Id.
		/// </summary>
		public static readonly global::System.Guid ObjectifyingInstanceDomainRoleId = new global::System.Guid(0x326e4cf1, 0x6a1f, 0x41ab, 0xb5, 0x35, 0x3a, 0x01, 0x6c, 0xe5, 0x9c, 0x7f);
		
		/// <summary>
		/// DomainRole ObjectifyingInstance
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationInstance.ObjectifyingInstance
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationInstance/ObjectifyingInstance.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationInstance/ObjectifyingInstance.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ObjectifiedInstance", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationInstance/ObjectifyingInstance.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("326e4cf1-6a1f-41ab-b535-3a016ce59c7f")]
		public virtual ObjectTypeInstance ObjectifyingInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectTypeInstance)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjectifyingInstanceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjectifyingInstanceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ObjectifyingInstance of a FactTypeInstance
		/// <summary>
		/// Gets ObjectifyingInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ObjectTypeInstance GetObjectifyingInstance(FactTypeInstance element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ObjectifiedInstanceDomainRoleId) as ObjectTypeInstance;
		}
		
		/// <summary>
		/// Sets ObjectifyingInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetObjectifyingInstance(FactTypeInstance element, ObjectTypeInstance newObjectifyingInstance)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ObjectifiedInstanceDomainRoleId, newObjectifyingInstance);
		}
		#endregion
		#region ObjectifiedInstance link accessor
		/// <summary>
		/// Get the ObjectificationInstance link to a FactTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationInstance GetLinkToObjectifyingInstance (global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstance objectifiedInstanceInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationInstance>(objectifiedInstanceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationInstance.ObjectifiedInstanceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ObjectifiedInstance not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ObjectifyingInstance link accessor
		/// <summary>
		/// Get the ObjectificationInstance link to a ObjectTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationInstance GetLinkToObjectifiedInstance (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstance objectifyingInstanceInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationInstance>(objectifyingInstanceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationInstance.ObjectifyingInstanceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ObjectifyingInstance not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ObjectificationInstance instance accessors
		
		/// <summary>
		/// Get any ObjectificationInstance links between a given FactTypeInstance and a ObjectTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationInstance> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstance source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstance target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationInstance> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationInstance>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationInstance>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationInstance.ObjectifiedInstanceDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationInstance link in links )
			{
				if ( target.Equals(link.ObjectifyingInstance) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ObjectificationInstance link between a given FactTypeInstanceand a ObjectTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationInstance GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstance source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstance target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationInstance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationInstance>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationInstance.ObjectifiedInstanceDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationInstance link in links )
			{
				if ( target.Equals(link.ObjectifyingInstance) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ObjectifiedInstanceHasObjectifyingInstanceRequiredError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedInstanceHasObjectifyingInstanceRequiredError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedInstanceHasObjectifyingInstanceRequiredError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedInstanceHasObjectifyingInstanceRequiredError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("4c26f55b-d01b-4871-96c7-659ffb8448e9")]
	public partial class ObjectifiedInstanceHasObjectifyingInstanceRequiredError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ObjectifiedInstanceHasObjectifyingInstanceRequiredError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4c26f55b, 0xd01b, 0x4871, 0x96, 0xc7, 0x65, 0x9f, 0xfb, 0x84, 0x48, 0xe9);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ObjectifiedInstanceHasObjectifyingInstanceRequiredError link in the same Partition as the given FactTypeInstance
		/// </summary>
		/// <param name="source">FactTypeInstance to use as the source of the relationship.</param>
		/// <param name="target">ObjectifyingInstanceRequiredError to use as the target of the relationship.</param>
		public ObjectifiedInstanceHasObjectifyingInstanceRequiredError(FactTypeInstance source, ObjectifyingInstanceRequiredError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ObjectifiedInstanceHasObjectifyingInstanceRequiredError.FactTypeInstanceDomainRoleId, source), new DslModeling::RoleAssignment(ObjectifiedInstanceHasObjectifyingInstanceRequiredError.ObjectifyingInstanceRequiredErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectifiedInstanceHasObjectifyingInstanceRequiredError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectifiedInstanceHasObjectifyingInstanceRequiredError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectifiedInstanceHasObjectifyingInstanceRequiredError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectifiedInstanceHasObjectifyingInstanceRequiredError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region FactTypeInstance domain role code
		
		/// <summary>
		/// FactTypeInstance domain role Id.
		/// </summary>
		public static readonly global::System.Guid FactTypeInstanceDomainRoleId = new global::System.Guid(0x2d8dd1d8, 0x131e, 0x44e7, 0x90, 0x30, 0xe1, 0x6c, 0xc5, 0x88, 0xa0, 0xaa);
		
		/// <summary>
		/// DomainRole FactTypeInstance
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedInstanceHasObjectifyingInstanceRequiredError.FactTypeInstance
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedInstanceHasObjectifyingInstanceRequiredError/FactTypeInstance.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedInstanceHasObjectifyingInstanceRequiredError/FactTypeInstance.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ObjectifyingInstanceRequiredError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedInstanceHasObjectifyingInstanceRequiredError/FactTypeInstance.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("2d8dd1d8-131e-44e7-9030-e16cc588a0aa")]
		public virtual FactTypeInstance FactTypeInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FactTypeInstance)DslModeling::DomainRoleInfo.GetRolePlayer(this, FactTypeInstanceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FactTypeInstanceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FactTypeInstance of a ObjectifyingInstanceRequiredError
		/// <summary>
		/// Gets FactTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FactTypeInstance GetFactTypeInstance(ObjectifyingInstanceRequiredError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ObjectifyingInstanceRequiredErrorDomainRoleId) as FactTypeInstance;
		}
		
		/// <summary>
		/// Sets FactTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFactTypeInstance(ObjectifyingInstanceRequiredError element, FactTypeInstance newFactTypeInstance)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ObjectifyingInstanceRequiredErrorDomainRoleId, newFactTypeInstance);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing FactTypeInstance domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.FactTypeInstance;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.FactTypeInstance = (FactTypeInstance)value;
			}
		}
		
		#endregion
		#region ObjectifyingInstanceRequiredError domain role code
		
		/// <summary>
		/// ObjectifyingInstanceRequiredError domain role Id.
		/// </summary>
		public static readonly global::System.Guid ObjectifyingInstanceRequiredErrorDomainRoleId = new global::System.Guid(0x0b7c29c1, 0x067c, 0x4986, 0x9c, 0xb6, 0xe4, 0x85, 0xcd, 0x09, 0x1c, 0x28);
		
		/// <summary>
		/// DomainRole ObjectifyingInstanceRequiredError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedInstanceHasObjectifyingInstanceRequiredError.ObjectifyingInstanceRequiredError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedInstanceHasObjectifyingInstanceRequiredError/ObjectifyingInstanceRequiredError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedInstanceHasObjectifyingInstanceRequiredError/ObjectifyingInstanceRequiredError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FactTypeInstance", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedInstanceHasObjectifyingInstanceRequiredError/ObjectifyingInstanceRequiredError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("0b7c29c1-067c-4986-9cb6-e485cd091c28")]
		public virtual ObjectifyingInstanceRequiredError ObjectifyingInstanceRequiredError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectifyingInstanceRequiredError)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjectifyingInstanceRequiredErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjectifyingInstanceRequiredErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ObjectifyingInstanceRequiredError of a FactTypeInstance
		/// <summary>
		/// Gets ObjectifyingInstanceRequiredError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ObjectifyingInstanceRequiredError GetObjectifyingInstanceRequiredError(FactTypeInstance element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FactTypeInstanceDomainRoleId) as ObjectifyingInstanceRequiredError;
		}
		
		/// <summary>
		/// Sets ObjectifyingInstanceRequiredError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetObjectifyingInstanceRequiredError(FactTypeInstance element, ObjectifyingInstanceRequiredError newObjectifyingInstanceRequiredError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FactTypeInstanceDomainRoleId, newObjectifyingInstanceRequiredError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing ObjectifyingInstanceRequiredError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ObjectifyingInstanceRequiredError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ObjectifyingInstanceRequiredError = (ObjectifyingInstanceRequiredError)value;
			}
		}
		
		#endregion
		#region FactTypeInstance link accessor
		/// <summary>
		/// Get the ObjectifiedInstanceHasObjectifyingInstanceRequiredError link to a FactTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedInstanceHasObjectifyingInstanceRequiredError GetLinkToObjectifyingInstanceRequiredError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstance factTypeInstanceInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedInstanceHasObjectifyingInstanceRequiredError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedInstanceHasObjectifyingInstanceRequiredError>(factTypeInstanceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedInstanceHasObjectifyingInstanceRequiredError.FactTypeInstanceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of FactTypeInstance not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ObjectifyingInstanceRequiredError link accessor
		/// <summary>
		/// Get the ObjectifiedInstanceHasObjectifyingInstanceRequiredError link to a ObjectifyingInstanceRequiredError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedInstanceHasObjectifyingInstanceRequiredError GetLinkToFactTypeInstance (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifyingInstanceRequiredError objectifyingInstanceRequiredErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedInstanceHasObjectifyingInstanceRequiredError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedInstanceHasObjectifyingInstanceRequiredError>(objectifyingInstanceRequiredErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedInstanceHasObjectifyingInstanceRequiredError.ObjectifyingInstanceRequiredErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ObjectifyingInstanceRequiredError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ObjectifiedInstanceHasObjectifyingInstanceRequiredError instance accessors
		
		/// <summary>
		/// Get any ObjectifiedInstanceHasObjectifyingInstanceRequiredError links between a given FactTypeInstance and a ObjectifyingInstanceRequiredError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedInstanceHasObjectifyingInstanceRequiredError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstance source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifyingInstanceRequiredError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedInstanceHasObjectifyingInstanceRequiredError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedInstanceHasObjectifyingInstanceRequiredError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedInstanceHasObjectifyingInstanceRequiredError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedInstanceHasObjectifyingInstanceRequiredError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedInstanceHasObjectifyingInstanceRequiredError.FactTypeInstanceDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedInstanceHasObjectifyingInstanceRequiredError link in links )
			{
				if ( target.Equals(link.ObjectifyingInstanceRequiredError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ObjectifiedInstanceHasObjectifyingInstanceRequiredError link between a given FactTypeInstanceand a ObjectifyingInstanceRequiredError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedInstanceHasObjectifyingInstanceRequiredError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstance source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifyingInstanceRequiredError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedInstanceHasObjectifyingInstanceRequiredError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedInstanceHasObjectifyingInstanceRequiredError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedInstanceHasObjectifyingInstanceRequiredError.FactTypeInstanceDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedInstanceHasObjectifyingInstanceRequiredError link in links )
			{
				if ( target.Equals(link.ObjectifyingInstanceRequiredError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ObjectifyingInstanceHasObjectifiedInstanceRequiredError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifyingInstanceHasObjectifiedInstanceRequiredError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifyingInstanceHasObjectifiedInstanceRequiredError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifyingInstanceHasObjectifiedInstanceRequiredError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("a66ff864-b788-4287-b774-09babe9e62b9")]
	public partial class ObjectifyingInstanceHasObjectifiedInstanceRequiredError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ObjectifyingInstanceHasObjectifiedInstanceRequiredError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa66ff864, 0xb788, 0x4287, 0xb7, 0x74, 0x09, 0xba, 0xbe, 0x9e, 0x62, 0xb9);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ObjectifyingInstanceHasObjectifiedInstanceRequiredError link in the same Partition as the given ObjectTypeInstance
		/// </summary>
		/// <param name="source">ObjectTypeInstance to use as the source of the relationship.</param>
		/// <param name="target">ObjectifiedInstanceRequiredError to use as the target of the relationship.</param>
		public ObjectifyingInstanceHasObjectifiedInstanceRequiredError(ObjectTypeInstance source, ObjectifiedInstanceRequiredError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ObjectifyingInstanceHasObjectifiedInstanceRequiredError.ObjectTypeInstanceDomainRoleId, source), new DslModeling::RoleAssignment(ObjectifyingInstanceHasObjectifiedInstanceRequiredError.ObjectifiedInstanceRequiredErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectifyingInstanceHasObjectifiedInstanceRequiredError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectifyingInstanceHasObjectifiedInstanceRequiredError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectifyingInstanceHasObjectifiedInstanceRequiredError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectifyingInstanceHasObjectifiedInstanceRequiredError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ObjectTypeInstance domain role code
		
		/// <summary>
		/// ObjectTypeInstance domain role Id.
		/// </summary>
		public static readonly global::System.Guid ObjectTypeInstanceDomainRoleId = new global::System.Guid(0x07cbb8ae, 0xfc88, 0x4f02, 0x90, 0x5e, 0x2c, 0xe7, 0x25, 0x8e, 0xba, 0x46);
		
		/// <summary>
		/// DomainRole ObjectTypeInstance
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifyingInstanceHasObjectifiedInstanceRequiredError.ObjectTypeInstance
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifyingInstanceHasObjectifiedInstanceRequiredError/ObjectTypeInstance.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifyingInstanceHasObjectifiedInstanceRequiredError/ObjectTypeInstance.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ObjectifiedInstanceRequiredError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifyingInstanceHasObjectifiedInstanceRequiredError/ObjectTypeInstance.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("07cbb8ae-fc88-4f02-905e-2ce7258eba46")]
		public virtual ObjectTypeInstance ObjectTypeInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectTypeInstance)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjectTypeInstanceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjectTypeInstanceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ObjectTypeInstance of a ObjectifiedInstanceRequiredError
		/// <summary>
		/// Gets ObjectTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ObjectTypeInstance GetObjectTypeInstance(ObjectifiedInstanceRequiredError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ObjectifiedInstanceRequiredErrorDomainRoleId) as ObjectTypeInstance;
		}
		
		/// <summary>
		/// Sets ObjectTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetObjectTypeInstance(ObjectifiedInstanceRequiredError element, ObjectTypeInstance newObjectTypeInstance)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ObjectifiedInstanceRequiredErrorDomainRoleId, newObjectTypeInstance);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing ObjectTypeInstance domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ObjectTypeInstance;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ObjectTypeInstance = (ObjectTypeInstance)value;
			}
		}
		
		#endregion
		#region ObjectifiedInstanceRequiredError domain role code
		
		/// <summary>
		/// ObjectifiedInstanceRequiredError domain role Id.
		/// </summary>
		public static readonly global::System.Guid ObjectifiedInstanceRequiredErrorDomainRoleId = new global::System.Guid(0xb8b818dd, 0xb4f9, 0x4641, 0x99, 0x2f, 0xc4, 0x05, 0xc4, 0x5c, 0x6f, 0x8f);
		
		/// <summary>
		/// DomainRole ObjectifiedInstanceRequiredError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifyingInstanceHasObjectifiedInstanceRequiredError.ObjectifiedInstanceRequiredError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifyingInstanceHasObjectifiedInstanceRequiredError/ObjectifiedInstanceRequiredError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifyingInstanceHasObjectifiedInstanceRequiredError/ObjectifiedInstanceRequiredError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ObjectTypeInstance", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifyingInstanceHasObjectifiedInstanceRequiredError/ObjectifiedInstanceRequiredError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("b8b818dd-b4f9-4641-992f-c405c45c6f8f")]
		public virtual ObjectifiedInstanceRequiredError ObjectifiedInstanceRequiredError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectifiedInstanceRequiredError)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjectifiedInstanceRequiredErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjectifiedInstanceRequiredErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ObjectifiedInstanceRequiredError of a ObjectTypeInstance
		/// <summary>
		/// Gets ObjectifiedInstanceRequiredError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ObjectifiedInstanceRequiredError GetObjectifiedInstanceRequiredError(ObjectTypeInstance element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ObjectTypeInstanceDomainRoleId) as ObjectifiedInstanceRequiredError;
		}
		
		/// <summary>
		/// Sets ObjectifiedInstanceRequiredError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetObjectifiedInstanceRequiredError(ObjectTypeInstance element, ObjectifiedInstanceRequiredError newObjectifiedInstanceRequiredError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ObjectTypeInstanceDomainRoleId, newObjectifiedInstanceRequiredError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing ObjectifiedInstanceRequiredError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ObjectifiedInstanceRequiredError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ObjectifiedInstanceRequiredError = (ObjectifiedInstanceRequiredError)value;
			}
		}
		
		#endregion
		#region ObjectTypeInstance link accessor
		/// <summary>
		/// Get the ObjectifyingInstanceHasObjectifiedInstanceRequiredError link to a ObjectTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifyingInstanceHasObjectifiedInstanceRequiredError GetLinkToObjectifiedInstanceRequiredError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstance objectTypeInstanceInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifyingInstanceHasObjectifiedInstanceRequiredError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifyingInstanceHasObjectifiedInstanceRequiredError>(objectTypeInstanceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifyingInstanceHasObjectifiedInstanceRequiredError.ObjectTypeInstanceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ObjectTypeInstance not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ObjectifiedInstanceRequiredError link accessor
		/// <summary>
		/// Get the ObjectifyingInstanceHasObjectifiedInstanceRequiredError link to a ObjectifiedInstanceRequiredError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifyingInstanceHasObjectifiedInstanceRequiredError GetLinkToObjectTypeInstance (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedInstanceRequiredError objectifiedInstanceRequiredErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifyingInstanceHasObjectifiedInstanceRequiredError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifyingInstanceHasObjectifiedInstanceRequiredError>(objectifiedInstanceRequiredErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifyingInstanceHasObjectifiedInstanceRequiredError.ObjectifiedInstanceRequiredErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ObjectifiedInstanceRequiredError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ObjectifyingInstanceHasObjectifiedInstanceRequiredError instance accessors
		
		/// <summary>
		/// Get any ObjectifyingInstanceHasObjectifiedInstanceRequiredError links between a given ObjectTypeInstance and a ObjectifiedInstanceRequiredError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifyingInstanceHasObjectifiedInstanceRequiredError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstance source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedInstanceRequiredError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifyingInstanceHasObjectifiedInstanceRequiredError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifyingInstanceHasObjectifiedInstanceRequiredError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifyingInstanceHasObjectifiedInstanceRequiredError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifyingInstanceHasObjectifiedInstanceRequiredError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifyingInstanceHasObjectifiedInstanceRequiredError.ObjectTypeInstanceDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifyingInstanceHasObjectifiedInstanceRequiredError link in links )
			{
				if ( target.Equals(link.ObjectifiedInstanceRequiredError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ObjectifyingInstanceHasObjectifiedInstanceRequiredError link between a given ObjectTypeInstanceand a ObjectifiedInstanceRequiredError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifyingInstanceHasObjectifiedInstanceRequiredError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstance source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedInstanceRequiredError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifyingInstanceHasObjectifiedInstanceRequiredError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifyingInstanceHasObjectifiedInstanceRequiredError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifyingInstanceHasObjectifiedInstanceRequiredError.ObjectTypeInstanceDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifyingInstanceHasObjectifiedInstanceRequiredError link in links )
			{
				if ( target.Equals(link.ObjectifiedInstanceRequiredError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("922e0a74-9384-4d25-9c38-e0ab709fee8f")]
	public partial class EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x922e0a74, 0x9384, 0x4d25, 0x9c, 0x38, 0xe0, 0xab, 0x70, 0x9f, 0xee, 0x8f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError link in the same Partition as the given EntityTypeInstance
		/// </summary>
		/// <param name="source">EntityTypeInstance to use as the source of the relationship.</param>
		/// <param name="target">TooFewEntityTypeRoleInstancesError to use as the target of the relationship.</param>
		public EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError(EntityTypeInstance source, TooFewEntityTypeRoleInstancesError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError.EntityTypeInstanceDomainRoleId, source), new DslModeling::RoleAssignment(EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError.TooFewEntityTypeRoleInstancesErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region EntityTypeInstance domain role code
		
		/// <summary>
		/// EntityTypeInstance domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityTypeInstanceDomainRoleId = new global::System.Guid(0x715ed45e, 0x2c85, 0x491e, 0xa5, 0x77, 0x3a, 0x69, 0x85, 0x34, 0x76, 0x87);
		
		/// <summary>
		/// DomainRole EntityTypeInstance
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError.EntityTypeInstance
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError/EntityTypeInstance.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError/EntityTypeInstance.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TooFewEntityTypeRoleInstancesError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError/EntityTypeInstance.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("715ed45e-2c85-491e-a577-3a6985347687")]
		public virtual EntityTypeInstance EntityTypeInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EntityTypeInstance)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityTypeInstanceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityTypeInstanceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EntityTypeInstance of a TooFewEntityTypeRoleInstancesError
		/// <summary>
		/// Gets EntityTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static EntityTypeInstance GetEntityTypeInstance(TooFewEntityTypeRoleInstancesError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TooFewEntityTypeRoleInstancesErrorDomainRoleId) as EntityTypeInstance;
		}
		
		/// <summary>
		/// Sets EntityTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEntityTypeInstance(TooFewEntityTypeRoleInstancesError element, EntityTypeInstance newEntityTypeInstance)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TooFewEntityTypeRoleInstancesErrorDomainRoleId, newEntityTypeInstance);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing EntityTypeInstance domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.EntityTypeInstance;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.EntityTypeInstance = (EntityTypeInstance)value;
			}
		}
		
		#endregion
		#region TooFewEntityTypeRoleInstancesError domain role code
		
		/// <summary>
		/// TooFewEntityTypeRoleInstancesError domain role Id.
		/// </summary>
		public static readonly global::System.Guid TooFewEntityTypeRoleInstancesErrorDomainRoleId = new global::System.Guid(0x61d2d2df, 0x749c, 0x4d93, 0x8e, 0xf4, 0x5c, 0xcd, 0x92, 0xe0, 0x31, 0x54);
		
		/// <summary>
		/// DomainRole TooFewEntityTypeRoleInstancesError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError.TooFewEntityTypeRoleInstancesError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError/TooFewEntityTypeRoleInstancesError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError/TooFewEntityTypeRoleInstancesError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "EntityTypeInstance", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError/TooFewEntityTypeRoleInstancesError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("61d2d2df-749c-4d93-8ef4-5ccd92e03154")]
		public virtual TooFewEntityTypeRoleInstancesError TooFewEntityTypeRoleInstancesError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TooFewEntityTypeRoleInstancesError)DslModeling::DomainRoleInfo.GetRolePlayer(this, TooFewEntityTypeRoleInstancesErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TooFewEntityTypeRoleInstancesErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TooFewEntityTypeRoleInstancesError of a EntityTypeInstance
		/// <summary>
		/// Gets TooFewEntityTypeRoleInstancesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static TooFewEntityTypeRoleInstancesError GetTooFewEntityTypeRoleInstancesError(EntityTypeInstance element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EntityTypeInstanceDomainRoleId) as TooFewEntityTypeRoleInstancesError;
		}
		
		/// <summary>
		/// Sets TooFewEntityTypeRoleInstancesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTooFewEntityTypeRoleInstancesError(EntityTypeInstance element, TooFewEntityTypeRoleInstancesError newTooFewEntityTypeRoleInstancesError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EntityTypeInstanceDomainRoleId, newTooFewEntityTypeRoleInstancesError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing TooFewEntityTypeRoleInstancesError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.TooFewEntityTypeRoleInstancesError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.TooFewEntityTypeRoleInstancesError = (TooFewEntityTypeRoleInstancesError)value;
			}
		}
		
		#endregion
		#region EntityTypeInstance link accessor
		/// <summary>
		/// Get the EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError link to a EntityTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError GetLinkToTooFewEntityTypeRoleInstancesError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstance entityTypeInstanceInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError>(entityTypeInstanceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError.EntityTypeInstanceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of EntityTypeInstance not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TooFewEntityTypeRoleInstancesError link accessor
		/// <summary>
		/// Get the EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError link to a TooFewEntityTypeRoleInstancesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError GetLinkToEntityTypeInstance (global::ORMSolutions.ORMArchitect.Core.ObjectModel.TooFewEntityTypeRoleInstancesError tooFewEntityTypeRoleInstancesErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError>(tooFewEntityTypeRoleInstancesErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError.TooFewEntityTypeRoleInstancesErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TooFewEntityTypeRoleInstancesError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError instance accessors
		
		/// <summary>
		/// Get any EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError links between a given EntityTypeInstance and a TooFewEntityTypeRoleInstancesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstance source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.TooFewEntityTypeRoleInstancesError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError.EntityTypeInstanceDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError link in links )
			{
				if ( target.Equals(link.TooFewEntityTypeRoleInstancesError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError link between a given EntityTypeInstanceand a TooFewEntityTypeRoleInstancesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstance source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.TooFewEntityTypeRoleInstancesError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError.EntityTypeInstanceDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError link in links )
			{
				if ( target.Equals(link.TooFewEntityTypeRoleInstancesError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship FactTypeInstanceHasTooFewFactTypeRoleInstancesError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("6ac86dd8-1766-472e-b70f-b788c04ed688")]
	public partial class FactTypeInstanceHasTooFewFactTypeRoleInstancesError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FactTypeInstanceHasTooFewFactTypeRoleInstancesError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6ac86dd8, 0x1766, 0x472e, 0xb7, 0x0f, 0xb7, 0x88, 0xc0, 0x4e, 0xd6, 0x88);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FactTypeInstanceHasTooFewFactTypeRoleInstancesError link in the same Partition as the given FactTypeInstance
		/// </summary>
		/// <param name="source">FactTypeInstance to use as the source of the relationship.</param>
		/// <param name="target">TooFewFactTypeRoleInstancesError to use as the target of the relationship.</param>
		public FactTypeInstanceHasTooFewFactTypeRoleInstancesError(FactTypeInstance source, TooFewFactTypeRoleInstancesError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FactTypeInstanceHasTooFewFactTypeRoleInstancesError.FactTypeInstanceDomainRoleId, source), new DslModeling::RoleAssignment(FactTypeInstanceHasTooFewFactTypeRoleInstancesError.TooFewFactTypeRoleInstancesErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeInstanceHasTooFewFactTypeRoleInstancesError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeInstanceHasTooFewFactTypeRoleInstancesError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeInstanceHasTooFewFactTypeRoleInstancesError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeInstanceHasTooFewFactTypeRoleInstancesError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region FactTypeInstance domain role code
		
		/// <summary>
		/// FactTypeInstance domain role Id.
		/// </summary>
		public static readonly global::System.Guid FactTypeInstanceDomainRoleId = new global::System.Guid(0xac1f89f9, 0x1dbc, 0x4826, 0x80, 0x35, 0x6e, 0xa0, 0xc1, 0xd3, 0x5e, 0xb1);
		
		/// <summary>
		/// DomainRole FactTypeInstance
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError.FactTypeInstance
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError/FactTypeInstance.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError/FactTypeInstance.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TooFewFactTypeRoleInstancesError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError/FactTypeInstance.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("ac1f89f9-1dbc-4826-8035-6ea0c1d35eb1")]
		public virtual FactTypeInstance FactTypeInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FactTypeInstance)DslModeling::DomainRoleInfo.GetRolePlayer(this, FactTypeInstanceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FactTypeInstanceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FactTypeInstance of a TooFewFactTypeRoleInstancesError
		/// <summary>
		/// Gets FactTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FactTypeInstance GetFactTypeInstance(TooFewFactTypeRoleInstancesError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TooFewFactTypeRoleInstancesErrorDomainRoleId) as FactTypeInstance;
		}
		
		/// <summary>
		/// Sets FactTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFactTypeInstance(TooFewFactTypeRoleInstancesError element, FactTypeInstance newFactTypeInstance)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TooFewFactTypeRoleInstancesErrorDomainRoleId, newFactTypeInstance);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing FactTypeInstance domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.FactTypeInstance;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.FactTypeInstance = (FactTypeInstance)value;
			}
		}
		
		#endregion
		#region TooFewFactTypeRoleInstancesError domain role code
		
		/// <summary>
		/// TooFewFactTypeRoleInstancesError domain role Id.
		/// </summary>
		public static readonly global::System.Guid TooFewFactTypeRoleInstancesErrorDomainRoleId = new global::System.Guid(0x8d72911a, 0x53e9, 0x4e0d, 0x8b, 0xe7, 0x79, 0xfc, 0x16, 0x05, 0x7e, 0xd5);
		
		/// <summary>
		/// DomainRole TooFewFactTypeRoleInstancesError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError.TooFewFactTypeRoleInstancesError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError/TooFewFactTypeRoleInstancesError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError/TooFewFactTypeRoleInstancesError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FactTypeInstance", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError/TooFewFactTypeRoleInstancesError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("8d72911a-53e9-4e0d-8be7-79fc16057ed5")]
		public virtual TooFewFactTypeRoleInstancesError TooFewFactTypeRoleInstancesError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TooFewFactTypeRoleInstancesError)DslModeling::DomainRoleInfo.GetRolePlayer(this, TooFewFactTypeRoleInstancesErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TooFewFactTypeRoleInstancesErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TooFewFactTypeRoleInstancesError of a FactTypeInstance
		/// <summary>
		/// Gets TooFewFactTypeRoleInstancesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static TooFewFactTypeRoleInstancesError GetTooFewFactTypeRoleInstancesError(FactTypeInstance element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FactTypeInstanceDomainRoleId) as TooFewFactTypeRoleInstancesError;
		}
		
		/// <summary>
		/// Sets TooFewFactTypeRoleInstancesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTooFewFactTypeRoleInstancesError(FactTypeInstance element, TooFewFactTypeRoleInstancesError newTooFewFactTypeRoleInstancesError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FactTypeInstanceDomainRoleId, newTooFewFactTypeRoleInstancesError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing TooFewFactTypeRoleInstancesError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.TooFewFactTypeRoleInstancesError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.TooFewFactTypeRoleInstancesError = (TooFewFactTypeRoleInstancesError)value;
			}
		}
		
		#endregion
		#region FactTypeInstance link accessor
		/// <summary>
		/// Get the FactTypeInstanceHasTooFewFactTypeRoleInstancesError link to a FactTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError GetLinkToTooFewFactTypeRoleInstancesError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstance factTypeInstanceInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError>(factTypeInstanceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError.FactTypeInstanceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of FactTypeInstance not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TooFewFactTypeRoleInstancesError link accessor
		/// <summary>
		/// Get the FactTypeInstanceHasTooFewFactTypeRoleInstancesError link to a TooFewFactTypeRoleInstancesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError GetLinkToFactTypeInstance (global::ORMSolutions.ORMArchitect.Core.ObjectModel.TooFewFactTypeRoleInstancesError tooFewFactTypeRoleInstancesErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError>(tooFewFactTypeRoleInstancesErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError.TooFewFactTypeRoleInstancesErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TooFewFactTypeRoleInstancesError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FactTypeInstanceHasTooFewFactTypeRoleInstancesError instance accessors
		
		/// <summary>
		/// Get any FactTypeInstanceHasTooFewFactTypeRoleInstancesError links between a given FactTypeInstance and a TooFewFactTypeRoleInstancesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstance source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.TooFewFactTypeRoleInstancesError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError.FactTypeInstanceDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError link in links )
			{
				if ( target.Equals(link.TooFewFactTypeRoleInstancesError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FactTypeInstanceHasTooFewFactTypeRoleInstancesError link between a given FactTypeInstanceand a TooFewFactTypeRoleInstancesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstance source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.TooFewFactTypeRoleInstancesError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError.FactTypeInstanceDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError link in links )
			{
				if ( target.Equals(link.TooFewFactTypeRoleInstancesError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ValueTypeInstanceHasCompatibleValueTypeInstanceValueError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("a8af2a8f-cdd0-41cb-b8cd-60cf28277288")]
	public partial class ValueTypeInstanceHasCompatibleValueTypeInstanceValueError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ValueTypeInstanceHasCompatibleValueTypeInstanceValueError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa8af2a8f, 0xcdd0, 0x41cb, 0xb8, 0xcd, 0x60, 0xcf, 0x28, 0x27, 0x72, 0x88);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ValueTypeInstanceHasCompatibleValueTypeInstanceValueError link in the same Partition as the given ValueTypeInstance
		/// </summary>
		/// <param name="source">ValueTypeInstance to use as the source of the relationship.</param>
		/// <param name="target">CompatibleValueTypeInstanceValueError to use as the target of the relationship.</param>
		public ValueTypeInstanceHasCompatibleValueTypeInstanceValueError(ValueTypeInstance source, CompatibleValueTypeInstanceValueError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ValueTypeInstanceHasCompatibleValueTypeInstanceValueError.ValueTypeInstanceDomainRoleId, source), new DslModeling::RoleAssignment(ValueTypeInstanceHasCompatibleValueTypeInstanceValueError.CompatibleValueTypeInstanceValueErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ValueTypeInstanceHasCompatibleValueTypeInstanceValueError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ValueTypeInstanceHasCompatibleValueTypeInstanceValueError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ValueTypeInstanceHasCompatibleValueTypeInstanceValueError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ValueTypeInstanceHasCompatibleValueTypeInstanceValueError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ValueTypeInstance domain role code
		
		/// <summary>
		/// ValueTypeInstance domain role Id.
		/// </summary>
		public static readonly global::System.Guid ValueTypeInstanceDomainRoleId = new global::System.Guid(0x5c173594, 0xaa0c, 0x45ba, 0x92, 0xf1, 0x8d, 0x80, 0xa7, 0x4e, 0x13, 0x00);
		
		/// <summary>
		/// DomainRole ValueTypeInstance
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError.ValueTypeInstance
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError/ValueTypeInstance.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError/ValueTypeInstance.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "CompatibleValueTypeInstanceValueError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError/ValueTypeInstance.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("5c173594-aa0c-45ba-92f1-8d80a74e1300")]
		public virtual ValueTypeInstance ValueTypeInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ValueTypeInstance)DslModeling::DomainRoleInfo.GetRolePlayer(this, ValueTypeInstanceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ValueTypeInstanceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ValueTypeInstance of a CompatibleValueTypeInstanceValueError
		/// <summary>
		/// Gets ValueTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ValueTypeInstance GetValueTypeInstance(CompatibleValueTypeInstanceValueError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CompatibleValueTypeInstanceValueErrorDomainRoleId) as ValueTypeInstance;
		}
		
		/// <summary>
		/// Sets ValueTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetValueTypeInstance(CompatibleValueTypeInstanceValueError element, ValueTypeInstance newValueTypeInstance)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CompatibleValueTypeInstanceValueErrorDomainRoleId, newValueTypeInstance);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing ValueTypeInstance domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ValueTypeInstance;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ValueTypeInstance = (ValueTypeInstance)value;
			}
		}
		
		#endregion
		#region CompatibleValueTypeInstanceValueError domain role code
		
		/// <summary>
		/// CompatibleValueTypeInstanceValueError domain role Id.
		/// </summary>
		public static readonly global::System.Guid CompatibleValueTypeInstanceValueErrorDomainRoleId = new global::System.Guid(0x52774478, 0x7f8b, 0x4974, 0xa2, 0x66, 0x75, 0x46, 0x3e, 0xa1, 0x80, 0x8f);
		
		/// <summary>
		/// DomainRole CompatibleValueTypeInstanceValueError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError.CompatibleValueTypeInstanceValueError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError/CompatibleValueTypeInstanceValueError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError/CompatibleValueTypeInstanceValueError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ValueTypeInstance", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError/CompatibleValueTypeInstanceValueError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("52774478-7f8b-4974-a266-75463ea1808f")]
		public virtual CompatibleValueTypeInstanceValueError CompatibleValueTypeInstanceValueError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CompatibleValueTypeInstanceValueError)DslModeling::DomainRoleInfo.GetRolePlayer(this, CompatibleValueTypeInstanceValueErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CompatibleValueTypeInstanceValueErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CompatibleValueTypeInstanceValueError of a ValueTypeInstance
		/// <summary>
		/// Gets CompatibleValueTypeInstanceValueError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static CompatibleValueTypeInstanceValueError GetCompatibleValueTypeInstanceValueError(ValueTypeInstance element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ValueTypeInstanceDomainRoleId) as CompatibleValueTypeInstanceValueError;
		}
		
		/// <summary>
		/// Sets CompatibleValueTypeInstanceValueError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetCompatibleValueTypeInstanceValueError(ValueTypeInstance element, CompatibleValueTypeInstanceValueError newCompatibleValueTypeInstanceValueError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ValueTypeInstanceDomainRoleId, newCompatibleValueTypeInstanceValueError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing CompatibleValueTypeInstanceValueError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.CompatibleValueTypeInstanceValueError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.CompatibleValueTypeInstanceValueError = (CompatibleValueTypeInstanceValueError)value;
			}
		}
		
		#endregion
		#region ValueTypeInstance link accessor
		/// <summary>
		/// Get the ValueTypeInstanceHasCompatibleValueTypeInstanceValueError link to a ValueTypeInstance.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError GetLinkToCompatibleValueTypeInstanceValueError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeInstance valueTypeInstanceInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError>(valueTypeInstanceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError.ValueTypeInstanceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ValueTypeInstance not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CompatibleValueTypeInstanceValueError link accessor
		/// <summary>
		/// Get the ValueTypeInstanceHasCompatibleValueTypeInstanceValueError link to a CompatibleValueTypeInstanceValueError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError GetLinkToValueTypeInstance (global::ORMSolutions.ORMArchitect.Core.ObjectModel.CompatibleValueTypeInstanceValueError compatibleValueTypeInstanceValueErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError>(compatibleValueTypeInstanceValueErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError.CompatibleValueTypeInstanceValueErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CompatibleValueTypeInstanceValueError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ValueTypeInstanceHasCompatibleValueTypeInstanceValueError instance accessors
		
		/// <summary>
		/// Get any ValueTypeInstanceHasCompatibleValueTypeInstanceValueError links between a given ValueTypeInstance and a CompatibleValueTypeInstanceValueError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeInstance source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CompatibleValueTypeInstanceValueError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError.ValueTypeInstanceDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError link in links )
			{
				if ( target.Equals(link.CompatibleValueTypeInstanceValueError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ValueTypeInstanceHasCompatibleValueTypeInstanceValueError link between a given ValueTypeInstanceand a CompatibleValueTypeInstanceValueError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeInstance source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CompatibleValueTypeInstanceValueError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError.ValueTypeInstanceDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError link in links )
			{
				if ( target.Equals(link.CompatibleValueTypeInstanceValueError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ConstraintRoleSequenceHasJoinPath
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPath
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPath.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPath.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("62fc7ac1-eb51-4887-81d4-15007d5facbd")]
	public partial class ConstraintRoleSequenceHasJoinPath : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConstraintRoleSequenceHasJoinPath domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x62fc7ac1, 0xeb51, 0x4887, 0x81, 0xd4, 0x15, 0x00, 0x7d, 0x5f, 0xac, 0xbd);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConstraintRoleSequenceHasJoinPath link in the same Partition as the given ConstraintRoleSequence
		/// </summary>
		/// <param name="source">ConstraintRoleSequence to use as the source of the relationship.</param>
		/// <param name="target">ConstraintRoleSequenceJoinPath to use as the target of the relationship.</param>
		public ConstraintRoleSequenceHasJoinPath(ConstraintRoleSequence source, ConstraintRoleSequenceJoinPath target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConstraintRoleSequenceHasJoinPath.RoleSequenceDomainRoleId, source), new DslModeling::RoleAssignment(ConstraintRoleSequenceHasJoinPath.JoinPathDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConstraintRoleSequenceHasJoinPath(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConstraintRoleSequenceHasJoinPath(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConstraintRoleSequenceHasJoinPath(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConstraintRoleSequenceHasJoinPath(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region RoleSequence domain role code
		
		/// <summary>
		/// RoleSequence domain role Id.
		/// </summary>
		public static readonly global::System.Guid RoleSequenceDomainRoleId = new global::System.Guid(0xd204614a, 0xa424, 0x426b, 0x92, 0x16, 0xfa, 0xb2, 0x1c, 0xd3, 0xba, 0x9c);
		
		/// <summary>
		/// DomainRole RoleSequence
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPath.RoleSequence
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPath/RoleSequence.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPath/RoleSequence.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "JoinPath", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPath/RoleSequence.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("d204614a-a424-426b-9216-fab21cd3ba9c")]
		public virtual ConstraintRoleSequence RoleSequence
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConstraintRoleSequence)DslModeling::DomainRoleInfo.GetRolePlayer(this, RoleSequenceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RoleSequenceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RoleSequence of a ConstraintRoleSequenceJoinPath
		/// <summary>
		/// Gets RoleSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ConstraintRoleSequence GetRoleSequence(ConstraintRoleSequenceJoinPath element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, JoinPathDomainRoleId) as ConstraintRoleSequence;
		}
		
		/// <summary>
		/// Sets RoleSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRoleSequence(ConstraintRoleSequenceJoinPath element, ConstraintRoleSequence newRoleSequence)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, JoinPathDomainRoleId, newRoleSequence);
		}
		#endregion
		#region JoinPath domain role code
		
		/// <summary>
		/// JoinPath domain role Id.
		/// </summary>
		public static readonly global::System.Guid JoinPathDomainRoleId = new global::System.Guid(0xb8d5101b, 0x7904, 0x41b6, 0xb1, 0x4c, 0x5b, 0xe6, 0x67, 0xb2, 0xa6, 0xba);
		
		/// <summary>
		/// DomainRole JoinPath
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPath.JoinPath
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPath/JoinPath.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPath/JoinPath.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "RoleSequence", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPath/JoinPath.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("b8d5101b-7904-41b6-b14c-5be667b2a6ba")]
		public virtual ConstraintRoleSequenceJoinPath JoinPath
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConstraintRoleSequenceJoinPath)DslModeling::DomainRoleInfo.GetRolePlayer(this, JoinPathDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, JoinPathDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access JoinPath of a ConstraintRoleSequence
		/// <summary>
		/// Gets JoinPath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ConstraintRoleSequenceJoinPath GetJoinPath(ConstraintRoleSequence element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RoleSequenceDomainRoleId) as ConstraintRoleSequenceJoinPath;
		}
		
		/// <summary>
		/// Sets JoinPath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetJoinPath(ConstraintRoleSequence element, ConstraintRoleSequenceJoinPath newJoinPath)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RoleSequenceDomainRoleId, newJoinPath);
		}
		#endregion
		#region RoleSequence link accessor
		/// <summary>
		/// Get the ConstraintRoleSequenceHasJoinPath link to a ConstraintRoleSequence.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPath GetLinkToJoinPath (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequence roleSequenceInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPath> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPath>(roleSequenceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPath.RoleSequenceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of RoleSequence not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region JoinPath link accessor
		/// <summary>
		/// Get the ConstraintRoleSequenceHasJoinPath link to a ConstraintRoleSequenceJoinPath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPath GetLinkToRoleSequence (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPath joinPathInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPath> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPath>(joinPathInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPath.JoinPathDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of JoinPath not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ConstraintRoleSequenceHasJoinPath instance accessors
		
		/// <summary>
		/// Get any ConstraintRoleSequenceHasJoinPath links between a given ConstraintRoleSequence and a ConstraintRoleSequenceJoinPath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPath> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequence source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPath target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPath> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPath>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPath> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPath>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPath.RoleSequenceDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPath link in links )
			{
				if ( target.Equals(link.JoinPath) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConstraintRoleSequenceHasJoinPath link between a given ConstraintRoleSequenceand a ConstraintRoleSequenceJoinPath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPath GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequence source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPath target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPath> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPath>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPath.RoleSequenceDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPath link in links )
			{
				if ( target.Equals(link.JoinPath) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ConstraintRoleSequenceJoinPathProjection
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathProjection
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathProjection.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathProjection.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("9b90e59c-590b-4cbc-b7cf-604062e28a77")]
	public partial class ConstraintRoleSequenceJoinPathProjection : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConstraintRoleSequenceJoinPathProjection domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9b90e59c, 0x590b, 0x4cbc, 0xb7, 0xcf, 0x60, 0x40, 0x62, 0xe2, 0x8a, 0x77);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConstraintRoleSequenceJoinPathProjection link in the same Partition as the given ConstraintRoleSequenceJoinPath
		/// </summary>
		/// <param name="source">ConstraintRoleSequenceJoinPath to use as the source of the relationship.</param>
		/// <param name="target">LeadRolePath to use as the target of the relationship.</param>
		public ConstraintRoleSequenceJoinPathProjection(ConstraintRoleSequenceJoinPath source, LeadRolePath target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConstraintRoleSequenceJoinPathProjection.JoinPathDomainRoleId, source), new DslModeling::RoleAssignment(ConstraintRoleSequenceJoinPathProjection.RolePathDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConstraintRoleSequenceJoinPathProjection(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConstraintRoleSequenceJoinPathProjection(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConstraintRoleSequenceJoinPathProjection(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConstraintRoleSequenceJoinPathProjection(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region JoinPath domain role code
		
		/// <summary>
		/// JoinPath domain role Id.
		/// </summary>
		public static readonly global::System.Guid JoinPathDomainRoleId = new global::System.Guid(0x8771f7b6, 0x2544, 0x46a6, 0xbb, 0x63, 0xa1, 0xc1, 0x36, 0xb0, 0xf5, 0x29);
		
		/// <summary>
		/// DomainRole JoinPath
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathProjection.JoinPath
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathProjection/JoinPath.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathProjection/JoinPath.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ProjectedPathComponentCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathProjection/JoinPath.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("8771f7b6-2544-46a6-bb63-a1c136b0f529")]
		public virtual ConstraintRoleSequenceJoinPath JoinPath
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConstraintRoleSequenceJoinPath)DslModeling::DomainRoleInfo.GetRolePlayer(this, JoinPathDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, JoinPathDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConstraintRoleSequenceJoinPathProjectionCollection of a LeadRolePath
		/// <summary>
		/// Gets a list of ConstraintRoleSequenceJoinPathProjectionCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ConstraintRoleSequenceJoinPath> GetConstraintRoleSequenceJoinPathProjectionCollection(LeadRolePath element)
		{
			return new DslModeling::LinkedElementCollection<ConstraintRoleSequenceJoinPath>(element, RolePathDomainRoleId);
		}
		#endregion
		#region RolePath domain role code
		
		/// <summary>
		/// RolePath domain role Id.
		/// </summary>
		public static readonly global::System.Guid RolePathDomainRoleId = new global::System.Guid(0x0a6ad07c, 0x880b, 0x460e, 0xad, 0x75, 0x13, 0x6e, 0x3a, 0xb6, 0x12, 0xac);
		
		/// <summary>
		/// DomainRole RolePath
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathProjection.RolePath
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathProjection/RolePath.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathProjection/RolePath.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ConstraintRoleSequenceJoinPathProjectionCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathProjection/RolePath.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0a6ad07c-880b-460e-ad75-136e3ab612ac")]
		public virtual LeadRolePath RolePath
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (LeadRolePath)DslModeling::DomainRoleInfo.GetRolePlayer(this, RolePathDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RolePathDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ProjectedPathComponentCollection of a ConstraintRoleSequenceJoinPath
		/// <summary>
		/// Gets a list of ProjectedPathComponentCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<LeadRolePath> GetProjectedPathComponentCollection(ConstraintRoleSequenceJoinPath element)
		{
			return new DslModeling::LinkedElementCollection<LeadRolePath>(element, JoinPathDomainRoleId);
		}
		#endregion
		#region Accessors for roles that this REL plays in other RELs
		#region ProjectedRoleCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of ProjectedRoleCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjection.JoinPathProjection
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ConstraintRoleSequenceHasRole> ProjectedRoleCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ConstraintRoleSequenceHasRole>(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjection.JoinPathProjectionDomainRoleId);
			}
		}
		#endregion
		#region PartialProjectionError opposite domain role accessor
		/// <summary>
		/// Gets or sets PartialProjectionError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceProjectionHasPartialProjectionError.JoinPathProjection
		/// </summary>
		public virtual PartialConstraintRoleSequenceJoinPathProjectionError PartialProjectionError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceProjectionHasPartialProjectionError.JoinPathProjectionDomainRoleId) as PartialConstraintRoleSequenceJoinPathProjectionError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceProjectionHasPartialProjectionError.PartialProjectionErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceProjectionHasPartialProjectionError.PartialProjectionErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceProjectionHasPartialProjectionError.JoinPathProjectionDomainRoleId, value);
				}
			}
		}
		#endregion
		#endregion
		#region JoinPath link accessor
		/// <summary>
		/// Get the list of ConstraintRoleSequenceJoinPathProjection links to a ConstraintRoleSequenceJoinPath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathProjection> GetLinksToProjectedPathComponentCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPath joinPathInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathProjection>(joinPathInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathProjection.JoinPathDomainRoleId);
		}
		#endregion
		#region RolePath link accessor
		/// <summary>
		/// Get the list of ConstraintRoleSequenceJoinPathProjection links to a LeadRolePath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathProjection> GetLinksToConstraintRoleSequenceJoinPathProjectionCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePath rolePathInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathProjection>(rolePathInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathProjection.RolePathDomainRoleId);
		}
		#endregion
		#region ConstraintRoleSequenceJoinPathProjection instance accessors
		
		/// <summary>
		/// Get any ConstraintRoleSequenceJoinPathProjection links between a given ConstraintRoleSequenceJoinPath and a LeadRolePath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathProjection> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPath source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePath target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathProjection> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathProjection>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathProjection> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathProjection>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathProjection.JoinPathDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathProjection link in links )
			{
				if ( target.Equals(link.RolePath) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConstraintRoleSequenceJoinPathProjection link between a given ConstraintRoleSequenceJoinPathand a LeadRolePath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathProjection GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPath source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePath target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathProjection> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathProjection>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathProjection.JoinPathDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathProjection link in links )
			{
				if ( target.Equals(link.RolePath) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ConstraintRoleProjection
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjection
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjection.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjection.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("b4df8b28-6c80-4faa-b081-a1f26c2b3bc0")]
	public partial class ConstraintRoleProjection : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConstraintRoleProjection domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb4df8b28, 0x6c80, 0x4faa, 0xb0, 0x81, 0xa1, 0xf2, 0x6c, 0x2b, 0x3b, 0xc0);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConstraintRoleProjection link in the same Partition as the given ConstraintRoleSequenceJoinPathProjection
		/// </summary>
		/// <param name="source">ConstraintRoleSequenceJoinPathProjection to use as the source of the relationship.</param>
		/// <param name="target">ConstraintRoleSequenceHasRole to use as the target of the relationship.</param>
		public ConstraintRoleProjection(ConstraintRoleSequenceJoinPathProjection source, ConstraintRoleSequenceHasRole target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConstraintRoleProjection.JoinPathProjectionDomainRoleId, source), new DslModeling::RoleAssignment(ConstraintRoleProjection.ProjectedConstraintRoleDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConstraintRoleProjection(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConstraintRoleProjection(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConstraintRoleProjection(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConstraintRoleProjection(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region JoinPathProjection domain role code
		
		/// <summary>
		/// JoinPathProjection domain role Id.
		/// </summary>
		public static readonly global::System.Guid JoinPathProjectionDomainRoleId = new global::System.Guid(0xcad5c4d6, 0xe038, 0x4ec9, 0xbf, 0x02, 0x26, 0xc0, 0x7b, 0x91, 0x8f, 0xd6);
		
		/// <summary>
		/// DomainRole JoinPathProjection
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjection.JoinPathProjection
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjection/JoinPathProjection.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjection/JoinPathProjection.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ProjectedRoleCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjection/JoinPathProjection.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("cad5c4d6-e038-4ec9-bf02-26c07b918fd6")]
		public virtual ConstraintRoleSequenceJoinPathProjection JoinPathProjection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConstraintRoleSequenceJoinPathProjection)DslModeling::DomainRoleInfo.GetRolePlayer(this, JoinPathProjectionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, JoinPathProjectionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access JoinPathProjectionCollection of a ConstraintRoleSequenceHasRole
		/// <summary>
		/// Gets a list of JoinPathProjectionCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ConstraintRoleSequenceJoinPathProjection> GetJoinPathProjectionCollection(ConstraintRoleSequenceHasRole element)
		{
			return new DslModeling::LinkedElementCollection<ConstraintRoleSequenceJoinPathProjection>(element, ProjectedConstraintRoleDomainRoleId);
		}
		#endregion
		#region ProjectedConstraintRole domain role code
		
		/// <summary>
		/// ProjectedConstraintRole domain role Id.
		/// </summary>
		public static readonly global::System.Guid ProjectedConstraintRoleDomainRoleId = new global::System.Guid(0xd943c94b, 0x4a1f, 0x4219, 0xa3, 0x3d, 0xbc, 0x1d, 0xfe, 0x0b, 0x6a, 0xa4);
		
		/// <summary>
		/// DomainRole ProjectedConstraintRole
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjection.ProjectedConstraintRole
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjection/ProjectedConstraintRole.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjection/ProjectedConstraintRole.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "JoinPathProjectionCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjection/ProjectedConstraintRole.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("d943c94b-4a1f-4219-a33d-bc1dfe0b6aa4")]
		public virtual ConstraintRoleSequenceHasRole ProjectedConstraintRole
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConstraintRoleSequenceHasRole)DslModeling::DomainRoleInfo.GetRolePlayer(this, ProjectedConstraintRoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ProjectedConstraintRoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ProjectedRoleCollection of a ConstraintRoleSequenceJoinPathProjection
		/// <summary>
		/// Gets a list of ProjectedRoleCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ConstraintRoleSequenceHasRole> GetProjectedRoleCollection(ConstraintRoleSequenceJoinPathProjection element)
		{
			return new DslModeling::LinkedElementCollection<ConstraintRoleSequenceHasRole>(element, JoinPathProjectionDomainRoleId);
		}
		#endregion
		#region IsAutomatic domain property code
		
		/// <summary>
		/// IsAutomatic domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsAutomaticDomainPropertyId = new global::System.Guid(0x335709e7, 0x299e, 0x4931, 0xae, 0x66, 0x11, 0x2e, 0x90, 0x0b, 0xe5, 0x6d);
		
		/// <summary>
		/// Gets or sets the value of IsAutomatic domain property.
		/// The projection is automatically attached to a path node with a matching type.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjection/IsAutomatic.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjection/IsAutomatic.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("335709e7-299e-4931-ae66-112e900be56d")]
		public global::System.Boolean IsAutomatic
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return IsAutomaticPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsAutomaticPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ConstraintRoleProjection.IsAutomatic domain property.
		/// </summary>
		internal sealed partial class IsAutomaticPropertyHandler : DslModeling::DomainPropertyValueHandler<ConstraintRoleProjection, global::System.Boolean>
		{
			private IsAutomaticPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ConstraintRoleProjection.IsAutomatic domain property value handler.
			/// </summary>
			public static readonly IsAutomaticPropertyHandler Instance = new IsAutomaticPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ConstraintRoleProjection.IsAutomatic domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsAutomaticDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ConstraintRoleProjection element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for IsAutomatic because its Kind is
				// set to CustomStorage. Please provide the GetIsAutomaticValue()
				// method on the domain class.
				return element.GetIsAutomaticValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ConstraintRoleProjection element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for IsAutomatic because its Kind is
					// set to CustomStorage. Please provide the SetIsAutomaticValue()
					// method on the domain class.
					element.SetIsAutomaticValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Accessors for roles that this REL plays in other RELs
		#region ProjectedFromPathRoot opposite domain role accessor
		/// <summary>
		/// Gets or sets ProjectedFromPathRoot.
		/// The role path root in the join path associated with this constraint sequence.
		/// </summary>
		public virtual RolePathObjectTypeRoot ProjectedFromPathRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromRolePathRoot.ConstraintRoleProjectionDomainRoleId) as RolePathObjectTypeRoot;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromRolePathRoot.ConstraintRoleProjectionDomainRoleId, value);
			}
		}
		#endregion
		#region ProjectedFromPathedRole opposite domain role accessor
		/// <summary>
		/// Gets or sets ProjectedFromPathedRole.
		/// The pathed role in the join path associated with this constraint sequence.
		/// </summary>
		public virtual PathedRole ProjectedFromPathedRole
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole.ConstraintRoleProjectionDomainRoleId) as PathedRole;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole.ConstraintRoleProjectionDomainRoleId, value);
			}
		}
		#endregion
		#region ProjectedFromCalculatedValue opposite domain role accessor
		/// <summary>
		/// Gets or sets ProjectedFromCalculatedValue.
		/// The calculated value in the join path associated with this constraint sequence.
		/// </summary>
		public virtual CalculatedPathValue ProjectedFromCalculatedValue
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue.ConstraintRoleProjectionDomainRoleId) as CalculatedPathValue;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue.ConstraintRoleProjectionDomainRoleId, value);
			}
		}
		#endregion
		#region ProjectedFromConstant opposite domain role accessor
		/// <summary>
		/// Gets or sets ProjectedFromConstant.
		/// The constant value associated with this constraint role.
		/// </summary>
		public virtual PathConstant ProjectedFromConstant
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant.ConstraintRoleProjectionDomainRoleId) as PathConstant;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant.SourceDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant.SourceDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant.ConstraintRoleProjectionDomainRoleId, value);
				}
			}
		}
		#endregion
		#region IncompatibleProjectionError opposite domain role accessor
		/// <summary>
		/// Gets or sets IncompatibleProjectionError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError.Projection
		/// </summary>
		public virtual ConstraintRoleRequiresCompatibleJoinPathProjectionError IncompatibleProjectionError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError.ProjectionDomainRoleId) as ConstraintRoleRequiresCompatibleJoinPathProjectionError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError.IncompatibleProjectionErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError.IncompatibleProjectionErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError.ProjectionDomainRoleId, value);
				}
			}
		}
		#endregion
		#endregion
		#region JoinPathProjection link accessor
		/// <summary>
		/// Get the list of ConstraintRoleProjection links to a ConstraintRoleSequenceJoinPathProjection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjection> GetLinksToProjectedRoleCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathProjection joinPathProjectionInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjection>(joinPathProjectionInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjection.JoinPathProjectionDomainRoleId);
		}
		#endregion
		#region ProjectedConstraintRole link accessor
		/// <summary>
		/// Get the list of ConstraintRoleProjection links to a ConstraintRoleSequenceHasRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjection> GetLinksToJoinPathProjectionCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasRole projectedConstraintRoleInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjection>(projectedConstraintRoleInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjection.ProjectedConstraintRoleDomainRoleId);
		}
		#endregion
		#region ConstraintRoleProjection instance accessors
		
		/// <summary>
		/// Get any ConstraintRoleProjection links between a given ConstraintRoleSequenceJoinPathProjection and a ConstraintRoleSequenceHasRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjection> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathProjection source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasRole target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjection> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjection>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjection> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjection>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjection.JoinPathProjectionDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjection link in links )
			{
				if ( target.Equals(link.ProjectedConstraintRole) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConstraintRoleProjection link between a given ConstraintRoleSequenceJoinPathProjectionand a ConstraintRoleSequenceHasRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjection GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathProjection source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasRole target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjection> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjection>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjection.JoinPathProjectionDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjection link in links )
			{
				if ( target.Equals(link.ProjectedConstraintRole) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ConstraintRoleProjectedFromRolePathRoot
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromRolePathRoot
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromRolePathRoot.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromRolePathRoot.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("de5989e2-d99e-43e7-aaf1-25b54d50b73c")]
	public partial class ConstraintRoleProjectedFromRolePathRoot : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConstraintRoleProjectedFromRolePathRoot domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xde5989e2, 0xd99e, 0x43e7, 0xaa, 0xf1, 0x25, 0xb5, 0x4d, 0x50, 0xb7, 0x3c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConstraintRoleProjectedFromRolePathRoot link in the same Partition as the given ConstraintRoleProjection
		/// </summary>
		/// <param name="source">ConstraintRoleProjection to use as the source of the relationship.</param>
		/// <param name="target">RolePathObjectTypeRoot to use as the target of the relationship.</param>
		public ConstraintRoleProjectedFromRolePathRoot(ConstraintRoleProjection source, RolePathObjectTypeRoot target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConstraintRoleProjectedFromRolePathRoot.ConstraintRoleProjectionDomainRoleId, source), new DslModeling::RoleAssignment(ConstraintRoleProjectedFromRolePathRoot.SourceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConstraintRoleProjectedFromRolePathRoot(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConstraintRoleProjectedFromRolePathRoot(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConstraintRoleProjectedFromRolePathRoot(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConstraintRoleProjectedFromRolePathRoot(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ConstraintRoleProjection domain role code
		
		/// <summary>
		/// ConstraintRoleProjection domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConstraintRoleProjectionDomainRoleId = new global::System.Guid(0x2aa10160, 0x2441, 0x41aa, 0x9b, 0x10, 0x28, 0x1c, 0x13, 0xe2, 0x71, 0x6c);
		
		/// <summary>
		/// DomainRole ConstraintRoleProjection
		/// The role path root in the join path associated with this constraint sequence.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromRolePathRoot/ConstraintRoleProjection.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromRolePathRoot/ConstraintRoleProjection.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ProjectedFromPathRoot", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromRolePathRoot/ConstraintRoleProjection.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("2aa10160-2441-41aa-9b10-281c13e2716c")]
		public virtual ConstraintRoleProjection ConstraintRoleProjection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConstraintRoleProjection)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConstraintRoleProjectionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConstraintRoleProjectionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConstraintRoleProjections of a RolePathObjectTypeRoot
		/// <summary>
		/// Gets a list of ConstraintRoleProjections.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ConstraintRoleProjection> GetConstraintRoleProjections(RolePathObjectTypeRoot element)
		{
			return new DslModeling::LinkedElementCollection<ConstraintRoleProjection>(element, SourceDomainRoleId);
		}
		#endregion
		#region Source domain role code
		
		/// <summary>
		/// Source domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainRoleId = new global::System.Guid(0xa169e1b4, 0xdf2a, 0x46b8, 0x87, 0x60, 0x30, 0xb8, 0x64, 0x4a, 0xce, 0x9c);
		
		/// <summary>
		/// DomainRole Source
		/// The projected constraint role associated with this role path root.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromRolePathRoot/Source.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromRolePathRoot/Source.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ConstraintRoleProjections", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromRolePathRoot/Source.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a169e1b4-df2a-46b8-8760-30b8644ace9c")]
		public virtual RolePathObjectTypeRoot Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RolePathObjectTypeRoot)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ProjectedFromPathRoot of a ConstraintRoleProjection
		/// <summary>
		/// Gets ProjectedFromPathRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static RolePathObjectTypeRoot GetProjectedFromPathRoot(ConstraintRoleProjection element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConstraintRoleProjectionDomainRoleId) as RolePathObjectTypeRoot;
		}
		
		/// <summary>
		/// Sets ProjectedFromPathRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetProjectedFromPathRoot(ConstraintRoleProjection element, RolePathObjectTypeRoot newSource)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConstraintRoleProjectionDomainRoleId, newSource);
		}
		#endregion
		#region ConstraintRoleProjection link accessor
		/// <summary>
		/// Get the ConstraintRoleProjectedFromRolePathRoot link to a ConstraintRoleProjection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromRolePathRoot GetLinkToProjectedFromPathRoot (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjection constraintRoleProjectionInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromRolePathRoot> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromRolePathRoot>(constraintRoleProjectionInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromRolePathRoot.ConstraintRoleProjectionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ConstraintRoleProjection not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Source link accessor
		/// <summary>
		/// Get the list of ConstraintRoleProjectedFromRolePathRoot links to a RolePathObjectTypeRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromRolePathRoot> GetLinksToConstraintRoleProjections ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot sourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromRolePathRoot>(sourceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromRolePathRoot.SourceDomainRoleId);
		}
		#endregion
		#region ConstraintRoleProjectedFromRolePathRoot instance accessors
		
		/// <summary>
		/// Get any ConstraintRoleProjectedFromRolePathRoot links between a given ConstraintRoleProjection and a RolePathObjectTypeRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromRolePathRoot> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjection source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromRolePathRoot> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromRolePathRoot>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromRolePathRoot> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromRolePathRoot>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromRolePathRoot.ConstraintRoleProjectionDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromRolePathRoot link in links )
			{
				if ( target.Equals(link.Source) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConstraintRoleProjectedFromRolePathRoot link between a given ConstraintRoleProjectionand a RolePathObjectTypeRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromRolePathRoot GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjection source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromRolePathRoot> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromRolePathRoot>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromRolePathRoot.ConstraintRoleProjectionDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromRolePathRoot link in links )
			{
				if ( target.Equals(link.Source) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ConstraintRoleProjectedFromPathedRole
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("00d571d2-d924-4d40-8d69-299c5e18fc60")]
	public partial class ConstraintRoleProjectedFromPathedRole : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConstraintRoleProjectedFromPathedRole domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x00d571d2, 0xd924, 0x4d40, 0x8d, 0x69, 0x29, 0x9c, 0x5e, 0x18, 0xfc, 0x60);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConstraintRoleProjectedFromPathedRole link in the same Partition as the given ConstraintRoleProjection
		/// </summary>
		/// <param name="source">ConstraintRoleProjection to use as the source of the relationship.</param>
		/// <param name="target">PathedRole to use as the target of the relationship.</param>
		public ConstraintRoleProjectedFromPathedRole(ConstraintRoleProjection source, PathedRole target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConstraintRoleProjectedFromPathedRole.ConstraintRoleProjectionDomainRoleId, source), new DslModeling::RoleAssignment(ConstraintRoleProjectedFromPathedRole.SourceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConstraintRoleProjectedFromPathedRole(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConstraintRoleProjectedFromPathedRole(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConstraintRoleProjectedFromPathedRole(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConstraintRoleProjectedFromPathedRole(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ConstraintRoleProjection domain role code
		
		/// <summary>
		/// ConstraintRoleProjection domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConstraintRoleProjectionDomainRoleId = new global::System.Guid(0xaa56ebc2, 0x5647, 0x44a7, 0x8d, 0x1f, 0x1c, 0xd4, 0x54, 0xb6, 0xe6, 0xe4);
		
		/// <summary>
		/// DomainRole ConstraintRoleProjection
		/// The pathed role in the join path associated with this constraint sequence.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole/ConstraintRoleProjection.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole/ConstraintRoleProjection.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ProjectedFromPathedRole", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole/ConstraintRoleProjection.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("aa56ebc2-5647-44a7-8d1f-1cd454b6e6e4")]
		public virtual ConstraintRoleProjection ConstraintRoleProjection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConstraintRoleProjection)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConstraintRoleProjectionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConstraintRoleProjectionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConstraintRoleProjections of a PathedRole
		/// <summary>
		/// Gets a list of ConstraintRoleProjections.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ConstraintRoleProjection> GetConstraintRoleProjections(PathedRole element)
		{
			return new DslModeling::LinkedElementCollection<ConstraintRoleProjection>(element, SourceDomainRoleId);
		}
		#endregion
		#region Source domain role code
		
		/// <summary>
		/// Source domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainRoleId = new global::System.Guid(0x688af0d6, 0x47bf, 0x4049, 0xa9, 0xd5, 0xb3, 0x19, 0x88, 0xe6, 0x90, 0xd0);
		
		/// <summary>
		/// DomainRole Source
		/// The projected constraint role associated with this pathed role.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole/Source.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole/Source.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ConstraintRoleProjections", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole/Source.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("688af0d6-47bf-4049-a9d5-b31988e690d0")]
		public virtual PathedRole Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PathedRole)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ProjectedFromPathedRole of a ConstraintRoleProjection
		/// <summary>
		/// Gets ProjectedFromPathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static PathedRole GetProjectedFromPathedRole(ConstraintRoleProjection element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConstraintRoleProjectionDomainRoleId) as PathedRole;
		}
		
		/// <summary>
		/// Sets ProjectedFromPathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetProjectedFromPathedRole(ConstraintRoleProjection element, PathedRole newSource)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConstraintRoleProjectionDomainRoleId, newSource);
		}
		#endregion
		#region ConstraintRoleProjection link accessor
		/// <summary>
		/// Get the ConstraintRoleProjectedFromPathedRole link to a ConstraintRoleProjection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole GetLinkToProjectedFromPathedRole (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjection constraintRoleProjectionInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole>(constraintRoleProjectionInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole.ConstraintRoleProjectionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ConstraintRoleProjection not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Source link accessor
		/// <summary>
		/// Get the list of ConstraintRoleProjectedFromPathedRole links to a PathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole> GetLinksToConstraintRoleProjections ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole sourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole>(sourceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole.SourceDomainRoleId);
		}
		#endregion
		#region ConstraintRoleProjectedFromPathedRole instance accessors
		
		/// <summary>
		/// Get any ConstraintRoleProjectedFromPathedRole links between a given ConstraintRoleProjection and a PathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjection source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole.ConstraintRoleProjectionDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole link in links )
			{
				if ( target.Equals(link.Source) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConstraintRoleProjectedFromPathedRole link between a given ConstraintRoleProjectionand a PathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjection source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole.ConstraintRoleProjectionDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole link in links )
			{
				if ( target.Equals(link.Source) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ConstraintRoleProjectedFromCalculatedPathValue
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("6228ffa8-9f2c-4a09-8938-1c07159c4953")]
	public partial class ConstraintRoleProjectedFromCalculatedPathValue : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConstraintRoleProjectedFromCalculatedPathValue domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6228ffa8, 0x9f2c, 0x4a09, 0x89, 0x38, 0x1c, 0x07, 0x15, 0x9c, 0x49, 0x53);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConstraintRoleProjectedFromCalculatedPathValue link in the same Partition as the given ConstraintRoleProjection
		/// </summary>
		/// <param name="source">ConstraintRoleProjection to use as the source of the relationship.</param>
		/// <param name="target">CalculatedPathValue to use as the target of the relationship.</param>
		public ConstraintRoleProjectedFromCalculatedPathValue(ConstraintRoleProjection source, CalculatedPathValue target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConstraintRoleProjectedFromCalculatedPathValue.ConstraintRoleProjectionDomainRoleId, source), new DslModeling::RoleAssignment(ConstraintRoleProjectedFromCalculatedPathValue.SourceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConstraintRoleProjectedFromCalculatedPathValue(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConstraintRoleProjectedFromCalculatedPathValue(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConstraintRoleProjectedFromCalculatedPathValue(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConstraintRoleProjectedFromCalculatedPathValue(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ConstraintRoleProjection domain role code
		
		/// <summary>
		/// ConstraintRoleProjection domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConstraintRoleProjectionDomainRoleId = new global::System.Guid(0x4de79423, 0x24e0, 0x4b1b, 0xa7, 0x6f, 0x7d, 0x37, 0xfa, 0x39, 0x02, 0x7d);
		
		/// <summary>
		/// DomainRole ConstraintRoleProjection
		/// The calculated value in the join path associated with this constraint sequence.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue/ConstraintRoleProjection.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue/ConstraintRoleProjection.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ProjectedFromCalculatedValue", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue/ConstraintRoleProjection.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("4de79423-24e0-4b1b-a76f-7d37fa39027d")]
		public virtual ConstraintRoleProjection ConstraintRoleProjection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConstraintRoleProjection)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConstraintRoleProjectionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConstraintRoleProjectionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConstraintRoleProjections of a CalculatedPathValue
		/// <summary>
		/// Gets a list of ConstraintRoleProjections.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ConstraintRoleProjection> GetConstraintRoleProjections(CalculatedPathValue element)
		{
			return new DslModeling::LinkedElementCollection<ConstraintRoleProjection>(element, SourceDomainRoleId);
		}
		#endregion
		#region Source domain role code
		
		/// <summary>
		/// Source domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainRoleId = new global::System.Guid(0xd8a1de32, 0x1473, 0x4db7, 0x81, 0x24, 0xa5, 0xce, 0x82, 0xfa, 0x8e, 0x69);
		
		/// <summary>
		/// DomainRole Source
		/// The projected constraint role associated with this calculated value.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue/Source.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue/Source.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ConstraintRoleProjections", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue/Source.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("d8a1de32-1473-4db7-8124-a5ce82fa8e69")]
		public virtual CalculatedPathValue Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CalculatedPathValue)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ProjectedFromCalculatedValue of a ConstraintRoleProjection
		/// <summary>
		/// Gets ProjectedFromCalculatedValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static CalculatedPathValue GetProjectedFromCalculatedValue(ConstraintRoleProjection element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConstraintRoleProjectionDomainRoleId) as CalculatedPathValue;
		}
		
		/// <summary>
		/// Sets ProjectedFromCalculatedValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetProjectedFromCalculatedValue(ConstraintRoleProjection element, CalculatedPathValue newSource)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConstraintRoleProjectionDomainRoleId, newSource);
		}
		#endregion
		#region ConstraintRoleProjection link accessor
		/// <summary>
		/// Get the ConstraintRoleProjectedFromCalculatedPathValue link to a ConstraintRoleProjection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue GetLinkToProjectedFromCalculatedValue (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjection constraintRoleProjectionInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue>(constraintRoleProjectionInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue.ConstraintRoleProjectionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ConstraintRoleProjection not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Source link accessor
		/// <summary>
		/// Get the list of ConstraintRoleProjectedFromCalculatedPathValue links to a CalculatedPathValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue> GetLinksToConstraintRoleProjections ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue sourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue>(sourceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue.SourceDomainRoleId);
		}
		#endregion
		#region ConstraintRoleProjectedFromCalculatedPathValue instance accessors
		
		/// <summary>
		/// Get any ConstraintRoleProjectedFromCalculatedPathValue links between a given ConstraintRoleProjection and a CalculatedPathValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjection source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue.ConstraintRoleProjectionDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue link in links )
			{
				if ( target.Equals(link.Source) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConstraintRoleProjectedFromCalculatedPathValue link between a given ConstraintRoleProjectionand a CalculatedPathValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjection source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue.ConstraintRoleProjectionDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue link in links )
			{
				if ( target.Equals(link.Source) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ConstraintRoleProjectedFromPathConstant
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("8aa8b309-4ae6-4b78-b38e-b0d9b27fa829")]
	public partial class ConstraintRoleProjectedFromPathConstant : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConstraintRoleProjectedFromPathConstant domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8aa8b309, 0x4ae6, 0x4b78, 0xb3, 0x8e, 0xb0, 0xd9, 0xb2, 0x7f, 0xa8, 0x29);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConstraintRoleProjectedFromPathConstant link in the same Partition as the given ConstraintRoleProjection
		/// </summary>
		/// <param name="source">ConstraintRoleProjection to use as the source of the relationship.</param>
		/// <param name="target">PathConstant to use as the target of the relationship.</param>
		public ConstraintRoleProjectedFromPathConstant(ConstraintRoleProjection source, PathConstant target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConstraintRoleProjectedFromPathConstant.ConstraintRoleProjectionDomainRoleId, source), new DslModeling::RoleAssignment(ConstraintRoleProjectedFromPathConstant.SourceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConstraintRoleProjectedFromPathConstant(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConstraintRoleProjectedFromPathConstant(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConstraintRoleProjectedFromPathConstant(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConstraintRoleProjectedFromPathConstant(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ConstraintRoleProjection domain role code
		
		/// <summary>
		/// ConstraintRoleProjection domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConstraintRoleProjectionDomainRoleId = new global::System.Guid(0x93fb3fba, 0x1f2a, 0x4509, 0x8b, 0x56, 0xa1, 0x09, 0xf0, 0x29, 0x61, 0xe4);
		
		/// <summary>
		/// DomainRole ConstraintRoleProjection
		/// The constant value associated with this constraint role.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant/ConstraintRoleProjection.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant/ConstraintRoleProjection.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ProjectedFromConstant", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant/ConstraintRoleProjection.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("93fb3fba-1f2a-4509-8b56-a109f02961e4")]
		public virtual ConstraintRoleProjection ConstraintRoleProjection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConstraintRoleProjection)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConstraintRoleProjectionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConstraintRoleProjectionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConstraintRoleProjection of a PathConstant
		/// <summary>
		/// Gets ConstraintRoleProjection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ConstraintRoleProjection GetConstraintRoleProjection(PathConstant element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SourceDomainRoleId) as ConstraintRoleProjection;
		}
		
		/// <summary>
		/// Sets ConstraintRoleProjection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetConstraintRoleProjection(PathConstant element, ConstraintRoleProjection newConstraintRoleProjection)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SourceDomainRoleId, newConstraintRoleProjection);
		}
		#endregion
		#region Source domain role code
		
		/// <summary>
		/// Source domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainRoleId = new global::System.Guid(0x7b505588, 0x0570, 0x4aed, 0xbb, 0xcf, 0x4a, 0x8a, 0x79, 0xad, 0x3e, 0xd7);
		
		/// <summary>
		/// DomainRole Source
		/// The constraint role that uses this path constant.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant/Source.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant/Source.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ConstraintRoleProjection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant/Source.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("7b505588-0570-4aed-bbcf-4a8a79ad3ed7")]
		public virtual PathConstant Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PathConstant)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ProjectedFromConstant of a ConstraintRoleProjection
		/// <summary>
		/// Gets ProjectedFromConstant.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static PathConstant GetProjectedFromConstant(ConstraintRoleProjection element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConstraintRoleProjectionDomainRoleId) as PathConstant;
		}
		
		/// <summary>
		/// Sets ProjectedFromConstant.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetProjectedFromConstant(ConstraintRoleProjection element, PathConstant newSource)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConstraintRoleProjectionDomainRoleId, newSource);
		}
		#endregion
		#region ConstraintRoleProjection link accessor
		/// <summary>
		/// Get the ConstraintRoleProjectedFromPathConstant link to a ConstraintRoleProjection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant GetLinkToProjectedFromConstant (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjection constraintRoleProjectionInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant>(constraintRoleProjectionInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant.ConstraintRoleProjectionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ConstraintRoleProjection not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Source link accessor
		/// <summary>
		/// Get the ConstraintRoleProjectedFromPathConstant link to a PathConstant.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant GetLinkToConstraintRoleProjection (global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathConstant sourceInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant>(sourceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant.SourceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Source not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ConstraintRoleProjectedFromPathConstant instance accessors
		
		/// <summary>
		/// Get any ConstraintRoleProjectedFromPathConstant links between a given ConstraintRoleProjection and a PathConstant.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjection source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathConstant target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant.ConstraintRoleProjectionDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant link in links )
			{
				if ( target.Equals(link.Source) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConstraintRoleProjectedFromPathConstant link between a given ConstraintRoleProjectionand a PathConstant.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjection source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathConstant target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant.ConstraintRoleProjectionDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant link in links )
			{
				if ( target.Equals(link.Source) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ConstraintRoleProjectedFromPathedRole_Deprecated
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole_Deprecated
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole_Deprecated.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole_Deprecated.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("aaf520df-f858-4837-b070-ce6734bd154b")]
	public partial class ConstraintRoleProjectedFromPathedRole_Deprecated : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConstraintRoleProjectedFromPathedRole_Deprecated domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xaaf520df, 0xf858, 0x4837, 0xb0, 0x70, 0xce, 0x67, 0x34, 0xbd, 0x15, 0x4b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConstraintRoleProjectedFromPathedRole_Deprecated link in the same Partition as the given ConstraintRoleSequenceHasRole
		/// </summary>
		/// <param name="source">ConstraintRoleSequenceHasRole to use as the source of the relationship.</param>
		/// <param name="target">PathedRole to use as the target of the relationship.</param>
		public ConstraintRoleProjectedFromPathedRole_Deprecated(ConstraintRoleSequenceHasRole source, PathedRole target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConstraintRoleProjectedFromPathedRole_Deprecated.ConstraintRoleDomainRoleId, source), new DslModeling::RoleAssignment(ConstraintRoleProjectedFromPathedRole_Deprecated.SourceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConstraintRoleProjectedFromPathedRole_Deprecated(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConstraintRoleProjectedFromPathedRole_Deprecated(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConstraintRoleProjectedFromPathedRole_Deprecated(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConstraintRoleProjectedFromPathedRole_Deprecated(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ConstraintRole domain role code
		
		/// <summary>
		/// ConstraintRole domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConstraintRoleDomainRoleId = new global::System.Guid(0x3c7c5b31, 0xc245, 0x4656, 0x8b, 0xff, 0x7b, 0xf8, 0x96, 0x1d, 0x5a, 0x33);
		
		/// <summary>
		/// DomainRole ConstraintRole
		/// The pathed role in the join path associated with this constraint sequence.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole_Deprecated/ConstraintRole.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole_Deprecated/ConstraintRole.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ProjectedFromPathedRole", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole_Deprecated/ConstraintRole.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("3c7c5b31-c245-4656-8bff-7bf8961d5a33")]
		public virtual ConstraintRoleSequenceHasRole ConstraintRole
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConstraintRoleSequenceHasRole)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConstraintRoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConstraintRoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConstraintRoleProjections of a PathedRole
		/// <summary>
		/// Gets a list of ConstraintRoleProjections.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ConstraintRoleSequenceHasRole> GetConstraintRoleProjections(PathedRole element)
		{
			return new DslModeling::LinkedElementCollection<ConstraintRoleSequenceHasRole>(element, SourceDomainRoleId);
		}
		#endregion
		#region Source domain role code
		
		/// <summary>
		/// Source domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainRoleId = new global::System.Guid(0x1420953d, 0xb972, 0x40b7, 0x98, 0x4d, 0x3e, 0x97, 0x74, 0x34, 0x21, 0xb3);
		
		/// <summary>
		/// DomainRole Source
		/// The projected constraint role associated with this pathed role.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole_Deprecated/Source.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole_Deprecated/Source.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ConstraintRoleProjections", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole_Deprecated/Source.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("1420953d-b972-40b7-984d-3e97743421b3")]
		public virtual PathedRole Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PathedRole)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ProjectedFromPathedRole of a ConstraintRoleSequenceHasRole
		/// <summary>
		/// Gets ProjectedFromPathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static PathedRole GetProjectedFromPathedRole(ConstraintRoleSequenceHasRole element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConstraintRoleDomainRoleId) as PathedRole;
		}
		
		/// <summary>
		/// Sets ProjectedFromPathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetProjectedFromPathedRole(ConstraintRoleSequenceHasRole element, PathedRole newSource)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConstraintRoleDomainRoleId, newSource);
		}
		#endregion
		#region ConstraintRole link accessor
		/// <summary>
		/// Get the ConstraintRoleProjectedFromPathedRole_Deprecated link to a ConstraintRoleSequenceHasRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole_Deprecated GetLinkToProjectedFromPathedRole (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasRole constraintRoleInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole_Deprecated> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole_Deprecated>(constraintRoleInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole_Deprecated.ConstraintRoleDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ConstraintRole not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Source link accessor
		/// <summary>
		/// Get the list of ConstraintRoleProjectedFromPathedRole_Deprecated links to a PathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole_Deprecated> GetLinksToConstraintRoleProjections ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole sourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole_Deprecated>(sourceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole_Deprecated.SourceDomainRoleId);
		}
		#endregion
		#region ConstraintRoleProjectedFromPathedRole_Deprecated instance accessors
		
		/// <summary>
		/// Get any ConstraintRoleProjectedFromPathedRole_Deprecated links between a given ConstraintRoleSequenceHasRole and a PathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole_Deprecated> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasRole source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole_Deprecated> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole_Deprecated>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole_Deprecated> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole_Deprecated>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole_Deprecated.ConstraintRoleDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole_Deprecated link in links )
			{
				if ( target.Equals(link.Source) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConstraintRoleProjectedFromPathedRole_Deprecated link between a given ConstraintRoleSequenceHasRoleand a PathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole_Deprecated GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasRole source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole_Deprecated> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole_Deprecated>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole_Deprecated.ConstraintRoleDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathedRole_Deprecated link in links )
			{
				if ( target.Equals(link.Source) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ConstraintRoleProjectedFromCalculatedPathValue_Deprecated
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue_Deprecated
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue_Deprecated.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue_Deprecated.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("06b5f374-2c58-498b-bea9-b5bdf5861661")]
	public partial class ConstraintRoleProjectedFromCalculatedPathValue_Deprecated : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConstraintRoleProjectedFromCalculatedPathValue_Deprecated domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x06b5f374, 0x2c58, 0x498b, 0xbe, 0xa9, 0xb5, 0xbd, 0xf5, 0x86, 0x16, 0x61);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConstraintRoleProjectedFromCalculatedPathValue_Deprecated link in the same Partition as the given ConstraintRoleSequenceHasRole
		/// </summary>
		/// <param name="source">ConstraintRoleSequenceHasRole to use as the source of the relationship.</param>
		/// <param name="target">CalculatedPathValue to use as the target of the relationship.</param>
		public ConstraintRoleProjectedFromCalculatedPathValue_Deprecated(ConstraintRoleSequenceHasRole source, CalculatedPathValue target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConstraintRoleProjectedFromCalculatedPathValue_Deprecated.ConstraintRoleDomainRoleId, source), new DslModeling::RoleAssignment(ConstraintRoleProjectedFromCalculatedPathValue_Deprecated.SourceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConstraintRoleProjectedFromCalculatedPathValue_Deprecated(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConstraintRoleProjectedFromCalculatedPathValue_Deprecated(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConstraintRoleProjectedFromCalculatedPathValue_Deprecated(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConstraintRoleProjectedFromCalculatedPathValue_Deprecated(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ConstraintRole domain role code
		
		/// <summary>
		/// ConstraintRole domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConstraintRoleDomainRoleId = new global::System.Guid(0xa847bbcd, 0x0faa, 0x47f7, 0x97, 0x9c, 0x05, 0x47, 0x61, 0x3c, 0x39, 0x8e);
		
		/// <summary>
		/// DomainRole ConstraintRole
		/// The calculated value in the join path associated with this constraint sequence.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue_Deprecated/ConstraintRole.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue_Deprecated/ConstraintRole.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ProjectedFromCalculatedValue", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue_Deprecated/ConstraintRole.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("a847bbcd-0faa-47f7-979c-0547613c398e")]
		public virtual ConstraintRoleSequenceHasRole ConstraintRole
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConstraintRoleSequenceHasRole)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConstraintRoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConstraintRoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConstraintRoleProjections of a CalculatedPathValue
		/// <summary>
		/// Gets a list of ConstraintRoleProjections.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ConstraintRoleSequenceHasRole> GetConstraintRoleProjections(CalculatedPathValue element)
		{
			return new DslModeling::LinkedElementCollection<ConstraintRoleSequenceHasRole>(element, SourceDomainRoleId);
		}
		#endregion
		#region Source domain role code
		
		/// <summary>
		/// Source domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainRoleId = new global::System.Guid(0x56a95cd0, 0xaa18, 0x40b1, 0x8d, 0x52, 0xab, 0x02, 0xa5, 0x4d, 0x6e, 0x4b);
		
		/// <summary>
		/// DomainRole Source
		/// The projected constraint role associated with this calculated value.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue_Deprecated/Source.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue_Deprecated/Source.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ConstraintRoleProjections", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue_Deprecated/Source.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("56a95cd0-aa18-40b1-8d52-ab02a54d6e4b")]
		public virtual CalculatedPathValue Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CalculatedPathValue)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ProjectedFromCalculatedValue of a ConstraintRoleSequenceHasRole
		/// <summary>
		/// Gets ProjectedFromCalculatedValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static CalculatedPathValue GetProjectedFromCalculatedValue(ConstraintRoleSequenceHasRole element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConstraintRoleDomainRoleId) as CalculatedPathValue;
		}
		
		/// <summary>
		/// Sets ProjectedFromCalculatedValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetProjectedFromCalculatedValue(ConstraintRoleSequenceHasRole element, CalculatedPathValue newSource)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConstraintRoleDomainRoleId, newSource);
		}
		#endregion
		#region ConstraintRole link accessor
		/// <summary>
		/// Get the ConstraintRoleProjectedFromCalculatedPathValue_Deprecated link to a ConstraintRoleSequenceHasRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue_Deprecated GetLinkToProjectedFromCalculatedValue (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasRole constraintRoleInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue_Deprecated> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue_Deprecated>(constraintRoleInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue_Deprecated.ConstraintRoleDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ConstraintRole not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Source link accessor
		/// <summary>
		/// Get the list of ConstraintRoleProjectedFromCalculatedPathValue_Deprecated links to a CalculatedPathValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue_Deprecated> GetLinksToConstraintRoleProjections ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue sourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue_Deprecated>(sourceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue_Deprecated.SourceDomainRoleId);
		}
		#endregion
		#region ConstraintRoleProjectedFromCalculatedPathValue_Deprecated instance accessors
		
		/// <summary>
		/// Get any ConstraintRoleProjectedFromCalculatedPathValue_Deprecated links between a given ConstraintRoleSequenceHasRole and a CalculatedPathValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue_Deprecated> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasRole source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue_Deprecated> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue_Deprecated>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue_Deprecated> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue_Deprecated>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue_Deprecated.ConstraintRoleDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue_Deprecated link in links )
			{
				if ( target.Equals(link.Source) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConstraintRoleProjectedFromCalculatedPathValue_Deprecated link between a given ConstraintRoleSequenceHasRoleand a CalculatedPathValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue_Deprecated GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasRole source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue_Deprecated> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue_Deprecated>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue_Deprecated.ConstraintRoleDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromCalculatedPathValue_Deprecated link in links )
			{
				if ( target.Equals(link.Source) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ConstraintRoleProjectedFromPathConstant_Deprecated
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant_Deprecated
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant_Deprecated.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant_Deprecated.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("fd92b616-8995-4a10-949f-7e9f8b0e30cd")]
	public partial class ConstraintRoleProjectedFromPathConstant_Deprecated : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConstraintRoleProjectedFromPathConstant_Deprecated domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfd92b616, 0x8995, 0x4a10, 0x94, 0x9f, 0x7e, 0x9f, 0x8b, 0x0e, 0x30, 0xcd);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConstraintRoleProjectedFromPathConstant_Deprecated link in the same Partition as the given ConstraintRoleSequenceHasRole
		/// </summary>
		/// <param name="source">ConstraintRoleSequenceHasRole to use as the source of the relationship.</param>
		/// <param name="target">PathConstant to use as the target of the relationship.</param>
		public ConstraintRoleProjectedFromPathConstant_Deprecated(ConstraintRoleSequenceHasRole source, PathConstant target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConstraintRoleProjectedFromPathConstant_Deprecated.ConstraintRoleDomainRoleId, source), new DslModeling::RoleAssignment(ConstraintRoleProjectedFromPathConstant_Deprecated.SourceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConstraintRoleProjectedFromPathConstant_Deprecated(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConstraintRoleProjectedFromPathConstant_Deprecated(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConstraintRoleProjectedFromPathConstant_Deprecated(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConstraintRoleProjectedFromPathConstant_Deprecated(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ConstraintRole domain role code
		
		/// <summary>
		/// ConstraintRole domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConstraintRoleDomainRoleId = new global::System.Guid(0x2de9bcfe, 0x120c, 0x4c60, 0x88, 0xdc, 0x65, 0x57, 0x4e, 0xfb, 0x82, 0xa7);
		
		/// <summary>
		/// DomainRole ConstraintRole
		/// The constant value associated with this constraint role.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant_Deprecated/ConstraintRole.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant_Deprecated/ConstraintRole.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ProjectedFromConstant", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant_Deprecated/ConstraintRole.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("2de9bcfe-120c-4c60-88dc-65574efb82a7")]
		public virtual ConstraintRoleSequenceHasRole ConstraintRole
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConstraintRoleSequenceHasRole)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConstraintRoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConstraintRoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConstraintRoleProjection of a PathConstant
		/// <summary>
		/// Gets ConstraintRoleProjection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ConstraintRoleSequenceHasRole GetConstraintRoleProjection(PathConstant element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SourceDomainRoleId) as ConstraintRoleSequenceHasRole;
		}
		
		/// <summary>
		/// Sets ConstraintRoleProjection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetConstraintRoleProjection(PathConstant element, ConstraintRoleSequenceHasRole newConstraintRole)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SourceDomainRoleId, newConstraintRole);
		}
		#endregion
		#region Source domain role code
		
		/// <summary>
		/// Source domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainRoleId = new global::System.Guid(0xbfc9befb, 0xbe9a, 0x4770, 0x9c, 0xcc, 0x16, 0x5f, 0xb4, 0x12, 0xdf, 0x17);
		
		/// <summary>
		/// DomainRole Source
		/// The constraint role that uses this path constant.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant_Deprecated/Source.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant_Deprecated/Source.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ConstraintRoleProjection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant_Deprecated/Source.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("bfc9befb-be9a-4770-9ccc-165fb412df17")]
		public virtual PathConstant Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PathConstant)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ProjectedFromConstant of a ConstraintRoleSequenceHasRole
		/// <summary>
		/// Gets ProjectedFromConstant.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static PathConstant GetProjectedFromConstant(ConstraintRoleSequenceHasRole element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConstraintRoleDomainRoleId) as PathConstant;
		}
		
		/// <summary>
		/// Sets ProjectedFromConstant.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetProjectedFromConstant(ConstraintRoleSequenceHasRole element, PathConstant newSource)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConstraintRoleDomainRoleId, newSource);
		}
		#endregion
		#region ConstraintRole link accessor
		/// <summary>
		/// Get the ConstraintRoleProjectedFromPathConstant_Deprecated link to a ConstraintRoleSequenceHasRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant_Deprecated GetLinkToProjectedFromConstant (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasRole constraintRoleInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant_Deprecated> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant_Deprecated>(constraintRoleInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant_Deprecated.ConstraintRoleDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ConstraintRole not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Source link accessor
		/// <summary>
		/// Get the ConstraintRoleProjectedFromPathConstant_Deprecated link to a PathConstant.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant_Deprecated GetLinkToConstraintRoleProjection (global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathConstant sourceInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant_Deprecated> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant_Deprecated>(sourceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant_Deprecated.SourceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Source not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ConstraintRoleProjectedFromPathConstant_Deprecated instance accessors
		
		/// <summary>
		/// Get any ConstraintRoleProjectedFromPathConstant_Deprecated links between a given ConstraintRoleSequenceHasRole and a PathConstant.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant_Deprecated> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasRole source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathConstant target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant_Deprecated> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant_Deprecated>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant_Deprecated> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant_Deprecated>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant_Deprecated.ConstraintRoleDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant_Deprecated link in links )
			{
				if ( target.Equals(link.Source) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConstraintRoleProjectedFromPathConstant_Deprecated link between a given ConstraintRoleSequenceHasRoleand a PathConstant.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant_Deprecated GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasRole source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathConstant target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant_Deprecated> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant_Deprecated>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant_Deprecated.ConstraintRoleDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant_Deprecated link in links )
			{
				if ( target.Equals(link.Source) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ModelHasModelErrorDisplayFilter
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelErrorDisplayFilter
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelErrorDisplayFilter.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelErrorDisplayFilter.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("a8e175fa-a727-4909-8944-423ef0748e3d")]
	public partial class ModelHasModelErrorDisplayFilter : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasModelErrorDisplayFilter domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa8e175fa, 0xa727, 0x4909, 0x89, 0x44, 0x42, 0x3e, 0xf0, 0x74, 0x8e, 0x3d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasModelErrorDisplayFilter link in the same Partition as the given ORMModel
		/// </summary>
		/// <param name="source">ORMModel to use as the source of the relationship.</param>
		/// <param name="target">ModelErrorDisplayFilter to use as the target of the relationship.</param>
		public ModelHasModelErrorDisplayFilter(ORMModel source, ModelErrorDisplayFilter target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasModelErrorDisplayFilter.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasModelErrorDisplayFilter.ModelErrorDisplayFilterDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasModelErrorDisplayFilter(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasModelErrorDisplayFilter(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasModelErrorDisplayFilter(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasModelErrorDisplayFilter(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x69e39a5b, 0xb394, 0x4270, 0x9c, 0x43, 0x89, 0x4e, 0x45, 0x16, 0xb1, 0x77);
		
		/// <summary>
		/// DomainRole Model
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelErrorDisplayFilter.Model
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelErrorDisplayFilter/Model.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelErrorDisplayFilter/Model.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ModelErrorDisplayFilter", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelErrorDisplayFilter/Model.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("69e39a5b-b394-4270-9c43-894e4516b177")]
		public virtual ORMModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ORMModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a ModelErrorDisplayFilter
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ORMModel GetModel(ModelErrorDisplayFilter element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ModelErrorDisplayFilterDomainRoleId) as ORMModel;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(ModelErrorDisplayFilter element, ORMModel newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ModelErrorDisplayFilterDomainRoleId, newModel);
		}
		#endregion
		#region ModelErrorDisplayFilter domain role code
		
		/// <summary>
		/// ModelErrorDisplayFilter domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelErrorDisplayFilterDomainRoleId = new global::System.Guid(0xbe9e525d, 0xc456, 0x40d9, 0x84, 0x20, 0xa0, 0x74, 0x5f, 0xbe, 0xd2, 0x5a);
		
		/// <summary>
		/// DomainRole ModelErrorDisplayFilter
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelErrorDisplayFilter.ModelErrorDisplayFilter
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelErrorDisplayFilter/ModelErrorDisplayFilter.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelErrorDisplayFilter/ModelErrorDisplayFilter.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelErrorDisplayFilter/ModelErrorDisplayFilter.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("be9e525d-c456-40d9-8420-a0745fbed25a")]
		public virtual ModelErrorDisplayFilter ModelErrorDisplayFilter
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelErrorDisplayFilter)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelErrorDisplayFilterDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelErrorDisplayFilterDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelErrorDisplayFilter of a ORMModel
		/// <summary>
		/// Gets ModelErrorDisplayFilter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelErrorDisplayFilter GetModelErrorDisplayFilter(ORMModel element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ModelDomainRoleId) as ModelErrorDisplayFilter;
		}
		
		/// <summary>
		/// Sets ModelErrorDisplayFilter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModelErrorDisplayFilter(ORMModel element, ModelErrorDisplayFilter newModelErrorDisplayFilter)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ModelDomainRoleId, newModelErrorDisplayFilter);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the ModelHasModelErrorDisplayFilter link to a ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelErrorDisplayFilter GetLinkToModelErrorDisplayFilter (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel modelInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelErrorDisplayFilter> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelErrorDisplayFilter>(modelInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelErrorDisplayFilter.ModelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Model not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelErrorDisplayFilter link accessor
		/// <summary>
		/// Get the ModelHasModelErrorDisplayFilter link to a ModelErrorDisplayFilter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelErrorDisplayFilter GetLinkToModel (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelErrorDisplayFilter modelErrorDisplayFilterInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelErrorDisplayFilter> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelErrorDisplayFilter>(modelErrorDisplayFilterInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelErrorDisplayFilter.ModelErrorDisplayFilterDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ModelErrorDisplayFilter not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasModelErrorDisplayFilter instance accessors
		
		/// <summary>
		/// Get any ModelHasModelErrorDisplayFilter links between a given ORMModel and a ModelErrorDisplayFilter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelErrorDisplayFilter> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelErrorDisplayFilter target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelErrorDisplayFilter> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelErrorDisplayFilter>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelErrorDisplayFilter> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelErrorDisplayFilter>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelErrorDisplayFilter.ModelDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelErrorDisplayFilter link in links )
			{
				if ( target.Equals(link.ModelErrorDisplayFilter) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasModelErrorDisplayFilter link between a given ORMModeland a ModelErrorDisplayFilter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelErrorDisplayFilter GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelErrorDisplayFilter target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelErrorDisplayFilter> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelErrorDisplayFilter>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelErrorDisplayFilter.ModelDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelErrorDisplayFilter link in links )
			{
				if ( target.Equals(link.ModelErrorDisplayFilter) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ElementGroupingSetRelatesToORMModel
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetRelatesToORMModel
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetRelatesToORMModel.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetRelatesToORMModel.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("abdbcfc4-8861-4ae6-bcdc-5c5851713a74")]
	public partial class ElementGroupingSetRelatesToORMModel : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ElementGroupingSetRelatesToORMModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xabdbcfc4, 0x8861, 0x4ae6, 0xbc, 0xdc, 0x5c, 0x58, 0x51, 0x71, 0x3a, 0x74);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ElementGroupingSetRelatesToORMModel link in the same Partition as the given ElementGroupingSet
		/// </summary>
		/// <param name="source">ElementGroupingSet to use as the source of the relationship.</param>
		/// <param name="target">ORMModel to use as the target of the relationship.</param>
		public ElementGroupingSetRelatesToORMModel(ElementGroupingSet source, ORMModel target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ElementGroupingSetRelatesToORMModel.GroupingSetDomainRoleId, source), new DslModeling::RoleAssignment(ElementGroupingSetRelatesToORMModel.ModelDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ElementGroupingSetRelatesToORMModel(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ElementGroupingSetRelatesToORMModel(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ElementGroupingSetRelatesToORMModel(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ElementGroupingSetRelatesToORMModel(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region GroupingSet domain role code
		
		/// <summary>
		/// GroupingSet domain role Id.
		/// </summary>
		public static readonly global::System.Guid GroupingSetDomainRoleId = new global::System.Guid(0x9e2bbc38, 0x9220, 0x424f, 0xaa, 0xc6, 0xb8, 0x6d, 0x45, 0xd9, 0x45, 0x99);
		
		/// <summary>
		/// DomainRole GroupingSet
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetRelatesToORMModel.GroupingSet
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetRelatesToORMModel/GroupingSet.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetRelatesToORMModel/GroupingSet.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Model", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetRelatesToORMModel/GroupingSet.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("9e2bbc38-9220-424f-aac6-b86d45d94599")]
		public virtual ElementGroupingSet GroupingSet
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ElementGroupingSet)DslModeling::DomainRoleInfo.GetRolePlayer(this, GroupingSetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, GroupingSetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access GroupingSet of a ORMModel
		/// <summary>
		/// Gets GroupingSet.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ElementGroupingSet GetGroupingSet(ORMModel element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ModelDomainRoleId) as ElementGroupingSet;
		}
		
		/// <summary>
		/// Sets GroupingSet.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetGroupingSet(ORMModel element, ElementGroupingSet newGroupingSet)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ModelDomainRoleId, newGroupingSet);
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0xa2d63832, 0xf63b, 0x4d4b, 0xaf, 0xe8, 0x1d, 0xbc, 0xc1, 0xcd, 0x89, 0x7f);
		
		/// <summary>
		/// DomainRole Model
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetRelatesToORMModel.Model
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetRelatesToORMModel/Model.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetRelatesToORMModel/Model.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "GroupingSet", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetRelatesToORMModel/Model.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("a2d63832-f63b-4d4b-afe8-1dbcc1cd897f")]
		public virtual ORMModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ORMModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a ElementGroupingSet
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ORMModel GetModel(ElementGroupingSet element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, GroupingSetDomainRoleId) as ORMModel;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(ElementGroupingSet element, ORMModel newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, GroupingSetDomainRoleId, newModel);
		}
		#endregion
		#region GroupingSet link accessor
		/// <summary>
		/// Get the ElementGroupingSetRelatesToORMModel link to a ElementGroupingSet.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetRelatesToORMModel GetLinkToModel (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSet groupingSetInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetRelatesToORMModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetRelatesToORMModel>(groupingSetInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetRelatesToORMModel.GroupingSetDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of GroupingSet not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the ElementGroupingSetRelatesToORMModel link to a ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetRelatesToORMModel GetLinkToGroupingSet (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel modelInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetRelatesToORMModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetRelatesToORMModel>(modelInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetRelatesToORMModel.ModelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Model not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ElementGroupingSetRelatesToORMModel instance accessors
		
		/// <summary>
		/// Get any ElementGroupingSetRelatesToORMModel links between a given ElementGroupingSet and a ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetRelatesToORMModel> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSet source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetRelatesToORMModel> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetRelatesToORMModel>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetRelatesToORMModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetRelatesToORMModel>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetRelatesToORMModel.GroupingSetDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetRelatesToORMModel link in links )
			{
				if ( target.Equals(link.Model) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ElementGroupingSetRelatesToORMModel link between a given ElementGroupingSetand a ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetRelatesToORMModel GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSet source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetRelatesToORMModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetRelatesToORMModel>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetRelatesToORMModel.GroupingSetDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetRelatesToORMModel link in links )
			{
				if ( target.Equals(link.Model) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ElementGroupingSetContainsElementGrouping
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetContainsElementGrouping
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetContainsElementGrouping.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetContainsElementGrouping.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("a0b26ee8-e099-4e74-8eff-5e7d2fa55b26")]
	public sealed partial class ElementGroupingSetContainsElementGrouping : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ElementGroupingSetContainsElementGrouping domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa0b26ee8, 0xe099, 0x4e74, 0x8e, 0xff, 0x5e, 0x7d, 0x2f, 0xa5, 0x5b, 0x26);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ElementGroupingSetContainsElementGrouping link in the same Partition as the given ElementGroupingSet
		/// </summary>
		/// <param name="source">ElementGroupingSet to use as the source of the relationship.</param>
		/// <param name="target">ElementGrouping to use as the target of the relationship.</param>
		public ElementGroupingSetContainsElementGrouping(ElementGroupingSet source, ElementGrouping target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ElementGroupingSetContainsElementGrouping.GroupingSetDomainRoleId, source), new DslModeling::RoleAssignment(ElementGroupingSetContainsElementGrouping.GroupingDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ElementGroupingSetContainsElementGrouping(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ElementGroupingSetContainsElementGrouping(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ElementGroupingSetContainsElementGrouping(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ElementGroupingSetContainsElementGrouping(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region GroupingSet domain role code
		
		/// <summary>
		/// GroupingSet domain role Id.
		/// </summary>
		public static readonly global::System.Guid GroupingSetDomainRoleId = new global::System.Guid(0x02f5b2e6, 0x9a76, 0x43ac, 0xb0, 0x3d, 0x93, 0x37, 0x46, 0x1e, 0x0e, 0x90);
		
		/// <summary>
		/// DomainRole GroupingSet
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetContainsElementGrouping.GroupingSet
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetContainsElementGrouping/GroupingSet.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetContainsElementGrouping/GroupingSet.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "GroupingCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetContainsElementGrouping/GroupingSet.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("02f5b2e6-9a76-43ac-b03d-9337461e0e90")]
		public ElementGroupingSet GroupingSet
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ElementGroupingSet)DslModeling::DomainRoleInfo.GetRolePlayer(this, GroupingSetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, GroupingSetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access GroupingSet of a ElementGrouping
		/// <summary>
		/// Gets GroupingSet.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ElementGroupingSet GetGroupingSet(ElementGrouping element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, GroupingDomainRoleId) as ElementGroupingSet;
		}
		
		/// <summary>
		/// Sets GroupingSet.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetGroupingSet(ElementGrouping element, ElementGroupingSet newGroupingSet)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, GroupingDomainRoleId, newGroupingSet);
		}
		#endregion
		#region Grouping domain role code
		
		/// <summary>
		/// Grouping domain role Id.
		/// </summary>
		public static readonly global::System.Guid GroupingDomainRoleId = new global::System.Guid(0xfe740a9a, 0xeac3, 0x4a80, 0xa5, 0x2d, 0xd4, 0x48, 0x40, 0x03, 0xec, 0x4a);
		
		/// <summary>
		/// DomainRole Grouping
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetContainsElementGrouping.Grouping
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetContainsElementGrouping/Grouping.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetContainsElementGrouping/Grouping.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "GroupingSet", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetContainsElementGrouping/Grouping.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("fe740a9a-eac3-4a80-a52d-d4484003ec4a")]
		public ElementGrouping Grouping
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ElementGrouping)DslModeling::DomainRoleInfo.GetRolePlayer(this, GroupingDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, GroupingDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access GroupingCollection of a ElementGroupingSet
		/// <summary>
		/// Gets a list of GroupingCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ElementGrouping> GetGroupingCollection(ElementGroupingSet element)
		{
			return new DslModeling::LinkedElementCollection<ElementGrouping>(element, GroupingSetDomainRoleId);
		}
		#endregion
		#region GroupingSet link accessor
		/// <summary>
		/// Get the list of ElementGroupingSetContainsElementGrouping links to a ElementGroupingSet.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetContainsElementGrouping> GetLinksToGroupingCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSet groupingSetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetContainsElementGrouping>(groupingSetInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetContainsElementGrouping.GroupingSetDomainRoleId);
		}
		#endregion
		#region Grouping link accessor
		/// <summary>
		/// Get the ElementGroupingSetContainsElementGrouping link to a ElementGrouping.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetContainsElementGrouping GetLinkToGroupingSet (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping groupingInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetContainsElementGrouping> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetContainsElementGrouping>(groupingInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetContainsElementGrouping.GroupingDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Grouping not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ElementGroupingSetContainsElementGrouping instance accessors
		
		/// <summary>
		/// Get any ElementGroupingSetContainsElementGrouping links between a given ElementGroupingSet and a ElementGrouping.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetContainsElementGrouping> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSet source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetContainsElementGrouping> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetContainsElementGrouping>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetContainsElementGrouping> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetContainsElementGrouping>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetContainsElementGrouping.GroupingSetDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetContainsElementGrouping link in links )
			{
				if ( target.Equals(link.Grouping) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ElementGroupingSetContainsElementGrouping link between a given ElementGroupingSetand a ElementGrouping.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetContainsElementGrouping GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSet source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetContainsElementGrouping> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetContainsElementGrouping>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetContainsElementGrouping.GroupingSetDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetContainsElementGrouping link in links )
			{
				if ( target.Equals(link.Grouping) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ElementGroupingIsOfElementGroupingType
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIsOfElementGroupingType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIsOfElementGroupingType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIsOfElementGroupingType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("575c1c61-23f5-4b19-ae80-114e380d7e2a")]
	public partial class ElementGroupingIsOfElementGroupingType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ElementGroupingIsOfElementGroupingType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x575c1c61, 0x23f5, 0x4b19, 0xae, 0x80, 0x11, 0x4e, 0x38, 0x0d, 0x7e, 0x2a);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ElementGroupingIsOfElementGroupingType link in the same Partition as the given ElementGrouping
		/// </summary>
		/// <param name="source">ElementGrouping to use as the source of the relationship.</param>
		/// <param name="target">ElementGroupingType to use as the target of the relationship.</param>
		public ElementGroupingIsOfElementGroupingType(ElementGrouping source, ElementGroupingType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ElementGroupingIsOfElementGroupingType.GroupingDomainRoleId, source), new DslModeling::RoleAssignment(ElementGroupingIsOfElementGroupingType.GroupingTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ElementGroupingIsOfElementGroupingType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ElementGroupingIsOfElementGroupingType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ElementGroupingIsOfElementGroupingType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ElementGroupingIsOfElementGroupingType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Grouping domain role code
		
		/// <summary>
		/// Grouping domain role Id.
		/// </summary>
		public static readonly global::System.Guid GroupingDomainRoleId = new global::System.Guid(0x6f1bf1fe, 0x60d8, 0x48c5, 0xbb, 0xd2, 0xde, 0xe0, 0x06, 0xb4, 0xa0, 0x45);
		
		/// <summary>
		/// DomainRole Grouping
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIsOfElementGroupingType.Grouping
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIsOfElementGroupingType/Grouping.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIsOfElementGroupingType/Grouping.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "GroupingTypeCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIsOfElementGroupingType/Grouping.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("6f1bf1fe-60d8-48c5-bbd2-dee006b4a045")]
		public virtual ElementGrouping Grouping
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ElementGrouping)DslModeling::DomainRoleInfo.GetRolePlayer(this, GroupingDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, GroupingDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Grouping of a ElementGroupingType
		/// <summary>
		/// Gets Grouping.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ElementGrouping GetGrouping(ElementGroupingType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, GroupingTypeDomainRoleId) as ElementGrouping;
		}
		
		/// <summary>
		/// Sets Grouping.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetGrouping(ElementGroupingType element, ElementGrouping newGrouping)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, GroupingTypeDomainRoleId, newGrouping);
		}
		#endregion
		#region GroupingType domain role code
		
		/// <summary>
		/// GroupingType domain role Id.
		/// </summary>
		public static readonly global::System.Guid GroupingTypeDomainRoleId = new global::System.Guid(0x0baffaa0, 0xd7ee, 0x4e6d, 0x98, 0xca, 0xd9, 0xae, 0xfe, 0xbd, 0x4f, 0x1c);
		
		/// <summary>
		/// DomainRole GroupingType
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIsOfElementGroupingType.GroupingType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIsOfElementGroupingType/GroupingType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIsOfElementGroupingType/GroupingType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Grouping", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIsOfElementGroupingType/GroupingType.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("0baffaa0-d7ee-4e6d-98ca-d9aefebd4f1c")]
		public virtual ElementGroupingType GroupingType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ElementGroupingType)DslModeling::DomainRoleInfo.GetRolePlayer(this, GroupingTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, GroupingTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access GroupingTypeCollection of a ElementGrouping
		/// <summary>
		/// Gets a list of GroupingTypeCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ElementGroupingType> GetGroupingTypeCollection(ElementGrouping element)
		{
			return new DslModeling::LinkedElementCollection<ElementGroupingType>(element, GroupingDomainRoleId);
		}
		#endregion
		#region Grouping link accessor
		/// <summary>
		/// Get the list of ElementGroupingIsOfElementGroupingType links to a ElementGrouping.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIsOfElementGroupingType> GetLinksToGroupingTypeCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping groupingInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIsOfElementGroupingType>(groupingInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIsOfElementGroupingType.GroupingDomainRoleId);
		}
		#endregion
		#region GroupingType link accessor
		/// <summary>
		/// Get the ElementGroupingIsOfElementGroupingType link to a ElementGroupingType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIsOfElementGroupingType GetLinkToGrouping (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingType groupingTypeInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIsOfElementGroupingType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIsOfElementGroupingType>(groupingTypeInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIsOfElementGroupingType.GroupingTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of GroupingType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ElementGroupingIsOfElementGroupingType instance accessors
		
		/// <summary>
		/// Get any ElementGroupingIsOfElementGroupingType links between a given ElementGrouping and a ElementGroupingType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIsOfElementGroupingType> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingType target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIsOfElementGroupingType> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIsOfElementGroupingType>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIsOfElementGroupingType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIsOfElementGroupingType>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIsOfElementGroupingType.GroupingDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIsOfElementGroupingType link in links )
			{
				if ( target.Equals(link.GroupingType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ElementGroupingIsOfElementGroupingType link between a given ElementGroupingand a ElementGroupingType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIsOfElementGroupingType GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingType target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIsOfElementGroupingType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIsOfElementGroupingType>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIsOfElementGroupingType.GroupingDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIsOfElementGroupingType link in links )
			{
				if ( target.Equals(link.GroupingType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship GroupingElementRelationship
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementRelationship
	/// </summary>
	[global::System.ComponentModel.TypeDescriptionProvider(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.ElementTypeDescriptionProvider<GroupingElementRelationship, Design.GroupingElementRelationshipTypeDescriptor>))]
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementRelationship.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementRelationship.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("5b5119d5-bd6a-41e5-8d42-17f25b51655d")]
	public abstract partial class GroupingElementRelationship : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// GroupingElementRelationship domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5b5119d5, 0xbd6a, 0x41e5, 0x8d, 0x42, 0x17, 0xf2, 0x5b, 0x51, 0x65, 0x5d);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">The Partition instance containing this ElementLink</param>
		/// <param name="roleAssignments">A set of role assignments for roleplayer initialization</param>
		/// <param name="propertyAssignments">A set of attribute assignments for attribute initialization</param>
		protected GroupingElementRelationship(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Grouping domain role code
		
		/// <summary>
		/// Grouping domain role Id.
		/// </summary>
		public static readonly global::System.Guid GroupingDomainRoleId = new global::System.Guid(0xdaa7fbc4, 0x68dc, 0x4c03, 0x87, 0x5d, 0x49, 0xad, 0x7c, 0x24, 0x50, 0x41);
		
		/// <summary>
		/// DomainRole Grouping
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementRelationship.Grouping
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementRelationship/Grouping.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementRelationship/Grouping.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ElementCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementRelationship/Grouping.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("daa7fbc4-68dc-4c03-875d-49ad7c245041")]
		public abstract ElementGrouping Grouping
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access GroupingCollection of a ModelElement
		/// <summary>
		/// Gets a list of GroupingCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<ElementGrouping> GetGroupingCollection(global::Microsoft.VisualStudio.Modeling.ModelElement element)
		{
			return new DslModeling::ReadOnlyLinkedElementCollection<ElementGrouping>(element, ElementDomainRoleId);
		}
		#endregion
		#region Element domain role code
		
		/// <summary>
		/// Element domain role Id.
		/// </summary>
		public static readonly global::System.Guid ElementDomainRoleId = new global::System.Guid(0xae038bb0, 0x4ce5, 0x49fb, 0xa1, 0x13, 0x6d, 0xe0, 0xda, 0x3d, 0xc7, 0x66);
		
		/// <summary>
		/// DomainRole Element
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementRelationship.Element
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementRelationship/Element.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementRelationship/Element.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "GroupingCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementRelationship/Element.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ae038bb0-4ce5-49fb-a113-6de0da3dc766")]
		public abstract global::Microsoft.VisualStudio.Modeling.ModelElement Element
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access ElementCollection of a ElementGrouping
		/// <summary>
		/// Gets a list of ElementCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<global::Microsoft.VisualStudio.Modeling.ModelElement> GetElementCollection(ElementGrouping element)
		{
			return new DslModeling::ReadOnlyLinkedElementCollection<global::Microsoft.VisualStudio.Modeling.ModelElement>(element, GroupingDomainRoleId);
		}
		#endregion
		#region Grouping link accessor
		/// <summary>
		/// Get the list of GroupingElementRelationship links to a ElementGrouping.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementRelationship> GetLinksToElementCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping groupingInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementRelationship>(groupingInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementRelationship.GroupingDomainRoleId);
		}
		#endregion
		#region Element link accessor
		/// <summary>
		/// Get the list of GroupingElementRelationship links to a ModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementRelationship> GetLinksToGroupingCollection ( global::Microsoft.VisualStudio.Modeling.ModelElement elementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementRelationship>(elementInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementRelationship.ElementDomainRoleId);
		}
		#endregion
		#region GroupingElementRelationship instance accessors
		
		/// <summary>
		/// Get any GroupingElementRelationship links between a given ElementGrouping and a ModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementRelationship> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping source, global::Microsoft.VisualStudio.Modeling.ModelElement target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementRelationship> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementRelationship>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementRelationship> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementRelationship>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementRelationship.GroupingDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementRelationship link in links )
			{
				if ( target.Equals(link.Element) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one GroupingElementRelationship link between a given ElementGroupingand a ModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementRelationship GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping source, global::Microsoft.VisualStudio.Modeling.ModelElement target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementRelationship> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementRelationship>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementRelationship.GroupingDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementRelationship link in links )
			{
				if ( target.Equals(link.Element) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship GroupingElementInclusion
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementInclusion
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementInclusion.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementInclusion.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("c66c692d-6aa6-4fb9-901a-7e6c205aa272")]
	public partial class GroupingElementInclusion : GroupingElementRelationship
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// GroupingElementInclusion domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc66c692d, 0x6aa6, 0x4fb9, 0x90, 0x1a, 0x7e, 0x6c, 0x20, 0x5a, 0xa2, 0x72);
	
				
		/// <summary>
		/// Constructor
		/// Creates a GroupingElementInclusion link in the same Partition as the given ElementGrouping
		/// </summary>
		/// <param name="source">ElementGrouping to use as the source of the relationship.</param>
		/// <param name="target">ModelElement to use as the target of the relationship.</param>
		public GroupingElementInclusion(ElementGrouping source, global::Microsoft.VisualStudio.Modeling.ModelElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(GroupingElementInclusion.GroupingDomainRoleId, source), new DslModeling::RoleAssignment(GroupingElementInclusion.IncludedElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public GroupingElementInclusion(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public GroupingElementInclusion(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public GroupingElementInclusion(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public GroupingElementInclusion(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Grouping domain role code
		
		/// <summary>
		/// Grouping domain role Id.
		/// </summary>
		public static readonly new global::System.Guid GroupingDomainRoleId = new global::System.Guid(0x80689cac, 0xf3ee, 0x45c0, 0xbe, 0x1e, 0x3c, 0xec, 0xd0, 0x25, 0x99, 0x71);
		
		/// <summary>
		/// DomainRole Grouping
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementInclusion.Grouping
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementInclusion/Grouping.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementInclusion/Grouping.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "IncludedElementCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementInclusion/Grouping.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("80689cac-f3ee-45c0-be1e-3cecd0259971")]
		public override ElementGrouping Grouping
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ElementGrouping)DslModeling::DomainRoleInfo.GetRolePlayer(this, GroupingDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, GroupingDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access GroupingCollection of a ModelElement
		/// <summary>
		/// Gets a list of GroupingCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new DslModeling::LinkedElementCollection<ElementGrouping> GetGroupingCollection(global::Microsoft.VisualStudio.Modeling.ModelElement element)
		{
			return new DslModeling::LinkedElementCollection<ElementGrouping>(element, IncludedElementDomainRoleId);
		}
		#endregion
		#region IncludedElement domain role code
		
		/// <summary>
		/// IncludedElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid IncludedElementDomainRoleId = new global::System.Guid(0xb7973813, 0x1ed1, 0x4440, 0xa5, 0x2b, 0xe0, 0x81, 0x74, 0x98, 0x63, 0xeb);
		
		/// <summary>
		/// DomainRole IncludedElement
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementInclusion.IncludedElement
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementInclusion/IncludedElement.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementInclusion/IncludedElement.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "GroupingCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementInclusion/IncludedElement.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b7973813-1ed1-4440-a52b-e081749863eb")]
		public virtual global::Microsoft.VisualStudio.Modeling.ModelElement IncludedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::Microsoft.VisualStudio.Modeling.ModelElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, IncludedElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, IncludedElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access IncludedElementCollection of a ElementGrouping
		/// <summary>
		/// Gets a list of IncludedElementCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<global::Microsoft.VisualStudio.Modeling.ModelElement> GetIncludedElementCollection(ElementGrouping element)
		{
			return new DslModeling::LinkedElementCollection<global::Microsoft.VisualStudio.Modeling.ModelElement>(element, GroupingDomainRoleId);
		}
		#endregion
		#region Element domain role override
		
		/// <summary>
		/// Gets the element playing IncludedElement domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementRelationship.Element
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.IncludedElement;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.IncludedElement = value;
			}
		}
		
		#endregion
		#region Grouping link accessor
		/// <summary>
		/// Get the list of GroupingElementInclusion links to a ElementGrouping.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementInclusion> GetLinksToIncludedElementCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping groupingInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementInclusion>(groupingInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementInclusion.GroupingDomainRoleId);
		}
		#endregion
		#region IncludedElement link accessor
		/// <summary>
		/// Get the list of GroupingElementInclusion links to a ModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementInclusion> GetLinksToGroupingCollection ( global::Microsoft.VisualStudio.Modeling.ModelElement includedElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementInclusion>(includedElementInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementInclusion.IncludedElementDomainRoleId);
		}
		#endregion
		#region GroupingElementInclusion instance accessors
		
		/// <summary>
		/// Get any GroupingElementInclusion links between a given ElementGrouping and a ModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementInclusion> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping source, global::Microsoft.VisualStudio.Modeling.ModelElement target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementInclusion> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementInclusion>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementInclusion> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementInclusion>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementInclusion.GroupingDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementInclusion link in links )
			{
				if ( target.Equals(link.IncludedElement) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one GroupingElementInclusion link between a given ElementGroupingand a ModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementInclusion GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping source, global::Microsoft.VisualStudio.Modeling.ModelElement target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementInclusion> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementInclusion>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementInclusion.GroupingDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementInclusion link in links )
			{
				if ( target.Equals(link.IncludedElement) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship GroupingElementExclusion
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementExclusion
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementExclusion.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementExclusion.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("cd51e687-6d5b-4102-b08c-78e1da44ba38")]
	public partial class GroupingElementExclusion : GroupingElementRelationship
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// GroupingElementExclusion domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xcd51e687, 0x6d5b, 0x4102, 0xb0, 0x8c, 0x78, 0xe1, 0xda, 0x44, 0xba, 0x38);
	
				
		/// <summary>
		/// Constructor
		/// Creates a GroupingElementExclusion link in the same Partition as the given ElementGrouping
		/// </summary>
		/// <param name="source">ElementGrouping to use as the source of the relationship.</param>
		/// <param name="target">ModelElement to use as the target of the relationship.</param>
		public GroupingElementExclusion(ElementGrouping source, global::Microsoft.VisualStudio.Modeling.ModelElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(GroupingElementExclusion.GroupingDomainRoleId, source), new DslModeling::RoleAssignment(GroupingElementExclusion.ExcludedElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public GroupingElementExclusion(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public GroupingElementExclusion(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public GroupingElementExclusion(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public GroupingElementExclusion(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Grouping domain role code
		
		/// <summary>
		/// Grouping domain role Id.
		/// </summary>
		public static readonly new global::System.Guid GroupingDomainRoleId = new global::System.Guid(0x3c61d89a, 0x2944, 0x418a, 0x85, 0x3c, 0xda, 0xd6, 0x2b, 0x11, 0x42, 0x99);
		
		/// <summary>
		/// DomainRole Grouping
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementExclusion.Grouping
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementExclusion/Grouping.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementExclusion/Grouping.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ExcludedElementCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementExclusion/Grouping.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("3c61d89a-2944-418a-853c-dad62b114299")]
		public override ElementGrouping Grouping
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ElementGrouping)DslModeling::DomainRoleInfo.GetRolePlayer(this, GroupingDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, GroupingDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access GroupingCollection of a ModelElement
		/// <summary>
		/// Gets a list of GroupingCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new DslModeling::LinkedElementCollection<ElementGrouping> GetGroupingCollection(global::Microsoft.VisualStudio.Modeling.ModelElement element)
		{
			return new DslModeling::LinkedElementCollection<ElementGrouping>(element, ExcludedElementDomainRoleId);
		}
		#endregion
		#region ExcludedElement domain role code
		
		/// <summary>
		/// ExcludedElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid ExcludedElementDomainRoleId = new global::System.Guid(0x531798a4, 0xd4bd, 0x4e95, 0xae, 0x2b, 0x8e, 0x97, 0xe6, 0x5a, 0x02, 0x49);
		
		/// <summary>
		/// DomainRole ExcludedElement
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementExclusion.ExcludedElement
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementExclusion/ExcludedElement.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementExclusion/ExcludedElement.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "GroupingCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementExclusion/ExcludedElement.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("531798a4-d4bd-4e95-ae2b-8e97e65a0249")]
		public virtual global::Microsoft.VisualStudio.Modeling.ModelElement ExcludedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::Microsoft.VisualStudio.Modeling.ModelElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, ExcludedElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ExcludedElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ExcludedElementCollection of a ElementGrouping
		/// <summary>
		/// Gets a list of ExcludedElementCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<global::Microsoft.VisualStudio.Modeling.ModelElement> GetExcludedElementCollection(ElementGrouping element)
		{
			return new DslModeling::LinkedElementCollection<global::Microsoft.VisualStudio.Modeling.ModelElement>(element, GroupingDomainRoleId);
		}
		#endregion
		#region Element domain role override
		
		/// <summary>
		/// Gets the element playing ExcludedElement domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementRelationship.Element
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ExcludedElement;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ExcludedElement = value;
			}
		}
		
		#endregion
		#region Grouping link accessor
		/// <summary>
		/// Get the list of GroupingElementExclusion links to a ElementGrouping.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementExclusion> GetLinksToExcludedElementCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping groupingInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementExclusion>(groupingInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementExclusion.GroupingDomainRoleId);
		}
		#endregion
		#region ExcludedElement link accessor
		/// <summary>
		/// Get the list of GroupingElementExclusion links to a ModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementExclusion> GetLinksToGroupingCollection ( global::Microsoft.VisualStudio.Modeling.ModelElement excludedElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementExclusion>(excludedElementInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementExclusion.ExcludedElementDomainRoleId);
		}
		#endregion
		#region GroupingElementExclusion instance accessors
		
		/// <summary>
		/// Get any GroupingElementExclusion links between a given ElementGrouping and a ModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementExclusion> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping source, global::Microsoft.VisualStudio.Modeling.ModelElement target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementExclusion> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementExclusion>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementExclusion> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementExclusion>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementExclusion.GroupingDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementExclusion link in links )
			{
				if ( target.Equals(link.ExcludedElement) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one GroupingElementExclusion link between a given ElementGroupingand a ModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementExclusion GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping source, global::Microsoft.VisualStudio.Modeling.ModelElement target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementExclusion> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementExclusion>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementExclusion.GroupingDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementExclusion link in links )
			{
				if ( target.Equals(link.ExcludedElement) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ElementGroupingContainsElementGrouping
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingContainsElementGrouping
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingContainsElementGrouping.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingContainsElementGrouping.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("7b1d7109-3aea-406a-89e8-989dbb27a469")]
	public abstract partial class ElementGroupingContainsElementGrouping : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ElementGroupingContainsElementGrouping domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7b1d7109, 0x3aea, 0x406a, 0x89, 0xe8, 0x98, 0x9d, 0xbb, 0x27, 0xa4, 0x69);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">The Partition instance containing this ElementLink</param>
		/// <param name="roleAssignments">A set of role assignments for roleplayer initialization</param>
		/// <param name="propertyAssignments">A set of attribute assignments for attribute initialization</param>
		protected ElementGroupingContainsElementGrouping(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ParentGrouping domain role code
		
		/// <summary>
		/// ParentGrouping domain role Id.
		/// </summary>
		public static readonly global::System.Guid ParentGroupingDomainRoleId = new global::System.Guid(0x73f0282c, 0x73e5, 0x4eed, 0xbc, 0x79, 0x96, 0x93, 0xa8, 0x21, 0x5a, 0x8b);
		
		/// <summary>
		/// DomainRole ParentGrouping
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingContainsElementGrouping.ParentGrouping
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingContainsElementGrouping/ParentGrouping.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingContainsElementGrouping/ParentGrouping.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ChildGroupingCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingContainsElementGrouping/ParentGrouping.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("73f0282c-73e5-4eed-bc79-9693a8215a8b")]
		public abstract ElementGrouping ParentGrouping
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access ParentGroupingCollection of a ElementGrouping
		/// <summary>
		/// Gets a list of ParentGroupingCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<ElementGrouping> GetParentGroupingCollection(ElementGrouping element)
		{
			return new DslModeling::ReadOnlyLinkedElementCollection<ElementGrouping>(element, ChildGroupingDomainRoleId);
		}
		#endregion
		#region ChildGrouping domain role code
		
		/// <summary>
		/// ChildGrouping domain role Id.
		/// </summary>
		public static readonly global::System.Guid ChildGroupingDomainRoleId = new global::System.Guid(0x88f5e59f, 0x24a3, 0x4433, 0x8b, 0x4f, 0x10, 0xcb, 0x85, 0x80, 0x75, 0x97);
		
		/// <summary>
		/// DomainRole ChildGrouping
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingContainsElementGrouping.ChildGrouping
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingContainsElementGrouping/ChildGrouping.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingContainsElementGrouping/ChildGrouping.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ParentGroupingCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingContainsElementGrouping/ChildGrouping.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("88f5e59f-24a3-4433-8b4f-10cb85807597")]
		public abstract ElementGrouping ChildGrouping
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access ChildGroupingCollection of a ElementGrouping
		/// <summary>
		/// Gets a list of ChildGroupingCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<ElementGrouping> GetChildGroupingCollection(ElementGrouping element)
		{
			return new DslModeling::ReadOnlyLinkedElementCollection<ElementGrouping>(element, ParentGroupingDomainRoleId);
		}
		#endregion
		#region ParentGrouping link accessor
		/// <summary>
		/// Get the list of ElementGroupingContainsElementGrouping links to a ElementGrouping.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingContainsElementGrouping> GetLinksToChildGroupingCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping parentGroupingInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingContainsElementGrouping>(parentGroupingInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingContainsElementGrouping.ParentGroupingDomainRoleId);
		}
		#endregion
		#region ChildGrouping link accessor
		/// <summary>
		/// Get the list of ElementGroupingContainsElementGrouping links to a ElementGrouping.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingContainsElementGrouping> GetLinksToParentGroupingCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping childGroupingInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingContainsElementGrouping>(childGroupingInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingContainsElementGrouping.ChildGroupingDomainRoleId);
		}
		#endregion
		#region ElementGroupingContainsElementGrouping instance accessors
		
		/// <summary>
		/// Get any ElementGroupingContainsElementGrouping links between a given ElementGrouping and a ElementGrouping.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingContainsElementGrouping> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingContainsElementGrouping> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingContainsElementGrouping>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingContainsElementGrouping> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingContainsElementGrouping>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingContainsElementGrouping.ParentGroupingDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingContainsElementGrouping link in links )
			{
				if ( target.Equals(link.ChildGrouping) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ElementGroupingContainsElementGrouping link between a given ElementGroupingand a ElementGrouping.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingContainsElementGrouping GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingContainsElementGrouping> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingContainsElementGrouping>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingContainsElementGrouping.ParentGroupingDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingContainsElementGrouping link in links )
			{
				if ( target.Equals(link.ChildGrouping) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ElementGroupingIncludesElementGrouping
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIncludesElementGrouping
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIncludesElementGrouping.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIncludesElementGrouping.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("76f5ea7d-2565-44c7-ba47-eb86fab2a189")]
	public partial class ElementGroupingIncludesElementGrouping : ElementGroupingContainsElementGrouping
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ElementGroupingIncludesElementGrouping domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x76f5ea7d, 0x2565, 0x44c7, 0xba, 0x47, 0xeb, 0x86, 0xfa, 0xb2, 0xa1, 0x89);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ElementGroupingIncludesElementGrouping link in the same Partition as the given ElementGrouping
		/// </summary>
		/// <param name="source">ElementGrouping to use as the source of the relationship.</param>
		/// <param name="target">ElementGrouping to use as the target of the relationship.</param>
		public ElementGroupingIncludesElementGrouping(ElementGrouping source, ElementGrouping target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ElementGroupingIncludesElementGrouping.ParentGroupingDomainRoleId, source), new DslModeling::RoleAssignment(ElementGroupingIncludesElementGrouping.IncludedChildGroupingDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ElementGroupingIncludesElementGrouping(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ElementGroupingIncludesElementGrouping(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ElementGroupingIncludesElementGrouping(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ElementGroupingIncludesElementGrouping(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ParentGrouping domain role code
		
		/// <summary>
		/// ParentGrouping domain role Id.
		/// </summary>
		public static readonly new global::System.Guid ParentGroupingDomainRoleId = new global::System.Guid(0x231da867, 0x2184, 0x43a2, 0xb9, 0xca, 0xe5, 0x1a, 0xfb, 0xc6, 0x0c, 0xdf);
		
		/// <summary>
		/// DomainRole ParentGrouping
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIncludesElementGrouping.ParentGrouping
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIncludesElementGrouping/ParentGrouping.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIncludesElementGrouping/ParentGrouping.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "IncludedChildGroupingCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIncludesElementGrouping/ParentGrouping.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("231da867-2184-43a2-b9ca-e51afbc60cdf")]
		public override ElementGrouping ParentGrouping
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ElementGrouping)DslModeling::DomainRoleInfo.GetRolePlayer(this, ParentGroupingDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ParentGroupingDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access IncludedParentGroupingCollection of a ElementGrouping
		/// <summary>
		/// Gets a list of IncludedParentGroupingCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ElementGrouping> GetIncludedParentGroupingCollection(ElementGrouping element)
		{
			return new DslModeling::LinkedElementCollection<ElementGrouping>(element, IncludedChildGroupingDomainRoleId);
		}
		#endregion
		#region IncludedChildGrouping domain role code
		
		/// <summary>
		/// IncludedChildGrouping domain role Id.
		/// </summary>
		public static readonly global::System.Guid IncludedChildGroupingDomainRoleId = new global::System.Guid(0x07e28d3d, 0xb4d3, 0x40be, 0x9c, 0xaa, 0x0a, 0xfa, 0x62, 0x2e, 0x26, 0xc8);
		
		/// <summary>
		/// DomainRole IncludedChildGrouping
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIncludesElementGrouping.IncludedChildGrouping
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIncludesElementGrouping/IncludedChildGrouping.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIncludesElementGrouping/IncludedChildGrouping.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "IncludedParentGroupingCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIncludesElementGrouping/IncludedChildGrouping.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("07e28d3d-b4d3-40be-9caa-0afa622e26c8")]
		public virtual ElementGrouping IncludedChildGrouping
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ElementGrouping)DslModeling::DomainRoleInfo.GetRolePlayer(this, IncludedChildGroupingDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, IncludedChildGroupingDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access IncludedChildGroupingCollection of a ElementGrouping
		/// <summary>
		/// Gets a list of IncludedChildGroupingCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ElementGrouping> GetIncludedChildGroupingCollection(ElementGrouping element)
		{
			return new DslModeling::LinkedElementCollection<ElementGrouping>(element, ParentGroupingDomainRoleId);
		}
		#endregion
		#region ChildGrouping domain role override
		
		/// <summary>
		/// Gets the element playing IncludedChildGrouping domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingContainsElementGrouping.ChildGrouping
		/// </summary>
		public override ElementGrouping ChildGrouping
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.IncludedChildGrouping;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.IncludedChildGrouping = value;
			}
		}
		
		#endregion
		#region ParentGrouping link accessor
		/// <summary>
		/// Get the list of ElementGroupingIncludesElementGrouping links to a ElementGrouping.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIncludesElementGrouping> GetLinksToIncludedChildGroupingCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping parentGroupingInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIncludesElementGrouping>(parentGroupingInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIncludesElementGrouping.ParentGroupingDomainRoleId);
		}
		#endregion
		#region IncludedChildGrouping link accessor
		/// <summary>
		/// Get the list of ElementGroupingIncludesElementGrouping links to a ElementGrouping.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIncludesElementGrouping> GetLinksToIncludedParentGroupingCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping includedChildGroupingInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIncludesElementGrouping>(includedChildGroupingInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIncludesElementGrouping.IncludedChildGroupingDomainRoleId);
		}
		#endregion
		#region ElementGroupingIncludesElementGrouping instance accessors
		
		/// <summary>
		/// Get any ElementGroupingIncludesElementGrouping links between a given ElementGrouping and a ElementGrouping.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIncludesElementGrouping> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIncludesElementGrouping> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIncludesElementGrouping>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIncludesElementGrouping> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIncludesElementGrouping>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIncludesElementGrouping.ParentGroupingDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIncludesElementGrouping link in links )
			{
				if ( target.Equals(link.IncludedChildGrouping) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ElementGroupingIncludesElementGrouping link between a given ElementGroupingand a ElementGrouping.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIncludesElementGrouping GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIncludesElementGrouping> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIncludesElementGrouping>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIncludesElementGrouping.ParentGroupingDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIncludesElementGrouping link in links )
			{
				if ( target.Equals(link.IncludedChildGrouping) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ElementGroupingExcludesElementGrouping
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingExcludesElementGrouping
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingExcludesElementGrouping.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingExcludesElementGrouping.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("c710924e-194b-45cf-aec2-b1ec0b86990c")]
	public partial class ElementGroupingExcludesElementGrouping : ElementGroupingContainsElementGrouping
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ElementGroupingExcludesElementGrouping domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc710924e, 0x194b, 0x45cf, 0xae, 0xc2, 0xb1, 0xec, 0x0b, 0x86, 0x99, 0x0c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ElementGroupingExcludesElementGrouping link in the same Partition as the given ElementGrouping
		/// </summary>
		/// <param name="source">ElementGrouping to use as the source of the relationship.</param>
		/// <param name="target">ElementGrouping to use as the target of the relationship.</param>
		public ElementGroupingExcludesElementGrouping(ElementGrouping source, ElementGrouping target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ElementGroupingExcludesElementGrouping.ParentGroupingDomainRoleId, source), new DslModeling::RoleAssignment(ElementGroupingExcludesElementGrouping.ExcludedChildGroupingDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ElementGroupingExcludesElementGrouping(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ElementGroupingExcludesElementGrouping(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ElementGroupingExcludesElementGrouping(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ElementGroupingExcludesElementGrouping(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ParentGrouping domain role code
		
		/// <summary>
		/// ParentGrouping domain role Id.
		/// </summary>
		public static readonly new global::System.Guid ParentGroupingDomainRoleId = new global::System.Guid(0x40c3b2a3, 0x48a2, 0x45e6, 0x93, 0x54, 0x55, 0x0e, 0x60, 0x6a, 0x8e, 0x83);
		
		/// <summary>
		/// DomainRole ParentGrouping
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingExcludesElementGrouping.ParentGrouping
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingExcludesElementGrouping/ParentGrouping.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingExcludesElementGrouping/ParentGrouping.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ExcludedChildGroupingCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingExcludesElementGrouping/ParentGrouping.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("40c3b2a3-48a2-45e6-9354-550e606a8e83")]
		public override ElementGrouping ParentGrouping
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ElementGrouping)DslModeling::DomainRoleInfo.GetRolePlayer(this, ParentGroupingDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ParentGroupingDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ExcludedParentGroupingCollection of a ElementGrouping
		/// <summary>
		/// Gets a list of ExcludedParentGroupingCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ElementGrouping> GetExcludedParentGroupingCollection(ElementGrouping element)
		{
			return new DslModeling::LinkedElementCollection<ElementGrouping>(element, ExcludedChildGroupingDomainRoleId);
		}
		#endregion
		#region ExcludedChildGrouping domain role code
		
		/// <summary>
		/// ExcludedChildGrouping domain role Id.
		/// </summary>
		public static readonly global::System.Guid ExcludedChildGroupingDomainRoleId = new global::System.Guid(0x82e5050b, 0x1847, 0x4ad2, 0xa2, 0x6c, 0xa9, 0x55, 0x40, 0xd7, 0xc4, 0x25);
		
		/// <summary>
		/// DomainRole ExcludedChildGrouping
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingExcludesElementGrouping.ExcludedChildGrouping
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingExcludesElementGrouping/ExcludedChildGrouping.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingExcludesElementGrouping/ExcludedChildGrouping.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ExcludedParentGroupingCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingExcludesElementGrouping/ExcludedChildGrouping.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("82e5050b-1847-4ad2-a26c-a95540d7c425")]
		public virtual ElementGrouping ExcludedChildGrouping
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ElementGrouping)DslModeling::DomainRoleInfo.GetRolePlayer(this, ExcludedChildGroupingDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ExcludedChildGroupingDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ExcludedChildGroupingCollection of a ElementGrouping
		/// <summary>
		/// Gets a list of ExcludedChildGroupingCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ElementGrouping> GetExcludedChildGroupingCollection(ElementGrouping element)
		{
			return new DslModeling::LinkedElementCollection<ElementGrouping>(element, ParentGroupingDomainRoleId);
		}
		#endregion
		#region ChildGrouping domain role override
		
		/// <summary>
		/// Gets the element playing ExcludedChildGrouping domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingContainsElementGrouping.ChildGrouping
		/// </summary>
		public override ElementGrouping ChildGrouping
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ExcludedChildGrouping;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ExcludedChildGrouping = value;
			}
		}
		
		#endregion
		#region ParentGrouping link accessor
		/// <summary>
		/// Get the list of ElementGroupingExcludesElementGrouping links to a ElementGrouping.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingExcludesElementGrouping> GetLinksToExcludedChildGroupingCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping parentGroupingInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingExcludesElementGrouping>(parentGroupingInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingExcludesElementGrouping.ParentGroupingDomainRoleId);
		}
		#endregion
		#region ExcludedChildGrouping link accessor
		/// <summary>
		/// Get the list of ElementGroupingExcludesElementGrouping links to a ElementGrouping.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingExcludesElementGrouping> GetLinksToExcludedParentGroupingCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping excludedChildGroupingInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingExcludesElementGrouping>(excludedChildGroupingInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingExcludesElementGrouping.ExcludedChildGroupingDomainRoleId);
		}
		#endregion
		#region ElementGroupingExcludesElementGrouping instance accessors
		
		/// <summary>
		/// Get any ElementGroupingExcludesElementGrouping links between a given ElementGrouping and a ElementGrouping.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingExcludesElementGrouping> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingExcludesElementGrouping> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingExcludesElementGrouping>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingExcludesElementGrouping> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingExcludesElementGrouping>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingExcludesElementGrouping.ParentGroupingDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingExcludesElementGrouping link in links )
			{
				if ( target.Equals(link.ExcludedChildGrouping) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ElementGroupingExcludesElementGrouping link between a given ElementGroupingand a ElementGrouping.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingExcludesElementGrouping GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingExcludesElementGrouping> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingExcludesElementGrouping>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingExcludesElementGrouping.ParentGroupingDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingExcludesElementGrouping link in links )
			{
				if ( target.Equals(link.ExcludedChildGrouping) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ElementGroupingHasDuplicateNameError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDuplicateNameError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDuplicateNameError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDuplicateNameError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("c87fad64-4283-4710-86ba-2e1a11d9a551")]
	public partial class ElementGroupingHasDuplicateNameError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ElementGroupingHasDuplicateNameError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc87fad64, 0x4283, 0x4710, 0x86, 0xba, 0x2e, 0x1a, 0x11, 0xd9, 0xa5, 0x51);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ElementGroupingHasDuplicateNameError link in the same Partition as the given ElementGrouping
		/// </summary>
		/// <param name="source">ElementGrouping to use as the source of the relationship.</param>
		/// <param name="target">ElementGroupingDuplicateNameError to use as the target of the relationship.</param>
		public ElementGroupingHasDuplicateNameError(ElementGrouping source, ElementGroupingDuplicateNameError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ElementGroupingHasDuplicateNameError.GroupingDomainRoleId, source), new DslModeling::RoleAssignment(ElementGroupingHasDuplicateNameError.DuplicateNameErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ElementGroupingHasDuplicateNameError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ElementGroupingHasDuplicateNameError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ElementGroupingHasDuplicateNameError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ElementGroupingHasDuplicateNameError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Grouping domain role code
		
		/// <summary>
		/// Grouping domain role Id.
		/// </summary>
		public static readonly global::System.Guid GroupingDomainRoleId = new global::System.Guid(0xb7a2fab0, 0xadff, 0x4f1d, 0xa8, 0x13, 0x42, 0xcb, 0xad, 0x17, 0xc4, 0x0d);
		
		/// <summary>
		/// DomainRole Grouping
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDuplicateNameError.Grouping
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDuplicateNameError/Grouping.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDuplicateNameError/Grouping.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DuplicateNameError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDuplicateNameError/Grouping.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("b7a2fab0-adff-4f1d-a813-42cbad17c40d")]
		public virtual ElementGrouping Grouping
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ElementGrouping)DslModeling::DomainRoleInfo.GetRolePlayer(this, GroupingDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, GroupingDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access GroupingCollection of a ElementGroupingDuplicateNameError
		/// <summary>
		/// Gets a list of GroupingCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ElementGrouping> GetGroupingCollection(ElementGroupingDuplicateNameError element)
		{
			return new DslModeling::LinkedElementCollection<ElementGrouping>(element, DuplicateNameErrorDomainRoleId);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing Grouping domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.Grouping;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.Grouping = (ElementGrouping)value;
			}
		}
		
		#endregion
		#region DuplicateNameError domain role code
		
		/// <summary>
		/// DuplicateNameError domain role Id.
		/// </summary>
		public static readonly global::System.Guid DuplicateNameErrorDomainRoleId = new global::System.Guid(0xd4f63ea1, 0x5d4c, 0x4829, 0x96, 0x32, 0x2d, 0x7c, 0xe5, 0x02, 0xa1, 0x6f);
		
		/// <summary>
		/// DomainRole DuplicateNameError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDuplicateNameError.DuplicateNameError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDuplicateNameError/DuplicateNameError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDuplicateNameError/DuplicateNameError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "GroupingCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDuplicateNameError/DuplicateNameError.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("d4f63ea1-5d4c-4829-9632-2d7ce502a16f")]
		public virtual ElementGroupingDuplicateNameError DuplicateNameError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ElementGroupingDuplicateNameError)DslModeling::DomainRoleInfo.GetRolePlayer(this, DuplicateNameErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DuplicateNameErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DuplicateNameError of a ElementGrouping
		/// <summary>
		/// Gets DuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ElementGroupingDuplicateNameError GetDuplicateNameError(ElementGrouping element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, GroupingDomainRoleId) as ElementGroupingDuplicateNameError;
		}
		
		/// <summary>
		/// Sets DuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDuplicateNameError(ElementGrouping element, ElementGroupingDuplicateNameError newDuplicateNameError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, GroupingDomainRoleId, newDuplicateNameError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing DuplicateNameError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.DuplicateNameError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.DuplicateNameError = (ElementGroupingDuplicateNameError)value;
			}
		}
		
		#endregion
		#region Grouping link accessor
		/// <summary>
		/// Get the ElementGroupingHasDuplicateNameError link to a ElementGrouping.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDuplicateNameError GetLinkToDuplicateNameError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping groupingInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDuplicateNameError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDuplicateNameError>(groupingInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDuplicateNameError.GroupingDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Grouping not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DuplicateNameError link accessor
		/// <summary>
		/// Get the list of ElementGroupingHasDuplicateNameError links to a ElementGroupingDuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDuplicateNameError> GetLinksToGroupingCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingDuplicateNameError duplicateNameErrorInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDuplicateNameError>(duplicateNameErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDuplicateNameError.DuplicateNameErrorDomainRoleId);
		}
		#endregion
		#region ElementGroupingHasDuplicateNameError instance accessors
		
		/// <summary>
		/// Get any ElementGroupingHasDuplicateNameError links between a given ElementGrouping and a ElementGroupingDuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDuplicateNameError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingDuplicateNameError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDuplicateNameError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDuplicateNameError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDuplicateNameError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDuplicateNameError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDuplicateNameError.GroupingDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDuplicateNameError link in links )
			{
				if ( target.Equals(link.DuplicateNameError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ElementGroupingHasDuplicateNameError link between a given ElementGroupingand a ElementGroupingDuplicateNameError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDuplicateNameError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingDuplicateNameError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDuplicateNameError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDuplicateNameError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDuplicateNameError.GroupingDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDuplicateNameError link in links )
			{
				if ( target.Equals(link.DuplicateNameError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ElementGroupingHasMembershipContradictionError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasMembershipContradictionError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasMembershipContradictionError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasMembershipContradictionError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("ffa04df2-2bca-4290-8801-fa1947ccdbda")]
	public partial class ElementGroupingHasMembershipContradictionError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ElementGroupingHasMembershipContradictionError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xffa04df2, 0x2bca, 0x4290, 0x88, 0x01, 0xfa, 0x19, 0x47, 0xcc, 0xdb, 0xda);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ElementGroupingHasMembershipContradictionError link in the same Partition as the given ElementGrouping
		/// </summary>
		/// <param name="source">ElementGrouping to use as the source of the relationship.</param>
		/// <param name="target">ElementGroupingMembershipContradictionError to use as the target of the relationship.</param>
		public ElementGroupingHasMembershipContradictionError(ElementGrouping source, ElementGroupingMembershipContradictionError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ElementGroupingHasMembershipContradictionError.GroupingDomainRoleId, source), new DslModeling::RoleAssignment(ElementGroupingHasMembershipContradictionError.MembershipContradictionErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ElementGroupingHasMembershipContradictionError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ElementGroupingHasMembershipContradictionError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ElementGroupingHasMembershipContradictionError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ElementGroupingHasMembershipContradictionError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Grouping domain role code
		
		/// <summary>
		/// Grouping domain role Id.
		/// </summary>
		public static readonly global::System.Guid GroupingDomainRoleId = new global::System.Guid(0xcf43911d, 0x1ff2, 0x47ad, 0xb4, 0x51, 0x4c, 0xb8, 0xf6, 0x7b, 0x78, 0x05);
		
		/// <summary>
		/// DomainRole Grouping
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasMembershipContradictionError.Grouping
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasMembershipContradictionError/Grouping.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasMembershipContradictionError/Grouping.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "MembershipContradictionErrorCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasMembershipContradictionError/Grouping.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("cf43911d-1ff2-47ad-b451-4cb8f67b7805")]
		public virtual ElementGrouping Grouping
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ElementGrouping)DslModeling::DomainRoleInfo.GetRolePlayer(this, GroupingDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, GroupingDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Grouping of a ElementGroupingMembershipContradictionError
		/// <summary>
		/// Gets Grouping.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ElementGrouping GetGrouping(ElementGroupingMembershipContradictionError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, MembershipContradictionErrorDomainRoleId) as ElementGrouping;
		}
		
		/// <summary>
		/// Sets Grouping.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetGrouping(ElementGroupingMembershipContradictionError element, ElementGrouping newGrouping)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, MembershipContradictionErrorDomainRoleId, newGrouping);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing Grouping domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.Grouping;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.Grouping = (ElementGrouping)value;
			}
		}
		
		#endregion
		#region MembershipContradictionError domain role code
		
		/// <summary>
		/// MembershipContradictionError domain role Id.
		/// </summary>
		public static readonly global::System.Guid MembershipContradictionErrorDomainRoleId = new global::System.Guid(0x13db78a4, 0x0967, 0x485f, 0xb6, 0x9f, 0x5e, 0x3d, 0xb2, 0x87, 0x55, 0x57);
		
		/// <summary>
		/// DomainRole MembershipContradictionError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasMembershipContradictionError.MembershipContradictionError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasMembershipContradictionError/MembershipContradictionError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasMembershipContradictionError/MembershipContradictionError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Grouping", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasMembershipContradictionError/MembershipContradictionError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("13db78a4-0967-485f-b69f-5e3db2875557")]
		public virtual ElementGroupingMembershipContradictionError MembershipContradictionError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ElementGroupingMembershipContradictionError)DslModeling::DomainRoleInfo.GetRolePlayer(this, MembershipContradictionErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MembershipContradictionErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MembershipContradictionErrorCollection of a ElementGrouping
		/// <summary>
		/// Gets a list of MembershipContradictionErrorCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ElementGroupingMembershipContradictionError> GetMembershipContradictionErrorCollection(ElementGrouping element)
		{
			return new DslModeling::LinkedElementCollection<ElementGroupingMembershipContradictionError>(element, GroupingDomainRoleId);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing MembershipContradictionError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.MembershipContradictionError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.MembershipContradictionError = (ElementGroupingMembershipContradictionError)value;
			}
		}
		
		#endregion
		#region Accessors for roles that this REL plays in other RELs
		#region Element opposite domain role accessor
		/// <summary>
		/// Gets or sets Element.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingMembershipContradictionErrorIsForElement.GroupingMembershipContradictionErrorRelationship
		/// </summary>
		public virtual global::Microsoft.VisualStudio.Modeling.ModelElement Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingMembershipContradictionErrorIsForElement.GroupingMembershipContradictionErrorRelationshipDomainRoleId) as global::Microsoft.VisualStudio.Modeling.ModelElement;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingMembershipContradictionErrorIsForElement.GroupingMembershipContradictionErrorRelationshipDomainRoleId, value);
			}
		}
		#endregion
		#endregion
		#region Grouping link accessor
		/// <summary>
		/// Get the list of ElementGroupingHasMembershipContradictionError links to a ElementGrouping.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasMembershipContradictionError> GetLinksToMembershipContradictionErrorCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping groupingInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasMembershipContradictionError>(groupingInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasMembershipContradictionError.GroupingDomainRoleId);
		}
		#endregion
		#region MembershipContradictionError link accessor
		/// <summary>
		/// Get the ElementGroupingHasMembershipContradictionError link to a ElementGroupingMembershipContradictionError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasMembershipContradictionError GetLinkToGrouping (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingMembershipContradictionError membershipContradictionErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasMembershipContradictionError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasMembershipContradictionError>(membershipContradictionErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasMembershipContradictionError.MembershipContradictionErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of MembershipContradictionError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ElementGroupingHasMembershipContradictionError instance accessors
		
		/// <summary>
		/// Get any ElementGroupingHasMembershipContradictionError links between a given ElementGrouping and a ElementGroupingMembershipContradictionError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasMembershipContradictionError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingMembershipContradictionError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasMembershipContradictionError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasMembershipContradictionError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasMembershipContradictionError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasMembershipContradictionError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasMembershipContradictionError.GroupingDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasMembershipContradictionError link in links )
			{
				if ( target.Equals(link.MembershipContradictionError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ElementGroupingHasMembershipContradictionError link between a given ElementGroupingand a ElementGroupingMembershipContradictionError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasMembershipContradictionError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingMembershipContradictionError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasMembershipContradictionError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasMembershipContradictionError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasMembershipContradictionError.GroupingDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasMembershipContradictionError link in links )
			{
				if ( target.Equals(link.MembershipContradictionError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship GroupingMembershipContradictionErrorIsForElement
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingMembershipContradictionErrorIsForElement
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingMembershipContradictionErrorIsForElement.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingMembershipContradictionErrorIsForElement.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("67a68df7-1472-40b8-825a-1fc426a5e6c1")]
	public partial class GroupingMembershipContradictionErrorIsForElement : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// GroupingMembershipContradictionErrorIsForElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x67a68df7, 0x1472, 0x40b8, 0x82, 0x5a, 0x1f, 0xc4, 0x26, 0xa5, 0xe6, 0xc1);
	
				
		/// <summary>
		/// Constructor
		/// Creates a GroupingMembershipContradictionErrorIsForElement link in the same Partition as the given ElementGroupingHasMembershipContradictionError
		/// </summary>
		/// <param name="source">ElementGroupingHasMembershipContradictionError to use as the source of the relationship.</param>
		/// <param name="target">ModelElement to use as the target of the relationship.</param>
		public GroupingMembershipContradictionErrorIsForElement(ElementGroupingHasMembershipContradictionError source, global::Microsoft.VisualStudio.Modeling.ModelElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(GroupingMembershipContradictionErrorIsForElement.GroupingMembershipContradictionErrorRelationshipDomainRoleId, source), new DslModeling::RoleAssignment(GroupingMembershipContradictionErrorIsForElement.ElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public GroupingMembershipContradictionErrorIsForElement(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public GroupingMembershipContradictionErrorIsForElement(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public GroupingMembershipContradictionErrorIsForElement(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public GroupingMembershipContradictionErrorIsForElement(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region GroupingMembershipContradictionErrorRelationship domain role code
		
		/// <summary>
		/// GroupingMembershipContradictionErrorRelationship domain role Id.
		/// </summary>
		public static readonly global::System.Guid GroupingMembershipContradictionErrorRelationshipDomainRoleId = new global::System.Guid(0xa316cbb8, 0xe335, 0x4a11, 0x93, 0x7a, 0x0b, 0x16, 0x66, 0x28, 0xee, 0x19);
		
		/// <summary>
		/// DomainRole GroupingMembershipContradictionErrorRelationship
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingMembershipContradictionErrorIsForElement.GroupingMembershipContradictionErrorRelationship
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingMembershipContradictionErrorIsForElement/GroupingMembershipContradictionErrorRelationship.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingMembershipContradictionErrorIsForElement/GroupingMembershipContradictionErrorRelationship.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Element", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingMembershipContradictionErrorIsForElement/GroupingMembershipContradictionErrorRelationship.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("a316cbb8-e335-4a11-937a-0b166628ee19")]
		public virtual ElementGroupingHasMembershipContradictionError GroupingMembershipContradictionErrorRelationship
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ElementGroupingHasMembershipContradictionError)DslModeling::DomainRoleInfo.GetRolePlayer(this, GroupingMembershipContradictionErrorRelationshipDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, GroupingMembershipContradictionErrorRelationshipDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MembershipContradictionErrorCollection of a ModelElement
		/// <summary>
		/// Gets a list of MembershipContradictionErrorCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ElementGroupingHasMembershipContradictionError> GetMembershipContradictionErrorCollection(global::Microsoft.VisualStudio.Modeling.ModelElement element)
		{
			return new DslModeling::LinkedElementCollection<ElementGroupingHasMembershipContradictionError>(element, ElementDomainRoleId);
		}
		#endregion
		#region Element domain role code
		
		/// <summary>
		/// Element domain role Id.
		/// </summary>
		public static readonly global::System.Guid ElementDomainRoleId = new global::System.Guid(0xae99d58e, 0x9b14, 0x4266, 0xaf, 0xe0, 0x8e, 0x7a, 0x94, 0xdb, 0xe3, 0xf8);
		
		/// <summary>
		/// DomainRole Element
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingMembershipContradictionErrorIsForElement.Element
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingMembershipContradictionErrorIsForElement/Element.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingMembershipContradictionErrorIsForElement/Element.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "MembershipContradictionErrorCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingMembershipContradictionErrorIsForElement/Element.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ae99d58e-9b14-4266-afe0-8e7a94dbe3f8")]
		public virtual global::Microsoft.VisualStudio.Modeling.ModelElement Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (global::Microsoft.VisualStudio.Modeling.ModelElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, ElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Element of a ElementGroupingHasMembershipContradictionError
		/// <summary>
		/// Gets Element.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.VisualStudio.Modeling.ModelElement GetElement(ElementGroupingHasMembershipContradictionError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, GroupingMembershipContradictionErrorRelationshipDomainRoleId) as global::Microsoft.VisualStudio.Modeling.ModelElement;
		}
		
		/// <summary>
		/// Sets Element.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetElement(ElementGroupingHasMembershipContradictionError element, global::Microsoft.VisualStudio.Modeling.ModelElement newElement)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, GroupingMembershipContradictionErrorRelationshipDomainRoleId, newElement);
		}
		#endregion
		#region GroupingMembershipContradictionErrorRelationship link accessor
		/// <summary>
		/// Get the GroupingMembershipContradictionErrorIsForElement link to a ElementGroupingHasMembershipContradictionError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingMembershipContradictionErrorIsForElement GetLinkToElement (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasMembershipContradictionError groupingMembershipContradictionErrorRelationshipInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingMembershipContradictionErrorIsForElement> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingMembershipContradictionErrorIsForElement>(groupingMembershipContradictionErrorRelationshipInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingMembershipContradictionErrorIsForElement.GroupingMembershipContradictionErrorRelationshipDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of GroupingMembershipContradictionErrorRelationship not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Element link accessor
		/// <summary>
		/// Get the list of GroupingMembershipContradictionErrorIsForElement links to a ModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingMembershipContradictionErrorIsForElement> GetLinksToMembershipContradictionErrorCollection ( global::Microsoft.VisualStudio.Modeling.ModelElement elementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingMembershipContradictionErrorIsForElement>(elementInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingMembershipContradictionErrorIsForElement.ElementDomainRoleId);
		}
		#endregion
		#region GroupingMembershipContradictionErrorIsForElement instance accessors
		
		/// <summary>
		/// Get any GroupingMembershipContradictionErrorIsForElement links between a given ElementGroupingHasMembershipContradictionError and a ModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingMembershipContradictionErrorIsForElement> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasMembershipContradictionError source, global::Microsoft.VisualStudio.Modeling.ModelElement target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingMembershipContradictionErrorIsForElement> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingMembershipContradictionErrorIsForElement>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingMembershipContradictionErrorIsForElement> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingMembershipContradictionErrorIsForElement>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingMembershipContradictionErrorIsForElement.GroupingMembershipContradictionErrorRelationshipDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingMembershipContradictionErrorIsForElement link in links )
			{
				if ( target.Equals(link.Element) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one GroupingMembershipContradictionErrorIsForElement link between a given ElementGroupingHasMembershipContradictionErrorand a ModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingMembershipContradictionErrorIsForElement GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasMembershipContradictionError source, global::Microsoft.VisualStudio.Modeling.ModelElement target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingMembershipContradictionErrorIsForElement> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingMembershipContradictionErrorIsForElement>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingMembershipContradictionErrorIsForElement.GroupingMembershipContradictionErrorRelationshipDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingMembershipContradictionErrorIsForElement link in links )
			{
				if ( target.Equals(link.Element) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship RolePathOwnerHasPathComponent_Deprecated
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasPathComponent_Deprecated
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasPathComponent_Deprecated.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasPathComponent_Deprecated.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("e915e71a-b11c-4732-86d7-35c7c1b132a4")]
	public partial class RolePathOwnerHasPathComponent_Deprecated : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RolePathOwnerHasPathComponent_Deprecated domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe915e71a, 0xb11c, 0x4732, 0x86, 0xd7, 0x35, 0xc7, 0xc1, 0xb1, 0x32, 0xa4);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RolePathOwnerHasPathComponent_Deprecated link in the same Partition as the given RolePathOwner
		/// </summary>
		/// <param name="source">RolePathOwner to use as the source of the relationship.</param>
		/// <param name="target">LeadRolePath to use as the target of the relationship.</param>
		public RolePathOwnerHasPathComponent_Deprecated(RolePathOwner source, LeadRolePath target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RolePathOwnerHasPathComponent_Deprecated.PathOwnerDomainRoleId, source), new DslModeling::RoleAssignment(RolePathOwnerHasPathComponent_Deprecated.RolePathDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RolePathOwnerHasPathComponent_Deprecated(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RolePathOwnerHasPathComponent_Deprecated(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RolePathOwnerHasPathComponent_Deprecated(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RolePathOwnerHasPathComponent_Deprecated(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region PathOwner domain role code
		
		/// <summary>
		/// PathOwner domain role Id.
		/// </summary>
		public static readonly global::System.Guid PathOwnerDomainRoleId = new global::System.Guid(0x0a64fd0a, 0x53c9, 0x4e10, 0x9c, 0xfe, 0x00, 0x3e, 0xd1, 0x01, 0x10, 0x7c);
		
		/// <summary>
		/// DomainRole PathOwner
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasPathComponent_Deprecated.PathOwner
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasPathComponent_Deprecated/PathOwner.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasPathComponent_Deprecated/PathOwner.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "PathComponent", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasPathComponent_Deprecated/PathOwner.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("0a64fd0a-53c9-4e10-9cfe-003ed101107c")]
		public virtual RolePathOwner PathOwner
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RolePathOwner)DslModeling::DomainRoleInfo.GetRolePlayer(this, PathOwnerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PathOwnerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ParentOwner of a LeadRolePath
		/// <summary>
		/// Gets ParentOwner.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static RolePathOwner GetParentOwner(LeadRolePath element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RolePathDomainRoleId) as RolePathOwner;
		}
		
		/// <summary>
		/// Sets ParentOwner.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetParentOwner(LeadRolePath element, RolePathOwner newPathOwner)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RolePathDomainRoleId, newPathOwner);
		}
		#endregion
		#region RolePath domain role code
		
		/// <summary>
		/// RolePath domain role Id.
		/// </summary>
		public static readonly global::System.Guid RolePathDomainRoleId = new global::System.Guid(0x3f31cfcc, 0x88da, 0x44f8, 0xad, 0xb3, 0xb4, 0x01, 0x92, 0x83, 0xad, 0x4a);
		
		/// <summary>
		/// DomainRole RolePath
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasPathComponent_Deprecated.RolePath
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasPathComponent_Deprecated/RolePath.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasPathComponent_Deprecated/RolePath.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ParentOwner", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasPathComponent_Deprecated/RolePath.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("3f31cfcc-88da-44f8-adb3-b4019283ad4a")]
		public virtual LeadRolePath RolePath
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (LeadRolePath)DslModeling::DomainRoleInfo.GetRolePlayer(this, RolePathDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RolePathDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PathComponent of a RolePathOwner
		/// <summary>
		/// Gets PathComponent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static LeadRolePath GetPathComponent(RolePathOwner element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PathOwnerDomainRoleId) as LeadRolePath;
		}
		
		/// <summary>
		/// Sets PathComponent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetPathComponent(RolePathOwner element, LeadRolePath newRolePath)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PathOwnerDomainRoleId, newRolePath);
		}
		#endregion
		#region PathOwner link accessor
		/// <summary>
		/// Get the RolePathOwnerHasPathComponent_Deprecated link to a RolePathOwner.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasPathComponent_Deprecated GetLinkToPathComponent (global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwner pathOwnerInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasPathComponent_Deprecated> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasPathComponent_Deprecated>(pathOwnerInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasPathComponent_Deprecated.PathOwnerDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of PathOwner not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region RolePath link accessor
		/// <summary>
		/// Get the RolePathOwnerHasPathComponent_Deprecated link to a LeadRolePath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasPathComponent_Deprecated GetLinkToParentOwner (global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePath rolePathInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasPathComponent_Deprecated> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasPathComponent_Deprecated>(rolePathInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasPathComponent_Deprecated.RolePathDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of RolePath not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region RolePathOwnerHasPathComponent_Deprecated instance accessors
		
		/// <summary>
		/// Get any RolePathOwnerHasPathComponent_Deprecated links between a given RolePathOwner and a LeadRolePath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasPathComponent_Deprecated> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwner source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePath target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasPathComponent_Deprecated> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasPathComponent_Deprecated>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasPathComponent_Deprecated> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasPathComponent_Deprecated>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasPathComponent_Deprecated.PathOwnerDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasPathComponent_Deprecated link in links )
			{
				if ( target.Equals(link.RolePath) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RolePathOwnerHasPathComponent_Deprecated link between a given RolePathOwnerand a LeadRolePath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasPathComponent_Deprecated GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwner source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePath target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasPathComponent_Deprecated> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasPathComponent_Deprecated>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasPathComponent_Deprecated.PathOwnerDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasPathComponent_Deprecated link in links )
			{
				if ( target.Equals(link.RolePath) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship RolePathOwnerHasLeadRolePath
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasLeadRolePath
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasLeadRolePath.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasLeadRolePath.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("475fed0e-e86a-4212-b1e2-2ece769b1115")]
	public abstract partial class RolePathOwnerHasLeadRolePath : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RolePathOwnerHasLeadRolePath domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x475fed0e, 0xe86a, 0x4212, 0xb1, 0xe2, 0x2e, 0xce, 0x76, 0x9b, 0x11, 0x15);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">The Partition instance containing this ElementLink</param>
		/// <param name="roleAssignments">A set of role assignments for roleplayer initialization</param>
		/// <param name="propertyAssignments">A set of attribute assignments for attribute initialization</param>
		protected RolePathOwnerHasLeadRolePath(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region PathOwner domain role code
		
		/// <summary>
		/// PathOwner domain role Id.
		/// </summary>
		public static readonly global::System.Guid PathOwnerDomainRoleId = new global::System.Guid(0x209e0c8c, 0x5b2d, 0x4ad8, 0xbd, 0x5c, 0x02, 0xfa, 0x63, 0xfc, 0x06, 0xc6);
		
		/// <summary>
		/// DomainRole PathOwner
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasLeadRolePath.PathOwner
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasLeadRolePath/PathOwner.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasLeadRolePath/PathOwner.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "LeadRolePathCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasLeadRolePath/PathOwner.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("209e0c8c-5b2d-4ad8-bd5c-02fa63fc06c6")]
		public abstract RolePathOwner PathOwner
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access PathOwnerCollection of a LeadRolePath
		/// <summary>
		/// Gets a list of PathOwnerCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<RolePathOwner> GetPathOwnerCollection(LeadRolePath element)
		{
			return new DslModeling::ReadOnlyLinkedElementCollection<RolePathOwner>(element, RolePathDomainRoleId);
		}
		#endregion
		#region RolePath domain role code
		
		/// <summary>
		/// RolePath domain role Id.
		/// </summary>
		public static readonly global::System.Guid RolePathDomainRoleId = new global::System.Guid(0xc127ab61, 0xc937, 0x4da9, 0xa5, 0x66, 0x79, 0xaf, 0xac, 0xd7, 0xf0, 0x22);
		
		/// <summary>
		/// DomainRole RolePath
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasLeadRolePath.RolePath
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasLeadRolePath/RolePath.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasLeadRolePath/RolePath.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "PathOwnerCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasLeadRolePath/RolePath.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c127ab61-c937-4da9-a566-79afacd7f022")]
		public abstract LeadRolePath RolePath
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access LeadRolePathCollection of a RolePathOwner
		/// <summary>
		/// Gets a list of LeadRolePathCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<LeadRolePath> GetLeadRolePathCollection(RolePathOwner element)
		{
			return new DslModeling::ReadOnlyLinkedElementCollection<LeadRolePath>(element, PathOwnerDomainRoleId);
		}
		#endregion
		#region PathOwner link accessor
		/// <summary>
		/// Get the list of RolePathOwnerHasLeadRolePath links to a RolePathOwner.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasLeadRolePath> GetLinksToLeadRolePathCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwner pathOwnerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasLeadRolePath>(pathOwnerInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasLeadRolePath.PathOwnerDomainRoleId);
		}
		#endregion
		#region RolePath link accessor
		/// <summary>
		/// Get the list of RolePathOwnerHasLeadRolePath links to a LeadRolePath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasLeadRolePath> GetLinksToPathOwnerCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePath rolePathInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasLeadRolePath>(rolePathInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasLeadRolePath.RolePathDomainRoleId);
		}
		#endregion
		#region RolePathOwnerHasLeadRolePath instance accessors
		
		/// <summary>
		/// Get any RolePathOwnerHasLeadRolePath links between a given RolePathOwner and a LeadRolePath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasLeadRolePath> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwner source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePath target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasLeadRolePath> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasLeadRolePath>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasLeadRolePath> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasLeadRolePath>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasLeadRolePath.PathOwnerDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasLeadRolePath link in links )
			{
				if ( target.Equals(link.RolePath) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RolePathOwnerHasLeadRolePath link between a given RolePathOwnerand a LeadRolePath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasLeadRolePath GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwner source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePath target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasLeadRolePath> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasLeadRolePath>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasLeadRolePath.PathOwnerDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasLeadRolePath link in links )
			{
				if ( target.Equals(link.RolePath) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship RolePathOwnerOwnsLeadRolePath
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsLeadRolePath
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsLeadRolePath.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsLeadRolePath.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("c4d6e714-1489-4bd0-b92b-061d494ab66c")]
	public partial class RolePathOwnerOwnsLeadRolePath : RolePathOwnerHasLeadRolePath
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RolePathOwnerOwnsLeadRolePath domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc4d6e714, 0x1489, 0x4bd0, 0xb9, 0x2b, 0x06, 0x1d, 0x49, 0x4a, 0xb6, 0x6c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RolePathOwnerOwnsLeadRolePath link in the same Partition as the given RolePathOwner
		/// </summary>
		/// <param name="source">RolePathOwner to use as the source of the relationship.</param>
		/// <param name="target">LeadRolePath to use as the target of the relationship.</param>
		public RolePathOwnerOwnsLeadRolePath(RolePathOwner source, LeadRolePath target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RolePathOwnerOwnsLeadRolePath.PathOwnerDomainRoleId, source), new DslModeling::RoleAssignment(RolePathOwnerOwnsLeadRolePath.RolePathDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RolePathOwnerOwnsLeadRolePath(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RolePathOwnerOwnsLeadRolePath(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RolePathOwnerOwnsLeadRolePath(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RolePathOwnerOwnsLeadRolePath(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region PathOwner domain role code
		
		/// <summary>
		/// PathOwner domain role Id.
		/// </summary>
		public static readonly new global::System.Guid PathOwnerDomainRoleId = new global::System.Guid(0x7b7881da, 0x9325, 0x4882, 0x95, 0x0a, 0xfe, 0xc9, 0xa9, 0xcb, 0xa0, 0x48);
		
		/// <summary>
		/// DomainRole PathOwner
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsLeadRolePath.PathOwner
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsLeadRolePath/PathOwner.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsLeadRolePath/PathOwner.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "OwnedLeadRolePathCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsLeadRolePath/PathOwner.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("7b7881da-9325-4882-950a-fec9a9cba048")]
		public override RolePathOwner PathOwner
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RolePathOwner)DslModeling::DomainRoleInfo.GetRolePlayer(this, PathOwnerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PathOwnerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PathOwner of a LeadRolePath
		/// <summary>
		/// Gets PathOwner.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static RolePathOwner GetPathOwner(LeadRolePath element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RolePathDomainRoleId) as RolePathOwner;
		}
		
		/// <summary>
		/// Sets PathOwner.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetPathOwner(LeadRolePath element, RolePathOwner newPathOwner)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RolePathDomainRoleId, newPathOwner);
		}
		#endregion
		#region RolePath domain role code
		
		/// <summary>
		/// RolePath domain role Id.
		/// </summary>
		public static readonly new global::System.Guid RolePathDomainRoleId = new global::System.Guid(0x50d66006, 0xe047, 0x4c5e, 0xb5, 0xae, 0xf1, 0xad, 0x19, 0xc1, 0xbb, 0xb8);
		
		/// <summary>
		/// DomainRole RolePath
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsLeadRolePath.RolePath
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsLeadRolePath/RolePath.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsLeadRolePath/RolePath.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "PathOwner", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsLeadRolePath/RolePath.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("50d66006-e047-4c5e-b5ae-f1ad19c1bbb8")]
		public override LeadRolePath RolePath
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (LeadRolePath)DslModeling::DomainRoleInfo.GetRolePlayer(this, RolePathDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RolePathDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access OwnedLeadRolePathCollection of a RolePathOwner
		/// <summary>
		/// Gets a list of OwnedLeadRolePathCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<LeadRolePath> GetOwnedLeadRolePathCollection(RolePathOwner element)
		{
			return new DslModeling::LinkedElementCollection<LeadRolePath>(element, PathOwnerDomainRoleId);
		}
		#endregion
		#region PathOwner link accessor
		/// <summary>
		/// Get the list of RolePathOwnerOwnsLeadRolePath links to a RolePathOwner.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsLeadRolePath> GetLinksToOwnedLeadRolePathCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwner pathOwnerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsLeadRolePath>(pathOwnerInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsLeadRolePath.PathOwnerDomainRoleId);
		}
		#endregion
		#region RolePath link accessor
		/// <summary>
		/// Get the RolePathOwnerOwnsLeadRolePath link to a LeadRolePath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsLeadRolePath GetLinkToPathOwner (global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePath rolePathInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsLeadRolePath> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsLeadRolePath>(rolePathInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsLeadRolePath.RolePathDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of RolePath not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region RolePathOwnerOwnsLeadRolePath instance accessors
		
		/// <summary>
		/// Get any RolePathOwnerOwnsLeadRolePath links between a given RolePathOwner and a LeadRolePath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsLeadRolePath> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwner source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePath target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsLeadRolePath> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsLeadRolePath>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsLeadRolePath> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsLeadRolePath>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsLeadRolePath.PathOwnerDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsLeadRolePath link in links )
			{
				if ( target.Equals(link.RolePath) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RolePathOwnerOwnsLeadRolePath link between a given RolePathOwnerand a LeadRolePath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsLeadRolePath GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwner source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePath target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsLeadRolePath> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsLeadRolePath>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsLeadRolePath.PathOwnerDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsLeadRolePath link in links )
			{
				if ( target.Equals(link.RolePath) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship RolePathOwnerUsesSharedLeadRolePath
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedLeadRolePath
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedLeadRolePath.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedLeadRolePath.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("a9bc5f27-f494-4d97-9ae3-6b4032b0caed")]
	public partial class RolePathOwnerUsesSharedLeadRolePath : RolePathOwnerHasLeadRolePath
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RolePathOwnerUsesSharedLeadRolePath domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa9bc5f27, 0xf494, 0x4d97, 0x9a, 0xe3, 0x6b, 0x40, 0x32, 0xb0, 0xca, 0xed);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RolePathOwnerUsesSharedLeadRolePath link in the same Partition as the given RolePathOwner
		/// </summary>
		/// <param name="source">RolePathOwner to use as the source of the relationship.</param>
		/// <param name="target">LeadRolePath to use as the target of the relationship.</param>
		public RolePathOwnerUsesSharedLeadRolePath(RolePathOwner source, LeadRolePath target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RolePathOwnerUsesSharedLeadRolePath.PathOwnerDomainRoleId, source), new DslModeling::RoleAssignment(RolePathOwnerUsesSharedLeadRolePath.RolePathDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RolePathOwnerUsesSharedLeadRolePath(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RolePathOwnerUsesSharedLeadRolePath(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RolePathOwnerUsesSharedLeadRolePath(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RolePathOwnerUsesSharedLeadRolePath(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region PathOwner domain role code
		
		/// <summary>
		/// PathOwner domain role Id.
		/// </summary>
		public static readonly new global::System.Guid PathOwnerDomainRoleId = new global::System.Guid(0x96062904, 0xdd62, 0x4519, 0xa8, 0xe0, 0xda, 0x4b, 0xd5, 0x53, 0xe0, 0x47);
		
		/// <summary>
		/// DomainRole PathOwner
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedLeadRolePath.PathOwner
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedLeadRolePath/PathOwner.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedLeadRolePath/PathOwner.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "SharedLeadRolePathCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedLeadRolePath/PathOwner.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("96062904-dd62-4519-a8e0-da4bd553e047")]
		public override RolePathOwner PathOwner
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RolePathOwner)DslModeling::DomainRoleInfo.GetRolePlayer(this, PathOwnerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PathOwnerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SharedWithPathOwnerCollection of a LeadRolePath
		/// <summary>
		/// Gets a list of SharedWithPathOwnerCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<RolePathOwner> GetSharedWithPathOwnerCollection(LeadRolePath element)
		{
			return new DslModeling::LinkedElementCollection<RolePathOwner>(element, RolePathDomainRoleId);
		}
		#endregion
		#region RolePath domain role code
		
		/// <summary>
		/// RolePath domain role Id.
		/// </summary>
		public static readonly new global::System.Guid RolePathDomainRoleId = new global::System.Guid(0x54551ecb, 0xccd6, 0x48a7, 0xb7, 0xaa, 0x30, 0x4b, 0x3d, 0x6e, 0xb3, 0x61);
		
		/// <summary>
		/// DomainRole RolePath
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedLeadRolePath.RolePath
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedLeadRolePath/RolePath.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedLeadRolePath/RolePath.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SharedWithPathOwnerCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedLeadRolePath/RolePath.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("54551ecb-ccd6-48a7-b7aa-304b3d6eb361")]
		public override LeadRolePath RolePath
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (LeadRolePath)DslModeling::DomainRoleInfo.GetRolePlayer(this, RolePathDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RolePathDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SharedLeadRolePathCollection of a RolePathOwner
		/// <summary>
		/// Gets a list of SharedLeadRolePathCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<LeadRolePath> GetSharedLeadRolePathCollection(RolePathOwner element)
		{
			return new DslModeling::LinkedElementCollection<LeadRolePath>(element, PathOwnerDomainRoleId);
		}
		#endregion
		#region PathOwner link accessor
		/// <summary>
		/// Get the list of RolePathOwnerUsesSharedLeadRolePath links to a RolePathOwner.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedLeadRolePath> GetLinksToSharedLeadRolePathCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwner pathOwnerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedLeadRolePath>(pathOwnerInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedLeadRolePath.PathOwnerDomainRoleId);
		}
		#endregion
		#region RolePath link accessor
		/// <summary>
		/// Get the list of RolePathOwnerUsesSharedLeadRolePath links to a LeadRolePath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedLeadRolePath> GetLinksToSharedWithPathOwnerCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePath rolePathInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedLeadRolePath>(rolePathInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedLeadRolePath.RolePathDomainRoleId);
		}
		#endregion
		#region RolePathOwnerUsesSharedLeadRolePath instance accessors
		
		/// <summary>
		/// Get any RolePathOwnerUsesSharedLeadRolePath links between a given RolePathOwner and a LeadRolePath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedLeadRolePath> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwner source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePath target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedLeadRolePath> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedLeadRolePath>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedLeadRolePath> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedLeadRolePath>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedLeadRolePath.PathOwnerDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedLeadRolePath link in links )
			{
				if ( target.Equals(link.RolePath) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RolePathOwnerUsesSharedLeadRolePath link between a given RolePathOwnerand a LeadRolePath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedLeadRolePath GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwner source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePath target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedLeadRolePath> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedLeadRolePath>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedLeadRolePath.PathOwnerDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedLeadRolePath link in links )
			{
				if ( target.Equals(link.RolePath) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship RolePathOwnerHasSingleLeadRolePath
	/// Derived relationship based on RolePathOwnerHasLeadRolePath to determine path
	/// owners with a single shared or owned role path.
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleLeadRolePath.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleLeadRolePath.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("c77bea97-713a-45c2-9ee3-af6939c06a13")]
	public partial class RolePathOwnerHasSingleLeadRolePath : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RolePathOwnerHasSingleLeadRolePath domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc77bea97, 0x713a, 0x45c2, 0x9e, 0xe3, 0xaf, 0x69, 0x39, 0xc0, 0x6a, 0x13);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RolePathOwnerHasSingleLeadRolePath link in the same Partition as the given RolePathOwner
		/// </summary>
		/// <param name="source">RolePathOwner to use as the source of the relationship.</param>
		/// <param name="target">LeadRolePath to use as the target of the relationship.</param>
		public RolePathOwnerHasSingleLeadRolePath(RolePathOwner source, LeadRolePath target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RolePathOwnerHasSingleLeadRolePath.PathOwnerDomainRoleId, source), new DslModeling::RoleAssignment(RolePathOwnerHasSingleLeadRolePath.RolePathDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RolePathOwnerHasSingleLeadRolePath(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RolePathOwnerHasSingleLeadRolePath(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RolePathOwnerHasSingleLeadRolePath(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RolePathOwnerHasSingleLeadRolePath(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region PathOwner domain role code
		
		/// <summary>
		/// PathOwner domain role Id.
		/// </summary>
		public static readonly global::System.Guid PathOwnerDomainRoleId = new global::System.Guid(0xb79117d1, 0xdee0, 0x4ebd, 0x9d, 0x2a, 0xd5, 0x1a, 0x1c, 0xab, 0x54, 0xd7);
		
		/// <summary>
		/// DomainRole PathOwner
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleLeadRolePath.PathOwner
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleLeadRolePath/PathOwner.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleLeadRolePath/PathOwner.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "SingleLeadRolePath", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleLeadRolePath/PathOwner.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("b79117d1-dee0-4ebd-9d2a-d51a1cab54d7")]
		public virtual RolePathOwner PathOwner
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RolePathOwner)DslModeling::DomainRoleInfo.GetRolePlayer(this, PathOwnerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PathOwnerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PathOwner of a LeadRolePath
		/// <summary>
		/// Gets a list of PathOwner.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<RolePathOwner> GetPathOwner(LeadRolePath element)
		{
			return new DslModeling::LinkedElementCollection<RolePathOwner>(element, RolePathDomainRoleId);
		}
		#endregion
		#region RolePath domain role code
		
		/// <summary>
		/// RolePath domain role Id.
		/// </summary>
		public static readonly global::System.Guid RolePathDomainRoleId = new global::System.Guid(0x38b54ce8, 0x5cfd, 0x4cec, 0x92, 0x27, 0xf0, 0x9b, 0x07, 0x31, 0x2c, 0x5a);
		
		/// <summary>
		/// DomainRole RolePath
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleLeadRolePath.RolePath
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleLeadRolePath/RolePath.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleLeadRolePath/RolePath.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "PathOwner", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleLeadRolePath/RolePath.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("38b54ce8-5cfd-4cec-9227-f09b07312c5a")]
		public virtual LeadRolePath RolePath
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (LeadRolePath)DslModeling::DomainRoleInfo.GetRolePlayer(this, RolePathDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RolePathDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SingleLeadRolePath of a RolePathOwner
		/// <summary>
		/// Gets SingleLeadRolePath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static LeadRolePath GetSingleLeadRolePath(RolePathOwner element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PathOwnerDomainRoleId) as LeadRolePath;
		}
		
		/// <summary>
		/// Sets SingleLeadRolePath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSingleLeadRolePath(RolePathOwner element, LeadRolePath newRolePath)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PathOwnerDomainRoleId, newRolePath);
		}
		#endregion
		#region PathOwner link accessor
		/// <summary>
		/// Get the RolePathOwnerHasSingleLeadRolePath link to a RolePathOwner.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleLeadRolePath GetLinkToSingleLeadRolePath (global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwner pathOwnerInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleLeadRolePath> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleLeadRolePath>(pathOwnerInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleLeadRolePath.PathOwnerDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of PathOwner not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region RolePath link accessor
		/// <summary>
		/// Get the list of RolePathOwnerHasSingleLeadRolePath links to a LeadRolePath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleLeadRolePath> GetLinksToPathOwner ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePath rolePathInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleLeadRolePath>(rolePathInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleLeadRolePath.RolePathDomainRoleId);
		}
		#endregion
		#region RolePathOwnerHasSingleLeadRolePath instance accessors
		
		/// <summary>
		/// Get any RolePathOwnerHasSingleLeadRolePath links between a given RolePathOwner and a LeadRolePath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleLeadRolePath> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwner source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePath target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleLeadRolePath> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleLeadRolePath>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleLeadRolePath> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleLeadRolePath>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleLeadRolePath.PathOwnerDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleLeadRolePath link in links )
			{
				if ( target.Equals(link.RolePath) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RolePathOwnerHasSingleLeadRolePath link between a given RolePathOwnerand a LeadRolePath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleLeadRolePath GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwner source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePath target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleLeadRolePath> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleLeadRolePath>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleLeadRolePath.PathOwnerDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleLeadRolePath link in links )
			{
				if ( target.Equals(link.RolePath) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship RolePathOwnerHasSingleOwnedLeadRolePath
	/// Derived relationship based on RolePathOwnerOwnsLeadRolePath to determine path
	/// owners with a single owned role path and no shared role paths.
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleOwnedLeadRolePath.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleOwnedLeadRolePath.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("dd513cab-7643-4fbf-9aed-a5ebfb44919c")]
	public partial class RolePathOwnerHasSingleOwnedLeadRolePath : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RolePathOwnerHasSingleOwnedLeadRolePath domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xdd513cab, 0x7643, 0x4fbf, 0x9a, 0xed, 0xa5, 0xeb, 0xfb, 0x44, 0x91, 0x9c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RolePathOwnerHasSingleOwnedLeadRolePath link in the same Partition as the given RolePathOwner
		/// </summary>
		/// <param name="source">RolePathOwner to use as the source of the relationship.</param>
		/// <param name="target">LeadRolePath to use as the target of the relationship.</param>
		public RolePathOwnerHasSingleOwnedLeadRolePath(RolePathOwner source, LeadRolePath target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RolePathOwnerHasSingleOwnedLeadRolePath.PathOwnerDomainRoleId, source), new DslModeling::RoleAssignment(RolePathOwnerHasSingleOwnedLeadRolePath.RolePathDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RolePathOwnerHasSingleOwnedLeadRolePath(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RolePathOwnerHasSingleOwnedLeadRolePath(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RolePathOwnerHasSingleOwnedLeadRolePath(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RolePathOwnerHasSingleOwnedLeadRolePath(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region PathOwner domain role code
		
		/// <summary>
		/// PathOwner domain role Id.
		/// </summary>
		public static readonly global::System.Guid PathOwnerDomainRoleId = new global::System.Guid(0xc1f48aeb, 0x2dcf, 0x44bd, 0x93, 0x8e, 0xf2, 0xcb, 0xf1, 0x93, 0xc3, 0xaf);
		
		/// <summary>
		/// DomainRole PathOwner
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleOwnedLeadRolePath.PathOwner
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleOwnedLeadRolePath/PathOwner.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleOwnedLeadRolePath/PathOwner.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "SingleOwnedLeadRolePath", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleOwnedLeadRolePath/PathOwner.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("c1f48aeb-2dcf-44bd-938e-f2cbf193c3af")]
		public virtual RolePathOwner PathOwner
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RolePathOwner)DslModeling::DomainRoleInfo.GetRolePlayer(this, PathOwnerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PathOwnerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PathOwner of a LeadRolePath
		/// <summary>
		/// Gets PathOwner.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static RolePathOwner GetPathOwner(LeadRolePath element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RolePathDomainRoleId) as RolePathOwner;
		}
		
		/// <summary>
		/// Sets PathOwner.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetPathOwner(LeadRolePath element, RolePathOwner newPathOwner)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RolePathDomainRoleId, newPathOwner);
		}
		#endregion
		#region RolePath domain role code
		
		/// <summary>
		/// RolePath domain role Id.
		/// </summary>
		public static readonly global::System.Guid RolePathDomainRoleId = new global::System.Guid(0x7c318cbc, 0x480a, 0x46fe, 0x81, 0xb8, 0x5e, 0xd2, 0xf0, 0xd0, 0xf4, 0x56);
		
		/// <summary>
		/// DomainRole RolePath
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleOwnedLeadRolePath.RolePath
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleOwnedLeadRolePath/RolePath.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleOwnedLeadRolePath/RolePath.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "PathOwner", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleOwnedLeadRolePath/RolePath.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("7c318cbc-480a-46fe-81b8-5ed2f0d0f456")]
		public virtual LeadRolePath RolePath
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (LeadRolePath)DslModeling::DomainRoleInfo.GetRolePlayer(this, RolePathDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RolePathDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SingleOwnedLeadRolePath of a RolePathOwner
		/// <summary>
		/// Gets SingleOwnedLeadRolePath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static LeadRolePath GetSingleOwnedLeadRolePath(RolePathOwner element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PathOwnerDomainRoleId) as LeadRolePath;
		}
		
		/// <summary>
		/// Sets SingleOwnedLeadRolePath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSingleOwnedLeadRolePath(RolePathOwner element, LeadRolePath newRolePath)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PathOwnerDomainRoleId, newRolePath);
		}
		#endregion
		#region PathOwner link accessor
		/// <summary>
		/// Get the RolePathOwnerHasSingleOwnedLeadRolePath link to a RolePathOwner.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleOwnedLeadRolePath GetLinkToSingleOwnedLeadRolePath (global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwner pathOwnerInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleOwnedLeadRolePath> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleOwnedLeadRolePath>(pathOwnerInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleOwnedLeadRolePath.PathOwnerDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of PathOwner not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region RolePath link accessor
		/// <summary>
		/// Get the RolePathOwnerHasSingleOwnedLeadRolePath link to a LeadRolePath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleOwnedLeadRolePath GetLinkToPathOwner (global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePath rolePathInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleOwnedLeadRolePath> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleOwnedLeadRolePath>(rolePathInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleOwnedLeadRolePath.RolePathDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of RolePath not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region RolePathOwnerHasSingleOwnedLeadRolePath instance accessors
		
		/// <summary>
		/// Get any RolePathOwnerHasSingleOwnedLeadRolePath links between a given RolePathOwner and a LeadRolePath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleOwnedLeadRolePath> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwner source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePath target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleOwnedLeadRolePath> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleOwnedLeadRolePath>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleOwnedLeadRolePath> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleOwnedLeadRolePath>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleOwnedLeadRolePath.PathOwnerDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleOwnedLeadRolePath link in links )
			{
				if ( target.Equals(link.RolePath) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RolePathOwnerHasSingleOwnedLeadRolePath link between a given RolePathOwnerand a LeadRolePath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleOwnedLeadRolePath GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwner source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePath target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleOwnedLeadRolePath> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleOwnedLeadRolePath>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleOwnedLeadRolePath.PathOwnerDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleOwnedLeadRolePath link in links )
			{
				if ( target.Equals(link.RolePath) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship RolePathOwnerHasSubquery
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSubquery
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSubquery.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSubquery.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("6d845888-b31e-4eba-ba21-d8d48203749e")]
	public abstract partial class RolePathOwnerHasSubquery : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RolePathOwnerHasSubquery domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6d845888, 0xb31e, 0x4eba, 0xba, 0x21, 0xd8, 0xd4, 0x82, 0x03, 0x74, 0x9e);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">The Partition instance containing this ElementLink</param>
		/// <param name="roleAssignments">A set of role assignments for roleplayer initialization</param>
		/// <param name="propertyAssignments">A set of attribute assignments for attribute initialization</param>
		protected RolePathOwnerHasSubquery(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region PathOwner domain role code
		
		/// <summary>
		/// PathOwner domain role Id.
		/// </summary>
		public static readonly global::System.Guid PathOwnerDomainRoleId = new global::System.Guid(0x65e52f06, 0xb599, 0x419d, 0xaf, 0xed, 0x9e, 0x76, 0x4e, 0xa4, 0x06, 0x53);
		
		/// <summary>
		/// DomainRole PathOwner
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSubquery.PathOwner
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSubquery/PathOwner.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSubquery/PathOwner.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "SubqueryCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSubquery/PathOwner.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("65e52f06-b599-419d-afed-9e764ea40653")]
		public abstract RolePathOwner PathOwner
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access PathOwnerCollection of a Subquery
		/// <summary>
		/// Gets a list of PathOwnerCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<RolePathOwner> GetPathOwnerCollection(Subquery element)
		{
			return new DslModeling::ReadOnlyLinkedElementCollection<RolePathOwner>(element, SubqueryDomainRoleId);
		}
		#endregion
		#region Subquery domain role code
		
		/// <summary>
		/// Subquery domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubqueryDomainRoleId = new global::System.Guid(0xfa242aeb, 0x8255, 0x4968, 0x8f, 0x27, 0xba, 0x84, 0x7a, 0x82, 0x60, 0x31);
		
		/// <summary>
		/// DomainRole Subquery
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSubquery.Subquery
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSubquery/Subquery.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSubquery/Subquery.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "PathOwnerCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSubquery/Subquery.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("fa242aeb-8255-4968-8f27-ba847a826031")]
		public abstract Subquery Subquery
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access SubqueryCollection of a RolePathOwner
		/// <summary>
		/// Gets a list of SubqueryCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<Subquery> GetSubqueryCollection(RolePathOwner element)
		{
			return new DslModeling::ReadOnlyLinkedElementCollection<Subquery>(element, PathOwnerDomainRoleId);
		}
		#endregion
		#region PathOwner link accessor
		/// <summary>
		/// Get the list of RolePathOwnerHasSubquery links to a RolePathOwner.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSubquery> GetLinksToSubqueryCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwner pathOwnerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSubquery>(pathOwnerInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSubquery.PathOwnerDomainRoleId);
		}
		#endregion
		#region Subquery link accessor
		/// <summary>
		/// Get the list of RolePathOwnerHasSubquery links to a Subquery.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSubquery> GetLinksToPathOwnerCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.Subquery subqueryInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSubquery>(subqueryInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSubquery.SubqueryDomainRoleId);
		}
		#endregion
		#region RolePathOwnerHasSubquery instance accessors
		
		/// <summary>
		/// Get any RolePathOwnerHasSubquery links between a given RolePathOwner and a Subquery.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSubquery> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwner source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Subquery target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSubquery> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSubquery>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSubquery> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSubquery>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSubquery.PathOwnerDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSubquery link in links )
			{
				if ( target.Equals(link.Subquery) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RolePathOwnerHasSubquery link between a given RolePathOwnerand a Subquery.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSubquery GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwner source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Subquery target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSubquery> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSubquery>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSubquery.PathOwnerDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSubquery link in links )
			{
				if ( target.Equals(link.Subquery) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship RolePathOwnerOwnsSubquery
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsSubquery
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsSubquery.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsSubquery.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("6b8564f8-f8e8-4fe1-a3d6-6dca08122370")]
	public partial class RolePathOwnerOwnsSubquery : RolePathOwnerHasSubquery
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RolePathOwnerOwnsSubquery domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6b8564f8, 0xf8e8, 0x4fe1, 0xa3, 0xd6, 0x6d, 0xca, 0x08, 0x12, 0x23, 0x70);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RolePathOwnerOwnsSubquery link in the same Partition as the given RolePathOwner
		/// </summary>
		/// <param name="source">RolePathOwner to use as the source of the relationship.</param>
		/// <param name="target">Subquery to use as the target of the relationship.</param>
		public RolePathOwnerOwnsSubquery(RolePathOwner source, Subquery target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RolePathOwnerOwnsSubquery.PathOwnerDomainRoleId, source), new DslModeling::RoleAssignment(RolePathOwnerOwnsSubquery.SubqueryDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RolePathOwnerOwnsSubquery(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RolePathOwnerOwnsSubquery(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RolePathOwnerOwnsSubquery(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RolePathOwnerOwnsSubquery(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region PathOwner domain role code
		
		/// <summary>
		/// PathOwner domain role Id.
		/// </summary>
		public static readonly new global::System.Guid PathOwnerDomainRoleId = new global::System.Guid(0xdafdd574, 0x9167, 0x4e76, 0x8f, 0x65, 0xff, 0x67, 0xa6, 0x94, 0x2a, 0xf9);
		
		/// <summary>
		/// DomainRole PathOwner
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsSubquery.PathOwner
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsSubquery/PathOwner.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsSubquery/PathOwner.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "OwnedSubqueryCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsSubquery/PathOwner.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("dafdd574-9167-4e76-8f65-ff67a6942af9")]
		public override RolePathOwner PathOwner
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RolePathOwner)DslModeling::DomainRoleInfo.GetRolePlayer(this, PathOwnerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PathOwnerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PathOwner of a Subquery
		/// <summary>
		/// Gets PathOwner.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static RolePathOwner GetPathOwner(Subquery element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SubqueryDomainRoleId) as RolePathOwner;
		}
		
		/// <summary>
		/// Sets PathOwner.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetPathOwner(Subquery element, RolePathOwner newPathOwner)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SubqueryDomainRoleId, newPathOwner);
		}
		#endregion
		#region Subquery domain role code
		
		/// <summary>
		/// Subquery domain role Id.
		/// </summary>
		public static readonly new global::System.Guid SubqueryDomainRoleId = new global::System.Guid(0x78b9d9e7, 0x2ca9, 0x4725, 0x9f, 0xe9, 0x8f, 0x92, 0x14, 0x73, 0x1e, 0xd7);
		
		/// <summary>
		/// DomainRole Subquery
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsSubquery.Subquery
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsSubquery/Subquery.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsSubquery/Subquery.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "PathOwner", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsSubquery/Subquery.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("78b9d9e7-2ca9-4725-9fe9-8f9214731ed7")]
		public override Subquery Subquery
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Subquery)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubqueryDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubqueryDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access OwnedSubqueryCollection of a RolePathOwner
		/// <summary>
		/// Gets a list of OwnedSubqueryCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Subquery> GetOwnedSubqueryCollection(RolePathOwner element)
		{
			return new DslModeling::LinkedElementCollection<Subquery>(element, PathOwnerDomainRoleId);
		}
		#endregion
		#region PathOwner link accessor
		/// <summary>
		/// Get the list of RolePathOwnerOwnsSubquery links to a RolePathOwner.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsSubquery> GetLinksToOwnedSubqueryCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwner pathOwnerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsSubquery>(pathOwnerInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsSubquery.PathOwnerDomainRoleId);
		}
		#endregion
		#region Subquery link accessor
		/// <summary>
		/// Get the RolePathOwnerOwnsSubquery link to a Subquery.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsSubquery GetLinkToPathOwner (global::ORMSolutions.ORMArchitect.Core.ObjectModel.Subquery subqueryInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsSubquery> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsSubquery>(subqueryInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsSubquery.SubqueryDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Subquery not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region RolePathOwnerOwnsSubquery instance accessors
		
		/// <summary>
		/// Get any RolePathOwnerOwnsSubquery links between a given RolePathOwner and a Subquery.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsSubquery> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwner source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Subquery target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsSubquery> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsSubquery>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsSubquery> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsSubquery>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsSubquery.PathOwnerDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsSubquery link in links )
			{
				if ( target.Equals(link.Subquery) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RolePathOwnerOwnsSubquery link between a given RolePathOwnerand a Subquery.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsSubquery GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwner source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Subquery target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsSubquery> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsSubquery>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsSubquery.PathOwnerDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsSubquery link in links )
			{
				if ( target.Equals(link.Subquery) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship RolePathOwnerUsesSharedSubquery
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedSubquery
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedSubquery.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedSubquery.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("c7d7f69d-bb41-4121-8f30-18c7385ac74f")]
	public partial class RolePathOwnerUsesSharedSubquery : RolePathOwnerHasSubquery
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RolePathOwnerUsesSharedSubquery domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc7d7f69d, 0xbb41, 0x4121, 0x8f, 0x30, 0x18, 0xc7, 0x38, 0x5a, 0xc7, 0x4f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RolePathOwnerUsesSharedSubquery link in the same Partition as the given RolePathOwner
		/// </summary>
		/// <param name="source">RolePathOwner to use as the source of the relationship.</param>
		/// <param name="target">Subquery to use as the target of the relationship.</param>
		public RolePathOwnerUsesSharedSubquery(RolePathOwner source, Subquery target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RolePathOwnerUsesSharedSubquery.PathOwnerDomainRoleId, source), new DslModeling::RoleAssignment(RolePathOwnerUsesSharedSubquery.SubqueryDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RolePathOwnerUsesSharedSubquery(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RolePathOwnerUsesSharedSubquery(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RolePathOwnerUsesSharedSubquery(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RolePathOwnerUsesSharedSubquery(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region PathOwner domain role code
		
		/// <summary>
		/// PathOwner domain role Id.
		/// </summary>
		public static readonly new global::System.Guid PathOwnerDomainRoleId = new global::System.Guid(0x1cdca494, 0x6762, 0x4f96, 0x99, 0x5b, 0xfa, 0x00, 0x08, 0x2a, 0xb7, 0x9c);
		
		/// <summary>
		/// DomainRole PathOwner
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedSubquery.PathOwner
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedSubquery/PathOwner.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedSubquery/PathOwner.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "SharedSubqueryCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedSubquery/PathOwner.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("1cdca494-6762-4f96-995b-fa00082ab79c")]
		public override RolePathOwner PathOwner
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RolePathOwner)DslModeling::DomainRoleInfo.GetRolePlayer(this, PathOwnerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PathOwnerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SharedWithPathOwnerCollection of a Subquery
		/// <summary>
		/// Gets a list of SharedWithPathOwnerCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<RolePathOwner> GetSharedWithPathOwnerCollection(Subquery element)
		{
			return new DslModeling::LinkedElementCollection<RolePathOwner>(element, SubqueryDomainRoleId);
		}
		#endregion
		#region Subquery domain role code
		
		/// <summary>
		/// Subquery domain role Id.
		/// </summary>
		public static readonly new global::System.Guid SubqueryDomainRoleId = new global::System.Guid(0x9fbcd949, 0xac9c, 0x48f8, 0x99, 0x81, 0x58, 0x42, 0xcd, 0x9c, 0xff, 0x6c);
		
		/// <summary>
		/// DomainRole Subquery
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedSubquery.Subquery
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedSubquery/Subquery.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedSubquery/Subquery.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SharedWithPathOwnerCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedSubquery/Subquery.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("9fbcd949-ac9c-48f8-9981-5842cd9cff6c")]
		public override Subquery Subquery
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Subquery)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubqueryDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubqueryDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SharedSubqueryCollection of a RolePathOwner
		/// <summary>
		/// Gets a list of SharedSubqueryCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Subquery> GetSharedSubqueryCollection(RolePathOwner element)
		{
			return new DslModeling::LinkedElementCollection<Subquery>(element, PathOwnerDomainRoleId);
		}
		#endregion
		#region PathOwner link accessor
		/// <summary>
		/// Get the list of RolePathOwnerUsesSharedSubquery links to a RolePathOwner.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedSubquery> GetLinksToSharedSubqueryCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwner pathOwnerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedSubquery>(pathOwnerInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedSubquery.PathOwnerDomainRoleId);
		}
		#endregion
		#region Subquery link accessor
		/// <summary>
		/// Get the list of RolePathOwnerUsesSharedSubquery links to a Subquery.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedSubquery> GetLinksToSharedWithPathOwnerCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.Subquery subqueryInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedSubquery>(subqueryInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedSubquery.SubqueryDomainRoleId);
		}
		#endregion
		#region RolePathOwnerUsesSharedSubquery instance accessors
		
		/// <summary>
		/// Get any RolePathOwnerUsesSharedSubquery links between a given RolePathOwner and a Subquery.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedSubquery> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwner source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Subquery target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedSubquery> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedSubquery>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedSubquery> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedSubquery>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedSubquery.PathOwnerDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedSubquery link in links )
			{
				if ( target.Equals(link.Subquery) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RolePathOwnerUsesSharedSubquery link between a given RolePathOwnerand a Subquery.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedSubquery GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwner source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Subquery target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedSubquery> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedSubquery>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedSubquery.PathOwnerDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedSubquery link in links )
			{
				if ( target.Equals(link.Subquery) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship RolePathObjectTypeRoot
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("4ffd036f-fc35-41af-a318-27db84e2d7b4")]
	public partial class RolePathObjectTypeRoot : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RolePathObjectTypeRoot domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4ffd036f, 0xfc35, 0x41af, 0xa3, 0x18, 0x27, 0xdb, 0x84, 0xe2, 0xd7, 0xb4);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RolePathObjectTypeRoot link in the same Partition as the given RolePath
		/// </summary>
		/// <param name="source">RolePath to use as the source of the relationship.</param>
		/// <param name="target">ObjectType to use as the target of the relationship.</param>
		public RolePathObjectTypeRoot(RolePath source, ObjectType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RolePathObjectTypeRoot.RolePathDomainRoleId, source), new DslModeling::RoleAssignment(RolePathObjectTypeRoot.RootObjectTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RolePathObjectTypeRoot(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RolePathObjectTypeRoot(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RolePathObjectTypeRoot(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RolePathObjectTypeRoot(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region RolePath domain role code
		
		/// <summary>
		/// RolePath domain role Id.
		/// </summary>
		public static readonly global::System.Guid RolePathDomainRoleId = new global::System.Guid(0x1f8ddc17, 0x4be8, 0x4bd6, 0x87, 0xd2, 0x96, 0x00, 0x58, 0xbf, 0x9f, 0x5b);
		
		/// <summary>
		/// DomainRole RolePath
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot.RolePath
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot/RolePath.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot/RolePath.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "RootObjectType", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot/RolePath.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("1f8ddc17-4be8-4bd6-87d2-960058bf9f5b")]
		public virtual RolePath RolePath
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RolePath)DslModeling::DomainRoleInfo.GetRolePlayer(this, RolePathDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RolePathDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RolePathCollection of a ObjectType
		/// <summary>
		/// Gets a list of RolePathCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<RolePath> GetRolePathCollection(ObjectType element)
		{
			return new DslModeling::LinkedElementCollection<RolePath>(element, RootObjectTypeDomainRoleId);
		}
		#endregion
		#region RootObjectType domain role code
		
		/// <summary>
		/// RootObjectType domain role Id.
		/// </summary>
		public static readonly global::System.Guid RootObjectTypeDomainRoleId = new global::System.Guid(0x7c63fedf, 0x5f2c, 0x4c95, 0x82, 0xb5, 0xd2, 0x0a, 0xb1, 0x5b, 0x2a, 0x03);
		
		/// <summary>
		/// DomainRole RootObjectType
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot.RootObjectType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot/RootObjectType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot/RootObjectType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "RolePathCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot/RootObjectType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("7c63fedf-5f2c-4c95-82b5-d20ab15b2a03")]
		public virtual ObjectType RootObjectType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, RootObjectTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RootObjectTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RootObjectType of a RolePath
		/// <summary>
		/// Gets RootObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ObjectType GetRootObjectType(RolePath element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RolePathDomainRoleId) as ObjectType;
		}
		
		/// <summary>
		/// Sets RootObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRootObjectType(RolePath element, ObjectType newRootObjectType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RolePathDomainRoleId, newRootObjectType);
		}
		#endregion
		#region IsNegated domain property code
		
		/// <summary>
		/// IsNegated domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsNegatedDomainPropertyId = new global::System.Guid(0x0ca66a3f, 0x586d, 0x433c, 0xa8, 0x29, 0xb9, 0x69, 0x8d, 0xe2, 0xac, 0xb3);
		
		/// <summary>
		/// Storage for IsNegated
		/// </summary>
		private global::System.Boolean isNegatedPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsNegated domain property.
		/// Indicates a negated path root.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot/IsNegated.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot/IsNegated.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainObjectId("0ca66a3f-586d-433c-a829-b9698de2acb3")]
		public global::System.Boolean IsNegated
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isNegatedPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsNegatedPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the RolePathObjectTypeRoot.IsNegated domain property.
		/// </summary>
		internal sealed partial class IsNegatedPropertyHandler : DslModeling::DomainPropertyValueHandler<RolePathObjectTypeRoot, global::System.Boolean>
		{
			private IsNegatedPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the RolePathObjectTypeRoot.IsNegated domain property value handler.
			/// </summary>
			public static readonly IsNegatedPropertyHandler Instance = new IsNegatedPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the RolePathObjectTypeRoot.IsNegated domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsNegatedDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(RolePathObjectTypeRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isNegatedPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(RolePathObjectTypeRoot element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isNegatedPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Accessors for roles that this REL plays in other RELs
		#region ValueConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets ValueConstraint.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathRootHasValueConstraint.PathRoot
		/// </summary>
		public virtual PathConditionRootValueConstraint ValueConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathRootHasValueConstraint.PathRootDomainRoleId) as PathConditionRootValueConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathRootHasValueConstraint.ValueConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathRootHasValueConstraint.ValueConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathRootHasValueConstraint.PathRootDomainRoleId, value);
				}
			}
		}
		#endregion
		#region ObjectUnifier opposite domain role accessor
		/// <summary>
		/// Gets or sets ObjectUnifier.
		/// The object unifier used to correlate this role path root with other path nodes.
		/// </summary>
		public virtual PathObjectUnifier ObjectUnifier
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesRolePathRoot.PathRootDomainRoleId) as PathObjectUnifier;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesRolePathRoot.PathRootDomainRoleId, value);
			}
		}
		#endregion
		#region BoundInputCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of BoundInputCollection.
		/// The calculated value inputs bound to this role path root node.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<CalculatedPathValueInput> BoundInputCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<CalculatedPathValueInput>(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToRolePathRoot.SourceDomainRoleId);
			}
		}
		#endregion
		#endregion
		#region RolePath link accessor
		/// <summary>
		/// Get the RolePathObjectTypeRoot link to a RolePath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot GetLinkToRootObjectType (global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePath rolePathInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot>(rolePathInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot.RolePathDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of RolePath not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region RootObjectType link accessor
		/// <summary>
		/// Get the list of RolePathObjectTypeRoot links to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot> GetLinksToRolePathCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType rootObjectTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot>(rootObjectTypeInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot.RootObjectTypeDomainRoleId);
		}
		#endregion
		#region RolePathObjectTypeRoot instance accessors
		
		/// <summary>
		/// Get any RolePathObjectTypeRoot links between a given RolePath and a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePath source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot.RolePathDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot link in links )
			{
				if ( target.Equals(link.RootObjectType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RolePathObjectTypeRoot link between a given RolePathand a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePath source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot.RolePathDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot link in links )
			{
				if ( target.Equals(link.RootObjectType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship PathedRole
	/// An occurrence of a &lt;see cref="Role"/&gt; in a &lt;see cref="RolePath"/&gt;. A single role
	/// may occur multiple times in the same path.
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("8f28981e-e8b5-4205-82ba-2487b9b3ef13")]
	public partial class PathedRole : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// PathedRole domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8f28981e, 0xe8b5, 0x4205, 0x82, 0xba, 0x24, 0x87, 0xb9, 0xb3, 0xef, 0x13);
	
				
		/// <summary>
		/// Constructor
		/// Creates a PathedRole link in the same Partition as the given RolePath
		/// </summary>
		/// <param name="source">RolePath to use as the source of the relationship.</param>
		/// <param name="target">Role to use as the target of the relationship.</param>
		public PathedRole(RolePath source, Role target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(PathedRole.RolePathDomainRoleId, source), new DslModeling::RoleAssignment(PathedRole.RoleDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PathedRole(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PathedRole(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PathedRole(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PathedRole(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region RolePath domain role code
		
		/// <summary>
		/// RolePath domain role Id.
		/// </summary>
		public static readonly global::System.Guid RolePathDomainRoleId = new global::System.Guid(0xe1a7228b, 0x6f79, 0x42fb, 0x88, 0x77, 0x80, 0x3a, 0xdc, 0xfb, 0xb5, 0x4a);
		
		/// <summary>
		/// DomainRole RolePath
		/// The roles included in this path.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole/RolePath.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole/RolePath.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "RoleCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole/RolePath.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e1a7228b-6f79-42fb-8877-803adcfbb54a")]
		public virtual RolePath RolePath
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RolePath)DslModeling::DomainRoleInfo.GetRolePlayer(this, RolePathDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RolePathDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RolePathCollection of a Role
		/// <summary>
		/// Gets a list of RolePathCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<RolePath> GetRolePathCollection(Role element)
		{
			return new DslModeling::LinkedElementCollection<RolePath>(element, RoleDomainRoleId);
		}
		#endregion
		#region Role domain role code
		
		/// <summary>
		/// Role domain role Id.
		/// </summary>
		public static readonly global::System.Guid RoleDomainRoleId = new global::System.Guid(0x18a191c8, 0x4202, 0x4dc2, 0xa4, 0x0d, 0x9a, 0x75, 0xf5, 0xe6, 0x11, 0x7f);
		
		/// <summary>
		/// DomainRole Role
		/// The role paths that reference this role.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole/Role.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole/Role.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "RolePathCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole/Role.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("18a191c8-4202-4dc2-a40d-9a75f5e6117f")]
		public virtual Role Role
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Role)DslModeling::DomainRoleInfo.GetRolePlayer(this, RoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RoleCollection of a RolePath
		/// <summary>
		/// Gets a list of RoleCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Role> GetRoleCollection(RolePath element)
		{
			return new DslModeling::LinkedElementCollection<Role>(element, RolePathDomainRoleId);
		}
		#endregion
		#region IsNegated domain property code
		
		/// <summary>
		/// IsNegated domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsNegatedDomainPropertyId = new global::System.Guid(0x1260f1f6, 0x15bb, 0x425a, 0x8f, 0xf7, 0xb7, 0x84, 0x1e, 0x82, 0x52, 0xad);
		
		/// <summary>
		/// Storage for IsNegated
		/// </summary>
		private global::System.Boolean isNegatedPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsNegated domain property.
		/// Indicates that this step in the path is negated.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole/IsNegated.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole/IsNegated.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainObjectId("1260f1f6-15bb-425a-8ff7-b7841e8252ad")]
		public global::System.Boolean IsNegated
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isNegatedPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsNegatedPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PathedRole.IsNegated domain property.
		/// </summary>
		internal sealed partial class IsNegatedPropertyHandler : DslModeling::DomainPropertyValueHandler<PathedRole, global::System.Boolean>
		{
			private IsNegatedPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PathedRole.IsNegated domain property value handler.
			/// </summary>
			public static readonly IsNegatedPropertyHandler Instance = new IsNegatedPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PathedRole.IsNegated domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsNegatedDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(PathedRole element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isNegatedPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PathedRole element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isNegatedPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region PathedRolePurpose domain property code
		
		/// <summary>
		/// PathedRolePurpose domain property Id.
		/// </summary>
		public static readonly global::System.Guid PathedRolePurposeDomainPropertyId = new global::System.Guid(0xffaf4ef9, 0xca23, 0x4d14, 0xbb, 0x6d, 0x8f, 0x5b, 0x3c, 0x90, 0xe6, 0x80);
		
		/// <summary>
		/// Storage for PathedRolePurpose
		/// </summary>
		private PathedRolePurpose pathedRolePurposePropertyStorage = ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRolePurpose.SameFactType;
		
		/// <summary>
		/// Gets or sets the value of PathedRolePurpose domain property.
		/// Specifies how this pathed role relates to the previous pathed role or path root.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole/PathedRolePurpose.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole/PathedRolePurpose.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue(ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRolePurpose.SameFactType)]
		[DslModeling::DomainObjectId("ffaf4ef9-ca23-4d14-bb6d-8f5b3c90e680")]
		public PathedRolePurpose PathedRolePurpose
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return pathedRolePurposePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				PathedRolePurposePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PathedRole.PathedRolePurpose domain property.
		/// </summary>
		internal sealed partial class PathedRolePurposePropertyHandler : DslModeling::DomainPropertyValueHandler<PathedRole, PathedRolePurpose>
		{
			private PathedRolePurposePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PathedRole.PathedRolePurpose domain property value handler.
			/// </summary>
			public static readonly PathedRolePurposePropertyHandler Instance = new PathedRolePurposePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PathedRole.PathedRolePurpose domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PathedRolePurposeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed PathedRolePurpose GetValue(PathedRole element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.pathedRolePurposePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PathedRole element, PathedRolePurpose newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				PathedRolePurpose oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.pathedRolePurposePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Accessors for roles that this REL plays in other RELs
		#region ValueConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets ValueConstraint.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasValueConstraint.PathedRole
		/// </summary>
		public virtual PathConditionRoleValueConstraint ValueConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasValueConstraint.PathedRoleDomainRoleId) as PathConditionRoleValueConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasValueConstraint.ValueConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasValueConstraint.ValueConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasValueConstraint.PathedRoleDomainRoleId, value);
				}
			}
		}
		#endregion
		#region ObjectUnifier opposite domain role accessor
		/// <summary>
		/// Gets or sets ObjectUnifier.
		/// The object unifier used to correlate this pathed role with other path nodes.
		/// </summary>
		public virtual PathObjectUnifier ObjectUnifier
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesPathedRole.PathedRoleDomainRoleId) as PathObjectUnifier;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesPathedRole.PathedRoleDomainRoleId, value);
			}
		}
		#endregion
		#region BoundInputCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of BoundInputCollection.
		/// The calculated value inputs bound to this path node.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<CalculatedPathValueInput> BoundInputCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<CalculatedPathValueInput>(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathedRole.SourceDomainRoleId);
			}
		}
		#endregion
		#region JoinCompatibilityError opposite domain role accessor
		/// <summary>
		/// Gets or sets JoinCompatibilityError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasCompatibleJoinRolePlayerError.PathedRole
		/// </summary>
		public virtual JoinedPathRoleRequiresCompatibleRolePlayerError JoinCompatibilityError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasCompatibleJoinRolePlayerError.PathedRoleDomainRoleId) as JoinedPathRoleRequiresCompatibleRolePlayerError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasCompatibleJoinRolePlayerError.JoinCompatibilityErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasCompatibleJoinRolePlayerError.JoinCompatibilityErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasCompatibleJoinRolePlayerError.PathedRoleDomainRoleId, value);
				}
			}
		}
		#endregion
		#region SameFactTypeRoleWithoutJoinError opposite domain role accessor
		/// <summary>
		/// Gets or sets SameFactTypeRoleWithoutJoinError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasSameFactTypeFollowsJoinError.PathedRole
		/// </summary>
		public virtual PathSameFactTypeRoleFollowsJoinError SameFactTypeRoleWithoutJoinError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasSameFactTypeFollowsJoinError.PathedRoleDomainRoleId) as PathSameFactTypeRoleFollowsJoinError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasSameFactTypeFollowsJoinError.SameFactTypeRoleFollowsJoinErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasSameFactTypeFollowsJoinError.SameFactTypeRoleFollowsJoinErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasSameFactTypeFollowsJoinError.PathedRoleDomainRoleId, value);
				}
			}
		}
		#endregion
		#region MandatoryOuterJoinError opposite domain role accessor
		/// <summary>
		/// Gets or sets MandatoryOuterJoinError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasMandatoryOuterJoinError.PathedRole
		/// </summary>
		public virtual PathOuterJoinRequiresOptionalRoleError MandatoryOuterJoinError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasMandatoryOuterJoinError.PathedRoleDomainRoleId) as PathOuterJoinRequiresOptionalRoleError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasMandatoryOuterJoinError.MandatoryOuterJoinErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasMandatoryOuterJoinError.MandatoryOuterJoinErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasMandatoryOuterJoinError.PathedRoleDomainRoleId, value);
				}
			}
		}
		#endregion
		#endregion
		#region RolePath link accessor
		/// <summary>
		/// Get the list of PathedRole links to a RolePath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole> GetLinksToRoleCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePath rolePathInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole>(rolePathInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole.RolePathDomainRoleId);
		}
		#endregion
		#region Role link accessor
		/// <summary>
		/// Get the list of PathedRole links to a Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole> GetLinksToRolePathCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.Role roleInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole>(roleInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole.RoleDomainRoleId);
		}
		#endregion
		#region PathedRole instance accessors
		
		/// <summary>
		/// Get any PathedRole links between a given RolePath and a Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePath source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Role target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole.RolePathDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole link in links )
			{
				if ( target.Equals(link.Role) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship PathedRoleIsRemotelyCorrelatedWithPathedRole_Deprecated
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleIsRemotelyCorrelatedWithPathedRole_Deprecated
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleIsRemotelyCorrelatedWithPathedRole_Deprecated.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleIsRemotelyCorrelatedWithPathedRole_Deprecated.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("8019dba6-0330-4dd5-abc8-27197537008d")]
	public partial class PathedRoleIsRemotelyCorrelatedWithPathedRole_Deprecated : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// PathedRoleIsRemotelyCorrelatedWithPathedRole_Deprecated domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8019dba6, 0x0330, 0x4dd5, 0xab, 0xc8, 0x27, 0x19, 0x75, 0x37, 0x00, 0x8d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a PathedRoleIsRemotelyCorrelatedWithPathedRole_Deprecated link in the same Partition as the given PathedRole
		/// </summary>
		/// <param name="source">PathedRole to use as the source of the relationship.</param>
		/// <param name="target">PathedRole to use as the target of the relationship.</param>
		public PathedRoleIsRemotelyCorrelatedWithPathedRole_Deprecated(PathedRole source, PathedRole target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(PathedRoleIsRemotelyCorrelatedWithPathedRole_Deprecated.CorrelatedChildDomainRoleId, source), new DslModeling::RoleAssignment(PathedRoleIsRemotelyCorrelatedWithPathedRole_Deprecated.CorrelatingParentDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PathedRoleIsRemotelyCorrelatedWithPathedRole_Deprecated(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PathedRoleIsRemotelyCorrelatedWithPathedRole_Deprecated(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PathedRoleIsRemotelyCorrelatedWithPathedRole_Deprecated(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PathedRoleIsRemotelyCorrelatedWithPathedRole_Deprecated(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region CorrelatedChild domain role code
		
		/// <summary>
		/// CorrelatedChild domain role Id.
		/// </summary>
		public static readonly global::System.Guid CorrelatedChildDomainRoleId = new global::System.Guid(0x9071c1b5, 0x9d76, 0x496b, 0xb3, 0xdc, 0x5a, 0xcc, 0xda, 0x9a, 0x3d, 0x23);
		
		/// <summary>
		/// DomainRole CorrelatedChild
		/// The parent node this pathed role is correlated with.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleIsRemotelyCorrelatedWithPathedRole_Deprecated/CorrelatedChild.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleIsRemotelyCorrelatedWithPathedRole_Deprecated/CorrelatedChild.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "CorrelatingParent", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleIsRemotelyCorrelatedWithPathedRole_Deprecated/CorrelatedChild.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("9071c1b5-9d76-496b-b3dc-5accda9a3d23")]
		public virtual PathedRole CorrelatedChild
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PathedRole)DslModeling::DomainRoleInfo.GetRolePlayer(this, CorrelatedChildDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CorrelatedChildDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CorrelatedChildCollection of a PathedRole
		/// <summary>
		/// Gets a list of CorrelatedChildCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<PathedRole> GetCorrelatedChildCollection(PathedRole element)
		{
			return new DslModeling::LinkedElementCollection<PathedRole>(element, CorrelatingParentDomainRoleId);
		}
		#endregion
		#region CorrelatingParent domain role code
		
		/// <summary>
		/// CorrelatingParent domain role Id.
		/// </summary>
		public static readonly global::System.Guid CorrelatingParentDomainRoleId = new global::System.Guid(0x6eff9dcc, 0x4bb7, 0x4406, 0x9e, 0x90, 0x79, 0x46, 0x81, 0x03, 0x6c, 0x51);
		
		/// <summary>
		/// DomainRole CorrelatingParent
		/// All pathed roles that are directly correlated with this pathed role.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleIsRemotelyCorrelatedWithPathedRole_Deprecated/CorrelatingParent.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleIsRemotelyCorrelatedWithPathedRole_Deprecated/CorrelatingParent.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "CorrelatedChildCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleIsRemotelyCorrelatedWithPathedRole_Deprecated/CorrelatingParent.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("6eff9dcc-4bb7-4406-9e90-794681036c51")]
		public virtual PathedRole CorrelatingParent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PathedRole)DslModeling::DomainRoleInfo.GetRolePlayer(this, CorrelatingParentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CorrelatingParentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CorrelatingParent of a PathedRole
		/// <summary>
		/// Gets CorrelatingParent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static PathedRole GetCorrelatingParent(PathedRole element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CorrelatedChildDomainRoleId) as PathedRole;
		}
		
		/// <summary>
		/// Sets CorrelatingParent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetCorrelatingParent(PathedRole element, PathedRole newCorrelatingParent)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CorrelatedChildDomainRoleId, newCorrelatingParent);
		}
		#endregion
		#region CorrelatedChild link accessor
		/// <summary>
		/// Get the PathedRoleIsRemotelyCorrelatedWithPathedRole_Deprecated link to a PathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleIsRemotelyCorrelatedWithPathedRole_Deprecated GetLinkToCorrelatingParent (global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole correlatedChildInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleIsRemotelyCorrelatedWithPathedRole_Deprecated> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleIsRemotelyCorrelatedWithPathedRole_Deprecated>(correlatedChildInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleIsRemotelyCorrelatedWithPathedRole_Deprecated.CorrelatedChildDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CorrelatedChild not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CorrelatingParent link accessor
		/// <summary>
		/// Get the list of PathedRoleIsRemotelyCorrelatedWithPathedRole_Deprecated links to a PathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleIsRemotelyCorrelatedWithPathedRole_Deprecated> GetLinksToCorrelatedChildCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole correlatingParentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleIsRemotelyCorrelatedWithPathedRole_Deprecated>(correlatingParentInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleIsRemotelyCorrelatedWithPathedRole_Deprecated.CorrelatingParentDomainRoleId);
		}
		#endregion
		#region PathedRoleIsRemotelyCorrelatedWithPathedRole_Deprecated instance accessors
		
		/// <summary>
		/// Get any PathedRoleIsRemotelyCorrelatedWithPathedRole_Deprecated links between a given PathedRole and a PathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleIsRemotelyCorrelatedWithPathedRole_Deprecated> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleIsRemotelyCorrelatedWithPathedRole_Deprecated> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleIsRemotelyCorrelatedWithPathedRole_Deprecated>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleIsRemotelyCorrelatedWithPathedRole_Deprecated> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleIsRemotelyCorrelatedWithPathedRole_Deprecated>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleIsRemotelyCorrelatedWithPathedRole_Deprecated.CorrelatedChildDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleIsRemotelyCorrelatedWithPathedRole_Deprecated link in links )
			{
				if ( target.Equals(link.CorrelatingParent) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one PathedRoleIsRemotelyCorrelatedWithPathedRole_Deprecated link between a given PathedRoleand a PathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleIsRemotelyCorrelatedWithPathedRole_Deprecated GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleIsRemotelyCorrelatedWithPathedRole_Deprecated> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleIsRemotelyCorrelatedWithPathedRole_Deprecated>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleIsRemotelyCorrelatedWithPathedRole_Deprecated.CorrelatedChildDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleIsRemotelyCorrelatedWithPathedRole_Deprecated link in links )
			{
				if ( target.Equals(link.CorrelatingParent) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship LeadRolePathHasObjectUnifier
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasObjectUnifier
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasObjectUnifier.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasObjectUnifier.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("4b7c3724-8c8d-4f50-8ee6-668fa0f8cb1f")]
	public partial class LeadRolePathHasObjectUnifier : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// LeadRolePathHasObjectUnifier domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4b7c3724, 0x8c8d, 0x4f50, 0x8e, 0xe6, 0x66, 0x8f, 0xa0, 0xf8, 0xcb, 0x1f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a LeadRolePathHasObjectUnifier link in the same Partition as the given LeadRolePath
		/// </summary>
		/// <param name="source">LeadRolePath to use as the source of the relationship.</param>
		/// <param name="target">PathObjectUnifier to use as the target of the relationship.</param>
		public LeadRolePathHasObjectUnifier(LeadRolePath source, PathObjectUnifier target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(LeadRolePathHasObjectUnifier.LeadRolePathDomainRoleId, source), new DslModeling::RoleAssignment(LeadRolePathHasObjectUnifier.ObjectUnifierDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public LeadRolePathHasObjectUnifier(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public LeadRolePathHasObjectUnifier(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public LeadRolePathHasObjectUnifier(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public LeadRolePathHasObjectUnifier(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region LeadRolePath domain role code
		
		/// <summary>
		/// LeadRolePath domain role Id.
		/// </summary>
		public static readonly global::System.Guid LeadRolePathDomainRoleId = new global::System.Guid(0xe5e45a3d, 0x9cfe, 0x4fed, 0x8b, 0x8e, 0xf9, 0x74, 0xb1, 0x59, 0xa7, 0x11);
		
		/// <summary>
		/// DomainRole LeadRolePath
		/// The object unifier that uses pathed roles and path roots in this role path.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasObjectUnifier/LeadRolePath.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasObjectUnifier/LeadRolePath.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ObjectUnifierCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasObjectUnifier/LeadRolePath.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e5e45a3d-9cfe-4fed-8b8e-f974b159a711")]
		public virtual LeadRolePath LeadRolePath
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (LeadRolePath)DslModeling::DomainRoleInfo.GetRolePlayer(this, LeadRolePathDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, LeadRolePathDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access LeadRolePath of a PathObjectUnifier
		/// <summary>
		/// Gets LeadRolePath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static LeadRolePath GetLeadRolePath(PathObjectUnifier element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ObjectUnifierDomainRoleId) as LeadRolePath;
		}
		
		/// <summary>
		/// Sets LeadRolePath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetLeadRolePath(PathObjectUnifier element, LeadRolePath newLeadRolePath)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ObjectUnifierDomainRoleId, newLeadRolePath);
		}
		#endregion
		#region ObjectUnifier domain role code
		
		/// <summary>
		/// ObjectUnifier domain role Id.
		/// </summary>
		public static readonly global::System.Guid ObjectUnifierDomainRoleId = new global::System.Guid(0x766b759d, 0xc29b, 0x4426, 0xb4, 0x7b, 0xfd, 0x02, 0x10, 0xab, 0xec, 0x08);
		
		/// <summary>
		/// DomainRole ObjectUnifier
		/// The lead role path for this object unifier.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasObjectUnifier/ObjectUnifier.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasObjectUnifier/ObjectUnifier.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "LeadRolePath", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasObjectUnifier/ObjectUnifier.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("766b759d-c29b-4426-b47b-fd0210abec08")]
		public virtual PathObjectUnifier ObjectUnifier
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PathObjectUnifier)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjectUnifierDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjectUnifierDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ObjectUnifierCollection of a LeadRolePath
		/// <summary>
		/// Gets a list of ObjectUnifierCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<PathObjectUnifier> GetObjectUnifierCollection(LeadRolePath element)
		{
			return new DslModeling::LinkedElementCollection<PathObjectUnifier>(element, LeadRolePathDomainRoleId);
		}
		#endregion
		#region LeadRolePath link accessor
		/// <summary>
		/// Get the list of LeadRolePathHasObjectUnifier links to a LeadRolePath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasObjectUnifier> GetLinksToObjectUnifierCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePath leadRolePathInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasObjectUnifier>(leadRolePathInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasObjectUnifier.LeadRolePathDomainRoleId);
		}
		#endregion
		#region ObjectUnifier link accessor
		/// <summary>
		/// Get the LeadRolePathHasObjectUnifier link to a PathObjectUnifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasObjectUnifier GetLinkToLeadRolePath (global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifier objectUnifierInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasObjectUnifier> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasObjectUnifier>(objectUnifierInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasObjectUnifier.ObjectUnifierDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ObjectUnifier not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region LeadRolePathHasObjectUnifier instance accessors
		
		/// <summary>
		/// Get any LeadRolePathHasObjectUnifier links between a given LeadRolePath and a PathObjectUnifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasObjectUnifier> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePath source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifier target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasObjectUnifier> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasObjectUnifier>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasObjectUnifier> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasObjectUnifier>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasObjectUnifier.LeadRolePathDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasObjectUnifier link in links )
			{
				if ( target.Equals(link.ObjectUnifier) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one LeadRolePathHasObjectUnifier link between a given LeadRolePathand a PathObjectUnifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasObjectUnifier GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePath source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifier target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasObjectUnifier> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasObjectUnifier>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasObjectUnifier.LeadRolePathDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasObjectUnifier link in links )
			{
				if ( target.Equals(link.ObjectUnifier) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship PathObjectUnifierUnifiesPathedRole
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesPathedRole
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesPathedRole.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesPathedRole.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("d307a09c-3f98-4b3d-afd0-db28f7b2e50a")]
	public partial class PathObjectUnifierUnifiesPathedRole : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// PathObjectUnifierUnifiesPathedRole domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd307a09c, 0x3f98, 0x4b3d, 0xaf, 0xd0, 0xdb, 0x28, 0xf7, 0xb2, 0xe5, 0x0a);
	
				
		/// <summary>
		/// Constructor
		/// Creates a PathObjectUnifierUnifiesPathedRole link in the same Partition as the given PathObjectUnifier
		/// </summary>
		/// <param name="source">PathObjectUnifier to use as the source of the relationship.</param>
		/// <param name="target">PathedRole to use as the target of the relationship.</param>
		public PathObjectUnifierUnifiesPathedRole(PathObjectUnifier source, PathedRole target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(PathObjectUnifierUnifiesPathedRole.ObjectUnifierDomainRoleId, source), new DslModeling::RoleAssignment(PathObjectUnifierUnifiesPathedRole.PathedRoleDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PathObjectUnifierUnifiesPathedRole(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PathObjectUnifierUnifiesPathedRole(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PathObjectUnifierUnifiesPathedRole(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PathObjectUnifierUnifiesPathedRole(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ObjectUnifier domain role code
		
		/// <summary>
		/// ObjectUnifier domain role Id.
		/// </summary>
		public static readonly global::System.Guid ObjectUnifierDomainRoleId = new global::System.Guid(0xb66ef79c, 0x9231, 0x4e02, 0xb5, 0xa6, 0xf1, 0x43, 0xdb, 0xdb, 0x3e, 0xe2);
		
		/// <summary>
		/// DomainRole ObjectUnifier
		/// The unified pathed roles.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesPathedRole/ObjectUnifier.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesPathedRole/ObjectUnifier.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "PathedRoleCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesPathedRole/ObjectUnifier.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b66ef79c-9231-4e02-b5a6-f143dbdb3ee2")]
		public virtual PathObjectUnifier ObjectUnifier
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PathObjectUnifier)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjectUnifierDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjectUnifierDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ObjectUnifier of a PathedRole
		/// <summary>
		/// Gets ObjectUnifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static PathObjectUnifier GetObjectUnifier(PathedRole element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PathedRoleDomainRoleId) as PathObjectUnifier;
		}
		
		/// <summary>
		/// Sets ObjectUnifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetObjectUnifier(PathedRole element, PathObjectUnifier newObjectUnifier)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PathedRoleDomainRoleId, newObjectUnifier);
		}
		#endregion
		#region PathedRole domain role code
		
		/// <summary>
		/// PathedRole domain role Id.
		/// </summary>
		public static readonly global::System.Guid PathedRoleDomainRoleId = new global::System.Guid(0x13762fd7, 0xa9e8, 0x4f59, 0xbb, 0x86, 0x1e, 0xb4, 0xfa, 0x24, 0xdd, 0x75);
		
		/// <summary>
		/// DomainRole PathedRole
		/// The object unifier used to correlate this pathed role with other path nodes.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesPathedRole/PathedRole.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesPathedRole/PathedRole.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ObjectUnifier", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesPathedRole/PathedRole.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("13762fd7-a9e8-4f59-bb86-1eb4fa24dd75")]
		public virtual PathedRole PathedRole
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PathedRole)DslModeling::DomainRoleInfo.GetRolePlayer(this, PathedRoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PathedRoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PathedRoleCollection of a PathObjectUnifier
		/// <summary>
		/// Gets a list of PathedRoleCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<PathedRole> GetPathedRoleCollection(PathObjectUnifier element)
		{
			return new DslModeling::LinkedElementCollection<PathedRole>(element, ObjectUnifierDomainRoleId);
		}
		#endregion
		#region ObjectUnifier link accessor
		/// <summary>
		/// Get the list of PathObjectUnifierUnifiesPathedRole links to a PathObjectUnifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesPathedRole> GetLinksToPathedRoleCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifier objectUnifierInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesPathedRole>(objectUnifierInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesPathedRole.ObjectUnifierDomainRoleId);
		}
		#endregion
		#region PathedRole link accessor
		/// <summary>
		/// Get the PathObjectUnifierUnifiesPathedRole link to a PathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesPathedRole GetLinkToObjectUnifier (global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole pathedRoleInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesPathedRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesPathedRole>(pathedRoleInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesPathedRole.PathedRoleDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of PathedRole not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region PathObjectUnifierUnifiesPathedRole instance accessors
		
		/// <summary>
		/// Get any PathObjectUnifierUnifiesPathedRole links between a given PathObjectUnifier and a PathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesPathedRole> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifier source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesPathedRole> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesPathedRole>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesPathedRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesPathedRole>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesPathedRole.ObjectUnifierDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesPathedRole link in links )
			{
				if ( target.Equals(link.PathedRole) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one PathObjectUnifierUnifiesPathedRole link between a given PathObjectUnifierand a PathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesPathedRole GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifier source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesPathedRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesPathedRole>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesPathedRole.ObjectUnifierDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesPathedRole link in links )
			{
				if ( target.Equals(link.PathedRole) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship PathObjectUnifierUnifiesRolePathRoot
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesRolePathRoot
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesRolePathRoot.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesRolePathRoot.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("e3853e06-a1ff-4be8-8fa7-d888ac4f9228")]
	public partial class PathObjectUnifierUnifiesRolePathRoot : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// PathObjectUnifierUnifiesRolePathRoot domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe3853e06, 0xa1ff, 0x4be8, 0x8f, 0xa7, 0xd8, 0x88, 0xac, 0x4f, 0x92, 0x28);
	
				
		/// <summary>
		/// Constructor
		/// Creates a PathObjectUnifierUnifiesRolePathRoot link in the same Partition as the given PathObjectUnifier
		/// </summary>
		/// <param name="source">PathObjectUnifier to use as the source of the relationship.</param>
		/// <param name="target">RolePathObjectTypeRoot to use as the target of the relationship.</param>
		public PathObjectUnifierUnifiesRolePathRoot(PathObjectUnifier source, RolePathObjectTypeRoot target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(PathObjectUnifierUnifiesRolePathRoot.ObjectUnifierDomainRoleId, source), new DslModeling::RoleAssignment(PathObjectUnifierUnifiesRolePathRoot.PathRootDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PathObjectUnifierUnifiesRolePathRoot(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PathObjectUnifierUnifiesRolePathRoot(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PathObjectUnifierUnifiesRolePathRoot(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PathObjectUnifierUnifiesRolePathRoot(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ObjectUnifier domain role code
		
		/// <summary>
		/// ObjectUnifier domain role Id.
		/// </summary>
		public static readonly global::System.Guid ObjectUnifierDomainRoleId = new global::System.Guid(0xe6ccfc94, 0x69b8, 0x426a, 0xae, 0x4d, 0xea, 0x79, 0xb3, 0x0a, 0xe7, 0x2b);
		
		/// <summary>
		/// DomainRole ObjectUnifier
		/// The unified path roots.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesRolePathRoot/ObjectUnifier.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesRolePathRoot/ObjectUnifier.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "PathRootCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesRolePathRoot/ObjectUnifier.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e6ccfc94-69b8-426a-ae4d-ea79b30ae72b")]
		public virtual PathObjectUnifier ObjectUnifier
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PathObjectUnifier)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjectUnifierDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjectUnifierDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ObjectUnifier of a RolePathObjectTypeRoot
		/// <summary>
		/// Gets ObjectUnifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static PathObjectUnifier GetObjectUnifier(RolePathObjectTypeRoot element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PathRootDomainRoleId) as PathObjectUnifier;
		}
		
		/// <summary>
		/// Sets ObjectUnifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetObjectUnifier(RolePathObjectTypeRoot element, PathObjectUnifier newObjectUnifier)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PathRootDomainRoleId, newObjectUnifier);
		}
		#endregion
		#region PathRoot domain role code
		
		/// <summary>
		/// PathRoot domain role Id.
		/// </summary>
		public static readonly global::System.Guid PathRootDomainRoleId = new global::System.Guid(0x40957b21, 0xd3bd, 0x4151, 0x92, 0x1d, 0xd8, 0xbe, 0xa4, 0x91, 0xe2, 0xd2);
		
		/// <summary>
		/// DomainRole PathRoot
		/// The object unifier used to correlate this role path root with other path nodes.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesRolePathRoot/PathRoot.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesRolePathRoot/PathRoot.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ObjectUnifier", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesRolePathRoot/PathRoot.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("40957b21-d3bd-4151-921d-d8bea491e2d2")]
		public virtual RolePathObjectTypeRoot PathRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RolePathObjectTypeRoot)DslModeling::DomainRoleInfo.GetRolePlayer(this, PathRootDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PathRootDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PathRootCollection of a PathObjectUnifier
		/// <summary>
		/// Gets a list of PathRootCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<RolePathObjectTypeRoot> GetPathRootCollection(PathObjectUnifier element)
		{
			return new DslModeling::LinkedElementCollection<RolePathObjectTypeRoot>(element, ObjectUnifierDomainRoleId);
		}
		#endregion
		#region ObjectUnifier link accessor
		/// <summary>
		/// Get the list of PathObjectUnifierUnifiesRolePathRoot links to a PathObjectUnifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesRolePathRoot> GetLinksToPathRootCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifier objectUnifierInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesRolePathRoot>(objectUnifierInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesRolePathRoot.ObjectUnifierDomainRoleId);
		}
		#endregion
		#region PathRoot link accessor
		/// <summary>
		/// Get the PathObjectUnifierUnifiesRolePathRoot link to a RolePathObjectTypeRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesRolePathRoot GetLinkToObjectUnifier (global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot pathRootInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesRolePathRoot> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesRolePathRoot>(pathRootInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesRolePathRoot.PathRootDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of PathRoot not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region PathObjectUnifierUnifiesRolePathRoot instance accessors
		
		/// <summary>
		/// Get any PathObjectUnifierUnifiesRolePathRoot links between a given PathObjectUnifier and a RolePathObjectTypeRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesRolePathRoot> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifier source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesRolePathRoot> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesRolePathRoot>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesRolePathRoot> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesRolePathRoot>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesRolePathRoot.ObjectUnifierDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesRolePathRoot link in links )
			{
				if ( target.Equals(link.PathRoot) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one PathObjectUnifierUnifiesRolePathRoot link between a given PathObjectUnifierand a RolePathObjectTypeRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesRolePathRoot GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifier source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesRolePathRoot> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesRolePathRoot>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesRolePathRoot.ObjectUnifierDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesRolePathRoot link in links )
			{
				if ( target.Equals(link.PathRoot) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship RoleSubPathIsContinuationOfRolePath
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSubPathIsContinuationOfRolePath
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSubPathIsContinuationOfRolePath.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSubPathIsContinuationOfRolePath.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("79be9e2c-9e3f-4ea0-957c-4d4ead2389b2")]
	public partial class RoleSubPathIsContinuationOfRolePath : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RoleSubPathIsContinuationOfRolePath domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x79be9e2c, 0x9e3f, 0x4ea0, 0x95, 0x7c, 0x4d, 0x4e, 0xad, 0x23, 0x89, 0xb2);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RoleSubPathIsContinuationOfRolePath link in the same Partition as the given RolePath
		/// </summary>
		/// <param name="source">RolePath to use as the source of the relationship.</param>
		/// <param name="target">RoleSubPath to use as the target of the relationship.</param>
		public RoleSubPathIsContinuationOfRolePath(RolePath source, RoleSubPath target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RoleSubPathIsContinuationOfRolePath.ParentRolePathDomainRoleId, source), new DslModeling::RoleAssignment(RoleSubPathIsContinuationOfRolePath.SubPathDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RoleSubPathIsContinuationOfRolePath(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RoleSubPathIsContinuationOfRolePath(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RoleSubPathIsContinuationOfRolePath(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RoleSubPathIsContinuationOfRolePath(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ParentRolePath domain role code
		
		/// <summary>
		/// ParentRolePath domain role Id.
		/// </summary>
		public static readonly global::System.Guid ParentRolePathDomainRoleId = new global::System.Guid(0x97c4e687, 0x6ff4, 0x403a, 0xaa, 0x36, 0x37, 0x64, 0x76, 0xcb, 0xa5, 0xd4);
		
		/// <summary>
		/// DomainRole ParentRolePath
		/// Sub paths branched from the end of the current path.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSubPathIsContinuationOfRolePath/ParentRolePath.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSubPathIsContinuationOfRolePath/ParentRolePath.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "SubPathCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSubPathIsContinuationOfRolePath/ParentRolePath.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("97c4e687-6ff4-403a-aa36-376476cba5d4")]
		public virtual RolePath ParentRolePath
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RolePath)DslModeling::DomainRoleInfo.GetRolePlayer(this, ParentRolePathDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ParentRolePathDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ParentRolePath of a RoleSubPath
		/// <summary>
		/// Gets ParentRolePath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static RolePath GetParentRolePath(RoleSubPath element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SubPathDomainRoleId) as RolePath;
		}
		
		/// <summary>
		/// Sets ParentRolePath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetParentRolePath(RoleSubPath element, RolePath newParentRolePath)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SubPathDomainRoleId, newParentRolePath);
		}
		#endregion
		#region SubPath domain role code
		
		/// <summary>
		/// SubPath domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubPathDomainRoleId = new global::System.Guid(0x7ea4f7e9, 0x149f, 0x4db9, 0x83, 0x07, 0x2e, 0x56, 0x1a, 0xdc, 0xfc, 0x8a);
		
		/// <summary>
		/// DomainRole SubPath
		/// The containing path this sub path branches off of.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSubPathIsContinuationOfRolePath/SubPath.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSubPathIsContinuationOfRolePath/SubPath.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ParentRolePath", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSubPathIsContinuationOfRolePath/SubPath.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("7ea4f7e9-149f-4db9-8307-2e561adcfc8a")]
		public virtual RoleSubPath SubPath
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RoleSubPath)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubPathDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubPathDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SubPathCollection of a RolePath
		/// <summary>
		/// Gets a list of SubPathCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<RoleSubPath> GetSubPathCollection(RolePath element)
		{
			return new DslModeling::LinkedElementCollection<RoleSubPath>(element, ParentRolePathDomainRoleId);
		}
		#endregion
		#region ParentRolePath link accessor
		/// <summary>
		/// Get the list of RoleSubPathIsContinuationOfRolePath links to a RolePath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSubPathIsContinuationOfRolePath> GetLinksToSubPathCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePath parentRolePathInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSubPathIsContinuationOfRolePath>(parentRolePathInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSubPathIsContinuationOfRolePath.ParentRolePathDomainRoleId);
		}
		#endregion
		#region SubPath link accessor
		/// <summary>
		/// Get the RoleSubPathIsContinuationOfRolePath link to a RoleSubPath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSubPathIsContinuationOfRolePath GetLinkToParentRolePath (global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSubPath subPathInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSubPathIsContinuationOfRolePath> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSubPathIsContinuationOfRolePath>(subPathInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSubPathIsContinuationOfRolePath.SubPathDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SubPath not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region RoleSubPathIsContinuationOfRolePath instance accessors
		
		/// <summary>
		/// Get any RoleSubPathIsContinuationOfRolePath links between a given RolePath and a RoleSubPath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSubPathIsContinuationOfRolePath> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePath source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSubPath target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSubPathIsContinuationOfRolePath> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSubPathIsContinuationOfRolePath>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSubPathIsContinuationOfRolePath> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSubPathIsContinuationOfRolePath>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSubPathIsContinuationOfRolePath.ParentRolePathDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSubPathIsContinuationOfRolePath link in links )
			{
				if ( target.Equals(link.SubPath) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RoleSubPathIsContinuationOfRolePath link between a given RolePathand a RoleSubPath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSubPathIsContinuationOfRolePath GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePath source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSubPath target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSubPathIsContinuationOfRolePath> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSubPathIsContinuationOfRolePath>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSubPathIsContinuationOfRolePath.ParentRolePathDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSubPathIsContinuationOfRolePath link in links )
			{
				if ( target.Equals(link.SubPath) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ModelDefinesFunction
	/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.ModelDefinesFunction
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelDefinesFunction.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelDefinesFunction.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("1179e7fd-f395-4be3-9615-e4f0ed0a09cd")]
	public partial class ModelDefinesFunction : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelDefinesFunction domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1179e7fd, 0xf395, 0x4be3, 0x96, 0x15, 0xe4, 0xf0, 0xed, 0x0a, 0x09, 0xcd);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelDefinesFunction link in the same Partition as the given ORMModel
		/// </summary>
		/// <param name="source">ORMModel to use as the source of the relationship.</param>
		/// <param name="target">Function to use as the target of the relationship.</param>
		public ModelDefinesFunction(ORMModel source, Function target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelDefinesFunction.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelDefinesFunction.FunctionDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelDefinesFunction(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelDefinesFunction(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelDefinesFunction(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelDefinesFunction(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x520d2ee0, 0x8507, 0x4efd, 0xa0, 0xd6, 0xa6, 0xa8, 0xe7, 0xfb, 0x2d, 0x84);
		
		/// <summary>
		/// DomainRole Model
		/// Function definitions used for calculated role path values.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelDefinesFunction/Model.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelDefinesFunction/Model.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "FunctionCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ModelDefinesFunction/Model.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("520d2ee0-8507-4efd-a0d6-a6a8e7fb2d84")]
		public virtual ORMModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ORMModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a Function
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ORMModel GetModel(Function element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FunctionDomainRoleId) as ORMModel;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(Function element, ORMModel newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FunctionDomainRoleId, newModel);
		}
		#endregion
		#region Function domain role code
		
		/// <summary>
		/// Function domain role Id.
		/// </summary>
		public static readonly global::System.Guid FunctionDomainRoleId = new global::System.Guid(0x176ecdce, 0xfe02, 0x4563, 0x9c, 0x88, 0xbc, 0x59, 0x8e, 0x96, 0x34, 0x00);
		
		/// <summary>
		/// DomainRole Function
		/// The model defining this function.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelDefinesFunction/Function.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelDefinesFunction/Function.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ModelDefinesFunction/Function.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("176ecdce-fe02-4563-9c88-bc598e963400")]
		public virtual Function Function
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Function)DslModeling::DomainRoleInfo.GetRolePlayer(this, FunctionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FunctionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FunctionCollection of a ORMModel
		/// <summary>
		/// Gets a list of FunctionCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Function> GetFunctionCollection(ORMModel element)
		{
			return new DslModeling::LinkedElementCollection<Function>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelDefinesFunction links to a ORMModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelDefinesFunction> GetLinksToFunctionCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelDefinesFunction>(modelInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelDefinesFunction.ModelDomainRoleId);
		}
		#endregion
		#region Function link accessor
		/// <summary>
		/// Get the ModelDefinesFunction link to a Function.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelDefinesFunction GetLinkToModel (global::ORMSolutions.ORMArchitect.Core.ObjectModel.Function functionInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelDefinesFunction> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelDefinesFunction>(functionInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelDefinesFunction.FunctionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Function not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelDefinesFunction instance accessors
		
		/// <summary>
		/// Get any ModelDefinesFunction links between a given ORMModel and a Function.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelDefinesFunction> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Function target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelDefinesFunction> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelDefinesFunction>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelDefinesFunction> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelDefinesFunction>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelDefinesFunction.ModelDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelDefinesFunction link in links )
			{
				if ( target.Equals(link.Function) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelDefinesFunction link between a given ORMModeland a Function.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelDefinesFunction GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Function target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelDefinesFunction> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelDefinesFunction>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelDefinesFunction.ModelDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelDefinesFunction link in links )
			{
				if ( target.Equals(link.Function) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship FunctionOperatesOnParameter
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionOperatesOnParameter
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionOperatesOnParameter.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionOperatesOnParameter.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("717bfbda-13e0-4868-adc3-ff64a45d4ce9")]
	public partial class FunctionOperatesOnParameter : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FunctionOperatesOnParameter domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x717bfbda, 0x13e0, 0x4868, 0xad, 0xc3, 0xff, 0x64, 0xa4, 0x5d, 0x4c, 0xe9);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FunctionOperatesOnParameter link in the same Partition as the given Function
		/// </summary>
		/// <param name="source">Function to use as the source of the relationship.</param>
		/// <param name="target">FunctionParameter to use as the target of the relationship.</param>
		public FunctionOperatesOnParameter(Function source, FunctionParameter target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FunctionOperatesOnParameter.FunctionDomainRoleId, source), new DslModeling::RoleAssignment(FunctionOperatesOnParameter.ParameterDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FunctionOperatesOnParameter(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FunctionOperatesOnParameter(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FunctionOperatesOnParameter(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FunctionOperatesOnParameter(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Function domain role code
		
		/// <summary>
		/// Function domain role Id.
		/// </summary>
		public static readonly global::System.Guid FunctionDomainRoleId = new global::System.Guid(0xf519d4e8, 0x375b, 0x4781, 0x8d, 0x43, 0x07, 0xb9, 0x13, 0x2e, 0x9c, 0xe6);
		
		/// <summary>
		/// DomainRole Function
		/// Parameters defined by this function.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionOperatesOnParameter/Function.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionOperatesOnParameter/Function.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ParameterCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionOperatesOnParameter/Function.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f519d4e8-375b-4781-8d43-07b9132e9ce6")]
		public virtual Function Function
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Function)DslModeling::DomainRoleInfo.GetRolePlayer(this, FunctionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FunctionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Function of a FunctionParameter
		/// <summary>
		/// Gets Function.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Function GetFunction(FunctionParameter element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ParameterDomainRoleId) as Function;
		}
		
		/// <summary>
		/// Sets Function.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFunction(FunctionParameter element, Function newFunction)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ParameterDomainRoleId, newFunction);
		}
		#endregion
		#region Parameter domain role code
		
		/// <summary>
		/// Parameter domain role Id.
		/// </summary>
		public static readonly global::System.Guid ParameterDomainRoleId = new global::System.Guid(0x5605b4dc, 0x2009, 0x49f1, 0xb5, 0xb0, 0x71, 0x4a, 0x8f, 0x34, 0x60, 0x0a);
		
		/// <summary>
		/// DomainRole Parameter
		/// The function this parameter is defined for.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionOperatesOnParameter/Parameter.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionOperatesOnParameter/Parameter.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Function", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionOperatesOnParameter/Parameter.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("5605b4dc-2009-49f1-b5b0-714a8f34600a")]
		public virtual FunctionParameter Parameter
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FunctionParameter)DslModeling::DomainRoleInfo.GetRolePlayer(this, ParameterDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ParameterDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ParameterCollection of a Function
		/// <summary>
		/// Gets a list of ParameterCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FunctionParameter> GetParameterCollection(Function element)
		{
			return new DslModeling::LinkedElementCollection<FunctionParameter>(element, FunctionDomainRoleId);
		}
		#endregion
		#region Function link accessor
		/// <summary>
		/// Get the list of FunctionOperatesOnParameter links to a Function.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionOperatesOnParameter> GetLinksToParameterCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.Function functionInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionOperatesOnParameter>(functionInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionOperatesOnParameter.FunctionDomainRoleId);
		}
		#endregion
		#region Parameter link accessor
		/// <summary>
		/// Get the FunctionOperatesOnParameter link to a FunctionParameter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionOperatesOnParameter GetLinkToFunction (global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionParameter parameterInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionOperatesOnParameter> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionOperatesOnParameter>(parameterInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionOperatesOnParameter.ParameterDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Parameter not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FunctionOperatesOnParameter instance accessors
		
		/// <summary>
		/// Get any FunctionOperatesOnParameter links between a given Function and a FunctionParameter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionOperatesOnParameter> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.Function source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionParameter target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionOperatesOnParameter> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionOperatesOnParameter>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionOperatesOnParameter> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionOperatesOnParameter>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionOperatesOnParameter.FunctionDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionOperatesOnParameter link in links )
			{
				if ( target.Equals(link.Parameter) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FunctionOperatesOnParameter link between a given Functionand a FunctionParameter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionOperatesOnParameter GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.Function source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionParameter target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionOperatesOnParameter> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionOperatesOnParameter>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionOperatesOnParameter.FunctionDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionOperatesOnParameter link in links )
			{
				if ( target.Equals(link.Parameter) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship RolePathOwnerCalculatesCalculatedPathValue_Deprecated
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerCalculatesCalculatedPathValue_Deprecated
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerCalculatesCalculatedPathValue_Deprecated.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerCalculatesCalculatedPathValue_Deprecated.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("cc8d4b04-3f04-4c0c-995b-e9b24e3134fb")]
	public partial class RolePathOwnerCalculatesCalculatedPathValue_Deprecated : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RolePathOwnerCalculatesCalculatedPathValue_Deprecated domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xcc8d4b04, 0x3f04, 0x4c0c, 0x99, 0x5b, 0xe9, 0xb2, 0x4e, 0x31, 0x34, 0xfb);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RolePathOwnerCalculatesCalculatedPathValue_Deprecated link in the same Partition as the given RolePathOwner
		/// </summary>
		/// <param name="source">RolePathOwner to use as the source of the relationship.</param>
		/// <param name="target">CalculatedPathValue to use as the target of the relationship.</param>
		public RolePathOwnerCalculatesCalculatedPathValue_Deprecated(RolePathOwner source, CalculatedPathValue target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RolePathOwnerCalculatesCalculatedPathValue_Deprecated.PathOwnerDomainRoleId, source), new DslModeling::RoleAssignment(RolePathOwnerCalculatesCalculatedPathValue_Deprecated.CalculatedValueDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RolePathOwnerCalculatesCalculatedPathValue_Deprecated(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RolePathOwnerCalculatesCalculatedPathValue_Deprecated(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RolePathOwnerCalculatesCalculatedPathValue_Deprecated(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RolePathOwnerCalculatesCalculatedPathValue_Deprecated(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region PathOwner domain role code
		
		/// <summary>
		/// PathOwner domain role Id.
		/// </summary>
		public static readonly global::System.Guid PathOwnerDomainRoleId = new global::System.Guid(0x60542704, 0x5e9e, 0x4f7c, 0xb0, 0xeb, 0x29, 0xec, 0xb9, 0xc3, 0xdf, 0x46);
		
		/// <summary>
		/// DomainRole PathOwner
		/// The values calculated for all paths in this owner.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerCalculatesCalculatedPathValue_Deprecated/PathOwner.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerCalculatesCalculatedPathValue_Deprecated/PathOwner.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "CalculatedValueCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerCalculatesCalculatedPathValue_Deprecated/PathOwner.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("60542704-5e9e-4f7c-b0eb-29ecb9c3df46")]
		public virtual RolePathOwner PathOwner
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RolePathOwner)DslModeling::DomainRoleInfo.GetRolePlayer(this, PathOwnerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PathOwnerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PathOwner of a CalculatedPathValue
		/// <summary>
		/// Gets PathOwner.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static RolePathOwner GetPathOwner(CalculatedPathValue element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CalculatedValueDomainRoleId) as RolePathOwner;
		}
		
		/// <summary>
		/// Sets PathOwner.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetPathOwner(CalculatedPathValue element, RolePathOwner newPathOwner)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CalculatedValueDomainRoleId, newPathOwner);
		}
		#endregion
		#region CalculatedValue domain role code
		
		/// <summary>
		/// CalculatedValue domain role Id.
		/// </summary>
		public static readonly global::System.Guid CalculatedValueDomainRoleId = new global::System.Guid(0x455b7520, 0xeed3, 0x489b, 0x95, 0xa6, 0x7e, 0xa0, 0x7b, 0x7f, 0xaa, 0x0a);
		
		/// <summary>
		/// DomainRole CalculatedValue
		/// The primary role path this value is calculated for.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerCalculatesCalculatedPathValue_Deprecated/CalculatedValue.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerCalculatesCalculatedPathValue_Deprecated/CalculatedValue.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "PathOwner", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerCalculatesCalculatedPathValue_Deprecated/CalculatedValue.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("455b7520-eed3-489b-95a6-7ea07b7faa0a")]
		public virtual CalculatedPathValue CalculatedValue
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CalculatedPathValue)DslModeling::DomainRoleInfo.GetRolePlayer(this, CalculatedValueDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CalculatedValueDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CalculatedValueCollection of a RolePathOwner
		/// <summary>
		/// Gets a list of CalculatedValueCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<CalculatedPathValue> GetCalculatedValueCollection(RolePathOwner element)
		{
			return new DslModeling::LinkedElementCollection<CalculatedPathValue>(element, PathOwnerDomainRoleId);
		}
		#endregion
		#region PathOwner link accessor
		/// <summary>
		/// Get the list of RolePathOwnerCalculatesCalculatedPathValue_Deprecated links to a RolePathOwner.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerCalculatesCalculatedPathValue_Deprecated> GetLinksToCalculatedValueCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwner pathOwnerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerCalculatesCalculatedPathValue_Deprecated>(pathOwnerInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerCalculatesCalculatedPathValue_Deprecated.PathOwnerDomainRoleId);
		}
		#endregion
		#region CalculatedValue link accessor
		/// <summary>
		/// Get the RolePathOwnerCalculatesCalculatedPathValue_Deprecated link to a CalculatedPathValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerCalculatesCalculatedPathValue_Deprecated GetLinkToPathOwner (global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue calculatedValueInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerCalculatesCalculatedPathValue_Deprecated> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerCalculatesCalculatedPathValue_Deprecated>(calculatedValueInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerCalculatesCalculatedPathValue_Deprecated.CalculatedValueDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CalculatedValue not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region RolePathOwnerCalculatesCalculatedPathValue_Deprecated instance accessors
		
		/// <summary>
		/// Get any RolePathOwnerCalculatesCalculatedPathValue_Deprecated links between a given RolePathOwner and a CalculatedPathValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerCalculatesCalculatedPathValue_Deprecated> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwner source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerCalculatesCalculatedPathValue_Deprecated> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerCalculatesCalculatedPathValue_Deprecated>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerCalculatesCalculatedPathValue_Deprecated> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerCalculatesCalculatedPathValue_Deprecated>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerCalculatesCalculatedPathValue_Deprecated.PathOwnerDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerCalculatesCalculatedPathValue_Deprecated link in links )
			{
				if ( target.Equals(link.CalculatedValue) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RolePathOwnerCalculatesCalculatedPathValue_Deprecated link between a given RolePathOwnerand a CalculatedPathValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerCalculatesCalculatedPathValue_Deprecated GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwner source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerCalculatesCalculatedPathValue_Deprecated> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerCalculatesCalculatedPathValue_Deprecated>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerCalculatesCalculatedPathValue_Deprecated.PathOwnerDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerCalculatesCalculatedPathValue_Deprecated link in links )
			{
				if ( target.Equals(link.CalculatedValue) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship LeadRolePathCalculatesCalculatedPathValue
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathCalculatesCalculatedPathValue
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathCalculatesCalculatedPathValue.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathCalculatesCalculatedPathValue.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("315ed779-4607-44cb-ac37-a173fa106232")]
	public partial class LeadRolePathCalculatesCalculatedPathValue : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// LeadRolePathCalculatesCalculatedPathValue domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x315ed779, 0x4607, 0x44cb, 0xac, 0x37, 0xa1, 0x73, 0xfa, 0x10, 0x62, 0x32);
	
				
		/// <summary>
		/// Constructor
		/// Creates a LeadRolePathCalculatesCalculatedPathValue link in the same Partition as the given LeadRolePath
		/// </summary>
		/// <param name="source">LeadRolePath to use as the source of the relationship.</param>
		/// <param name="target">CalculatedPathValue to use as the target of the relationship.</param>
		public LeadRolePathCalculatesCalculatedPathValue(LeadRolePath source, CalculatedPathValue target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(LeadRolePathCalculatesCalculatedPathValue.LeadRolePathDomainRoleId, source), new DslModeling::RoleAssignment(LeadRolePathCalculatesCalculatedPathValue.CalculatedValueDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public LeadRolePathCalculatesCalculatedPathValue(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public LeadRolePathCalculatesCalculatedPathValue(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public LeadRolePathCalculatesCalculatedPathValue(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public LeadRolePathCalculatesCalculatedPathValue(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region LeadRolePath domain role code
		
		/// <summary>
		/// LeadRolePath domain role Id.
		/// </summary>
		public static readonly global::System.Guid LeadRolePathDomainRoleId = new global::System.Guid(0x058c0609, 0x8b18, 0x4c05, 0x86, 0xdb, 0x7a, 0xba, 0x5d, 0x7c, 0x42, 0xda);
		
		/// <summary>
		/// DomainRole LeadRolePath
		/// The values calculated using roles in this component.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathCalculatesCalculatedPathValue/LeadRolePath.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathCalculatesCalculatedPathValue/LeadRolePath.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "CalculatedValueCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathCalculatesCalculatedPathValue/LeadRolePath.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("058c0609-8b18-4c05-86db-7aba5d7c42da")]
		public virtual LeadRolePath LeadRolePath
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (LeadRolePath)DslModeling::DomainRoleInfo.GetRolePlayer(this, LeadRolePathDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, LeadRolePathDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access LeadRolePath of a CalculatedPathValue
		/// <summary>
		/// Gets LeadRolePath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static LeadRolePath GetLeadRolePath(CalculatedPathValue element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CalculatedValueDomainRoleId) as LeadRolePath;
		}
		
		/// <summary>
		/// Sets LeadRolePath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetLeadRolePath(CalculatedPathValue element, LeadRolePath newLeadRolePath)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CalculatedValueDomainRoleId, newLeadRolePath);
		}
		#endregion
		#region CalculatedValue domain role code
		
		/// <summary>
		/// CalculatedValue domain role Id.
		/// </summary>
		public static readonly global::System.Guid CalculatedValueDomainRoleId = new global::System.Guid(0x9c87c629, 0x060b, 0x4c80, 0xbe, 0xae, 0xdc, 0xa3, 0x8a, 0x4f, 0x4e, 0x2c);
		
		/// <summary>
		/// DomainRole CalculatedValue
		/// The path component this value is calculated for.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathCalculatesCalculatedPathValue/CalculatedValue.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathCalculatesCalculatedPathValue/CalculatedValue.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "LeadRolePath", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathCalculatesCalculatedPathValue/CalculatedValue.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("9c87c629-060b-4c80-beae-dca38a4f4e2c")]
		public virtual CalculatedPathValue CalculatedValue
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CalculatedPathValue)DslModeling::DomainRoleInfo.GetRolePlayer(this, CalculatedValueDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CalculatedValueDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CalculatedValueCollection of a LeadRolePath
		/// <summary>
		/// Gets a list of CalculatedValueCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<CalculatedPathValue> GetCalculatedValueCollection(LeadRolePath element)
		{
			return new DslModeling::LinkedElementCollection<CalculatedPathValue>(element, LeadRolePathDomainRoleId);
		}
		#endregion
		#region LeadRolePath link accessor
		/// <summary>
		/// Get the list of LeadRolePathCalculatesCalculatedPathValue links to a LeadRolePath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathCalculatesCalculatedPathValue> GetLinksToCalculatedValueCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePath leadRolePathInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathCalculatesCalculatedPathValue>(leadRolePathInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathCalculatesCalculatedPathValue.LeadRolePathDomainRoleId);
		}
		#endregion
		#region CalculatedValue link accessor
		/// <summary>
		/// Get the LeadRolePathCalculatesCalculatedPathValue link to a CalculatedPathValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathCalculatesCalculatedPathValue GetLinkToLeadRolePath (global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue calculatedValueInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathCalculatesCalculatedPathValue> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathCalculatesCalculatedPathValue>(calculatedValueInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathCalculatesCalculatedPathValue.CalculatedValueDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CalculatedValue not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region LeadRolePathCalculatesCalculatedPathValue instance accessors
		
		/// <summary>
		/// Get any LeadRolePathCalculatesCalculatedPathValue links between a given LeadRolePath and a CalculatedPathValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathCalculatesCalculatedPathValue> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePath source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathCalculatesCalculatedPathValue> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathCalculatesCalculatedPathValue>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathCalculatesCalculatedPathValue> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathCalculatesCalculatedPathValue>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathCalculatesCalculatedPathValue.LeadRolePathDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathCalculatesCalculatedPathValue link in links )
			{
				if ( target.Equals(link.CalculatedValue) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one LeadRolePathCalculatesCalculatedPathValue link between a given LeadRolePathand a CalculatedPathValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathCalculatesCalculatedPathValue GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePath source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathCalculatesCalculatedPathValue> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathCalculatesCalculatedPathValue>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathCalculatesCalculatedPathValue.LeadRolePathDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathCalculatesCalculatedPathValue link in links )
			{
				if ( target.Equals(link.CalculatedValue) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship LeadRolePathSatisfiesCalculatedCondition
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathSatisfiesCalculatedCondition
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathSatisfiesCalculatedCondition.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathSatisfiesCalculatedCondition.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("34f4b6c3-1575-4a4c-838e-261b981dee83")]
	public partial class LeadRolePathSatisfiesCalculatedCondition : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// LeadRolePathSatisfiesCalculatedCondition domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x34f4b6c3, 0x1575, 0x4a4c, 0x83, 0x8e, 0x26, 0x1b, 0x98, 0x1d, 0xee, 0x83);
	
				
		/// <summary>
		/// Constructor
		/// Creates a LeadRolePathSatisfiesCalculatedCondition link in the same Partition as the given LeadRolePath
		/// </summary>
		/// <param name="source">LeadRolePath to use as the source of the relationship.</param>
		/// <param name="target">CalculatedPathValue to use as the target of the relationship.</param>
		public LeadRolePathSatisfiesCalculatedCondition(LeadRolePath source, CalculatedPathValue target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(LeadRolePathSatisfiesCalculatedCondition.LeadRolePathDomainRoleId, source), new DslModeling::RoleAssignment(LeadRolePathSatisfiesCalculatedCondition.CalculatedConditionDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public LeadRolePathSatisfiesCalculatedCondition(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public LeadRolePathSatisfiesCalculatedCondition(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public LeadRolePathSatisfiesCalculatedCondition(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public LeadRolePathSatisfiesCalculatedCondition(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region LeadRolePath domain role code
		
		/// <summary>
		/// LeadRolePath domain role Id.
		/// </summary>
		public static readonly global::System.Guid LeadRolePathDomainRoleId = new global::System.Guid(0x2f17d947, 0x3334, 0x4729, 0xba, 0xf1, 0xce, 0x5e, 0xfa, 0xe0, 0x39, 0xee);
		
		/// <summary>
		/// DomainRole LeadRolePath
		/// The calculated values that must be satisfied by the path.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathSatisfiesCalculatedCondition/LeadRolePath.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathSatisfiesCalculatedCondition/LeadRolePath.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "CalculatedConditionCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathSatisfiesCalculatedCondition/LeadRolePath.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("2f17d947-3334-4729-baf1-ce5efae039ee")]
		public virtual LeadRolePath LeadRolePath
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (LeadRolePath)DslModeling::DomainRoleInfo.GetRolePlayer(this, LeadRolePathDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, LeadRolePathDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RequiredForLeadRolePath of a CalculatedPathValue
		/// <summary>
		/// Gets RequiredForLeadRolePath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static LeadRolePath GetRequiredForLeadRolePath(CalculatedPathValue element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CalculatedConditionDomainRoleId) as LeadRolePath;
		}
		
		/// <summary>
		/// Sets RequiredForLeadRolePath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRequiredForLeadRolePath(CalculatedPathValue element, LeadRolePath newLeadRolePath)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CalculatedConditionDomainRoleId, newLeadRolePath);
		}
		#endregion
		#region CalculatedCondition domain role code
		
		/// <summary>
		/// CalculatedCondition domain role Id.
		/// </summary>
		public static readonly global::System.Guid CalculatedConditionDomainRoleId = new global::System.Guid(0x18f0e45a, 0xf8f2, 0x4ae5, 0x91, 0x9c, 0xc5, 0x94, 0x6c, 0x71, 0x93, 0xbd);
		
		/// <summary>
		/// DomainRole CalculatedCondition
		/// The lead role path that requires this condition to be true.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathSatisfiesCalculatedCondition/CalculatedCondition.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathSatisfiesCalculatedCondition/CalculatedCondition.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "RequiredForLeadRolePath", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathSatisfiesCalculatedCondition/CalculatedCondition.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("18f0e45a-f8f2-4ae5-919c-c5946c7193bd")]
		public virtual CalculatedPathValue CalculatedCondition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CalculatedPathValue)DslModeling::DomainRoleInfo.GetRolePlayer(this, CalculatedConditionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CalculatedConditionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CalculatedConditionCollection of a LeadRolePath
		/// <summary>
		/// Gets a list of CalculatedConditionCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<CalculatedPathValue> GetCalculatedConditionCollection(LeadRolePath element)
		{
			return new DslModeling::LinkedElementCollection<CalculatedPathValue>(element, LeadRolePathDomainRoleId);
		}
		#endregion
		#region LeadRolePath link accessor
		/// <summary>
		/// Get the list of LeadRolePathSatisfiesCalculatedCondition links to a LeadRolePath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathSatisfiesCalculatedCondition> GetLinksToCalculatedConditionCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePath leadRolePathInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathSatisfiesCalculatedCondition>(leadRolePathInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathSatisfiesCalculatedCondition.LeadRolePathDomainRoleId);
		}
		#endregion
		#region CalculatedCondition link accessor
		/// <summary>
		/// Get the LeadRolePathSatisfiesCalculatedCondition link to a CalculatedPathValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathSatisfiesCalculatedCondition GetLinkToRequiredForLeadRolePath (global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue calculatedConditionInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathSatisfiesCalculatedCondition> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathSatisfiesCalculatedCondition>(calculatedConditionInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathSatisfiesCalculatedCondition.CalculatedConditionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CalculatedCondition not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region LeadRolePathSatisfiesCalculatedCondition instance accessors
		
		/// <summary>
		/// Get any LeadRolePathSatisfiesCalculatedCondition links between a given LeadRolePath and a CalculatedPathValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathSatisfiesCalculatedCondition> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePath source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathSatisfiesCalculatedCondition> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathSatisfiesCalculatedCondition>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathSatisfiesCalculatedCondition> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathSatisfiesCalculatedCondition>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathSatisfiesCalculatedCondition.LeadRolePathDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathSatisfiesCalculatedCondition link in links )
			{
				if ( target.Equals(link.CalculatedCondition) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one LeadRolePathSatisfiesCalculatedCondition link between a given LeadRolePathand a CalculatedPathValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathSatisfiesCalculatedCondition GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePath source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathSatisfiesCalculatedCondition> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathSatisfiesCalculatedCondition>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathSatisfiesCalculatedCondition.LeadRolePathDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathSatisfiesCalculatedCondition link in links )
			{
				if ( target.Equals(link.CalculatedCondition) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship CalculatedPathValueHasInput
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasInput
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasInput.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasInput.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("eef80c4b-8d52-441e-896a-d3bf11724028")]
	public partial class CalculatedPathValueHasInput : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CalculatedPathValueHasInput domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xeef80c4b, 0x8d52, 0x441e, 0x89, 0x6a, 0xd3, 0xbf, 0x11, 0x72, 0x40, 0x28);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CalculatedPathValueHasInput link in the same Partition as the given CalculatedPathValue
		/// </summary>
		/// <param name="source">CalculatedPathValue to use as the source of the relationship.</param>
		/// <param name="target">CalculatedPathValueInput to use as the target of the relationship.</param>
		public CalculatedPathValueHasInput(CalculatedPathValue source, CalculatedPathValueInput target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CalculatedPathValueHasInput.CalculatedValueDomainRoleId, source), new DslModeling::RoleAssignment(CalculatedPathValueHasInput.InputDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CalculatedPathValueHasInput(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CalculatedPathValueHasInput(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CalculatedPathValueHasInput(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CalculatedPathValueHasInput(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region CalculatedValue domain role code
		
		/// <summary>
		/// CalculatedValue domain role Id.
		/// </summary>
		public static readonly global::System.Guid CalculatedValueDomainRoleId = new global::System.Guid(0x5e165681, 0x2c7a, 0x44b2, 0xaa, 0xc5, 0x98, 0x2a, 0x36, 0x82, 0x97, 0x90);
		
		/// <summary>
		/// DomainRole CalculatedValue
		/// Inputs used to calculate this value.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasInput/CalculatedValue.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasInput/CalculatedValue.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "InputCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasInput/CalculatedValue.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("5e165681-2c7a-44b2-aac5-982a36829790")]
		public virtual CalculatedPathValue CalculatedValue
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CalculatedPathValue)DslModeling::DomainRoleInfo.GetRolePlayer(this, CalculatedValueDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CalculatedValueDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CalculatedValue of a CalculatedPathValueInput
		/// <summary>
		/// Gets CalculatedValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static CalculatedPathValue GetCalculatedValue(CalculatedPathValueInput element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, InputDomainRoleId) as CalculatedPathValue;
		}
		
		/// <summary>
		/// Sets CalculatedValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetCalculatedValue(CalculatedPathValueInput element, CalculatedPathValue newCalculatedValue)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, InputDomainRoleId, newCalculatedValue);
		}
		#endregion
		#region Input domain role code
		
		/// <summary>
		/// Input domain role Id.
		/// </summary>
		public static readonly global::System.Guid InputDomainRoleId = new global::System.Guid(0xec5a5fb9, 0xbebd, 0x4463, 0x85, 0x49, 0x15, 0xa0, 0xae, 0x77, 0xe9, 0x9a);
		
		/// <summary>
		/// DomainRole Input
		/// The calculated value that owns this input for.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasInput/Input.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasInput/Input.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "CalculatedValue", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasInput/Input.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("ec5a5fb9-bebd-4463-8549-15a0ae77e99a")]
		public virtual CalculatedPathValueInput Input
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CalculatedPathValueInput)DslModeling::DomainRoleInfo.GetRolePlayer(this, InputDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InputDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InputCollection of a CalculatedPathValue
		/// <summary>
		/// Gets a list of InputCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<CalculatedPathValueInput> GetInputCollection(CalculatedPathValue element)
		{
			return new DslModeling::LinkedElementCollection<CalculatedPathValueInput>(element, CalculatedValueDomainRoleId);
		}
		#endregion
		#region CalculatedValue link accessor
		/// <summary>
		/// Get the list of CalculatedPathValueHasInput links to a CalculatedPathValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasInput> GetLinksToInputCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue calculatedValueInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasInput>(calculatedValueInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasInput.CalculatedValueDomainRoleId);
		}
		#endregion
		#region Input link accessor
		/// <summary>
		/// Get the CalculatedPathValueHasInput link to a CalculatedPathValueInput.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasInput GetLinkToCalculatedValue (global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInput inputInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasInput> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasInput>(inputInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasInput.InputDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Input not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CalculatedPathValueHasInput instance accessors
		
		/// <summary>
		/// Get any CalculatedPathValueHasInput links between a given CalculatedPathValue and a CalculatedPathValueInput.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasInput> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInput target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasInput> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasInput>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasInput> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasInput>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasInput.CalculatedValueDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasInput link in links )
			{
				if ( target.Equals(link.Input) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CalculatedPathValueHasInput link between a given CalculatedPathValueand a CalculatedPathValueInput.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasInput GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInput target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasInput> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasInput>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasInput.CalculatedValueDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasInput link in links )
			{
				if ( target.Equals(link.Input) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship CalculatedPathValueScopedWithPathedRole_Deprecated
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueScopedWithPathedRole_Deprecated
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueScopedWithPathedRole_Deprecated.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueScopedWithPathedRole_Deprecated.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("627fca97-86ef-473f-aaa7-fff2f8295624")]
	public partial class CalculatedPathValueScopedWithPathedRole_Deprecated : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CalculatedPathValueScopedWithPathedRole_Deprecated domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x627fca97, 0x86ef, 0x473f, 0xaa, 0xa7, 0xff, 0xf2, 0xf8, 0x29, 0x56, 0x24);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CalculatedPathValueScopedWithPathedRole_Deprecated link in the same Partition as the given CalculatedPathValue
		/// </summary>
		/// <param name="source">CalculatedPathValue to use as the source of the relationship.</param>
		/// <param name="target">PathedRole to use as the target of the relationship.</param>
		public CalculatedPathValueScopedWithPathedRole_Deprecated(CalculatedPathValue source, PathedRole target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CalculatedPathValueScopedWithPathedRole_Deprecated.CalculatedValueDomainRoleId, source), new DslModeling::RoleAssignment(CalculatedPathValueScopedWithPathedRole_Deprecated.ScopeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CalculatedPathValueScopedWithPathedRole_Deprecated(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CalculatedPathValueScopedWithPathedRole_Deprecated(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CalculatedPathValueScopedWithPathedRole_Deprecated(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CalculatedPathValueScopedWithPathedRole_Deprecated(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region CalculatedValue domain role code
		
		/// <summary>
		/// CalculatedValue domain role Id.
		/// </summary>
		public static readonly global::System.Guid CalculatedValueDomainRoleId = new global::System.Guid(0x63c8f93e, 0x641d, 0x4aa5, 0xb4, 0x2b, 0x1a, 0x1e, 0x0c, 0x4a, 0xe9, 0xa4);
		
		/// <summary>
		/// DomainRole CalculatedValue
		/// The PathedRole that provides context for this function. The scope must be
		/// related in the role path to any path inputs.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueScopedWithPathedRole_Deprecated/CalculatedValue.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueScopedWithPathedRole_Deprecated/CalculatedValue.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Scope", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueScopedWithPathedRole_Deprecated/CalculatedValue.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("63c8f93e-641d-4aa5-b42b-1a1e0c4ae9a4")]
		public virtual CalculatedPathValue CalculatedValue
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CalculatedPathValue)DslModeling::DomainRoleInfo.GetRolePlayer(this, CalculatedValueDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CalculatedValueDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ScopedCalculatedValueCollection of a PathedRole
		/// <summary>
		/// Gets a list of ScopedCalculatedValueCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<CalculatedPathValue> GetScopedCalculatedValueCollection(PathedRole element)
		{
			return new DslModeling::LinkedElementCollection<CalculatedPathValue>(element, ScopeDomainRoleId);
		}
		#endregion
		#region Scope domain role code
		
		/// <summary>
		/// Scope domain role Id.
		/// </summary>
		public static readonly global::System.Guid ScopeDomainRoleId = new global::System.Guid(0xae6b0a16, 0x55a0, 0x4805, 0xbd, 0xdc, 0x35, 0xc4, 0x5c, 0x20, 0x2a, 0x30);
		
		/// <summary>
		/// DomainRole Scope
		/// Calculated values that are scoped using this PathedRole.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueScopedWithPathedRole_Deprecated/Scope.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueScopedWithPathedRole_Deprecated/Scope.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ScopedCalculatedValueCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueScopedWithPathedRole_Deprecated/Scope.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ae6b0a16-55a0-4805-bddc-35c45c202a30")]
		public virtual PathedRole Scope
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PathedRole)DslModeling::DomainRoleInfo.GetRolePlayer(this, ScopeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ScopeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Scope of a CalculatedPathValue
		/// <summary>
		/// Gets Scope.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static PathedRole GetScope(CalculatedPathValue element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CalculatedValueDomainRoleId) as PathedRole;
		}
		
		/// <summary>
		/// Sets Scope.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetScope(CalculatedPathValue element, PathedRole newScope)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CalculatedValueDomainRoleId, newScope);
		}
		#endregion
		#region CalculatedValue link accessor
		/// <summary>
		/// Get the CalculatedPathValueScopedWithPathedRole_Deprecated link to a CalculatedPathValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueScopedWithPathedRole_Deprecated GetLinkToScope (global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue calculatedValueInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueScopedWithPathedRole_Deprecated> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueScopedWithPathedRole_Deprecated>(calculatedValueInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueScopedWithPathedRole_Deprecated.CalculatedValueDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CalculatedValue not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Scope link accessor
		/// <summary>
		/// Get the list of CalculatedPathValueScopedWithPathedRole_Deprecated links to a PathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueScopedWithPathedRole_Deprecated> GetLinksToScopedCalculatedValueCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole scopeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueScopedWithPathedRole_Deprecated>(scopeInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueScopedWithPathedRole_Deprecated.ScopeDomainRoleId);
		}
		#endregion
		#region CalculatedPathValueScopedWithPathedRole_Deprecated instance accessors
		
		/// <summary>
		/// Get any CalculatedPathValueScopedWithPathedRole_Deprecated links between a given CalculatedPathValue and a PathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueScopedWithPathedRole_Deprecated> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueScopedWithPathedRole_Deprecated> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueScopedWithPathedRole_Deprecated>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueScopedWithPathedRole_Deprecated> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueScopedWithPathedRole_Deprecated>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueScopedWithPathedRole_Deprecated.CalculatedValueDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueScopedWithPathedRole_Deprecated link in links )
			{
				if ( target.Equals(link.Scope) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CalculatedPathValueScopedWithPathedRole_Deprecated link between a given CalculatedPathValueand a PathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueScopedWithPathedRole_Deprecated GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueScopedWithPathedRole_Deprecated> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueScopedWithPathedRole_Deprecated>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueScopedWithPathedRole_Deprecated.CalculatedValueDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueScopedWithPathedRole_Deprecated link in links )
			{
				if ( target.Equals(link.Scope) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship CalculatedPathValueAggregationContextIncludesPathedRole
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesPathedRole
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesPathedRole.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesPathedRole.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("6ecab3b3-fb55-4ccb-b370-2210ef852105")]
	public partial class CalculatedPathValueAggregationContextIncludesPathedRole : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CalculatedPathValueAggregationContextIncludesPathedRole domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6ecab3b3, 0xfb55, 0x4ccb, 0xb3, 0x70, 0x22, 0x10, 0xef, 0x85, 0x21, 0x05);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CalculatedPathValueAggregationContextIncludesPathedRole link in the same Partition as the given CalculatedPathValue
		/// </summary>
		/// <param name="source">CalculatedPathValue to use as the source of the relationship.</param>
		/// <param name="target">PathedRole to use as the target of the relationship.</param>
		public CalculatedPathValueAggregationContextIncludesPathedRole(CalculatedPathValue source, PathedRole target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CalculatedPathValueAggregationContextIncludesPathedRole.CalculatedValueDomainRoleId, source), new DslModeling::RoleAssignment(CalculatedPathValueAggregationContextIncludesPathedRole.PathedRoleDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CalculatedPathValueAggregationContextIncludesPathedRole(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CalculatedPathValueAggregationContextIncludesPathedRole(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CalculatedPathValueAggregationContextIncludesPathedRole(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CalculatedPathValueAggregationContextIncludesPathedRole(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region CalculatedValue domain role code
		
		/// <summary>
		/// CalculatedValue domain role Id.
		/// </summary>
		public static readonly global::System.Guid CalculatedValueDomainRoleId = new global::System.Guid(0x787bfcac, 0xc99c, 0x4567, 0x83, 0xb2, 0x17, 0x6b, 0xd1, 0xb5, 0xc9, 0x9f);
		
		/// <summary>
		/// DomainRole CalculatedValue
		/// A PathedRole that is part of the aggregation context for this function.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesPathedRole/CalculatedValue.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesPathedRole/CalculatedValue.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AggregationContextPathedRoleCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesPathedRole/CalculatedValue.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("787bfcac-c99c-4567-83b2-176bd1b5c99f")]
		public virtual CalculatedPathValue CalculatedValue
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CalculatedPathValue)DslModeling::DomainRoleInfo.GetRolePlayer(this, CalculatedValueDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CalculatedValueDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AggregationContextForCalculationCollection of a PathedRole
		/// <summary>
		/// Gets a list of AggregationContextForCalculationCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<CalculatedPathValue> GetAggregationContextForCalculationCollection(PathedRole element)
		{
			return new DslModeling::LinkedElementCollection<CalculatedPathValue>(element, PathedRoleDomainRoleId);
		}
		#endregion
		#region PathedRole domain role code
		
		/// <summary>
		/// PathedRole domain role Id.
		/// </summary>
		public static readonly global::System.Guid PathedRoleDomainRoleId = new global::System.Guid(0x65446aca, 0x4106, 0x4e53, 0xb4, 0x27, 0xc9, 0x91, 0x58, 0xa1, 0xc5, 0x02);
		
		/// <summary>
		/// DomainRole PathedRole
		/// Calculated values with an aggregation context that includes this PathedRole.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesPathedRole/PathedRole.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesPathedRole/PathedRole.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "AggregationContextForCalculationCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesPathedRole/PathedRole.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("65446aca-4106-4e53-b427-c99158a1c502")]
		public virtual PathedRole PathedRole
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PathedRole)DslModeling::DomainRoleInfo.GetRolePlayer(this, PathedRoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PathedRoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AggregationContextPathedRoleCollection of a CalculatedPathValue
		/// <summary>
		/// Gets a list of AggregationContextPathedRoleCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<PathedRole> GetAggregationContextPathedRoleCollection(CalculatedPathValue element)
		{
			return new DslModeling::LinkedElementCollection<PathedRole>(element, CalculatedValueDomainRoleId);
		}
		#endregion
		#region CalculatedValue link accessor
		/// <summary>
		/// Get the list of CalculatedPathValueAggregationContextIncludesPathedRole links to a CalculatedPathValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesPathedRole> GetLinksToAggregationContextPathedRoleCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue calculatedValueInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesPathedRole>(calculatedValueInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesPathedRole.CalculatedValueDomainRoleId);
		}
		#endregion
		#region PathedRole link accessor
		/// <summary>
		/// Get the list of CalculatedPathValueAggregationContextIncludesPathedRole links to a PathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesPathedRole> GetLinksToAggregationContextForCalculationCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole pathedRoleInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesPathedRole>(pathedRoleInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesPathedRole.PathedRoleDomainRoleId);
		}
		#endregion
		#region CalculatedPathValueAggregationContextIncludesPathedRole instance accessors
		
		/// <summary>
		/// Get any CalculatedPathValueAggregationContextIncludesPathedRole links between a given CalculatedPathValue and a PathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesPathedRole> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesPathedRole> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesPathedRole>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesPathedRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesPathedRole>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesPathedRole.CalculatedValueDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesPathedRole link in links )
			{
				if ( target.Equals(link.PathedRole) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CalculatedPathValueAggregationContextIncludesPathedRole link between a given CalculatedPathValueand a PathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesPathedRole GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesPathedRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesPathedRole>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesPathedRole.CalculatedValueDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesPathedRole link in links )
			{
				if ( target.Equals(link.PathedRole) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship CalculatedPathValueAggregationContextIncludesRolePathRoot
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesRolePathRoot
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesRolePathRoot.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesRolePathRoot.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("210f887c-4568-47d2-8328-85527a8a127a")]
	public partial class CalculatedPathValueAggregationContextIncludesRolePathRoot : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CalculatedPathValueAggregationContextIncludesRolePathRoot domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x210f887c, 0x4568, 0x47d2, 0x83, 0x28, 0x85, 0x52, 0x7a, 0x8a, 0x12, 0x7a);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CalculatedPathValueAggregationContextIncludesRolePathRoot link in the same Partition as the given CalculatedPathValue
		/// </summary>
		/// <param name="source">CalculatedPathValue to use as the source of the relationship.</param>
		/// <param name="target">RolePathObjectTypeRoot to use as the target of the relationship.</param>
		public CalculatedPathValueAggregationContextIncludesRolePathRoot(CalculatedPathValue source, RolePathObjectTypeRoot target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CalculatedPathValueAggregationContextIncludesRolePathRoot.CalculatedValueDomainRoleId, source), new DslModeling::RoleAssignment(CalculatedPathValueAggregationContextIncludesRolePathRoot.PathRootDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CalculatedPathValueAggregationContextIncludesRolePathRoot(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CalculatedPathValueAggregationContextIncludesRolePathRoot(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CalculatedPathValueAggregationContextIncludesRolePathRoot(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CalculatedPathValueAggregationContextIncludesRolePathRoot(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region CalculatedValue domain role code
		
		/// <summary>
		/// CalculatedValue domain role Id.
		/// </summary>
		public static readonly global::System.Guid CalculatedValueDomainRoleId = new global::System.Guid(0x3632f5e3, 0xba55, 0x4ee3, 0xa5, 0x60, 0x7a, 0x7f, 0x8b, 0xcf, 0x96, 0x61);
		
		/// <summary>
		/// DomainRole CalculatedValue
		/// A role path root that is part of the aggregation context for this function.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesRolePathRoot/CalculatedValue.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesRolePathRoot/CalculatedValue.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AggregationContextPathRootCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesRolePathRoot/CalculatedValue.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("3632f5e3-ba55-4ee3-a560-7a7f8bcf9661")]
		public virtual CalculatedPathValue CalculatedValue
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CalculatedPathValue)DslModeling::DomainRoleInfo.GetRolePlayer(this, CalculatedValueDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CalculatedValueDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CalculationAggregationContexts of a RolePathObjectTypeRoot
		/// <summary>
		/// Gets a list of CalculationAggregationContexts.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<CalculatedPathValue> GetCalculationAggregationContexts(RolePathObjectTypeRoot element)
		{
			return new DslModeling::LinkedElementCollection<CalculatedPathValue>(element, PathRootDomainRoleId);
		}
		#endregion
		#region PathRoot domain role code
		
		/// <summary>
		/// PathRoot domain role Id.
		/// </summary>
		public static readonly global::System.Guid PathRootDomainRoleId = new global::System.Guid(0x29300a91, 0xaf99, 0x4576, 0xa8, 0x23, 0x68, 0x6f, 0x22, 0x20, 0x53, 0x5e);
		
		/// <summary>
		/// DomainRole PathRoot
		/// Calculated values with an aggregation context that includes this role path root.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesRolePathRoot/PathRoot.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesRolePathRoot/PathRoot.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "CalculationAggregationContexts", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesRolePathRoot/PathRoot.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("29300a91-af99-4576-a823-686f2220535e")]
		public virtual RolePathObjectTypeRoot PathRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RolePathObjectTypeRoot)DslModeling::DomainRoleInfo.GetRolePlayer(this, PathRootDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PathRootDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AggregationContextPathRootCollection of a CalculatedPathValue
		/// <summary>
		/// Gets a list of AggregationContextPathRootCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<RolePathObjectTypeRoot> GetAggregationContextPathRootCollection(CalculatedPathValue element)
		{
			return new DslModeling::LinkedElementCollection<RolePathObjectTypeRoot>(element, CalculatedValueDomainRoleId);
		}
		#endregion
		#region CalculatedValue link accessor
		/// <summary>
		/// Get the list of CalculatedPathValueAggregationContextIncludesRolePathRoot links to a CalculatedPathValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesRolePathRoot> GetLinksToAggregationContextPathRootCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue calculatedValueInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesRolePathRoot>(calculatedValueInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesRolePathRoot.CalculatedValueDomainRoleId);
		}
		#endregion
		#region PathRoot link accessor
		/// <summary>
		/// Get the list of CalculatedPathValueAggregationContextIncludesRolePathRoot links to a RolePathObjectTypeRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesRolePathRoot> GetLinksToCalculationAggregationContexts ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot pathRootInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesRolePathRoot>(pathRootInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesRolePathRoot.PathRootDomainRoleId);
		}
		#endregion
		#region CalculatedPathValueAggregationContextIncludesRolePathRoot instance accessors
		
		/// <summary>
		/// Get any CalculatedPathValueAggregationContextIncludesRolePathRoot links between a given CalculatedPathValue and a RolePathObjectTypeRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesRolePathRoot> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesRolePathRoot> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesRolePathRoot>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesRolePathRoot> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesRolePathRoot>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesRolePathRoot.CalculatedValueDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesRolePathRoot link in links )
			{
				if ( target.Equals(link.PathRoot) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CalculatedPathValueAggregationContextIncludesRolePathRoot link between a given CalculatedPathValueand a RolePathObjectTypeRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesRolePathRoot GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesRolePathRoot> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesRolePathRoot>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesRolePathRoot.CalculatedValueDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesRolePathRoot link in links )
			{
				if ( target.Equals(link.PathRoot) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship CalculatedPathValueIsCalculatedWithFunction
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueIsCalculatedWithFunction
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueIsCalculatedWithFunction.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueIsCalculatedWithFunction.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("b0bb8774-8bf6-440a-adda-fa9db0712824")]
	public partial class CalculatedPathValueIsCalculatedWithFunction : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CalculatedPathValueIsCalculatedWithFunction domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb0bb8774, 0x8bf6, 0x440a, 0xad, 0xda, 0xfa, 0x9d, 0xb0, 0x71, 0x28, 0x24);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CalculatedPathValueIsCalculatedWithFunction link in the same Partition as the given CalculatedPathValue
		/// </summary>
		/// <param name="source">CalculatedPathValue to use as the source of the relationship.</param>
		/// <param name="target">Function to use as the target of the relationship.</param>
		public CalculatedPathValueIsCalculatedWithFunction(CalculatedPathValue source, Function target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CalculatedPathValueIsCalculatedWithFunction.CalculatedValueDomainRoleId, source), new DslModeling::RoleAssignment(CalculatedPathValueIsCalculatedWithFunction.FunctionDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CalculatedPathValueIsCalculatedWithFunction(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CalculatedPathValueIsCalculatedWithFunction(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CalculatedPathValueIsCalculatedWithFunction(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CalculatedPathValueIsCalculatedWithFunction(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region CalculatedValue domain role code
		
		/// <summary>
		/// CalculatedValue domain role Id.
		/// </summary>
		public static readonly global::System.Guid CalculatedValueDomainRoleId = new global::System.Guid(0x620be174, 0x61d3, 0x48b5, 0x99, 0xc7, 0x17, 0xf2, 0xb7, 0xa8, 0x69, 0x4d);
		
		/// <summary>
		/// DomainRole CalculatedValue
		/// The function used to calculate this value.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueIsCalculatedWithFunction/CalculatedValue.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueIsCalculatedWithFunction/CalculatedValue.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Function", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueIsCalculatedWithFunction/CalculatedValue.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("620be174-61d3-48b5-99c7-17f2b7a8694d")]
		public virtual CalculatedPathValue CalculatedValue
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CalculatedPathValue)DslModeling::DomainRoleInfo.GetRolePlayer(this, CalculatedValueDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CalculatedValueDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CalculatedValueCollection of a Function
		/// <summary>
		/// Gets a list of CalculatedValueCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<CalculatedPathValue> GetCalculatedValueCollection(Function element)
		{
			return new DslModeling::LinkedElementCollection<CalculatedPathValue>(element, FunctionDomainRoleId);
		}
		#endregion
		#region Function domain role code
		
		/// <summary>
		/// Function domain role Id.
		/// </summary>
		public static readonly global::System.Guid FunctionDomainRoleId = new global::System.Guid(0xc1c8cccf, 0x1406, 0x4bac, 0xb7, 0x36, 0x9a, 0xa2, 0xbc, 0xc5, 0xb0, 0x7d);
		
		/// <summary>
		/// DomainRole Function
		/// The calculated values based on this function.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueIsCalculatedWithFunction/Function.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueIsCalculatedWithFunction/Function.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "CalculatedValueCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueIsCalculatedWithFunction/Function.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c1c8cccf-1406-4bac-b736-9aa2bcc5b07d")]
		public virtual Function Function
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Function)DslModeling::DomainRoleInfo.GetRolePlayer(this, FunctionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FunctionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Function of a CalculatedPathValue
		/// <summary>
		/// Gets Function.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Function GetFunction(CalculatedPathValue element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CalculatedValueDomainRoleId) as Function;
		}
		
		/// <summary>
		/// Sets Function.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFunction(CalculatedPathValue element, Function newFunction)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CalculatedValueDomainRoleId, newFunction);
		}
		#endregion
		#region CalculatedValue link accessor
		/// <summary>
		/// Get the CalculatedPathValueIsCalculatedWithFunction link to a CalculatedPathValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueIsCalculatedWithFunction GetLinkToFunction (global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue calculatedValueInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueIsCalculatedWithFunction> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueIsCalculatedWithFunction>(calculatedValueInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueIsCalculatedWithFunction.CalculatedValueDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CalculatedValue not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Function link accessor
		/// <summary>
		/// Get the list of CalculatedPathValueIsCalculatedWithFunction links to a Function.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueIsCalculatedWithFunction> GetLinksToCalculatedValueCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.Function functionInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueIsCalculatedWithFunction>(functionInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueIsCalculatedWithFunction.FunctionDomainRoleId);
		}
		#endregion
		#region CalculatedPathValueIsCalculatedWithFunction instance accessors
		
		/// <summary>
		/// Get any CalculatedPathValueIsCalculatedWithFunction links between a given CalculatedPathValue and a Function.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueIsCalculatedWithFunction> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Function target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueIsCalculatedWithFunction> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueIsCalculatedWithFunction>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueIsCalculatedWithFunction> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueIsCalculatedWithFunction>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueIsCalculatedWithFunction.CalculatedValueDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueIsCalculatedWithFunction link in links )
			{
				if ( target.Equals(link.Function) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CalculatedPathValueIsCalculatedWithFunction link between a given CalculatedPathValueand a Function.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueIsCalculatedWithFunction GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Function target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueIsCalculatedWithFunction> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueIsCalculatedWithFunction>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueIsCalculatedWithFunction.CalculatedValueDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueIsCalculatedWithFunction link in links )
			{
				if ( target.Equals(link.Function) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship CalculatedPathValueInputCorrespondsToFunctionParameter
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputCorrespondsToFunctionParameter
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputCorrespondsToFunctionParameter.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputCorrespondsToFunctionParameter.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("441eae3e-ed05-45b5-b532-17833234930e")]
	public partial class CalculatedPathValueInputCorrespondsToFunctionParameter : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CalculatedPathValueInputCorrespondsToFunctionParameter domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x441eae3e, 0xed05, 0x45b5, 0xb5, 0x32, 0x17, 0x83, 0x32, 0x34, 0x93, 0x0e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CalculatedPathValueInputCorrespondsToFunctionParameter link in the same Partition as the given CalculatedPathValueInput
		/// </summary>
		/// <param name="source">CalculatedPathValueInput to use as the source of the relationship.</param>
		/// <param name="target">FunctionParameter to use as the target of the relationship.</param>
		public CalculatedPathValueInputCorrespondsToFunctionParameter(CalculatedPathValueInput source, FunctionParameter target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CalculatedPathValueInputCorrespondsToFunctionParameter.InputDomainRoleId, source), new DslModeling::RoleAssignment(CalculatedPathValueInputCorrespondsToFunctionParameter.ParameterDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CalculatedPathValueInputCorrespondsToFunctionParameter(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CalculatedPathValueInputCorrespondsToFunctionParameter(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CalculatedPathValueInputCorrespondsToFunctionParameter(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CalculatedPathValueInputCorrespondsToFunctionParameter(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Input domain role code
		
		/// <summary>
		/// Input domain role Id.
		/// </summary>
		public static readonly global::System.Guid InputDomainRoleId = new global::System.Guid(0xb70d105d, 0x8639, 0x41aa, 0x9c, 0xe8, 0x13, 0x5b, 0xb3, 0xcd, 0x6f, 0x51);
		
		/// <summary>
		/// DomainRole Input
		/// The function parameter associated with this input value.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputCorrespondsToFunctionParameter/Input.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputCorrespondsToFunctionParameter/Input.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Parameter", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputCorrespondsToFunctionParameter/Input.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("b70d105d-8639-41aa-9ce8-135bb3cd6f51")]
		public virtual CalculatedPathValueInput Input
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CalculatedPathValueInput)DslModeling::DomainRoleInfo.GetRolePlayer(this, InputDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InputDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CalculatedInputCollection of a FunctionParameter
		/// <summary>
		/// Gets a list of CalculatedInputCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<CalculatedPathValueInput> GetCalculatedInputCollection(FunctionParameter element)
		{
			return new DslModeling::LinkedElementCollection<CalculatedPathValueInput>(element, ParameterDomainRoleId);
		}
		#endregion
		#region Parameter domain role code
		
		/// <summary>
		/// Parameter domain role Id.
		/// </summary>
		public static readonly global::System.Guid ParameterDomainRoleId = new global::System.Guid(0xeeb1f768, 0xe8d3, 0x49d0, 0x88, 0xf8, 0x8d, 0xcf, 0xf8, 0xf8, 0x73, 0x00);
		
		/// <summary>
		/// DomainRole Parameter
		/// The calculated value inputs that use this parameter.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputCorrespondsToFunctionParameter/Parameter.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputCorrespondsToFunctionParameter/Parameter.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "CalculatedInputCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputCorrespondsToFunctionParameter/Parameter.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("eeb1f768-e8d3-49d0-88f8-8dcff8f87300")]
		public virtual FunctionParameter Parameter
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FunctionParameter)DslModeling::DomainRoleInfo.GetRolePlayer(this, ParameterDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ParameterDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Parameter of a CalculatedPathValueInput
		/// <summary>
		/// Gets Parameter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FunctionParameter GetParameter(CalculatedPathValueInput element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, InputDomainRoleId) as FunctionParameter;
		}
		
		/// <summary>
		/// Sets Parameter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetParameter(CalculatedPathValueInput element, FunctionParameter newParameter)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, InputDomainRoleId, newParameter);
		}
		#endregion
		#region Input link accessor
		/// <summary>
		/// Get the CalculatedPathValueInputCorrespondsToFunctionParameter link to a CalculatedPathValueInput.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputCorrespondsToFunctionParameter GetLinkToParameter (global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInput inputInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputCorrespondsToFunctionParameter> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputCorrespondsToFunctionParameter>(inputInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputCorrespondsToFunctionParameter.InputDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Input not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Parameter link accessor
		/// <summary>
		/// Get the list of CalculatedPathValueInputCorrespondsToFunctionParameter links to a FunctionParameter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputCorrespondsToFunctionParameter> GetLinksToCalculatedInputCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionParameter parameterInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputCorrespondsToFunctionParameter>(parameterInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputCorrespondsToFunctionParameter.ParameterDomainRoleId);
		}
		#endregion
		#region CalculatedPathValueInputCorrespondsToFunctionParameter instance accessors
		
		/// <summary>
		/// Get any CalculatedPathValueInputCorrespondsToFunctionParameter links between a given CalculatedPathValueInput and a FunctionParameter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputCorrespondsToFunctionParameter> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInput source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionParameter target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputCorrespondsToFunctionParameter> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputCorrespondsToFunctionParameter>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputCorrespondsToFunctionParameter> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputCorrespondsToFunctionParameter>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputCorrespondsToFunctionParameter.InputDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputCorrespondsToFunctionParameter link in links )
			{
				if ( target.Equals(link.Parameter) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CalculatedPathValueInputCorrespondsToFunctionParameter link between a given CalculatedPathValueInputand a FunctionParameter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputCorrespondsToFunctionParameter GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInput source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionParameter target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputCorrespondsToFunctionParameter> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputCorrespondsToFunctionParameter>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputCorrespondsToFunctionParameter.InputDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputCorrespondsToFunctionParameter link in links )
			{
				if ( target.Equals(link.Parameter) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship CalculatedPathValueInputBindsToRolePathRoot
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToRolePathRoot
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToRolePathRoot.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToRolePathRoot.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("fe9df187-37da-449a-8f5a-0111b95d5177")]
	public partial class CalculatedPathValueInputBindsToRolePathRoot : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CalculatedPathValueInputBindsToRolePathRoot domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfe9df187, 0x37da, 0x449a, 0x8f, 0x5a, 0x01, 0x11, 0xb9, 0x5d, 0x51, 0x77);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CalculatedPathValueInputBindsToRolePathRoot link in the same Partition as the given CalculatedPathValueInput
		/// </summary>
		/// <param name="source">CalculatedPathValueInput to use as the source of the relationship.</param>
		/// <param name="target">RolePathObjectTypeRoot to use as the target of the relationship.</param>
		public CalculatedPathValueInputBindsToRolePathRoot(CalculatedPathValueInput source, RolePathObjectTypeRoot target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CalculatedPathValueInputBindsToRolePathRoot.InputDomainRoleId, source), new DslModeling::RoleAssignment(CalculatedPathValueInputBindsToRolePathRoot.SourceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CalculatedPathValueInputBindsToRolePathRoot(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CalculatedPathValueInputBindsToRolePathRoot(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CalculatedPathValueInputBindsToRolePathRoot(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CalculatedPathValueInputBindsToRolePathRoot(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Input domain role code
		
		/// <summary>
		/// Input domain role Id.
		/// </summary>
		public static readonly global::System.Guid InputDomainRoleId = new global::System.Guid(0xad17c292, 0x8627, 0x4b75, 0x8f, 0x29, 0xb5, 0x70, 0x25, 0xe6, 0x78, 0xd8);
		
		/// <summary>
		/// DomainRole Input
		/// The role path root bound to this function input.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToRolePathRoot/Input.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToRolePathRoot/Input.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "SourcePathRoot", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToRolePathRoot/Input.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("ad17c292-8627-4b75-8f29-b57025e678d8")]
		public virtual CalculatedPathValueInput Input
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CalculatedPathValueInput)DslModeling::DomainRoleInfo.GetRolePlayer(this, InputDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InputDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access BoundInputCollection of a RolePathObjectTypeRoot
		/// <summary>
		/// Gets a list of BoundInputCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<CalculatedPathValueInput> GetBoundInputCollection(RolePathObjectTypeRoot element)
		{
			return new DslModeling::LinkedElementCollection<CalculatedPathValueInput>(element, SourceDomainRoleId);
		}
		#endregion
		#region Source domain role code
		
		/// <summary>
		/// Source domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainRoleId = new global::System.Guid(0xb49485b2, 0xbd3b, 0x435c, 0x81, 0x03, 0xe8, 0x23, 0x04, 0x2b, 0x5a, 0x31);
		
		/// <summary>
		/// DomainRole Source
		/// The calculated value inputs bound to this role path root node.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToRolePathRoot/Source.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToRolePathRoot/Source.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "BoundInputCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToRolePathRoot/Source.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b49485b2-bd3b-435c-8103-e823042b5a31")]
		public virtual RolePathObjectTypeRoot Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RolePathObjectTypeRoot)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourcePathRoot of a CalculatedPathValueInput
		/// <summary>
		/// Gets SourcePathRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static RolePathObjectTypeRoot GetSourcePathRoot(CalculatedPathValueInput element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, InputDomainRoleId) as RolePathObjectTypeRoot;
		}
		
		/// <summary>
		/// Sets SourcePathRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSourcePathRoot(CalculatedPathValueInput element, RolePathObjectTypeRoot newSource)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, InputDomainRoleId, newSource);
		}
		#endregion
		#region Input link accessor
		/// <summary>
		/// Get the CalculatedPathValueInputBindsToRolePathRoot link to a CalculatedPathValueInput.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToRolePathRoot GetLinkToSourcePathRoot (global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInput inputInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToRolePathRoot> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToRolePathRoot>(inputInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToRolePathRoot.InputDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Input not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Source link accessor
		/// <summary>
		/// Get the list of CalculatedPathValueInputBindsToRolePathRoot links to a RolePathObjectTypeRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToRolePathRoot> GetLinksToBoundInputCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot sourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToRolePathRoot>(sourceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToRolePathRoot.SourceDomainRoleId);
		}
		#endregion
		#region CalculatedPathValueInputBindsToRolePathRoot instance accessors
		
		/// <summary>
		/// Get any CalculatedPathValueInputBindsToRolePathRoot links between a given CalculatedPathValueInput and a RolePathObjectTypeRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToRolePathRoot> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInput source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToRolePathRoot> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToRolePathRoot>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToRolePathRoot> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToRolePathRoot>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToRolePathRoot.InputDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToRolePathRoot link in links )
			{
				if ( target.Equals(link.Source) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CalculatedPathValueInputBindsToRolePathRoot link between a given CalculatedPathValueInputand a RolePathObjectTypeRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToRolePathRoot GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInput source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToRolePathRoot> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToRolePathRoot>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToRolePathRoot.InputDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToRolePathRoot link in links )
			{
				if ( target.Equals(link.Source) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship CalculatedPathValueInputBindsToPathedRole
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathedRole
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathedRole.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathedRole.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("520de89c-fa70-46f1-9be2-03b4d361371a")]
	public partial class CalculatedPathValueInputBindsToPathedRole : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CalculatedPathValueInputBindsToPathedRole domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x520de89c, 0xfa70, 0x46f1, 0x9b, 0xe2, 0x03, 0xb4, 0xd3, 0x61, 0x37, 0x1a);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CalculatedPathValueInputBindsToPathedRole link in the same Partition as the given CalculatedPathValueInput
		/// </summary>
		/// <param name="source">CalculatedPathValueInput to use as the source of the relationship.</param>
		/// <param name="target">PathedRole to use as the target of the relationship.</param>
		public CalculatedPathValueInputBindsToPathedRole(CalculatedPathValueInput source, PathedRole target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CalculatedPathValueInputBindsToPathedRole.InputDomainRoleId, source), new DslModeling::RoleAssignment(CalculatedPathValueInputBindsToPathedRole.SourceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CalculatedPathValueInputBindsToPathedRole(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CalculatedPathValueInputBindsToPathedRole(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CalculatedPathValueInputBindsToPathedRole(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CalculatedPathValueInputBindsToPathedRole(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Input domain role code
		
		/// <summary>
		/// Input domain role Id.
		/// </summary>
		public static readonly global::System.Guid InputDomainRoleId = new global::System.Guid(0x2f9fb7fa, 0x6381, 0x4ef7, 0xb9, 0x10, 0xb6, 0xec, 0x54, 0xd3, 0x46, 0x27);
		
		/// <summary>
		/// DomainRole Input
		/// The pathed value bound to this function input.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathedRole/Input.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathedRole/Input.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "SourcePathedRole", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathedRole/Input.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("2f9fb7fa-6381-4ef7-b910-b6ec54d34627")]
		public virtual CalculatedPathValueInput Input
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CalculatedPathValueInput)DslModeling::DomainRoleInfo.GetRolePlayer(this, InputDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InputDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access BoundInputCollection of a PathedRole
		/// <summary>
		/// Gets a list of BoundInputCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<CalculatedPathValueInput> GetBoundInputCollection(PathedRole element)
		{
			return new DslModeling::LinkedElementCollection<CalculatedPathValueInput>(element, SourceDomainRoleId);
		}
		#endregion
		#region Source domain role code
		
		/// <summary>
		/// Source domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainRoleId = new global::System.Guid(0x391d3273, 0xf1a5, 0x4fc5, 0x81, 0x4b, 0x51, 0x55, 0xbd, 0x93, 0xd9, 0x2b);
		
		/// <summary>
		/// DomainRole Source
		/// The calculated value inputs bound to this path node.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathedRole/Source.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathedRole/Source.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "BoundInputCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathedRole/Source.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("391d3273-f1a5-4fc5-814b-5155bd93d92b")]
		public virtual PathedRole Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PathedRole)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourcePathedRole of a CalculatedPathValueInput
		/// <summary>
		/// Gets SourcePathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static PathedRole GetSourcePathedRole(CalculatedPathValueInput element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, InputDomainRoleId) as PathedRole;
		}
		
		/// <summary>
		/// Sets SourcePathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSourcePathedRole(CalculatedPathValueInput element, PathedRole newSource)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, InputDomainRoleId, newSource);
		}
		#endregion
		#region Input link accessor
		/// <summary>
		/// Get the CalculatedPathValueInputBindsToPathedRole link to a CalculatedPathValueInput.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathedRole GetLinkToSourcePathedRole (global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInput inputInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathedRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathedRole>(inputInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathedRole.InputDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Input not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Source link accessor
		/// <summary>
		/// Get the list of CalculatedPathValueInputBindsToPathedRole links to a PathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathedRole> GetLinksToBoundInputCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole sourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathedRole>(sourceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathedRole.SourceDomainRoleId);
		}
		#endregion
		#region CalculatedPathValueInputBindsToPathedRole instance accessors
		
		/// <summary>
		/// Get any CalculatedPathValueInputBindsToPathedRole links between a given CalculatedPathValueInput and a PathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathedRole> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInput source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathedRole> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathedRole>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathedRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathedRole>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathedRole.InputDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathedRole link in links )
			{
				if ( target.Equals(link.Source) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CalculatedPathValueInputBindsToPathedRole link between a given CalculatedPathValueInputand a PathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathedRole GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInput source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathedRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathedRole>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathedRole.InputDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathedRole link in links )
			{
				if ( target.Equals(link.Source) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship CalculatedPathValueInputBindsToCalculatedPathValue
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToCalculatedPathValue
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToCalculatedPathValue.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToCalculatedPathValue.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("fb107cb5-6a10-4f58-9bd3-f57400ac0352")]
	public partial class CalculatedPathValueInputBindsToCalculatedPathValue : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CalculatedPathValueInputBindsToCalculatedPathValue domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfb107cb5, 0x6a10, 0x4f58, 0x9b, 0xd3, 0xf5, 0x74, 0x00, 0xac, 0x03, 0x52);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CalculatedPathValueInputBindsToCalculatedPathValue link in the same Partition as the given CalculatedPathValueInput
		/// </summary>
		/// <param name="source">CalculatedPathValueInput to use as the source of the relationship.</param>
		/// <param name="target">CalculatedPathValue to use as the target of the relationship.</param>
		public CalculatedPathValueInputBindsToCalculatedPathValue(CalculatedPathValueInput source, CalculatedPathValue target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CalculatedPathValueInputBindsToCalculatedPathValue.InputDomainRoleId, source), new DslModeling::RoleAssignment(CalculatedPathValueInputBindsToCalculatedPathValue.SourceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CalculatedPathValueInputBindsToCalculatedPathValue(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CalculatedPathValueInputBindsToCalculatedPathValue(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CalculatedPathValueInputBindsToCalculatedPathValue(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CalculatedPathValueInputBindsToCalculatedPathValue(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Input domain role code
		
		/// <summary>
		/// Input domain role Id.
		/// </summary>
		public static readonly global::System.Guid InputDomainRoleId = new global::System.Guid(0xc2efada8, 0x08e7, 0x4703, 0x8d, 0xe5, 0x04, 0x56, 0xc5, 0xde, 0xf1, 0xa1);
		
		/// <summary>
		/// DomainRole Input
		/// The pathed value bound to this function input.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToCalculatedPathValue/Input.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToCalculatedPathValue/Input.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "SourceCalculatedValue", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToCalculatedPathValue/Input.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("c2efada8-08e7-4703-8de5-0456c5def1a1")]
		public virtual CalculatedPathValueInput Input
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CalculatedPathValueInput)DslModeling::DomainRoleInfo.GetRolePlayer(this, InputDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InputDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access BoundInputCollection of a CalculatedPathValue
		/// <summary>
		/// Gets a list of BoundInputCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<CalculatedPathValueInput> GetBoundInputCollection(CalculatedPathValue element)
		{
			return new DslModeling::LinkedElementCollection<CalculatedPathValueInput>(element, SourceDomainRoleId);
		}
		#endregion
		#region Source domain role code
		
		/// <summary>
		/// Source domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainRoleId = new global::System.Guid(0xf261c4c8, 0x0974, 0x4690, 0x90, 0x1f, 0xfc, 0x55, 0x8b, 0x14, 0x02, 0x1a);
		
		/// <summary>
		/// DomainRole Source
		/// The calculated value inputs bound to this path node.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToCalculatedPathValue/Source.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToCalculatedPathValue/Source.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "BoundInputCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToCalculatedPathValue/Source.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f261c4c8-0974-4690-901f-fc558b14021a")]
		public virtual CalculatedPathValue Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CalculatedPathValue)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourceCalculatedValue of a CalculatedPathValueInput
		/// <summary>
		/// Gets SourceCalculatedValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static CalculatedPathValue GetSourceCalculatedValue(CalculatedPathValueInput element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, InputDomainRoleId) as CalculatedPathValue;
		}
		
		/// <summary>
		/// Sets SourceCalculatedValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSourceCalculatedValue(CalculatedPathValueInput element, CalculatedPathValue newSource)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, InputDomainRoleId, newSource);
		}
		#endregion
		#region Input link accessor
		/// <summary>
		/// Get the CalculatedPathValueInputBindsToCalculatedPathValue link to a CalculatedPathValueInput.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToCalculatedPathValue GetLinkToSourceCalculatedValue (global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInput inputInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToCalculatedPathValue> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToCalculatedPathValue>(inputInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToCalculatedPathValue.InputDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Input not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Source link accessor
		/// <summary>
		/// Get the list of CalculatedPathValueInputBindsToCalculatedPathValue links to a CalculatedPathValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToCalculatedPathValue> GetLinksToBoundInputCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue sourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToCalculatedPathValue>(sourceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToCalculatedPathValue.SourceDomainRoleId);
		}
		#endregion
		#region CalculatedPathValueInputBindsToCalculatedPathValue instance accessors
		
		/// <summary>
		/// Get any CalculatedPathValueInputBindsToCalculatedPathValue links between a given CalculatedPathValueInput and a CalculatedPathValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToCalculatedPathValue> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInput source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToCalculatedPathValue> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToCalculatedPathValue>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToCalculatedPathValue> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToCalculatedPathValue>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToCalculatedPathValue.InputDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToCalculatedPathValue link in links )
			{
				if ( target.Equals(link.Source) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CalculatedPathValueInputBindsToCalculatedPathValue link between a given CalculatedPathValueInputand a CalculatedPathValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToCalculatedPathValue GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInput source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToCalculatedPathValue> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToCalculatedPathValue>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToCalculatedPathValue.InputDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToCalculatedPathValue link in links )
			{
				if ( target.Equals(link.Source) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship CalculatedPathValueInputBindsToPathConstant
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathConstant
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathConstant.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathConstant.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("365f3ab4-212d-4205-bfbc-4b9482e9e6b3")]
	public partial class CalculatedPathValueInputBindsToPathConstant : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CalculatedPathValueInputBindsToPathConstant domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x365f3ab4, 0x212d, 0x4205, 0xbf, 0xbc, 0x4b, 0x94, 0x82, 0xe9, 0xe6, 0xb3);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CalculatedPathValueInputBindsToPathConstant link in the same Partition as the given CalculatedPathValueInput
		/// </summary>
		/// <param name="source">CalculatedPathValueInput to use as the source of the relationship.</param>
		/// <param name="target">PathConstant to use as the target of the relationship.</param>
		public CalculatedPathValueInputBindsToPathConstant(CalculatedPathValueInput source, PathConstant target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CalculatedPathValueInputBindsToPathConstant.InputDomainRoleId, source), new DslModeling::RoleAssignment(CalculatedPathValueInputBindsToPathConstant.SourceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CalculatedPathValueInputBindsToPathConstant(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CalculatedPathValueInputBindsToPathConstant(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CalculatedPathValueInputBindsToPathConstant(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CalculatedPathValueInputBindsToPathConstant(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Input domain role code
		
		/// <summary>
		/// Input domain role Id.
		/// </summary>
		public static readonly global::System.Guid InputDomainRoleId = new global::System.Guid(0x5d3fe47e, 0xc811, 0x43f9, 0xbf, 0xc9, 0xed, 0x06, 0x35, 0xbe, 0xc7, 0x1b);
		
		/// <summary>
		/// DomainRole Input
		/// The constant value bound to this function input.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathConstant/Input.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathConstant/Input.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "SourceConstant", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathConstant/Input.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("5d3fe47e-c811-43f9-bfc9-ed0635bec71b")]
		public virtual CalculatedPathValueInput Input
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CalculatedPathValueInput)DslModeling::DomainRoleInfo.GetRolePlayer(this, InputDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InputDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access BoundInput of a PathConstant
		/// <summary>
		/// Gets BoundInput.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static CalculatedPathValueInput GetBoundInput(PathConstant element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SourceDomainRoleId) as CalculatedPathValueInput;
		}
		
		/// <summary>
		/// Sets BoundInput.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetBoundInput(PathConstant element, CalculatedPathValueInput newInput)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SourceDomainRoleId, newInput);
		}
		#endregion
		#region Source domain role code
		
		/// <summary>
		/// Source domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainRoleId = new global::System.Guid(0x7fdd0f7d, 0xfd00, 0x4a77, 0x88, 0xb2, 0x35, 0xcd, 0xca, 0xd1, 0xf2, 0x11);
		
		/// <summary>
		/// DomainRole Source
		/// The calculated value input that uses this path constant.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathConstant/Source.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathConstant/Source.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "BoundInput", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathConstant/Source.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("7fdd0f7d-fd00-4a77-88b2-35cdcad1f211")]
		public virtual PathConstant Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PathConstant)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourceConstant of a CalculatedPathValueInput
		/// <summary>
		/// Gets SourceConstant.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static PathConstant GetSourceConstant(CalculatedPathValueInput element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, InputDomainRoleId) as PathConstant;
		}
		
		/// <summary>
		/// Sets SourceConstant.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSourceConstant(CalculatedPathValueInput element, PathConstant newSource)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, InputDomainRoleId, newSource);
		}
		#endregion
		#region Input link accessor
		/// <summary>
		/// Get the CalculatedPathValueInputBindsToPathConstant link to a CalculatedPathValueInput.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathConstant GetLinkToSourceConstant (global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInput inputInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathConstant> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathConstant>(inputInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathConstant.InputDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Input not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Source link accessor
		/// <summary>
		/// Get the CalculatedPathValueInputBindsToPathConstant link to a PathConstant.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathConstant GetLinkToBoundInput (global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathConstant sourceInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathConstant> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathConstant>(sourceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathConstant.SourceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Source not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CalculatedPathValueInputBindsToPathConstant instance accessors
		
		/// <summary>
		/// Get any CalculatedPathValueInputBindsToPathConstant links between a given CalculatedPathValueInput and a PathConstant.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathConstant> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInput source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathConstant target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathConstant> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathConstant>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathConstant> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathConstant>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathConstant.InputDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathConstant link in links )
			{
				if ( target.Equals(link.Source) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CalculatedPathValueInputBindsToPathConstant link between a given CalculatedPathValueInputand a PathConstant.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathConstant GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInput source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathConstant target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathConstant> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathConstant>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathConstant.InputDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathConstant link in links )
			{
				if ( target.Equals(link.Source) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship QueryDefinesParameter
	/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.QueryDefinesParameter
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.QueryDefinesParameter.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.QueryDefinesParameter.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("dc78d1c0-2899-44da-8d9c-f22c70e14ce9")]
	public partial class QueryDefinesParameter : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// QueryDefinesParameter domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xdc78d1c0, 0x2899, 0x44da, 0x8d, 0x9c, 0xf2, 0x2c, 0x70, 0xe1, 0x4c, 0xe9);
	
				
		/// <summary>
		/// Constructor
		/// Creates a QueryDefinesParameter link in the same Partition as the given QueryBase
		/// </summary>
		/// <param name="source">QueryBase to use as the source of the relationship.</param>
		/// <param name="target">QueryParameter to use as the target of the relationship.</param>
		public QueryDefinesParameter(QueryBase source, QueryParameter target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(QueryDefinesParameter.QueryDomainRoleId, source), new DslModeling::RoleAssignment(QueryDefinesParameter.ParameterDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public QueryDefinesParameter(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public QueryDefinesParameter(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public QueryDefinesParameter(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public QueryDefinesParameter(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Query domain role code
		
		/// <summary>
		/// Query domain role Id.
		/// </summary>
		public static readonly global::System.Guid QueryDomainRoleId = new global::System.Guid(0x8a9db653, 0x4a43, 0x4b40, 0x8e, 0x86, 0xbf, 0x96, 0x05, 0x48, 0xa5, 0x70);
		
		/// <summary>
		/// DomainRole Query
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.QueryDefinesParameter.Query
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.QueryDefinesParameter/Query.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.QueryDefinesParameter/Query.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ParameterCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.QueryDefinesParameter/Query.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("8a9db653-4a43-4b40-8e86-bf960548a570")]
		public virtual QueryBase Query
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (QueryBase)DslModeling::DomainRoleInfo.GetRolePlayer(this, QueryDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, QueryDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Query of a QueryParameter
		/// <summary>
		/// Gets Query.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static QueryBase GetQuery(QueryParameter element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ParameterDomainRoleId) as QueryBase;
		}
		
		/// <summary>
		/// Sets Query.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetQuery(QueryParameter element, QueryBase newQuery)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ParameterDomainRoleId, newQuery);
		}
		#endregion
		#region Parameter domain role code
		
		/// <summary>
		/// Parameter domain role Id.
		/// </summary>
		public static readonly global::System.Guid ParameterDomainRoleId = new global::System.Guid(0xb193b8e1, 0x84c8, 0x411c, 0x8a, 0x7a, 0x51, 0x6c, 0x2b, 0xba, 0x1d, 0xf2);
		
		/// <summary>
		/// DomainRole Parameter
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.QueryDefinesParameter.Parameter
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.QueryDefinesParameter/Parameter.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.QueryDefinesParameter/Parameter.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Query", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.QueryDefinesParameter/Parameter.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("b193b8e1-84c8-411c-8a7a-516c2bba1df2")]
		public virtual QueryParameter Parameter
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (QueryParameter)DslModeling::DomainRoleInfo.GetRolePlayer(this, ParameterDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ParameterDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ParameterCollection of a QueryBase
		/// <summary>
		/// Gets a list of ParameterCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<QueryParameter> GetParameterCollection(QueryBase element)
		{
			return new DslModeling::LinkedElementCollection<QueryParameter>(element, QueryDomainRoleId);
		}
		#endregion
		#region Query link accessor
		/// <summary>
		/// Get the list of QueryDefinesParameter links to a QueryBase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryDefinesParameter> GetLinksToParameterCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryBase queryInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryDefinesParameter>(queryInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryDefinesParameter.QueryDomainRoleId);
		}
		#endregion
		#region Parameter link accessor
		/// <summary>
		/// Get the QueryDefinesParameter link to a QueryParameter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryDefinesParameter GetLinkToQuery (global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameter parameterInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryDefinesParameter> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryDefinesParameter>(parameterInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryDefinesParameter.ParameterDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Parameter not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region QueryDefinesParameter instance accessors
		
		/// <summary>
		/// Get any QueryDefinesParameter links between a given QueryBase and a QueryParameter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryDefinesParameter> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryBase source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameter target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryDefinesParameter> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryDefinesParameter>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryDefinesParameter> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryDefinesParameter>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryDefinesParameter.QueryDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryDefinesParameter link in links )
			{
				if ( target.Equals(link.Parameter) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one QueryDefinesParameter link between a given QueryBaseand a QueryParameter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryDefinesParameter GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryBase source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameter target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryDefinesParameter> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryDefinesParameter>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryDefinesParameter.QueryDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryDefinesParameter link in links )
			{
				if ( target.Equals(link.Parameter) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship QueryParameterHasParameterType
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterHasParameterType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterHasParameterType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterHasParameterType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("63f6d98f-0d9a-4e77-9e70-aecc621232d4")]
	public partial class QueryParameterHasParameterType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// QueryParameterHasParameterType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x63f6d98f, 0x0d9a, 0x4e77, 0x9e, 0x70, 0xae, 0xcc, 0x62, 0x12, 0x32, 0xd4);
	
				
		/// <summary>
		/// Constructor
		/// Creates a QueryParameterHasParameterType link in the same Partition as the given QueryParameter
		/// </summary>
		/// <param name="source">QueryParameter to use as the source of the relationship.</param>
		/// <param name="target">ObjectType to use as the target of the relationship.</param>
		public QueryParameterHasParameterType(QueryParameter source, ObjectType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(QueryParameterHasParameterType.ParameterDomainRoleId, source), new DslModeling::RoleAssignment(QueryParameterHasParameterType.ParameterTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public QueryParameterHasParameterType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public QueryParameterHasParameterType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public QueryParameterHasParameterType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public QueryParameterHasParameterType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Parameter domain role code
		
		/// <summary>
		/// Parameter domain role Id.
		/// </summary>
		public static readonly global::System.Guid ParameterDomainRoleId = new global::System.Guid(0xefdaba10, 0x3426, 0x4c09, 0x93, 0x09, 0xc5, 0xd2, 0xe7, 0x76, 0xc6, 0x93);
		
		/// <summary>
		/// DomainRole Parameter
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterHasParameterType.Parameter
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterHasParameterType/Parameter.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterHasParameterType/Parameter.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ParameterType", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterHasParameterType/Parameter.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("efdaba10-3426-4c09-9309-c5d2e776c693")]
		public virtual QueryParameter Parameter
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (QueryParameter)DslModeling::DomainRoleInfo.GetRolePlayer(this, ParameterDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ParameterDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TypedQueryParameterCollection of a ObjectType
		/// <summary>
		/// Gets a list of TypedQueryParameterCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<QueryParameter> GetTypedQueryParameterCollection(ObjectType element)
		{
			return new DslModeling::LinkedElementCollection<QueryParameter>(element, ParameterTypeDomainRoleId);
		}
		#endregion
		#region ParameterType domain role code
		
		/// <summary>
		/// ParameterType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ParameterTypeDomainRoleId = new global::System.Guid(0x8589fa39, 0x30b3, 0x4e32, 0xb0, 0x39, 0x96, 0x31, 0x0f, 0x5e, 0x1b, 0x62);
		
		/// <summary>
		/// DomainRole ParameterType
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterHasParameterType.ParameterType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterHasParameterType/ParameterType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterHasParameterType/ParameterType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "TypedQueryParameterCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterHasParameterType/ParameterType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("8589fa39-30b3-4e32-b039-96310f5e1b62")]
		public virtual ObjectType ParameterType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ParameterTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ParameterTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ParameterType of a QueryParameter
		/// <summary>
		/// Gets ParameterType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ObjectType GetParameterType(QueryParameter element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ParameterDomainRoleId) as ObjectType;
		}
		
		/// <summary>
		/// Sets ParameterType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetParameterType(QueryParameter element, ObjectType newParameterType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ParameterDomainRoleId, newParameterType);
		}
		#endregion
		#region Parameter link accessor
		/// <summary>
		/// Get the QueryParameterHasParameterType link to a QueryParameter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterHasParameterType GetLinkToParameterType (global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameter parameterInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterHasParameterType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterHasParameterType>(parameterInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterHasParameterType.ParameterDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Parameter not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ParameterType link accessor
		/// <summary>
		/// Get the list of QueryParameterHasParameterType links to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterHasParameterType> GetLinksToTypedQueryParameterCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType parameterTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterHasParameterType>(parameterTypeInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterHasParameterType.ParameterTypeDomainRoleId);
		}
		#endregion
		#region QueryParameterHasParameterType instance accessors
		
		/// <summary>
		/// Get any QueryParameterHasParameterType links between a given QueryParameter and a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterHasParameterType> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameter source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterHasParameterType> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterHasParameterType>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterHasParameterType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterHasParameterType>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterHasParameterType.ParameterDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterHasParameterType link in links )
			{
				if ( target.Equals(link.ParameterType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one QueryParameterHasParameterType link between a given QueryParameterand a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterHasParameterType GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameter source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterHasParameterType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterHasParameterType>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterHasParameterType.ParameterDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterHasParameterType link in links )
			{
				if ( target.Equals(link.ParameterType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship QueryParameterBinding
	/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBinding
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBinding.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBinding.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("bb38c31e-4109-4be9-8bd8-0e05289a0513")]
	public partial class QueryParameterBinding : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// QueryParameterBinding domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbb38c31e, 0x4109, 0x4be9, 0x8b, 0xd8, 0x0e, 0x05, 0x28, 0x9a, 0x05, 0x13);
	
				
		/// <summary>
		/// Constructor
		/// Creates a QueryParameterBinding link in the same Partition as the given QueryParameter
		/// </summary>
		/// <param name="source">QueryParameter to use as the source of the relationship.</param>
		/// <param name="target">LeadRolePath to use as the target of the relationship.</param>
		public QueryParameterBinding(QueryParameter source, LeadRolePath target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(QueryParameterBinding.QueryParameterDomainRoleId, source), new DslModeling::RoleAssignment(QueryParameterBinding.RolePathDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public QueryParameterBinding(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public QueryParameterBinding(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public QueryParameterBinding(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public QueryParameterBinding(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region QueryParameter domain role code
		
		/// <summary>
		/// QueryParameter domain role Id.
		/// </summary>
		public static readonly global::System.Guid QueryParameterDomainRoleId = new global::System.Guid(0xe8892557, 0xca49, 0x4a17, 0x80, 0xda, 0x6b, 0x9e, 0xcd, 0x07, 0xb1, 0x47);
		
		/// <summary>
		/// DomainRole QueryParameter
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBinding.QueryParameter
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBinding/QueryParameter.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBinding/QueryParameter.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "PathBindingCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBinding/QueryParameter.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e8892557-ca49-4a17-80da-6b9ecd07b147")]
		public virtual QueryParameter QueryParameter
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (QueryParameter)DslModeling::DomainRoleInfo.GetRolePlayer(this, QueryParameterDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, QueryParameterDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ParameterBindings of a LeadRolePath
		/// <summary>
		/// Gets a list of ParameterBindings.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<QueryParameter> GetParameterBindings(LeadRolePath element)
		{
			return new DslModeling::LinkedElementCollection<QueryParameter>(element, RolePathDomainRoleId);
		}
		#endregion
		#region RolePath domain role code
		
		/// <summary>
		/// RolePath domain role Id.
		/// </summary>
		public static readonly global::System.Guid RolePathDomainRoleId = new global::System.Guid(0xe7face69, 0xcd30, 0x408a, 0x8e, 0xcb, 0xb5, 0x12, 0xfb, 0xb0, 0xc0, 0x89);
		
		/// <summary>
		/// DomainRole RolePath
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBinding.RolePath
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBinding/RolePath.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBinding/RolePath.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ParameterBindings", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBinding/RolePath.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e7face69-cd30-408a-8ecb-b512fbb0c089")]
		public virtual LeadRolePath RolePath
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (LeadRolePath)DslModeling::DomainRoleInfo.GetRolePlayer(this, RolePathDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RolePathDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PathBindingCollection of a QueryParameter
		/// <summary>
		/// Gets a list of PathBindingCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<LeadRolePath> GetPathBindingCollection(QueryParameter element)
		{
			return new DslModeling::LinkedElementCollection<LeadRolePath>(element, QueryParameterDomainRoleId);
		}
		#endregion
		#region Accessors for roles that this REL plays in other RELs
		#region BoundToPathRoot opposite domain role accessor
		/// <summary>
		/// Gets or sets BoundToPathRoot.
		/// The role path root from a derivation path for this query that corresponds to
		/// this parameter.
		/// </summary>
		public virtual RolePathObjectTypeRoot BoundToPathRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToRolePathRoot.ParameterBindingDomainRoleId) as RolePathObjectTypeRoot;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToRolePathRoot.ParameterBindingDomainRoleId, value);
			}
		}
		#endregion
		#region BoundToPathedRole opposite domain role accessor
		/// <summary>
		/// Gets or sets BoundToPathedRole.
		/// The pathed role from a derivation path for this query that corresponds to this
		/// parameter.
		/// </summary>
		public virtual PathedRole BoundToPathedRole
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToPathedRole.ParameterBindingDomainRoleId) as PathedRole;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToPathedRole.ParameterBindingDomainRoleId, value);
			}
		}
		#endregion
		#endregion
		#region QueryParameter link accessor
		/// <summary>
		/// Get the list of QueryParameterBinding links to a QueryParameter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBinding> GetLinksToPathBindingCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameter queryParameterInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBinding>(queryParameterInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBinding.QueryParameterDomainRoleId);
		}
		#endregion
		#region RolePath link accessor
		/// <summary>
		/// Get the list of QueryParameterBinding links to a LeadRolePath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBinding> GetLinksToParameterBindings ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePath rolePathInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBinding>(rolePathInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBinding.RolePathDomainRoleId);
		}
		#endregion
		#region QueryParameterBinding instance accessors
		
		/// <summary>
		/// Get any QueryParameterBinding links between a given QueryParameter and a LeadRolePath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBinding> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameter source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePath target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBinding> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBinding>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBinding> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBinding>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBinding.QueryParameterDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBinding link in links )
			{
				if ( target.Equals(link.RolePath) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one QueryParameterBinding link between a given QueryParameterand a LeadRolePath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBinding GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameter source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePath target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBinding> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBinding>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBinding.QueryParameterDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBinding link in links )
			{
				if ( target.Equals(link.RolePath) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship QueryParameterBoundToRolePathRoot
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToRolePathRoot
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToRolePathRoot.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToRolePathRoot.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("3bae9211-ee29-4076-8ba3-f7ee009622ee")]
	public partial class QueryParameterBoundToRolePathRoot : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// QueryParameterBoundToRolePathRoot domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3bae9211, 0xee29, 0x4076, 0x8b, 0xa3, 0xf7, 0xee, 0x00, 0x96, 0x22, 0xee);
	
				
		/// <summary>
		/// Constructor
		/// Creates a QueryParameterBoundToRolePathRoot link in the same Partition as the given QueryParameterBinding
		/// </summary>
		/// <param name="source">QueryParameterBinding to use as the source of the relationship.</param>
		/// <param name="target">RolePathObjectTypeRoot to use as the target of the relationship.</param>
		public QueryParameterBoundToRolePathRoot(QueryParameterBinding source, RolePathObjectTypeRoot target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(QueryParameterBoundToRolePathRoot.ParameterBindingDomainRoleId, source), new DslModeling::RoleAssignment(QueryParameterBoundToRolePathRoot.SourceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public QueryParameterBoundToRolePathRoot(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public QueryParameterBoundToRolePathRoot(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public QueryParameterBoundToRolePathRoot(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public QueryParameterBoundToRolePathRoot(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ParameterBinding domain role code
		
		/// <summary>
		/// ParameterBinding domain role Id.
		/// </summary>
		public static readonly global::System.Guid ParameterBindingDomainRoleId = new global::System.Guid(0xab30b344, 0xd98d, 0x45b0, 0xb9, 0x80, 0xb6, 0xfd, 0x65, 0xb0, 0x7e, 0x2f);
		
		/// <summary>
		/// DomainRole ParameterBinding
		/// The role path root from a derivation path for this query that corresponds to
		/// this parameter.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToRolePathRoot/ParameterBinding.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToRolePathRoot/ParameterBinding.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "BoundToPathRoot", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToRolePathRoot/ParameterBinding.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("ab30b344-d98d-45b0-b980-b6fd65b07e2f")]
		public virtual QueryParameterBinding ParameterBinding
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (QueryParameterBinding)DslModeling::DomainRoleInfo.GetRolePlayer(this, ParameterBindingDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ParameterBindingDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access BoundQueryParameterCollection of a RolePathObjectTypeRoot
		/// <summary>
		/// Gets a list of BoundQueryParameterCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<QueryParameterBinding> GetBoundQueryParameterCollection(RolePathObjectTypeRoot element)
		{
			return new DslModeling::LinkedElementCollection<QueryParameterBinding>(element, SourceDomainRoleId);
		}
		#endregion
		#region Source domain role code
		
		/// <summary>
		/// Source domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainRoleId = new global::System.Guid(0xf92415c3, 0x9ebf, 0x4494, 0x81, 0x8a, 0xc9, 0x91, 0xcc, 0x23, 0x59, 0x5b);
		
		/// <summary>
		/// DomainRole Source
		/// The parameter binding associated with this role path root.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToRolePathRoot/Source.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToRolePathRoot/Source.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "BoundQueryParameterCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToRolePathRoot/Source.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f92415c3-9ebf-4494-818a-c991cc23595b")]
		public virtual RolePathObjectTypeRoot Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RolePathObjectTypeRoot)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access BoundToPathRoot of a QueryParameterBinding
		/// <summary>
		/// Gets BoundToPathRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static RolePathObjectTypeRoot GetBoundToPathRoot(QueryParameterBinding element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ParameterBindingDomainRoleId) as RolePathObjectTypeRoot;
		}
		
		/// <summary>
		/// Sets BoundToPathRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetBoundToPathRoot(QueryParameterBinding element, RolePathObjectTypeRoot newSource)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ParameterBindingDomainRoleId, newSource);
		}
		#endregion
		#region ParameterBinding link accessor
		/// <summary>
		/// Get the QueryParameterBoundToRolePathRoot link to a QueryParameterBinding.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToRolePathRoot GetLinkToBoundToPathRoot (global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBinding parameterBindingInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToRolePathRoot> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToRolePathRoot>(parameterBindingInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToRolePathRoot.ParameterBindingDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ParameterBinding not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Source link accessor
		/// <summary>
		/// Get the list of QueryParameterBoundToRolePathRoot links to a RolePathObjectTypeRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToRolePathRoot> GetLinksToBoundQueryParameterCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot sourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToRolePathRoot>(sourceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToRolePathRoot.SourceDomainRoleId);
		}
		#endregion
		#region QueryParameterBoundToRolePathRoot instance accessors
		
		/// <summary>
		/// Get any QueryParameterBoundToRolePathRoot links between a given QueryParameterBinding and a RolePathObjectTypeRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToRolePathRoot> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBinding source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToRolePathRoot> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToRolePathRoot>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToRolePathRoot> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToRolePathRoot>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToRolePathRoot.ParameterBindingDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToRolePathRoot link in links )
			{
				if ( target.Equals(link.Source) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one QueryParameterBoundToRolePathRoot link between a given QueryParameterBindingand a RolePathObjectTypeRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToRolePathRoot GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBinding source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToRolePathRoot> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToRolePathRoot>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToRolePathRoot.ParameterBindingDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToRolePathRoot link in links )
			{
				if ( target.Equals(link.Source) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship QueryParameterBoundToPathedRole
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToPathedRole
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToPathedRole.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToPathedRole.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("2b594c11-f14a-45cc-a8f4-32bf1dcd474c")]
	public partial class QueryParameterBoundToPathedRole : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// QueryParameterBoundToPathedRole domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2b594c11, 0xf14a, 0x45cc, 0xa8, 0xf4, 0x32, 0xbf, 0x1d, 0xcd, 0x47, 0x4c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a QueryParameterBoundToPathedRole link in the same Partition as the given QueryParameterBinding
		/// </summary>
		/// <param name="source">QueryParameterBinding to use as the source of the relationship.</param>
		/// <param name="target">PathedRole to use as the target of the relationship.</param>
		public QueryParameterBoundToPathedRole(QueryParameterBinding source, PathedRole target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(QueryParameterBoundToPathedRole.ParameterBindingDomainRoleId, source), new DslModeling::RoleAssignment(QueryParameterBoundToPathedRole.SourceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public QueryParameterBoundToPathedRole(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public QueryParameterBoundToPathedRole(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public QueryParameterBoundToPathedRole(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public QueryParameterBoundToPathedRole(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ParameterBinding domain role code
		
		/// <summary>
		/// ParameterBinding domain role Id.
		/// </summary>
		public static readonly global::System.Guid ParameterBindingDomainRoleId = new global::System.Guid(0x57e33a9a, 0x29bb, 0x4cbf, 0xb0, 0x26, 0xe7, 0xba, 0x91, 0xbc, 0x6c, 0xe8);
		
		/// <summary>
		/// DomainRole ParameterBinding
		/// The pathed role from a derivation path for this query that corresponds to this
		/// parameter.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToPathedRole/ParameterBinding.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToPathedRole/ParameterBinding.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "BoundToPathedRole", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToPathedRole/ParameterBinding.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("57e33a9a-29bb-4cbf-b026-e7ba91bc6ce8")]
		public virtual QueryParameterBinding ParameterBinding
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (QueryParameterBinding)DslModeling::DomainRoleInfo.GetRolePlayer(this, ParameterBindingDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ParameterBindingDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access BoundQueryParameterCollection of a PathedRole
		/// <summary>
		/// Gets a list of BoundQueryParameterCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<QueryParameterBinding> GetBoundQueryParameterCollection(PathedRole element)
		{
			return new DslModeling::LinkedElementCollection<QueryParameterBinding>(element, SourceDomainRoleId);
		}
		#endregion
		#region Source domain role code
		
		/// <summary>
		/// Source domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainRoleId = new global::System.Guid(0xae5b308d, 0xd9e3, 0x457f, 0x85, 0x12, 0xbe, 0x33, 0x64, 0x09, 0x94, 0x67);
		
		/// <summary>
		/// DomainRole Source
		/// The parameter binding associated with this pathed role.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToPathedRole/Source.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToPathedRole/Source.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "BoundQueryParameterCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToPathedRole/Source.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ae5b308d-d9e3-457f-8512-be3364099467")]
		public virtual PathedRole Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PathedRole)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access BoundToPathedRole of a QueryParameterBinding
		/// <summary>
		/// Gets BoundToPathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static PathedRole GetBoundToPathedRole(QueryParameterBinding element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ParameterBindingDomainRoleId) as PathedRole;
		}
		
		/// <summary>
		/// Sets BoundToPathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetBoundToPathedRole(QueryParameterBinding element, PathedRole newSource)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ParameterBindingDomainRoleId, newSource);
		}
		#endregion
		#region ParameterBinding link accessor
		/// <summary>
		/// Get the QueryParameterBoundToPathedRole link to a QueryParameterBinding.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToPathedRole GetLinkToBoundToPathedRole (global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBinding parameterBindingInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToPathedRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToPathedRole>(parameterBindingInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToPathedRole.ParameterBindingDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ParameterBinding not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Source link accessor
		/// <summary>
		/// Get the list of QueryParameterBoundToPathedRole links to a PathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToPathedRole> GetLinksToBoundQueryParameterCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole sourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToPathedRole>(sourceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToPathedRole.SourceDomainRoleId);
		}
		#endregion
		#region QueryParameterBoundToPathedRole instance accessors
		
		/// <summary>
		/// Get any QueryParameterBoundToPathedRole links between a given QueryParameterBinding and a PathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToPathedRole> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBinding source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToPathedRole> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToPathedRole>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToPathedRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToPathedRole>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToPathedRole.ParameterBindingDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToPathedRole link in links )
			{
				if ( target.Equals(link.Source) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one QueryParameterBoundToPathedRole link between a given QueryParameterBindingand a PathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToPathedRole GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBinding source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToPathedRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToPathedRole>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToPathedRole.ParameterBindingDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBoundToPathedRole link in links )
			{
				if ( target.Equals(link.Source) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship SubqueryParameterInputs
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputs
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputs.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputs.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("a2cd332c-e57e-41cc-b4da-8f464833d33d")]
	public partial class SubqueryParameterInputs : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SubqueryParameterInputs domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa2cd332c, 0xe57e, 0x41cc, 0xb4, 0xda, 0x8f, 0x46, 0x48, 0x33, 0xd3, 0x3d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SubqueryParameterInputs link in the same Partition as the given LeadRolePath
		/// </summary>
		/// <param name="source">LeadRolePath to use as the source of the relationship.</param>
		/// <param name="target">PathedRole to use as the target of the relationship.</param>
		public SubqueryParameterInputs(LeadRolePath source, PathedRole target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SubqueryParameterInputs.RolePathDomainRoleId, source), new DslModeling::RoleAssignment(SubqueryParameterInputs.PathedEntryRoleDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubqueryParameterInputs(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubqueryParameterInputs(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubqueryParameterInputs(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubqueryParameterInputs(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region RolePath domain role code
		
		/// <summary>
		/// RolePath domain role Id.
		/// </summary>
		public static readonly global::System.Guid RolePathDomainRoleId = new global::System.Guid(0x384bfc86, 0x68b3, 0x497b, 0xbb, 0x03, 0x25, 0x85, 0xa8, 0x5e, 0xae, 0x80);
		
		/// <summary>
		/// DomainRole RolePath
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputs.RolePath
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputs/RolePath.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputs/RolePath.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "SubqueryParameterInputsCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputs/RolePath.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("384bfc86-68b3-497b-bb03-2585a85eae80")]
		public virtual LeadRolePath RolePath
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (LeadRolePath)DslModeling::DomainRoleInfo.GetRolePlayer(this, RolePathDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RolePathDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ParameterInputsCollection of a PathedRole
		/// <summary>
		/// Gets a list of ParameterInputsCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<LeadRolePath> GetParameterInputsCollection(PathedRole element)
		{
			return new DslModeling::LinkedElementCollection<LeadRolePath>(element, PathedEntryRoleDomainRoleId);
		}
		#endregion
		#region PathedEntryRole domain role code
		
		/// <summary>
		/// PathedEntryRole domain role Id.
		/// </summary>
		public static readonly global::System.Guid PathedEntryRoleDomainRoleId = new global::System.Guid(0xa19a3db2, 0xa36f, 0x4a7e, 0x90, 0xfd, 0x21, 0x5e, 0x1f, 0x29, 0xaa, 0xa6);
		
		/// <summary>
		/// DomainRole PathedEntryRole
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputs.PathedEntryRole
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputs/PathedEntryRole.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputs/PathedEntryRole.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ParameterInputsCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputs/PathedEntryRole.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a19a3db2-a36f-4a7e-90fd-215e1f29aaa6")]
		public virtual PathedRole PathedEntryRole
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PathedRole)DslModeling::DomainRoleInfo.GetRolePlayer(this, PathedEntryRoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PathedEntryRoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SubqueryParameterInputsCollection of a LeadRolePath
		/// <summary>
		/// Gets a list of SubqueryParameterInputsCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<PathedRole> GetSubqueryParameterInputsCollection(LeadRolePath element)
		{
			return new DslModeling::LinkedElementCollection<PathedRole>(element, RolePathDomainRoleId);
		}
		#endregion
		#region Accessors for roles that this REL plays in other RELs
		#region InputCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of InputCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInput.Inputs
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<QueryParameter> InputCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<QueryParameter>(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInput.InputsDomainRoleId);
			}
		}
		#endregion
		#endregion
		#region RolePath link accessor
		/// <summary>
		/// Get the list of SubqueryParameterInputs links to a LeadRolePath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputs> GetLinksToSubqueryParameterInputsCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePath rolePathInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputs>(rolePathInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputs.RolePathDomainRoleId);
		}
		#endregion
		#region PathedEntryRole link accessor
		/// <summary>
		/// Get the list of SubqueryParameterInputs links to a PathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputs> GetLinksToParameterInputsCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole pathedEntryRoleInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputs>(pathedEntryRoleInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputs.PathedEntryRoleDomainRoleId);
		}
		#endregion
		#region SubqueryParameterInputs instance accessors
		
		/// <summary>
		/// Get any SubqueryParameterInputs links between a given LeadRolePath and a PathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputs> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePath source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputs> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputs>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputs> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputs>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputs.RolePathDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputs link in links )
			{
				if ( target.Equals(link.PathedEntryRole) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SubqueryParameterInputs link between a given LeadRolePathand a PathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputs GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePath source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputs> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputs>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputs.RolePathDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputs link in links )
			{
				if ( target.Equals(link.PathedEntryRole) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship SubqueryParameterInput
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInput
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInput.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInput.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("cd94297f-a8ab-41d8-9509-1ba613297704")]
	public partial class SubqueryParameterInput : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SubqueryParameterInput domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xcd94297f, 0xa8ab, 0x41d8, 0x95, 0x09, 0x1b, 0xa6, 0x13, 0x29, 0x77, 0x04);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SubqueryParameterInput link in the same Partition as the given SubqueryParameterInputs
		/// </summary>
		/// <param name="source">SubqueryParameterInputs to use as the source of the relationship.</param>
		/// <param name="target">QueryParameter to use as the target of the relationship.</param>
		public SubqueryParameterInput(SubqueryParameterInputs source, QueryParameter target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SubqueryParameterInput.InputsDomainRoleId, source), new DslModeling::RoleAssignment(SubqueryParameterInput.ParameterDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubqueryParameterInput(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubqueryParameterInput(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubqueryParameterInput(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubqueryParameterInput(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Inputs domain role code
		
		/// <summary>
		/// Inputs domain role Id.
		/// </summary>
		public static readonly global::System.Guid InputsDomainRoleId = new global::System.Guid(0x42e57854, 0x731e, 0x403a, 0x96, 0xc5, 0xe5, 0xc0, 0xcd, 0x38, 0xa2, 0xe5);
		
		/// <summary>
		/// DomainRole Inputs
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInput.Inputs
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInput/Inputs.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInput/Inputs.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "InputCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInput/Inputs.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("42e57854-731e-403a-96c5-e5c0cd38a2e5")]
		public virtual SubqueryParameterInputs Inputs
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SubqueryParameterInputs)DslModeling::DomainRoleInfo.GetRolePlayer(this, InputsDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InputsDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SubqueryParameterInputsCollection of a QueryParameter
		/// <summary>
		/// Gets a list of SubqueryParameterInputsCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SubqueryParameterInputs> GetSubqueryParameterInputsCollection(QueryParameter element)
		{
			return new DslModeling::LinkedElementCollection<SubqueryParameterInputs>(element, ParameterDomainRoleId);
		}
		#endregion
		#region Parameter domain role code
		
		/// <summary>
		/// Parameter domain role Id.
		/// </summary>
		public static readonly global::System.Guid ParameterDomainRoleId = new global::System.Guid(0xff5c7847, 0x047b, 0x49df, 0x90, 0xb8, 0x4b, 0xbe, 0x29, 0xea, 0xf2, 0x64);
		
		/// <summary>
		/// DomainRole Parameter
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInput.Parameter
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInput/Parameter.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInput/Parameter.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SubqueryParameterInputsCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInput/Parameter.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ff5c7847-047b-49df-90b8-4bbe29eaf264")]
		public virtual QueryParameter Parameter
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (QueryParameter)DslModeling::DomainRoleInfo.GetRolePlayer(this, ParameterDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ParameterDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InputCollection of a SubqueryParameterInputs
		/// <summary>
		/// Gets a list of InputCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<QueryParameter> GetInputCollection(SubqueryParameterInputs element)
		{
			return new DslModeling::LinkedElementCollection<QueryParameter>(element, InputsDomainRoleId);
		}
		#endregion
		#region Accessors for roles that this REL plays in other RELs
		#region InputFromPathRoot opposite domain role accessor
		/// <summary>
		/// Gets or sets InputFromPathRoot.
		/// The role path root from the containing path passed to a parameter in a single
		/// use of a subquery.
		/// </summary>
		public virtual RolePathObjectTypeRoot InputFromPathRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromRolePathRoot.ParameterInputDomainRoleId) as RolePathObjectTypeRoot;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromRolePathRoot.ParameterInputDomainRoleId, value);
			}
		}
		#endregion
		#region InputFromPathedRole opposite domain role accessor
		/// <summary>
		/// Gets or sets InputFromPathedRole.
		/// The pathed role from the containing path passed to a parameter in a single use
		/// of a subquery.
		/// </summary>
		public virtual PathedRole InputFromPathedRole
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathedRole.ParameterInputDomainRoleId) as PathedRole;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathedRole.ParameterInputDomainRoleId, value);
			}
		}
		#endregion
		#region InputFromCalculatedValue opposite domain role accessor
		/// <summary>
		/// Gets or sets InputFromCalculatedValue.
		/// The calculated value from the containing path passed to a parameter in a single
		/// use of a subquery.
		/// </summary>
		public virtual CalculatedPathValue InputFromCalculatedValue
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromCalculatedPathValue.ParameterInputDomainRoleId) as CalculatedPathValue;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromCalculatedPathValue.ParameterInputDomainRoleId, value);
			}
		}
		#endregion
		#region InputFromConstant opposite domain role accessor
		/// <summary>
		/// Gets or sets InputFromConstant.
		/// The constant value passed to a parameter in a single use of a subquery.
		/// </summary>
		public virtual PathConstant InputFromConstant
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathConstant.ParameterInputDomainRoleId) as PathConstant;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathConstant.SourceDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathConstant.SourceDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathConstant.ParameterInputDomainRoleId, value);
				}
			}
		}
		#endregion
		#endregion
		#region Inputs link accessor
		/// <summary>
		/// Get the list of SubqueryParameterInput links to a SubqueryParameterInputs.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInput> GetLinksToInputCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputs inputsInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInput>(inputsInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInput.InputsDomainRoleId);
		}
		#endregion
		#region Parameter link accessor
		/// <summary>
		/// Get the list of SubqueryParameterInput links to a QueryParameter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInput> GetLinksToSubqueryParameterInputsCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameter parameterInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInput>(parameterInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInput.ParameterDomainRoleId);
		}
		#endregion
		#region SubqueryParameterInput instance accessors
		
		/// <summary>
		/// Get any SubqueryParameterInput links between a given SubqueryParameterInputs and a QueryParameter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInput> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputs source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameter target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInput> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInput>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInput> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInput>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInput.InputsDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInput link in links )
			{
				if ( target.Equals(link.Parameter) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SubqueryParameterInput link between a given SubqueryParameterInputsand a QueryParameter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInput GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputs source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameter target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInput> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInput>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInput.InputsDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInput link in links )
			{
				if ( target.Equals(link.Parameter) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship SubqueryParameterInputFromRolePathRoot
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromRolePathRoot
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromRolePathRoot.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromRolePathRoot.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("da23c890-76a6-4d07-aab8-f3532c1abf39")]
	public partial class SubqueryParameterInputFromRolePathRoot : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SubqueryParameterInputFromRolePathRoot domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xda23c890, 0x76a6, 0x4d07, 0xaa, 0xb8, 0xf3, 0x53, 0x2c, 0x1a, 0xbf, 0x39);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SubqueryParameterInputFromRolePathRoot link in the same Partition as the given SubqueryParameterInput
		/// </summary>
		/// <param name="source">SubqueryParameterInput to use as the source of the relationship.</param>
		/// <param name="target">RolePathObjectTypeRoot to use as the target of the relationship.</param>
		public SubqueryParameterInputFromRolePathRoot(SubqueryParameterInput source, RolePathObjectTypeRoot target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SubqueryParameterInputFromRolePathRoot.ParameterInputDomainRoleId, source), new DslModeling::RoleAssignment(SubqueryParameterInputFromRolePathRoot.SourceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubqueryParameterInputFromRolePathRoot(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubqueryParameterInputFromRolePathRoot(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubqueryParameterInputFromRolePathRoot(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubqueryParameterInputFromRolePathRoot(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ParameterInput domain role code
		
		/// <summary>
		/// ParameterInput domain role Id.
		/// </summary>
		public static readonly global::System.Guid ParameterInputDomainRoleId = new global::System.Guid(0xb23f84e9, 0x5095, 0x4702, 0xae, 0x40, 0x8e, 0x1e, 0xc8, 0xf0, 0xa7, 0x85);
		
		/// <summary>
		/// DomainRole ParameterInput
		/// The role path root from the containing path passed to a parameter in a single
		/// use of a subquery.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromRolePathRoot/ParameterInput.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromRolePathRoot/ParameterInput.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "InputFromPathRoot", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromRolePathRoot/ParameterInput.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("b23f84e9-5095-4702-ae40-8e1ec8f0a785")]
		public virtual SubqueryParameterInput ParameterInput
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SubqueryParameterInput)DslModeling::DomainRoleInfo.GetRolePlayer(this, ParameterInputDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ParameterInputDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SubqueryParameterInputCollection of a RolePathObjectTypeRoot
		/// <summary>
		/// Gets a list of SubqueryParameterInputCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SubqueryParameterInput> GetSubqueryParameterInputCollection(RolePathObjectTypeRoot element)
		{
			return new DslModeling::LinkedElementCollection<SubqueryParameterInput>(element, SourceDomainRoleId);
		}
		#endregion
		#region Source domain role code
		
		/// <summary>
		/// Source domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainRoleId = new global::System.Guid(0x1b31dece, 0x4e3b, 0x4dd4, 0xb6, 0x80, 0x3b, 0xc5, 0x5d, 0x99, 0x18, 0xef);
		
		/// <summary>
		/// DomainRole Source
		/// The parameter input associated with this role path root.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromRolePathRoot/Source.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromRolePathRoot/Source.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SubqueryParameterInputCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromRolePathRoot/Source.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("1b31dece-4e3b-4dd4-b680-3bc55d9918ef")]
		public virtual RolePathObjectTypeRoot Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RolePathObjectTypeRoot)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InputFromPathRoot of a SubqueryParameterInput
		/// <summary>
		/// Gets InputFromPathRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static RolePathObjectTypeRoot GetInputFromPathRoot(SubqueryParameterInput element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ParameterInputDomainRoleId) as RolePathObjectTypeRoot;
		}
		
		/// <summary>
		/// Sets InputFromPathRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetInputFromPathRoot(SubqueryParameterInput element, RolePathObjectTypeRoot newSource)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ParameterInputDomainRoleId, newSource);
		}
		#endregion
		#region ParameterInput link accessor
		/// <summary>
		/// Get the SubqueryParameterInputFromRolePathRoot link to a SubqueryParameterInput.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromRolePathRoot GetLinkToInputFromPathRoot (global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInput parameterInputInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromRolePathRoot> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromRolePathRoot>(parameterInputInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromRolePathRoot.ParameterInputDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ParameterInput not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Source link accessor
		/// <summary>
		/// Get the list of SubqueryParameterInputFromRolePathRoot links to a RolePathObjectTypeRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromRolePathRoot> GetLinksToSubqueryParameterInputCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot sourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromRolePathRoot>(sourceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromRolePathRoot.SourceDomainRoleId);
		}
		#endregion
		#region SubqueryParameterInputFromRolePathRoot instance accessors
		
		/// <summary>
		/// Get any SubqueryParameterInputFromRolePathRoot links between a given SubqueryParameterInput and a RolePathObjectTypeRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromRolePathRoot> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInput source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromRolePathRoot> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromRolePathRoot>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromRolePathRoot> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromRolePathRoot>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromRolePathRoot.ParameterInputDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromRolePathRoot link in links )
			{
				if ( target.Equals(link.Source) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SubqueryParameterInputFromRolePathRoot link between a given SubqueryParameterInputand a RolePathObjectTypeRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromRolePathRoot GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInput source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromRolePathRoot> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromRolePathRoot>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromRolePathRoot.ParameterInputDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromRolePathRoot link in links )
			{
				if ( target.Equals(link.Source) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship SubqueryParameterInputFromPathedRole
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathedRole
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathedRole.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathedRole.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("2dc68a8a-b5b0-4d08-a7cf-de164d81b668")]
	public partial class SubqueryParameterInputFromPathedRole : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SubqueryParameterInputFromPathedRole domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2dc68a8a, 0xb5b0, 0x4d08, 0xa7, 0xcf, 0xde, 0x16, 0x4d, 0x81, 0xb6, 0x68);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SubqueryParameterInputFromPathedRole link in the same Partition as the given SubqueryParameterInput
		/// </summary>
		/// <param name="source">SubqueryParameterInput to use as the source of the relationship.</param>
		/// <param name="target">PathedRole to use as the target of the relationship.</param>
		public SubqueryParameterInputFromPathedRole(SubqueryParameterInput source, PathedRole target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SubqueryParameterInputFromPathedRole.ParameterInputDomainRoleId, source), new DslModeling::RoleAssignment(SubqueryParameterInputFromPathedRole.SourceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubqueryParameterInputFromPathedRole(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubqueryParameterInputFromPathedRole(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubqueryParameterInputFromPathedRole(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubqueryParameterInputFromPathedRole(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ParameterInput domain role code
		
		/// <summary>
		/// ParameterInput domain role Id.
		/// </summary>
		public static readonly global::System.Guid ParameterInputDomainRoleId = new global::System.Guid(0x133ae683, 0xdf06, 0x4c1c, 0xbc, 0x84, 0x10, 0x00, 0x68, 0x7c, 0xd9, 0xb4);
		
		/// <summary>
		/// DomainRole ParameterInput
		/// The pathed role from the containing path passed to a parameter in a single use
		/// of a subquery.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathedRole/ParameterInput.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathedRole/ParameterInput.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "InputFromPathedRole", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathedRole/ParameterInput.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("133ae683-df06-4c1c-bc84-1000687cd9b4")]
		public virtual SubqueryParameterInput ParameterInput
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SubqueryParameterInput)DslModeling::DomainRoleInfo.GetRolePlayer(this, ParameterInputDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ParameterInputDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SubqueryParameterInputCollection of a PathedRole
		/// <summary>
		/// Gets a list of SubqueryParameterInputCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SubqueryParameterInput> GetSubqueryParameterInputCollection(PathedRole element)
		{
			return new DslModeling::LinkedElementCollection<SubqueryParameterInput>(element, SourceDomainRoleId);
		}
		#endregion
		#region Source domain role code
		
		/// <summary>
		/// Source domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainRoleId = new global::System.Guid(0x4c5374b4, 0x0100, 0x4deb, 0x93, 0x10, 0x48, 0x54, 0x37, 0x35, 0x88, 0x76);
		
		/// <summary>
		/// DomainRole Source
		/// The parameter input associated with this pathed role.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathedRole/Source.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathedRole/Source.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SubqueryParameterInputCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathedRole/Source.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("4c5374b4-0100-4deb-9310-485437358876")]
		public virtual PathedRole Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PathedRole)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InputFromPathedRole of a SubqueryParameterInput
		/// <summary>
		/// Gets InputFromPathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static PathedRole GetInputFromPathedRole(SubqueryParameterInput element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ParameterInputDomainRoleId) as PathedRole;
		}
		
		/// <summary>
		/// Sets InputFromPathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetInputFromPathedRole(SubqueryParameterInput element, PathedRole newSource)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ParameterInputDomainRoleId, newSource);
		}
		#endregion
		#region ParameterInput link accessor
		/// <summary>
		/// Get the SubqueryParameterInputFromPathedRole link to a SubqueryParameterInput.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathedRole GetLinkToInputFromPathedRole (global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInput parameterInputInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathedRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathedRole>(parameterInputInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathedRole.ParameterInputDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ParameterInput not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Source link accessor
		/// <summary>
		/// Get the list of SubqueryParameterInputFromPathedRole links to a PathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathedRole> GetLinksToSubqueryParameterInputCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole sourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathedRole>(sourceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathedRole.SourceDomainRoleId);
		}
		#endregion
		#region SubqueryParameterInputFromPathedRole instance accessors
		
		/// <summary>
		/// Get any SubqueryParameterInputFromPathedRole links between a given SubqueryParameterInput and a PathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathedRole> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInput source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathedRole> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathedRole>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathedRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathedRole>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathedRole.ParameterInputDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathedRole link in links )
			{
				if ( target.Equals(link.Source) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SubqueryParameterInputFromPathedRole link between a given SubqueryParameterInputand a PathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathedRole GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInput source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathedRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathedRole>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathedRole.ParameterInputDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathedRole link in links )
			{
				if ( target.Equals(link.Source) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship SubqueryParameterInputFromCalculatedPathValue
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromCalculatedPathValue
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromCalculatedPathValue.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromCalculatedPathValue.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("6d3cf204-b001-4173-87a0-ae668ce95139")]
	public partial class SubqueryParameterInputFromCalculatedPathValue : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SubqueryParameterInputFromCalculatedPathValue domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6d3cf204, 0xb001, 0x4173, 0x87, 0xa0, 0xae, 0x66, 0x8c, 0xe9, 0x51, 0x39);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SubqueryParameterInputFromCalculatedPathValue link in the same Partition as the given SubqueryParameterInput
		/// </summary>
		/// <param name="source">SubqueryParameterInput to use as the source of the relationship.</param>
		/// <param name="target">CalculatedPathValue to use as the target of the relationship.</param>
		public SubqueryParameterInputFromCalculatedPathValue(SubqueryParameterInput source, CalculatedPathValue target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SubqueryParameterInputFromCalculatedPathValue.ParameterInputDomainRoleId, source), new DslModeling::RoleAssignment(SubqueryParameterInputFromCalculatedPathValue.SourceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubqueryParameterInputFromCalculatedPathValue(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubqueryParameterInputFromCalculatedPathValue(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubqueryParameterInputFromCalculatedPathValue(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubqueryParameterInputFromCalculatedPathValue(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ParameterInput domain role code
		
		/// <summary>
		/// ParameterInput domain role Id.
		/// </summary>
		public static readonly global::System.Guid ParameterInputDomainRoleId = new global::System.Guid(0x84211efb, 0x55fa, 0x4c02, 0x8d, 0x2c, 0x56, 0xc2, 0xcf, 0x7f, 0x17, 0x66);
		
		/// <summary>
		/// DomainRole ParameterInput
		/// The calculated value from the containing path passed to a parameter in a single
		/// use of a subquery.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromCalculatedPathValue/ParameterInput.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromCalculatedPathValue/ParameterInput.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "InputFromCalculatedValue", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromCalculatedPathValue/ParameterInput.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("84211efb-55fa-4c02-8d2c-56c2cf7f1766")]
		public virtual SubqueryParameterInput ParameterInput
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SubqueryParameterInput)DslModeling::DomainRoleInfo.GetRolePlayer(this, ParameterInputDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ParameterInputDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SubqueryParameterInputCollection of a CalculatedPathValue
		/// <summary>
		/// Gets a list of SubqueryParameterInputCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SubqueryParameterInput> GetSubqueryParameterInputCollection(CalculatedPathValue element)
		{
			return new DslModeling::LinkedElementCollection<SubqueryParameterInput>(element, SourceDomainRoleId);
		}
		#endregion
		#region Source domain role code
		
		/// <summary>
		/// Source domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainRoleId = new global::System.Guid(0xb8dc86ee, 0xe099, 0x45da, 0x94, 0x98, 0x63, 0x70, 0xb5, 0x9f, 0xf8, 0x85);
		
		/// <summary>
		/// DomainRole Source
		/// The parameter input associated with this calculated value.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromCalculatedPathValue/Source.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromCalculatedPathValue/Source.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SubqueryParameterInputCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromCalculatedPathValue/Source.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b8dc86ee-e099-45da-9498-6370b59ff885")]
		public virtual CalculatedPathValue Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CalculatedPathValue)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InputFromCalculatedValue of a SubqueryParameterInput
		/// <summary>
		/// Gets InputFromCalculatedValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static CalculatedPathValue GetInputFromCalculatedValue(SubqueryParameterInput element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ParameterInputDomainRoleId) as CalculatedPathValue;
		}
		
		/// <summary>
		/// Sets InputFromCalculatedValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetInputFromCalculatedValue(SubqueryParameterInput element, CalculatedPathValue newSource)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ParameterInputDomainRoleId, newSource);
		}
		#endregion
		#region ParameterInput link accessor
		/// <summary>
		/// Get the SubqueryParameterInputFromCalculatedPathValue link to a SubqueryParameterInput.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromCalculatedPathValue GetLinkToInputFromCalculatedValue (global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInput parameterInputInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromCalculatedPathValue> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromCalculatedPathValue>(parameterInputInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromCalculatedPathValue.ParameterInputDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ParameterInput not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Source link accessor
		/// <summary>
		/// Get the list of SubqueryParameterInputFromCalculatedPathValue links to a CalculatedPathValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromCalculatedPathValue> GetLinksToSubqueryParameterInputCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue sourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromCalculatedPathValue>(sourceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromCalculatedPathValue.SourceDomainRoleId);
		}
		#endregion
		#region SubqueryParameterInputFromCalculatedPathValue instance accessors
		
		/// <summary>
		/// Get any SubqueryParameterInputFromCalculatedPathValue links between a given SubqueryParameterInput and a CalculatedPathValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromCalculatedPathValue> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInput source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromCalculatedPathValue> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromCalculatedPathValue>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromCalculatedPathValue> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromCalculatedPathValue>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromCalculatedPathValue.ParameterInputDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromCalculatedPathValue link in links )
			{
				if ( target.Equals(link.Source) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SubqueryParameterInputFromCalculatedPathValue link between a given SubqueryParameterInputand a CalculatedPathValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromCalculatedPathValue GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInput source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromCalculatedPathValue> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromCalculatedPathValue>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromCalculatedPathValue.ParameterInputDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromCalculatedPathValue link in links )
			{
				if ( target.Equals(link.Source) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship SubqueryParameterInputFromPathConstant
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathConstant
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathConstant.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathConstant.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("54fa0553-8003-4d1e-8249-04d299ad1ac6")]
	public partial class SubqueryParameterInputFromPathConstant : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SubqueryParameterInputFromPathConstant domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x54fa0553, 0x8003, 0x4d1e, 0x82, 0x49, 0x04, 0xd2, 0x99, 0xad, 0x1a, 0xc6);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SubqueryParameterInputFromPathConstant link in the same Partition as the given SubqueryParameterInput
		/// </summary>
		/// <param name="source">SubqueryParameterInput to use as the source of the relationship.</param>
		/// <param name="target">PathConstant to use as the target of the relationship.</param>
		public SubqueryParameterInputFromPathConstant(SubqueryParameterInput source, PathConstant target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SubqueryParameterInputFromPathConstant.ParameterInputDomainRoleId, source), new DslModeling::RoleAssignment(SubqueryParameterInputFromPathConstant.SourceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubqueryParameterInputFromPathConstant(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubqueryParameterInputFromPathConstant(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubqueryParameterInputFromPathConstant(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubqueryParameterInputFromPathConstant(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ParameterInput domain role code
		
		/// <summary>
		/// ParameterInput domain role Id.
		/// </summary>
		public static readonly global::System.Guid ParameterInputDomainRoleId = new global::System.Guid(0xf37516ad, 0x44c6, 0x4207, 0x9c, 0xf8, 0x6b, 0xb1, 0xc7, 0xee, 0xd5, 0xf8);
		
		/// <summary>
		/// DomainRole ParameterInput
		/// The constant value passed to a parameter in a single use of a subquery.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathConstant/ParameterInput.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathConstant/ParameterInput.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "InputFromConstant", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathConstant/ParameterInput.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("f37516ad-44c6-4207-9cf8-6bb1c7eed5f8")]
		public virtual SubqueryParameterInput ParameterInput
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SubqueryParameterInput)DslModeling::DomainRoleInfo.GetRolePlayer(this, ParameterInputDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ParameterInputDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SubqueryParameterInput of a PathConstant
		/// <summary>
		/// Gets SubqueryParameterInput.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SubqueryParameterInput GetSubqueryParameterInput(PathConstant element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SourceDomainRoleId) as SubqueryParameterInput;
		}
		
		/// <summary>
		/// Sets SubqueryParameterInput.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSubqueryParameterInput(PathConstant element, SubqueryParameterInput newParameterInput)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SourceDomainRoleId, newParameterInput);
		}
		#endregion
		#region Source domain role code
		
		/// <summary>
		/// Source domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainRoleId = new global::System.Guid(0x1fe58e05, 0x97e8, 0x4a71, 0x9c, 0xae, 0xb8, 0xd1, 0x74, 0xde, 0x14, 0x9e);
		
		/// <summary>
		/// DomainRole Source
		/// The parameter binding that uses this path constant.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathConstant/Source.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathConstant/Source.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SubqueryParameterInput", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathConstant/Source.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("1fe58e05-97e8-4a71-9cae-b8d174de149e")]
		public virtual PathConstant Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PathConstant)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InputFromConstant of a SubqueryParameterInput
		/// <summary>
		/// Gets InputFromConstant.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static PathConstant GetInputFromConstant(SubqueryParameterInput element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ParameterInputDomainRoleId) as PathConstant;
		}
		
		/// <summary>
		/// Sets InputFromConstant.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetInputFromConstant(SubqueryParameterInput element, PathConstant newSource)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ParameterInputDomainRoleId, newSource);
		}
		#endregion
		#region ParameterInput link accessor
		/// <summary>
		/// Get the SubqueryParameterInputFromPathConstant link to a SubqueryParameterInput.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathConstant GetLinkToInputFromConstant (global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInput parameterInputInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathConstant> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathConstant>(parameterInputInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathConstant.ParameterInputDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ParameterInput not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Source link accessor
		/// <summary>
		/// Get the SubqueryParameterInputFromPathConstant link to a PathConstant.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathConstant GetLinkToSubqueryParameterInput (global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathConstant sourceInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathConstant> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathConstant>(sourceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathConstant.SourceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Source not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SubqueryParameterInputFromPathConstant instance accessors
		
		/// <summary>
		/// Get any SubqueryParameterInputFromPathConstant links between a given SubqueryParameterInput and a PathConstant.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathConstant> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInput source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathConstant target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathConstant> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathConstant>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathConstant> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathConstant>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathConstant.ParameterInputDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathConstant link in links )
			{
				if ( target.Equals(link.Source) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SubqueryParameterInputFromPathConstant link between a given SubqueryParameterInputand a PathConstant.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathConstant GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInput source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathConstant target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathConstant> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathConstant>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathConstant.ParameterInputDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathConstant link in links )
			{
				if ( target.Equals(link.Source) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship FactTypeHasDerivationRule
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationRule
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationRule.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationRule.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("bb165f20-d91a-44e3-aed4-687e4c2d6474")]
	public partial class FactTypeHasDerivationRule : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FactTypeHasDerivationRule domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbb165f20, 0xd91a, 0x44e3, 0xae, 0xd4, 0x68, 0x7e, 0x4c, 0x2d, 0x64, 0x74);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FactTypeHasDerivationRule link in the same Partition as the given FactType
		/// </summary>
		/// <param name="source">FactType to use as the source of the relationship.</param>
		/// <param name="target">RoleProjectedDerivationRule to use as the target of the relationship.</param>
		public FactTypeHasDerivationRule(FactType source, RoleProjectedDerivationRule target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FactTypeHasDerivationRule.FactTypeDomainRoleId, source), new DslModeling::RoleAssignment(FactTypeHasDerivationRule.DerivationRuleDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeHasDerivationRule(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeHasDerivationRule(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeHasDerivationRule(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeHasDerivationRule(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region FactType domain role code
		
		/// <summary>
		/// FactType domain role Id.
		/// </summary>
		public static readonly global::System.Guid FactTypeDomainRoleId = new global::System.Guid(0x8991a795, 0xf786, 0x42b6, 0xad, 0xfe, 0x26, 0x45, 0xe4, 0xfc, 0xf9, 0x1e);
		
		/// <summary>
		/// DomainRole FactType
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationRule.FactType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationRule/FactType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationRule/FactType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DerivationRule", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationRule/FactType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("8991a795-f786-42b6-adfe-2645e4fcf91e")]
		public virtual FactType FactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FactType)DslModeling::DomainRoleInfo.GetRolePlayer(this, FactTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FactTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FactType of a RoleProjectedDerivationRule
		/// <summary>
		/// Gets FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FactType GetFactType(RoleProjectedDerivationRule element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DerivationRuleDomainRoleId) as FactType;
		}
		
		/// <summary>
		/// Sets FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFactType(RoleProjectedDerivationRule element, FactType newFactType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DerivationRuleDomainRoleId, newFactType);
		}
		#endregion
		#region DerivationRule domain role code
		
		/// <summary>
		/// DerivationRule domain role Id.
		/// </summary>
		public static readonly global::System.Guid DerivationRuleDomainRoleId = new global::System.Guid(0x5f0e53bf, 0xa6d2, 0x439a, 0x90, 0xb9, 0x46, 0x5a, 0x5e, 0x85, 0xa7, 0xdd);
		
		/// <summary>
		/// DomainRole DerivationRule
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationRule.DerivationRule
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationRule/DerivationRule.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationRule/DerivationRule.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FactType", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationRule/DerivationRule.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("5f0e53bf-a6d2-439a-90b9-465a5e85a7dd")]
		public virtual RoleProjectedDerivationRule DerivationRule
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RoleProjectedDerivationRule)DslModeling::DomainRoleInfo.GetRolePlayer(this, DerivationRuleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DerivationRuleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DerivationRule of a FactType
		/// <summary>
		/// Gets DerivationRule.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static RoleProjectedDerivationRule GetDerivationRule(FactType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FactTypeDomainRoleId) as RoleProjectedDerivationRule;
		}
		
		/// <summary>
		/// Sets DerivationRule.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDerivationRule(FactType element, RoleProjectedDerivationRule newDerivationRule)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FactTypeDomainRoleId, newDerivationRule);
		}
		#endregion
		#region FactType link accessor
		/// <summary>
		/// Get the FactTypeHasDerivationRule link to a FactType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationRule GetLinkToDerivationRule (global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType factTypeInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationRule> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationRule>(factTypeInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationRule.FactTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of FactType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DerivationRule link accessor
		/// <summary>
		/// Get the FactTypeHasDerivationRule link to a RoleProjectedDerivationRule.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationRule GetLinkToFactType (global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRule derivationRuleInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationRule> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationRule>(derivationRuleInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationRule.DerivationRuleDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DerivationRule not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FactTypeHasDerivationRule instance accessors
		
		/// <summary>
		/// Get any FactTypeHasDerivationRule links between a given FactType and a RoleProjectedDerivationRule.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationRule> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRule target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationRule> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationRule>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationRule> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationRule>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationRule.FactTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationRule link in links )
			{
				if ( target.Equals(link.DerivationRule) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FactTypeHasDerivationRule link between a given FactTypeand a RoleProjectedDerivationRule.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationRule GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRule target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationRule> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationRule>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationRule.FactTypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationRule link in links )
			{
				if ( target.Equals(link.DerivationRule) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship FactTypeDerivationRuleHasDerivationNote
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRuleHasDerivationNote
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRuleHasDerivationNote.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRuleHasDerivationNote.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("80352861-b31d-48ee-a752-db34b3244aed")]
	public partial class FactTypeDerivationRuleHasDerivationNote : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FactTypeDerivationRuleHasDerivationNote domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x80352861, 0xb31d, 0x48ee, 0xa7, 0x52, 0xdb, 0x34, 0xb3, 0x24, 0x4a, 0xed);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FactTypeDerivationRuleHasDerivationNote link in the same Partition as the given FactTypeDerivationRule
		/// </summary>
		/// <param name="source">FactTypeDerivationRule to use as the source of the relationship.</param>
		/// <param name="target">DerivationNote to use as the target of the relationship.</param>
		public FactTypeDerivationRuleHasDerivationNote(FactTypeDerivationRule source, DerivationNote target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FactTypeDerivationRuleHasDerivationNote.DerivationRuleDomainRoleId, source), new DslModeling::RoleAssignment(FactTypeDerivationRuleHasDerivationNote.DerivationNoteDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeDerivationRuleHasDerivationNote(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeDerivationRuleHasDerivationNote(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FactTypeDerivationRuleHasDerivationNote(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FactTypeDerivationRuleHasDerivationNote(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DerivationRule domain role code
		
		/// <summary>
		/// DerivationRule domain role Id.
		/// </summary>
		public static readonly global::System.Guid DerivationRuleDomainRoleId = new global::System.Guid(0xa5705890, 0x8370, 0x4a38, 0xb0, 0x72, 0x6f, 0xb6, 0x42, 0x8e, 0x21, 0x0e);
		
		/// <summary>
		/// DomainRole DerivationRule
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRuleHasDerivationNote.DerivationRule
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRuleHasDerivationNote/DerivationRule.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRuleHasDerivationNote/DerivationRule.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DerivationNote", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRuleHasDerivationNote/DerivationRule.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("a5705890-8370-4a38-b072-6fb6428e210e")]
		public virtual FactTypeDerivationRule DerivationRule
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FactTypeDerivationRule)DslModeling::DomainRoleInfo.GetRolePlayer(this, DerivationRuleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DerivationRuleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FactTypeDerivationRule of a DerivationNote
		/// <summary>
		/// Gets FactTypeDerivationRule.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FactTypeDerivationRule GetFactTypeDerivationRule(DerivationNote element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DerivationNoteDomainRoleId) as FactTypeDerivationRule;
		}
		
		/// <summary>
		/// Sets FactTypeDerivationRule.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFactTypeDerivationRule(DerivationNote element, FactTypeDerivationRule newDerivationRule)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DerivationNoteDomainRoleId, newDerivationRule);
		}
		#endregion
		#region DerivationNote domain role code
		
		/// <summary>
		/// DerivationNote domain role Id.
		/// </summary>
		public static readonly global::System.Guid DerivationNoteDomainRoleId = new global::System.Guid(0xd9bb9d89, 0xfa8b, 0x4607, 0xa9, 0x57, 0xb9, 0xdc, 0x78, 0x51, 0x96, 0x74);
		
		/// <summary>
		/// DomainRole DerivationNote
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRuleHasDerivationNote.DerivationNote
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRuleHasDerivationNote/DerivationNote.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRuleHasDerivationNote/DerivationNote.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FactTypeDerivationRule", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRuleHasDerivationNote/DerivationNote.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("d9bb9d89-fa8b-4607-a957-b9dc78519674")]
		public virtual DerivationNote DerivationNote
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DerivationNote)DslModeling::DomainRoleInfo.GetRolePlayer(this, DerivationNoteDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DerivationNoteDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DerivationNote of a FactTypeDerivationRule
		/// <summary>
		/// Gets DerivationNote.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DerivationNote GetDerivationNote(FactTypeDerivationRule element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DerivationRuleDomainRoleId) as DerivationNote;
		}
		
		/// <summary>
		/// Sets DerivationNote.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDerivationNote(FactTypeDerivationRule element, DerivationNote newDerivationNote)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DerivationRuleDomainRoleId, newDerivationNote);
		}
		#endregion
		#region DerivationRule link accessor
		/// <summary>
		/// Get the FactTypeDerivationRuleHasDerivationNote link to a FactTypeDerivationRule.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRuleHasDerivationNote GetLinkToDerivationNote (global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRule derivationRuleInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRuleHasDerivationNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRuleHasDerivationNote>(derivationRuleInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRuleHasDerivationNote.DerivationRuleDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DerivationRule not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DerivationNote link accessor
		/// <summary>
		/// Get the FactTypeDerivationRuleHasDerivationNote link to a DerivationNote.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRuleHasDerivationNote GetLinkToFactTypeDerivationRule (global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivationNote derivationNoteInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRuleHasDerivationNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRuleHasDerivationNote>(derivationNoteInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRuleHasDerivationNote.DerivationNoteDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DerivationNote not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FactTypeDerivationRuleHasDerivationNote instance accessors
		
		/// <summary>
		/// Get any FactTypeDerivationRuleHasDerivationNote links between a given FactTypeDerivationRule and a DerivationNote.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRuleHasDerivationNote> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRule source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivationNote target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRuleHasDerivationNote> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRuleHasDerivationNote>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRuleHasDerivationNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRuleHasDerivationNote>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRuleHasDerivationNote.DerivationRuleDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRuleHasDerivationNote link in links )
			{
				if ( target.Equals(link.DerivationNote) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FactTypeDerivationRuleHasDerivationNote link between a given FactTypeDerivationRuleand a DerivationNote.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRuleHasDerivationNote GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRule source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivationNote target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRuleHasDerivationNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRuleHasDerivationNote>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRuleHasDerivationNote.DerivationRuleDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRuleHasDerivationNote link in links )
			{
				if ( target.Equals(link.DerivationNote) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship RoleSetDerivationProjection
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjection
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjection.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjection.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("029b0f47-fa95-4ed3-848b-239fdbcebaf8")]
	public partial class RoleSetDerivationProjection : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RoleSetDerivationProjection domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x029b0f47, 0xfa95, 0x4ed3, 0x84, 0x8b, 0x23, 0x9f, 0xdb, 0xce, 0xba, 0xf8);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RoleSetDerivationProjection link in the same Partition as the given RoleProjectedDerivationRule
		/// </summary>
		/// <param name="source">RoleProjectedDerivationRule to use as the source of the relationship.</param>
		/// <param name="target">LeadRolePath to use as the target of the relationship.</param>
		public RoleSetDerivationProjection(RoleProjectedDerivationRule source, LeadRolePath target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RoleSetDerivationProjection.DerivationRuleDomainRoleId, source), new DslModeling::RoleAssignment(RoleSetDerivationProjection.RolePathDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RoleSetDerivationProjection(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RoleSetDerivationProjection(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RoleSetDerivationProjection(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RoleSetDerivationProjection(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DerivationRule domain role code
		
		/// <summary>
		/// DerivationRule domain role Id.
		/// </summary>
		public static readonly global::System.Guid DerivationRuleDomainRoleId = new global::System.Guid(0x93bc60f8, 0xa436, 0x406a, 0xb7, 0xf3, 0x12, 0x00, 0x36, 0x0c, 0x34, 0xd9);
		
		/// <summary>
		/// DomainRole DerivationRule
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjection.DerivationRule
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjection/DerivationRule.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjection/DerivationRule.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ProjectedPathComponentCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjection/DerivationRule.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("93bc60f8-a436-406a-b7f3-1200360c34d9")]
		public virtual RoleProjectedDerivationRule DerivationRule
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RoleProjectedDerivationRule)DslModeling::DomainRoleInfo.GetRolePlayer(this, DerivationRuleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DerivationRuleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RoleProjectedDerivationRuleProjectionCollection of a LeadRolePath
		/// <summary>
		/// Gets a list of RoleProjectedDerivationRuleProjectionCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<RoleProjectedDerivationRule> GetRoleProjectedDerivationRuleProjectionCollection(LeadRolePath element)
		{
			return new DslModeling::LinkedElementCollection<RoleProjectedDerivationRule>(element, RolePathDomainRoleId);
		}
		#endregion
		#region RolePath domain role code
		
		/// <summary>
		/// RolePath domain role Id.
		/// </summary>
		public static readonly global::System.Guid RolePathDomainRoleId = new global::System.Guid(0xb92067d1, 0x2dd4, 0x4e80, 0xa6, 0x67, 0xfc, 0xf4, 0x37, 0xc8, 0x4e, 0xf8);
		
		/// <summary>
		/// DomainRole RolePath
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjection.RolePath
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjection/RolePath.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjection/RolePath.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "RoleProjectedDerivationRuleProjectionCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjection/RolePath.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b92067d1-2dd4-4e80-a667-fcf437c84ef8")]
		public virtual LeadRolePath RolePath
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (LeadRolePath)DslModeling::DomainRoleInfo.GetRolePlayer(this, RolePathDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RolePathDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ProjectedPathComponentCollection of a RoleProjectedDerivationRule
		/// <summary>
		/// Gets a list of ProjectedPathComponentCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<LeadRolePath> GetProjectedPathComponentCollection(RoleProjectedDerivationRule element)
		{
			return new DslModeling::LinkedElementCollection<LeadRolePath>(element, DerivationRuleDomainRoleId);
		}
		#endregion
		#region Accessors for roles that this REL plays in other RELs
		#region ProjectedRoleCollection opposite domain role accessor
		/// <summary>
		/// Gets a list of ProjectedRoleCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjection.DerivationProjection
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Role> ProjectedRoleCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<Role>(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjection.DerivationProjectionDomainRoleId);
			}
		}
		#endregion
		#region PartialProjectionError opposite domain role accessor
		/// <summary>
		/// Gets or sets PartialProjectionError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjectionHasPartialProjectionError.DerivationProjection
		/// </summary>
		public virtual PartialRoleSetDerivationProjectionError PartialProjectionError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjectionHasPartialProjectionError.DerivationProjectionDomainRoleId) as PartialRoleSetDerivationProjectionError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjectionHasPartialProjectionError.PartialProjectionErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjectionHasPartialProjectionError.PartialProjectionErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjectionHasPartialProjectionError.DerivationProjectionDomainRoleId, value);
				}
			}
		}
		#endregion
		#endregion
		#region DerivationRule link accessor
		/// <summary>
		/// Get the list of RoleSetDerivationProjection links to a RoleProjectedDerivationRule.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjection> GetLinksToProjectedPathComponentCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRule derivationRuleInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjection>(derivationRuleInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjection.DerivationRuleDomainRoleId);
		}
		#endregion
		#region RolePath link accessor
		/// <summary>
		/// Get the list of RoleSetDerivationProjection links to a LeadRolePath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjection> GetLinksToRoleProjectedDerivationRuleProjectionCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePath rolePathInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjection>(rolePathInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjection.RolePathDomainRoleId);
		}
		#endregion
		#region RoleSetDerivationProjection instance accessors
		
		/// <summary>
		/// Get any RoleSetDerivationProjection links between a given RoleProjectedDerivationRule and a LeadRolePath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjection> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRule source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePath target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjection> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjection>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjection> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjection>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjection.DerivationRuleDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjection link in links )
			{
				if ( target.Equals(link.RolePath) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RoleSetDerivationProjection link between a given RoleProjectedDerivationRuleand a LeadRolePath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjection GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRule source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePath target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjection> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjection>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjection.DerivationRuleDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjection link in links )
			{
				if ( target.Equals(link.RolePath) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship DerivedRoleProjection
	/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjection
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjection.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjection.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("e4e47551-0637-443f-adb0-4be9cad921f0")]
	public partial class DerivedRoleProjection : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DerivedRoleProjection domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe4e47551, 0x0637, 0x443f, 0xad, 0xb0, 0x4b, 0xe9, 0xca, 0xd9, 0x21, 0xf0);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DerivedRoleProjection link in the same Partition as the given RoleSetDerivationProjection
		/// </summary>
		/// <param name="source">RoleSetDerivationProjection to use as the source of the relationship.</param>
		/// <param name="target">Role to use as the target of the relationship.</param>
		public DerivedRoleProjection(RoleSetDerivationProjection source, Role target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DerivedRoleProjection.DerivationProjectionDomainRoleId, source), new DslModeling::RoleAssignment(DerivedRoleProjection.ProjectedRoleDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DerivedRoleProjection(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DerivedRoleProjection(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DerivedRoleProjection(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DerivedRoleProjection(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DerivationProjection domain role code
		
		/// <summary>
		/// DerivationProjection domain role Id.
		/// </summary>
		public static readonly global::System.Guid DerivationProjectionDomainRoleId = new global::System.Guid(0xf0996660, 0x410e, 0x4147, 0xad, 0x3c, 0xea, 0x5c, 0x66, 0x29, 0xdb, 0xb5);
		
		/// <summary>
		/// DomainRole DerivationProjection
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjection.DerivationProjection
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjection/DerivationProjection.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjection/DerivationProjection.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ProjectedRoleCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjection/DerivationProjection.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f0996660-410e-4147-ad3c-ea5c6629dbb5")]
		public virtual RoleSetDerivationProjection DerivationProjection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RoleSetDerivationProjection)DslModeling::DomainRoleInfo.GetRolePlayer(this, DerivationProjectionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DerivationProjectionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DerivationProjectionCollection of a Role
		/// <summary>
		/// Gets a list of DerivationProjectionCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<RoleSetDerivationProjection> GetDerivationProjectionCollection(Role element)
		{
			return new DslModeling::LinkedElementCollection<RoleSetDerivationProjection>(element, ProjectedRoleDomainRoleId);
		}
		#endregion
		#region ProjectedRole domain role code
		
		/// <summary>
		/// ProjectedRole domain role Id.
		/// </summary>
		public static readonly global::System.Guid ProjectedRoleDomainRoleId = new global::System.Guid(0x671f08bd, 0x3497, 0x4b45, 0x98, 0xd2, 0xd4, 0x12, 0x75, 0x0e, 0xbb, 0xbe);
		
		/// <summary>
		/// DomainRole ProjectedRole
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjection.ProjectedRole
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjection/ProjectedRole.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjection/ProjectedRole.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DerivationProjectionCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjection/ProjectedRole.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("671f08bd-3497-4b45-98d2-d412750ebbbe")]
		public virtual Role ProjectedRole
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Role)DslModeling::DomainRoleInfo.GetRolePlayer(this, ProjectedRoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ProjectedRoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ProjectedRoleCollection of a RoleSetDerivationProjection
		/// <summary>
		/// Gets a list of ProjectedRoleCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Role> GetProjectedRoleCollection(RoleSetDerivationProjection element)
		{
			return new DslModeling::LinkedElementCollection<Role>(element, DerivationProjectionDomainRoleId);
		}
		#endregion
		#region IsAutomatic domain property code
		
		/// <summary>
		/// IsAutomatic domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsAutomaticDomainPropertyId = new global::System.Guid(0x694e4b88, 0x2f04, 0x40fb, 0x92, 0x5b, 0x30, 0xb1, 0xe6, 0x30, 0x34, 0x49);
		
		/// <summary>
		/// Gets or sets the value of IsAutomatic domain property.
		/// The projection is automatically attached to a path node with a matching type.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjection/IsAutomatic.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjection/IsAutomatic.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("694e4b88-2f04-40fb-925b-30b1e6303449")]
		public global::System.Boolean IsAutomatic
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return IsAutomaticPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsAutomaticPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DerivedRoleProjection.IsAutomatic domain property.
		/// </summary>
		internal sealed partial class IsAutomaticPropertyHandler : DslModeling::DomainPropertyValueHandler<DerivedRoleProjection, global::System.Boolean>
		{
			private IsAutomaticPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DerivedRoleProjection.IsAutomatic domain property value handler.
			/// </summary>
			public static readonly IsAutomaticPropertyHandler Instance = new IsAutomaticPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DerivedRoleProjection.IsAutomatic domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsAutomaticDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(DerivedRoleProjection element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for IsAutomatic because its Kind is
				// set to CustomStorage. Please provide the GetIsAutomaticValue()
				// method on the domain class.
				return element.GetIsAutomaticValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DerivedRoleProjection element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for IsAutomatic because its Kind is
					// set to CustomStorage. Please provide the SetIsAutomaticValue()
					// method on the domain class.
					element.SetIsAutomaticValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Accessors for roles that this REL plays in other RELs
		#region ProjectedFromPathRoot opposite domain role accessor
		/// <summary>
		/// Gets or sets ProjectedFromPathRoot.
		/// The role path root used to populate the derived fact type for this role in this
		/// projection.
		/// </summary>
		public virtual RolePathObjectTypeRoot ProjectedFromPathRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromRolePathRoot.RoleProjectionDomainRoleId) as RolePathObjectTypeRoot;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromRolePathRoot.RoleProjectionDomainRoleId, value);
			}
		}
		#endregion
		#region ProjectedFromPathedRole opposite domain role accessor
		/// <summary>
		/// Gets or sets ProjectedFromPathedRole.
		/// The pathed role used to populate the derived fact type for this role in this
		/// projection.
		/// </summary>
		public virtual PathedRole ProjectedFromPathedRole
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathedRole.RoleProjectionDomainRoleId) as PathedRole;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathedRole.RoleProjectionDomainRoleId, value);
			}
		}
		#endregion
		#region ProjectedFromCalculatedValue opposite domain role accessor
		/// <summary>
		/// Gets or sets ProjectedFromCalculatedValue.
		/// The calculated value used to populate the derived fact type for this role in
		/// this projection.
		/// </summary>
		public virtual CalculatedPathValue ProjectedFromCalculatedValue
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromCalculatedPathValue.RoleProjectionDomainRoleId) as CalculatedPathValue;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromCalculatedPathValue.RoleProjectionDomainRoleId, value);
			}
		}
		#endregion
		#region ProjectedFromConstant opposite domain role accessor
		/// <summary>
		/// Gets or sets ProjectedFromConstant.
		/// The constant value used to populate this role in the derived fact type.
		/// </summary>
		public virtual PathConstant ProjectedFromConstant
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathConstant.RoleProjectionDomainRoleId) as PathConstant;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathConstant.SourceDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathConstant.SourceDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathConstant.RoleProjectionDomainRoleId, value);
				}
			}
		}
		#endregion
		#region IncompatibleProjectionError opposite domain role accessor
		/// <summary>
		/// Gets or sets IncompatibleProjectionError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError.Projection
		/// </summary>
		public virtual DerivedRoleRequiresCompatibleProjectionError IncompatibleProjectionError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError.ProjectionDomainRoleId) as DerivedRoleRequiresCompatibleProjectionError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError.IncompatibleProjectionErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError.IncompatibleProjectionErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError.ProjectionDomainRoleId, value);
				}
			}
		}
		#endregion
		#endregion
		#region DerivationProjection link accessor
		/// <summary>
		/// Get the list of DerivedRoleProjection links to a RoleSetDerivationProjection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjection> GetLinksToProjectedRoleCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjection derivationProjectionInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjection>(derivationProjectionInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjection.DerivationProjectionDomainRoleId);
		}
		#endregion
		#region ProjectedRole link accessor
		/// <summary>
		/// Get the list of DerivedRoleProjection links to a Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjection> GetLinksToDerivationProjectionCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.Role projectedRoleInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjection>(projectedRoleInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjection.ProjectedRoleDomainRoleId);
		}
		#endregion
		#region DerivedRoleProjection instance accessors
		
		/// <summary>
		/// Get any DerivedRoleProjection links between a given RoleSetDerivationProjection and a Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjection> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjection source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Role target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjection> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjection>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjection> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjection>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjection.DerivationProjectionDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjection link in links )
			{
				if ( target.Equals(link.ProjectedRole) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DerivedRoleProjection link between a given RoleSetDerivationProjectionand a Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjection GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjection source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Role target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjection> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjection>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjection.DerivationProjectionDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjection link in links )
			{
				if ( target.Equals(link.ProjectedRole) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship DerivedRoleProjectedFromRolePathRoot
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromRolePathRoot
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromRolePathRoot.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromRolePathRoot.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("31250f99-9b68-49f9-bf5a-712a0aedfb23")]
	public partial class DerivedRoleProjectedFromRolePathRoot : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DerivedRoleProjectedFromRolePathRoot domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x31250f99, 0x9b68, 0x49f9, 0xbf, 0x5a, 0x71, 0x2a, 0x0a, 0xed, 0xfb, 0x23);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DerivedRoleProjectedFromRolePathRoot link in the same Partition as the given DerivedRoleProjection
		/// </summary>
		/// <param name="source">DerivedRoleProjection to use as the source of the relationship.</param>
		/// <param name="target">RolePathObjectTypeRoot to use as the target of the relationship.</param>
		public DerivedRoleProjectedFromRolePathRoot(DerivedRoleProjection source, RolePathObjectTypeRoot target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DerivedRoleProjectedFromRolePathRoot.RoleProjectionDomainRoleId, source), new DslModeling::RoleAssignment(DerivedRoleProjectedFromRolePathRoot.SourceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DerivedRoleProjectedFromRolePathRoot(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DerivedRoleProjectedFromRolePathRoot(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DerivedRoleProjectedFromRolePathRoot(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DerivedRoleProjectedFromRolePathRoot(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region RoleProjection domain role code
		
		/// <summary>
		/// RoleProjection domain role Id.
		/// </summary>
		public static readonly global::System.Guid RoleProjectionDomainRoleId = new global::System.Guid(0x2494c062, 0x5df1, 0x4b88, 0x8f, 0xa3, 0xc1, 0x09, 0xe8, 0x7c, 0xd5, 0xa5);
		
		/// <summary>
		/// DomainRole RoleProjection
		/// The role path root used to populate the derived fact type for this role in this
		/// projection.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromRolePathRoot/RoleProjection.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromRolePathRoot/RoleProjection.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ProjectedFromPathRoot", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromRolePathRoot/RoleProjection.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("2494c062-5df1-4b88-8fa3-c109e87cd5a5")]
		public virtual DerivedRoleProjection RoleProjection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DerivedRoleProjection)DslModeling::DomainRoleInfo.GetRolePlayer(this, RoleProjectionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RoleProjectionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DerivedRoleProjections of a RolePathObjectTypeRoot
		/// <summary>
		/// Gets a list of DerivedRoleProjections.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DerivedRoleProjection> GetDerivedRoleProjections(RolePathObjectTypeRoot element)
		{
			return new DslModeling::LinkedElementCollection<DerivedRoleProjection>(element, SourceDomainRoleId);
		}
		#endregion
		#region Source domain role code
		
		/// <summary>
		/// Source domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainRoleId = new global::System.Guid(0xba3071d8, 0xf068, 0x4ede, 0xaa, 0x80, 0x86, 0x85, 0xb8, 0x2b, 0x51, 0x6a);
		
		/// <summary>
		/// DomainRole Source
		/// The derived role associated with this role path root.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromRolePathRoot/Source.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromRolePathRoot/Source.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DerivedRoleProjections", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromRolePathRoot/Source.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ba3071d8-f068-4ede-aa80-8685b82b516a")]
		public virtual RolePathObjectTypeRoot Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RolePathObjectTypeRoot)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ProjectedFromPathRoot of a DerivedRoleProjection
		/// <summary>
		/// Gets ProjectedFromPathRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static RolePathObjectTypeRoot GetProjectedFromPathRoot(DerivedRoleProjection element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RoleProjectionDomainRoleId) as RolePathObjectTypeRoot;
		}
		
		/// <summary>
		/// Sets ProjectedFromPathRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetProjectedFromPathRoot(DerivedRoleProjection element, RolePathObjectTypeRoot newSource)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RoleProjectionDomainRoleId, newSource);
		}
		#endregion
		#region RoleProjection link accessor
		/// <summary>
		/// Get the DerivedRoleProjectedFromRolePathRoot link to a DerivedRoleProjection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromRolePathRoot GetLinkToProjectedFromPathRoot (global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjection roleProjectionInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromRolePathRoot> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromRolePathRoot>(roleProjectionInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromRolePathRoot.RoleProjectionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of RoleProjection not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Source link accessor
		/// <summary>
		/// Get the list of DerivedRoleProjectedFromRolePathRoot links to a RolePathObjectTypeRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromRolePathRoot> GetLinksToDerivedRoleProjections ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot sourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromRolePathRoot>(sourceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromRolePathRoot.SourceDomainRoleId);
		}
		#endregion
		#region DerivedRoleProjectedFromRolePathRoot instance accessors
		
		/// <summary>
		/// Get any DerivedRoleProjectedFromRolePathRoot links between a given DerivedRoleProjection and a RolePathObjectTypeRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromRolePathRoot> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjection source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromRolePathRoot> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromRolePathRoot>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromRolePathRoot> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromRolePathRoot>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromRolePathRoot.RoleProjectionDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromRolePathRoot link in links )
			{
				if ( target.Equals(link.Source) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DerivedRoleProjectedFromRolePathRoot link between a given DerivedRoleProjectionand a RolePathObjectTypeRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromRolePathRoot GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjection source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromRolePathRoot> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromRolePathRoot>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromRolePathRoot.RoleProjectionDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromRolePathRoot link in links )
			{
				if ( target.Equals(link.Source) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship DerivedRoleProjectedFromPathedRole
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathedRole
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathedRole.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathedRole.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("16c19d21-b699-45e7-bcb3-62649747f94b")]
	public partial class DerivedRoleProjectedFromPathedRole : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DerivedRoleProjectedFromPathedRole domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x16c19d21, 0xb699, 0x45e7, 0xbc, 0xb3, 0x62, 0x64, 0x97, 0x47, 0xf9, 0x4b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DerivedRoleProjectedFromPathedRole link in the same Partition as the given DerivedRoleProjection
		/// </summary>
		/// <param name="source">DerivedRoleProjection to use as the source of the relationship.</param>
		/// <param name="target">PathedRole to use as the target of the relationship.</param>
		public DerivedRoleProjectedFromPathedRole(DerivedRoleProjection source, PathedRole target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DerivedRoleProjectedFromPathedRole.RoleProjectionDomainRoleId, source), new DslModeling::RoleAssignment(DerivedRoleProjectedFromPathedRole.SourceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DerivedRoleProjectedFromPathedRole(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DerivedRoleProjectedFromPathedRole(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DerivedRoleProjectedFromPathedRole(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DerivedRoleProjectedFromPathedRole(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region RoleProjection domain role code
		
		/// <summary>
		/// RoleProjection domain role Id.
		/// </summary>
		public static readonly global::System.Guid RoleProjectionDomainRoleId = new global::System.Guid(0x4025b3a1, 0x84d7, 0x4d17, 0xb1, 0xec, 0xd3, 0x4f, 0xda, 0xac, 0x5e, 0x51);
		
		/// <summary>
		/// DomainRole RoleProjection
		/// The pathed role used to populate the derived fact type for this role in this
		/// projection.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathedRole/RoleProjection.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathedRole/RoleProjection.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ProjectedFromPathedRole", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathedRole/RoleProjection.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("4025b3a1-84d7-4d17-b1ec-d34fdaac5e51")]
		public virtual DerivedRoleProjection RoleProjection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DerivedRoleProjection)DslModeling::DomainRoleInfo.GetRolePlayer(this, RoleProjectionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RoleProjectionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DerivedRoleProjections of a PathedRole
		/// <summary>
		/// Gets a list of DerivedRoleProjections.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DerivedRoleProjection> GetDerivedRoleProjections(PathedRole element)
		{
			return new DslModeling::LinkedElementCollection<DerivedRoleProjection>(element, SourceDomainRoleId);
		}
		#endregion
		#region Source domain role code
		
		/// <summary>
		/// Source domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainRoleId = new global::System.Guid(0xa13b7d15, 0x8ec9, 0x4775, 0xb9, 0xcb, 0xff, 0x04, 0x1b, 0x86, 0x52, 0xac);
		
		/// <summary>
		/// DomainRole Source
		/// The derived role associated with this pathed role.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathedRole/Source.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathedRole/Source.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DerivedRoleProjections", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathedRole/Source.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a13b7d15-8ec9-4775-b9cb-ff041b8652ac")]
		public virtual PathedRole Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PathedRole)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ProjectedFromPathedRole of a DerivedRoleProjection
		/// <summary>
		/// Gets ProjectedFromPathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static PathedRole GetProjectedFromPathedRole(DerivedRoleProjection element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RoleProjectionDomainRoleId) as PathedRole;
		}
		
		/// <summary>
		/// Sets ProjectedFromPathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetProjectedFromPathedRole(DerivedRoleProjection element, PathedRole newSource)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RoleProjectionDomainRoleId, newSource);
		}
		#endregion
		#region RoleProjection link accessor
		/// <summary>
		/// Get the DerivedRoleProjectedFromPathedRole link to a DerivedRoleProjection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathedRole GetLinkToProjectedFromPathedRole (global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjection roleProjectionInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathedRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathedRole>(roleProjectionInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathedRole.RoleProjectionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of RoleProjection not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Source link accessor
		/// <summary>
		/// Get the list of DerivedRoleProjectedFromPathedRole links to a PathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathedRole> GetLinksToDerivedRoleProjections ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole sourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathedRole>(sourceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathedRole.SourceDomainRoleId);
		}
		#endregion
		#region DerivedRoleProjectedFromPathedRole instance accessors
		
		/// <summary>
		/// Get any DerivedRoleProjectedFromPathedRole links between a given DerivedRoleProjection and a PathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathedRole> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjection source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathedRole> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathedRole>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathedRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathedRole>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathedRole.RoleProjectionDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathedRole link in links )
			{
				if ( target.Equals(link.Source) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DerivedRoleProjectedFromPathedRole link between a given DerivedRoleProjectionand a PathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathedRole GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjection source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathedRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathedRole>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathedRole.RoleProjectionDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathedRole link in links )
			{
				if ( target.Equals(link.Source) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship DerivedRoleProjectedFromCalculatedPathValue
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromCalculatedPathValue
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromCalculatedPathValue.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromCalculatedPathValue.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("37216599-11aa-4d3a-90eb-010d21b7e3ab")]
	public partial class DerivedRoleProjectedFromCalculatedPathValue : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DerivedRoleProjectedFromCalculatedPathValue domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x37216599, 0x11aa, 0x4d3a, 0x90, 0xeb, 0x01, 0x0d, 0x21, 0xb7, 0xe3, 0xab);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DerivedRoleProjectedFromCalculatedPathValue link in the same Partition as the given DerivedRoleProjection
		/// </summary>
		/// <param name="source">DerivedRoleProjection to use as the source of the relationship.</param>
		/// <param name="target">CalculatedPathValue to use as the target of the relationship.</param>
		public DerivedRoleProjectedFromCalculatedPathValue(DerivedRoleProjection source, CalculatedPathValue target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DerivedRoleProjectedFromCalculatedPathValue.RoleProjectionDomainRoleId, source), new DslModeling::RoleAssignment(DerivedRoleProjectedFromCalculatedPathValue.SourceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DerivedRoleProjectedFromCalculatedPathValue(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DerivedRoleProjectedFromCalculatedPathValue(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DerivedRoleProjectedFromCalculatedPathValue(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DerivedRoleProjectedFromCalculatedPathValue(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region RoleProjection domain role code
		
		/// <summary>
		/// RoleProjection domain role Id.
		/// </summary>
		public static readonly global::System.Guid RoleProjectionDomainRoleId = new global::System.Guid(0xdc6c1e96, 0x1d32, 0x4600, 0x87, 0x45, 0x85, 0x49, 0x3c, 0x7c, 0x20, 0x88);
		
		/// <summary>
		/// DomainRole RoleProjection
		/// The calculated value used to populate the derived fact type for this role in
		/// this projection.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromCalculatedPathValue/RoleProjection.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromCalculatedPathValue/RoleProjection.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ProjectedFromCalculatedValue", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromCalculatedPathValue/RoleProjection.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("dc6c1e96-1d32-4600-8745-85493c7c2088")]
		public virtual DerivedRoleProjection RoleProjection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DerivedRoleProjection)DslModeling::DomainRoleInfo.GetRolePlayer(this, RoleProjectionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RoleProjectionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DerivedRoleProjections of a CalculatedPathValue
		/// <summary>
		/// Gets a list of DerivedRoleProjections.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DerivedRoleProjection> GetDerivedRoleProjections(CalculatedPathValue element)
		{
			return new DslModeling::LinkedElementCollection<DerivedRoleProjection>(element, SourceDomainRoleId);
		}
		#endregion
		#region Source domain role code
		
		/// <summary>
		/// Source domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainRoleId = new global::System.Guid(0xae9c159e, 0x6909, 0x46cf, 0x86, 0x35, 0x05, 0x9d, 0xe2, 0xb9, 0xe7, 0xf3);
		
		/// <summary>
		/// DomainRole Source
		/// The derived role associated with this calculated value.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromCalculatedPathValue/Source.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromCalculatedPathValue/Source.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DerivedRoleProjections", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromCalculatedPathValue/Source.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ae9c159e-6909-46cf-8635-059de2b9e7f3")]
		public virtual CalculatedPathValue Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CalculatedPathValue)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ProjectedFromCalculatedValue of a DerivedRoleProjection
		/// <summary>
		/// Gets ProjectedFromCalculatedValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static CalculatedPathValue GetProjectedFromCalculatedValue(DerivedRoleProjection element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RoleProjectionDomainRoleId) as CalculatedPathValue;
		}
		
		/// <summary>
		/// Sets ProjectedFromCalculatedValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetProjectedFromCalculatedValue(DerivedRoleProjection element, CalculatedPathValue newSource)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RoleProjectionDomainRoleId, newSource);
		}
		#endregion
		#region RoleProjection link accessor
		/// <summary>
		/// Get the DerivedRoleProjectedFromCalculatedPathValue link to a DerivedRoleProjection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromCalculatedPathValue GetLinkToProjectedFromCalculatedValue (global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjection roleProjectionInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromCalculatedPathValue> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromCalculatedPathValue>(roleProjectionInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromCalculatedPathValue.RoleProjectionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of RoleProjection not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Source link accessor
		/// <summary>
		/// Get the list of DerivedRoleProjectedFromCalculatedPathValue links to a CalculatedPathValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromCalculatedPathValue> GetLinksToDerivedRoleProjections ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue sourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromCalculatedPathValue>(sourceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromCalculatedPathValue.SourceDomainRoleId);
		}
		#endregion
		#region DerivedRoleProjectedFromCalculatedPathValue instance accessors
		
		/// <summary>
		/// Get any DerivedRoleProjectedFromCalculatedPathValue links between a given DerivedRoleProjection and a CalculatedPathValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromCalculatedPathValue> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjection source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromCalculatedPathValue> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromCalculatedPathValue>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromCalculatedPathValue> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromCalculatedPathValue>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromCalculatedPathValue.RoleProjectionDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromCalculatedPathValue link in links )
			{
				if ( target.Equals(link.Source) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DerivedRoleProjectedFromCalculatedPathValue link between a given DerivedRoleProjectionand a CalculatedPathValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromCalculatedPathValue GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjection source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromCalculatedPathValue> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromCalculatedPathValue>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromCalculatedPathValue.RoleProjectionDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromCalculatedPathValue link in links )
			{
				if ( target.Equals(link.Source) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship DerivedRoleProjectedFromPathConstant
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathConstant
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathConstant.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathConstant.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("205ed2d0-43ce-4141-9a3f-5c33138ad048")]
	public partial class DerivedRoleProjectedFromPathConstant : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DerivedRoleProjectedFromPathConstant domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x205ed2d0, 0x43ce, 0x4141, 0x9a, 0x3f, 0x5c, 0x33, 0x13, 0x8a, 0xd0, 0x48);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DerivedRoleProjectedFromPathConstant link in the same Partition as the given DerivedRoleProjection
		/// </summary>
		/// <param name="source">DerivedRoleProjection to use as the source of the relationship.</param>
		/// <param name="target">PathConstant to use as the target of the relationship.</param>
		public DerivedRoleProjectedFromPathConstant(DerivedRoleProjection source, PathConstant target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DerivedRoleProjectedFromPathConstant.RoleProjectionDomainRoleId, source), new DslModeling::RoleAssignment(DerivedRoleProjectedFromPathConstant.SourceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DerivedRoleProjectedFromPathConstant(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DerivedRoleProjectedFromPathConstant(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DerivedRoleProjectedFromPathConstant(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DerivedRoleProjectedFromPathConstant(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region RoleProjection domain role code
		
		/// <summary>
		/// RoleProjection domain role Id.
		/// </summary>
		public static readonly global::System.Guid RoleProjectionDomainRoleId = new global::System.Guid(0xad816a27, 0xe687, 0x46ec, 0x92, 0x40, 0xf1, 0xc6, 0x9e, 0xdc, 0xf9, 0xdb);
		
		/// <summary>
		/// DomainRole RoleProjection
		/// The constant value used to populate this role in the derived fact type.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathConstant/RoleProjection.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathConstant/RoleProjection.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ProjectedFromConstant", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathConstant/RoleProjection.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("ad816a27-e687-46ec-9240-f1c69edcf9db")]
		public virtual DerivedRoleProjection RoleProjection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DerivedRoleProjection)DslModeling::DomainRoleInfo.GetRolePlayer(this, RoleProjectionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RoleProjectionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DerivedRoleProjection of a PathConstant
		/// <summary>
		/// Gets DerivedRoleProjection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DerivedRoleProjection GetDerivedRoleProjection(PathConstant element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SourceDomainRoleId) as DerivedRoleProjection;
		}
		
		/// <summary>
		/// Sets DerivedRoleProjection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDerivedRoleProjection(PathConstant element, DerivedRoleProjection newRoleProjection)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SourceDomainRoleId, newRoleProjection);
		}
		#endregion
		#region Source domain role code
		
		/// <summary>
		/// Source domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainRoleId = new global::System.Guid(0xf798af86, 0x1e64, 0x4789, 0xa8, 0x40, 0x05, 0xb6, 0x15, 0x40, 0x45, 0x44);
		
		/// <summary>
		/// DomainRole Source
		/// The derived role that uses this path constant.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathConstant/Source.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathConstant/Source.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DerivedRoleProjection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathConstant/Source.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("f798af86-1e64-4789-a840-05b615404544")]
		public virtual PathConstant Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PathConstant)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ProjectedFromConstant of a DerivedRoleProjection
		/// <summary>
		/// Gets ProjectedFromConstant.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static PathConstant GetProjectedFromConstant(DerivedRoleProjection element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RoleProjectionDomainRoleId) as PathConstant;
		}
		
		/// <summary>
		/// Sets ProjectedFromConstant.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetProjectedFromConstant(DerivedRoleProjection element, PathConstant newSource)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RoleProjectionDomainRoleId, newSource);
		}
		#endregion
		#region RoleProjection link accessor
		/// <summary>
		/// Get the DerivedRoleProjectedFromPathConstant link to a DerivedRoleProjection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathConstant GetLinkToProjectedFromConstant (global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjection roleProjectionInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathConstant> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathConstant>(roleProjectionInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathConstant.RoleProjectionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of RoleProjection not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Source link accessor
		/// <summary>
		/// Get the DerivedRoleProjectedFromPathConstant link to a PathConstant.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathConstant GetLinkToDerivedRoleProjection (global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathConstant sourceInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathConstant> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathConstant>(sourceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathConstant.SourceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Source not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DerivedRoleProjectedFromPathConstant instance accessors
		
		/// <summary>
		/// Get any DerivedRoleProjectedFromPathConstant links between a given DerivedRoleProjection and a PathConstant.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathConstant> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjection source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathConstant target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathConstant> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathConstant>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathConstant> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathConstant>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathConstant.RoleProjectionDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathConstant link in links )
			{
				if ( target.Equals(link.Source) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DerivedRoleProjectedFromPathConstant link between a given DerivedRoleProjectionand a PathConstant.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathConstant GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjection source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathConstant target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathConstant> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathConstant>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathConstant.RoleProjectionDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathConstant link in links )
			{
				if ( target.Equals(link.Source) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship RoleDerivesFromPathedRole_Deprecated
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathedRole_Deprecated
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathedRole_Deprecated.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathedRole_Deprecated.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("c57bc0e8-04b7-4a3a-b021-3a6437969762")]
	public partial class RoleDerivesFromPathedRole_Deprecated : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RoleDerivesFromPathedRole_Deprecated domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc57bc0e8, 0x04b7, 0x4a3a, 0xb0, 0x21, 0x3a, 0x64, 0x37, 0x96, 0x97, 0x62);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RoleDerivesFromPathedRole_Deprecated link in the same Partition as the given Role
		/// </summary>
		/// <param name="source">Role to use as the source of the relationship.</param>
		/// <param name="target">PathedRole to use as the target of the relationship.</param>
		public RoleDerivesFromPathedRole_Deprecated(Role source, PathedRole target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RoleDerivesFromPathedRole_Deprecated.RoleDomainRoleId, source), new DslModeling::RoleAssignment(RoleDerivesFromPathedRole_Deprecated.SourceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RoleDerivesFromPathedRole_Deprecated(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RoleDerivesFromPathedRole_Deprecated(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RoleDerivesFromPathedRole_Deprecated(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RoleDerivesFromPathedRole_Deprecated(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Role domain role code
		
		/// <summary>
		/// Role domain role Id.
		/// </summary>
		public static readonly global::System.Guid RoleDomainRoleId = new global::System.Guid(0xfa366136, 0xa169, 0x4509, 0xbb, 0x6a, 0x60, 0x28, 0xe7, 0x88, 0x6a, 0x13);
		
		/// <summary>
		/// DomainRole Role
		/// The pathed role used to populate the derived fact type for this role.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathedRole_Deprecated/Role.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathedRole_Deprecated/Role.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DerivedFromPathedRole", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathedRole_Deprecated/Role.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("fa366136-a169-4509-bb6a-6028e7886a13")]
		public virtual Role Role
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Role)DslModeling::DomainRoleInfo.GetRolePlayer(this, RoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DerivedRoles of a PathedRole
		/// <summary>
		/// Gets a list of DerivedRoles.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Role> GetDerivedRoles(PathedRole element)
		{
			return new DslModeling::LinkedElementCollection<Role>(element, SourceDomainRoleId);
		}
		#endregion
		#region Source domain role code
		
		/// <summary>
		/// Source domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainRoleId = new global::System.Guid(0xe71d53d7, 0xc4a2, 0x4367, 0xa2, 0xf3, 0x5a, 0x27, 0xce, 0x70, 0xdc, 0xe0);
		
		/// <summary>
		/// DomainRole Source
		/// The derived role associated with this pathed role.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathedRole_Deprecated/Source.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathedRole_Deprecated/Source.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DerivedRoles", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathedRole_Deprecated/Source.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e71d53d7-c4a2-4367-a2f3-5a27ce70dce0")]
		public virtual PathedRole Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PathedRole)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DerivedFromPathedRole of a Role
		/// <summary>
		/// Gets DerivedFromPathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static PathedRole GetDerivedFromPathedRole(Role element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RoleDomainRoleId) as PathedRole;
		}
		
		/// <summary>
		/// Sets DerivedFromPathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDerivedFromPathedRole(Role element, PathedRole newSource)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RoleDomainRoleId, newSource);
		}
		#endregion
		#region Role link accessor
		/// <summary>
		/// Get the RoleDerivesFromPathedRole_Deprecated link to a Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathedRole_Deprecated GetLinkToDerivedFromPathedRole (global::ORMSolutions.ORMArchitect.Core.ObjectModel.Role roleInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathedRole_Deprecated> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathedRole_Deprecated>(roleInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathedRole_Deprecated.RoleDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Role not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Source link accessor
		/// <summary>
		/// Get the list of RoleDerivesFromPathedRole_Deprecated links to a PathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathedRole_Deprecated> GetLinksToDerivedRoles ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole sourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathedRole_Deprecated>(sourceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathedRole_Deprecated.SourceDomainRoleId);
		}
		#endregion
		#region RoleDerivesFromPathedRole_Deprecated instance accessors
		
		/// <summary>
		/// Get any RoleDerivesFromPathedRole_Deprecated links between a given Role and a PathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathedRole_Deprecated> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.Role source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathedRole_Deprecated> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathedRole_Deprecated>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathedRole_Deprecated> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathedRole_Deprecated>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathedRole_Deprecated.RoleDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathedRole_Deprecated link in links )
			{
				if ( target.Equals(link.Source) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RoleDerivesFromPathedRole_Deprecated link between a given Roleand a PathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathedRole_Deprecated GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.Role source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathedRole_Deprecated> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathedRole_Deprecated>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathedRole_Deprecated.RoleDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathedRole_Deprecated link in links )
			{
				if ( target.Equals(link.Source) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship RoleDerivesFromCalculatedPathValue_Deprecated
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromCalculatedPathValue_Deprecated
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromCalculatedPathValue_Deprecated.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromCalculatedPathValue_Deprecated.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("a9feb04a-4c32-4576-95c9-500b6b77ca03")]
	public partial class RoleDerivesFromCalculatedPathValue_Deprecated : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RoleDerivesFromCalculatedPathValue_Deprecated domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa9feb04a, 0x4c32, 0x4576, 0x95, 0xc9, 0x50, 0x0b, 0x6b, 0x77, 0xca, 0x03);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RoleDerivesFromCalculatedPathValue_Deprecated link in the same Partition as the given Role
		/// </summary>
		/// <param name="source">Role to use as the source of the relationship.</param>
		/// <param name="target">CalculatedPathValue to use as the target of the relationship.</param>
		public RoleDerivesFromCalculatedPathValue_Deprecated(Role source, CalculatedPathValue target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RoleDerivesFromCalculatedPathValue_Deprecated.RoleDomainRoleId, source), new DslModeling::RoleAssignment(RoleDerivesFromCalculatedPathValue_Deprecated.SourceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RoleDerivesFromCalculatedPathValue_Deprecated(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RoleDerivesFromCalculatedPathValue_Deprecated(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RoleDerivesFromCalculatedPathValue_Deprecated(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RoleDerivesFromCalculatedPathValue_Deprecated(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Role domain role code
		
		/// <summary>
		/// Role domain role Id.
		/// </summary>
		public static readonly global::System.Guid RoleDomainRoleId = new global::System.Guid(0xbaa7caa2, 0xa8c0, 0x49e0, 0x89, 0x65, 0xc3, 0xb8, 0xf1, 0xca, 0x8c, 0x8a);
		
		/// <summary>
		/// DomainRole Role
		/// The calculated value used to populate the derived fact type for this role.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromCalculatedPathValue_Deprecated/Role.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromCalculatedPathValue_Deprecated/Role.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DerivedFromCalculatedValue", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromCalculatedPathValue_Deprecated/Role.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("baa7caa2-a8c0-49e0-8965-c3b8f1ca8c8a")]
		public virtual Role Role
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Role)DslModeling::DomainRoleInfo.GetRolePlayer(this, RoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DerivedRoles of a CalculatedPathValue
		/// <summary>
		/// Gets a list of DerivedRoles.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Role> GetDerivedRoles(CalculatedPathValue element)
		{
			return new DslModeling::LinkedElementCollection<Role>(element, SourceDomainRoleId);
		}
		#endregion
		#region Source domain role code
		
		/// <summary>
		/// Source domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainRoleId = new global::System.Guid(0x0c4a9fec, 0xd093, 0x43b9, 0x89, 0xe5, 0x08, 0xb8, 0x92, 0xfc, 0x44, 0x3b);
		
		/// <summary>
		/// DomainRole Source
		/// The derived role associated with this calculated value.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromCalculatedPathValue_Deprecated/Source.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromCalculatedPathValue_Deprecated/Source.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DerivedRoles", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromCalculatedPathValue_Deprecated/Source.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0c4a9fec-d093-43b9-89e5-08b892fc443b")]
		public virtual CalculatedPathValue Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CalculatedPathValue)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DerivedFromCalculatedValue of a Role
		/// <summary>
		/// Gets DerivedFromCalculatedValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static CalculatedPathValue GetDerivedFromCalculatedValue(Role element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RoleDomainRoleId) as CalculatedPathValue;
		}
		
		/// <summary>
		/// Sets DerivedFromCalculatedValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDerivedFromCalculatedValue(Role element, CalculatedPathValue newSource)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RoleDomainRoleId, newSource);
		}
		#endregion
		#region Role link accessor
		/// <summary>
		/// Get the RoleDerivesFromCalculatedPathValue_Deprecated link to a Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromCalculatedPathValue_Deprecated GetLinkToDerivedFromCalculatedValue (global::ORMSolutions.ORMArchitect.Core.ObjectModel.Role roleInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromCalculatedPathValue_Deprecated> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromCalculatedPathValue_Deprecated>(roleInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromCalculatedPathValue_Deprecated.RoleDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Role not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Source link accessor
		/// <summary>
		/// Get the list of RoleDerivesFromCalculatedPathValue_Deprecated links to a CalculatedPathValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromCalculatedPathValue_Deprecated> GetLinksToDerivedRoles ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue sourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromCalculatedPathValue_Deprecated>(sourceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromCalculatedPathValue_Deprecated.SourceDomainRoleId);
		}
		#endregion
		#region RoleDerivesFromCalculatedPathValue_Deprecated instance accessors
		
		/// <summary>
		/// Get any RoleDerivesFromCalculatedPathValue_Deprecated links between a given Role and a CalculatedPathValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromCalculatedPathValue_Deprecated> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.Role source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromCalculatedPathValue_Deprecated> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromCalculatedPathValue_Deprecated>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromCalculatedPathValue_Deprecated> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromCalculatedPathValue_Deprecated>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromCalculatedPathValue_Deprecated.RoleDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromCalculatedPathValue_Deprecated link in links )
			{
				if ( target.Equals(link.Source) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RoleDerivesFromCalculatedPathValue_Deprecated link between a given Roleand a CalculatedPathValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromCalculatedPathValue_Deprecated GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.Role source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromCalculatedPathValue_Deprecated> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromCalculatedPathValue_Deprecated>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromCalculatedPathValue_Deprecated.RoleDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromCalculatedPathValue_Deprecated link in links )
			{
				if ( target.Equals(link.Source) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship RoleDerivesFromPathConstant_Deprecated
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathConstant_Deprecated
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathConstant_Deprecated.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathConstant_Deprecated.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("1dc37758-2350-4476-883c-5f971ae32b34")]
	public partial class RoleDerivesFromPathConstant_Deprecated : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RoleDerivesFromPathConstant_Deprecated domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1dc37758, 0x2350, 0x4476, 0x88, 0x3c, 0x5f, 0x97, 0x1a, 0xe3, 0x2b, 0x34);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RoleDerivesFromPathConstant_Deprecated link in the same Partition as the given Role
		/// </summary>
		/// <param name="source">Role to use as the source of the relationship.</param>
		/// <param name="target">PathConstant to use as the target of the relationship.</param>
		public RoleDerivesFromPathConstant_Deprecated(Role source, PathConstant target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RoleDerivesFromPathConstant_Deprecated.RoleDomainRoleId, source), new DslModeling::RoleAssignment(RoleDerivesFromPathConstant_Deprecated.SourceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RoleDerivesFromPathConstant_Deprecated(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RoleDerivesFromPathConstant_Deprecated(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RoleDerivesFromPathConstant_Deprecated(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RoleDerivesFromPathConstant_Deprecated(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Role domain role code
		
		/// <summary>
		/// Role domain role Id.
		/// </summary>
		public static readonly global::System.Guid RoleDomainRoleId = new global::System.Guid(0xb4d23a52, 0x418b, 0x429a, 0xb4, 0x25, 0x91, 0x22, 0x2d, 0xa6, 0x1d, 0x9b);
		
		/// <summary>
		/// DomainRole Role
		/// The constant value used to populate this role in the derived fact type.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathConstant_Deprecated/Role.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathConstant_Deprecated/Role.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DerivedFromConstant", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathConstant_Deprecated/Role.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("b4d23a52-418b-429a-b425-91222da61d9b")]
		public virtual Role Role
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Role)DslModeling::DomainRoleInfo.GetRolePlayer(this, RoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DerivedRole of a PathConstant
		/// <summary>
		/// Gets DerivedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Role GetDerivedRole(PathConstant element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SourceDomainRoleId) as Role;
		}
		
		/// <summary>
		/// Sets DerivedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDerivedRole(PathConstant element, Role newRole)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SourceDomainRoleId, newRole);
		}
		#endregion
		#region Source domain role code
		
		/// <summary>
		/// Source domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainRoleId = new global::System.Guid(0x06d66903, 0x36cd, 0x427b, 0x94, 0x73, 0x03, 0xff, 0x46, 0x2b, 0x46, 0x50);
		
		/// <summary>
		/// DomainRole Source
		/// The derived role that uses this path constant.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathConstant_Deprecated/Source.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathConstant_Deprecated/Source.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DerivedRole", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathConstant_Deprecated/Source.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("06d66903-36cd-427b-9473-03ff462b4650")]
		public virtual PathConstant Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PathConstant)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DerivedFromConstant of a Role
		/// <summary>
		/// Gets DerivedFromConstant.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static PathConstant GetDerivedFromConstant(Role element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RoleDomainRoleId) as PathConstant;
		}
		
		/// <summary>
		/// Sets DerivedFromConstant.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDerivedFromConstant(Role element, PathConstant newSource)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RoleDomainRoleId, newSource);
		}
		#endregion
		#region Role link accessor
		/// <summary>
		/// Get the RoleDerivesFromPathConstant_Deprecated link to a Role.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathConstant_Deprecated GetLinkToDerivedFromConstant (global::ORMSolutions.ORMArchitect.Core.ObjectModel.Role roleInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathConstant_Deprecated> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathConstant_Deprecated>(roleInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathConstant_Deprecated.RoleDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Role not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Source link accessor
		/// <summary>
		/// Get the RoleDerivesFromPathConstant_Deprecated link to a PathConstant.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathConstant_Deprecated GetLinkToDerivedRole (global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathConstant sourceInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathConstant_Deprecated> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathConstant_Deprecated>(sourceInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathConstant_Deprecated.SourceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Source not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region RoleDerivesFromPathConstant_Deprecated instance accessors
		
		/// <summary>
		/// Get any RoleDerivesFromPathConstant_Deprecated links between a given Role and a PathConstant.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathConstant_Deprecated> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.Role source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathConstant target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathConstant_Deprecated> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathConstant_Deprecated>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathConstant_Deprecated> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathConstant_Deprecated>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathConstant_Deprecated.RoleDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathConstant_Deprecated link in links )
			{
				if ( target.Equals(link.Source) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RoleDerivesFromPathConstant_Deprecated link between a given Roleand a PathConstant.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathConstant_Deprecated GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.Role source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathConstant target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathConstant_Deprecated> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathConstant_Deprecated>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathConstant_Deprecated.RoleDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleDerivesFromPathConstant_Deprecated link in links )
			{
				if ( target.Equals(link.Source) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship SubtypeHasDerivationRule
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationRule
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationRule.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationRule.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("54240547-ebf8-4235-8c09-bb3e0876511a")]
	public partial class SubtypeHasDerivationRule : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SubtypeHasDerivationRule domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x54240547, 0xebf8, 0x4235, 0x8c, 0x09, 0xbb, 0x3e, 0x08, 0x76, 0x51, 0x1a);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SubtypeHasDerivationRule link in the same Partition as the given ObjectType
		/// </summary>
		/// <param name="source">ObjectType to use as the source of the relationship.</param>
		/// <param name="target">SubtypeDerivationRule to use as the target of the relationship.</param>
		public SubtypeHasDerivationRule(ObjectType source, SubtypeDerivationRule target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SubtypeHasDerivationRule.SubtypeDomainRoleId, source), new DslModeling::RoleAssignment(SubtypeHasDerivationRule.DerivationRuleDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubtypeHasDerivationRule(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubtypeHasDerivationRule(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubtypeHasDerivationRule(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubtypeHasDerivationRule(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Subtype domain role code
		
		/// <summary>
		/// Subtype domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubtypeDomainRoleId = new global::System.Guid(0xeebcaf86, 0x7b3c, 0x4e5b, 0xa4, 0xab, 0xda, 0xce, 0x75, 0x47, 0x94, 0x7f);
		
		/// <summary>
		/// DomainRole Subtype
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationRule.Subtype
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationRule/Subtype.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationRule/Subtype.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DerivationRule", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationRule/Subtype.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("eebcaf86-7b3c-4e5b-a4ab-dace7547947f")]
		public virtual ObjectType Subtype
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectType)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubtypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubtypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Subtype of a SubtypeDerivationRule
		/// <summary>
		/// Gets Subtype.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ObjectType GetSubtype(SubtypeDerivationRule element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DerivationRuleDomainRoleId) as ObjectType;
		}
		
		/// <summary>
		/// Sets Subtype.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSubtype(SubtypeDerivationRule element, ObjectType newSubtype)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DerivationRuleDomainRoleId, newSubtype);
		}
		#endregion
		#region DerivationRule domain role code
		
		/// <summary>
		/// DerivationRule domain role Id.
		/// </summary>
		public static readonly global::System.Guid DerivationRuleDomainRoleId = new global::System.Guid(0x556d13cb, 0x9b64, 0x46d7, 0x8d, 0x2c, 0x31, 0x2d, 0x3f, 0x30, 0xcc, 0x75);
		
		/// <summary>
		/// DomainRole DerivationRule
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationRule.DerivationRule
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationRule/DerivationRule.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationRule/DerivationRule.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Subtype", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationRule/DerivationRule.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("556d13cb-9b64-46d7-8d2c-312d3f30cc75")]
		public virtual SubtypeDerivationRule DerivationRule
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SubtypeDerivationRule)DslModeling::DomainRoleInfo.GetRolePlayer(this, DerivationRuleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DerivationRuleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DerivationRule of a ObjectType
		/// <summary>
		/// Gets DerivationRule.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SubtypeDerivationRule GetDerivationRule(ObjectType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SubtypeDomainRoleId) as SubtypeDerivationRule;
		}
		
		/// <summary>
		/// Sets DerivationRule.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDerivationRule(ObjectType element, SubtypeDerivationRule newDerivationRule)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SubtypeDomainRoleId, newDerivationRule);
		}
		#endregion
		#region Subtype link accessor
		/// <summary>
		/// Get the SubtypeHasDerivationRule link to a ObjectType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationRule GetLinkToDerivationRule (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType subtypeInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationRule> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationRule>(subtypeInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationRule.SubtypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Subtype not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DerivationRule link accessor
		/// <summary>
		/// Get the SubtypeHasDerivationRule link to a SubtypeDerivationRule.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationRule GetLinkToSubtype (global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRule derivationRuleInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationRule> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationRule>(derivationRuleInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationRule.DerivationRuleDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DerivationRule not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SubtypeHasDerivationRule instance accessors
		
		/// <summary>
		/// Get any SubtypeHasDerivationRule links between a given ObjectType and a SubtypeDerivationRule.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationRule> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRule target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationRule> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationRule>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationRule> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationRule>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationRule.SubtypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationRule link in links )
			{
				if ( target.Equals(link.DerivationRule) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SubtypeHasDerivationRule link between a given ObjectTypeand a SubtypeDerivationRule.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationRule GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRule target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationRule> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationRule>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationRule.SubtypeDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationRule link in links )
			{
				if ( target.Equals(link.DerivationRule) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship SubtypeDerivationRuleHasDerivationNote
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRuleHasDerivationNote
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRuleHasDerivationNote.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRuleHasDerivationNote.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("586ee173-c289-4db2-ba8a-dcd9c5c29f5d")]
	public partial class SubtypeDerivationRuleHasDerivationNote : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SubtypeDerivationRuleHasDerivationNote domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x586ee173, 0xc289, 0x4db2, 0xba, 0x8a, 0xdc, 0xd9, 0xc5, 0xc2, 0x9f, 0x5d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SubtypeDerivationRuleHasDerivationNote link in the same Partition as the given SubtypeDerivationRule
		/// </summary>
		/// <param name="source">SubtypeDerivationRule to use as the source of the relationship.</param>
		/// <param name="target">DerivationNote to use as the target of the relationship.</param>
		public SubtypeDerivationRuleHasDerivationNote(SubtypeDerivationRule source, DerivationNote target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SubtypeDerivationRuleHasDerivationNote.DerivationRuleDomainRoleId, source), new DslModeling::RoleAssignment(SubtypeDerivationRuleHasDerivationNote.DerivationNoteDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubtypeDerivationRuleHasDerivationNote(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubtypeDerivationRuleHasDerivationNote(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubtypeDerivationRuleHasDerivationNote(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubtypeDerivationRuleHasDerivationNote(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DerivationRule domain role code
		
		/// <summary>
		/// DerivationRule domain role Id.
		/// </summary>
		public static readonly global::System.Guid DerivationRuleDomainRoleId = new global::System.Guid(0x9a0d4bb7, 0x559f, 0x4cd7, 0x95, 0xb0, 0x0e, 0x23, 0x31, 0x37, 0x7b, 0xd6);
		
		/// <summary>
		/// DomainRole DerivationRule
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRuleHasDerivationNote.DerivationRule
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRuleHasDerivationNote/DerivationRule.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRuleHasDerivationNote/DerivationRule.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DerivationNote", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRuleHasDerivationNote/DerivationRule.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("9a0d4bb7-559f-4cd7-95b0-0e2331377bd6")]
		public virtual SubtypeDerivationRule DerivationRule
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SubtypeDerivationRule)DslModeling::DomainRoleInfo.GetRolePlayer(this, DerivationRuleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DerivationRuleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SubtypeDerivationRule of a DerivationNote
		/// <summary>
		/// Gets SubtypeDerivationRule.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SubtypeDerivationRule GetSubtypeDerivationRule(DerivationNote element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DerivationNoteDomainRoleId) as SubtypeDerivationRule;
		}
		
		/// <summary>
		/// Sets SubtypeDerivationRule.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSubtypeDerivationRule(DerivationNote element, SubtypeDerivationRule newDerivationRule)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DerivationNoteDomainRoleId, newDerivationRule);
		}
		#endregion
		#region DerivationNote domain role code
		
		/// <summary>
		/// DerivationNote domain role Id.
		/// </summary>
		public static readonly global::System.Guid DerivationNoteDomainRoleId = new global::System.Guid(0x962b225e, 0xe9ef, 0x4ba8, 0xb8, 0x2a, 0x1b, 0x63, 0xc7, 0x30, 0x87, 0xd6);
		
		/// <summary>
		/// DomainRole DerivationNote
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRuleHasDerivationNote.DerivationNote
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRuleHasDerivationNote/DerivationNote.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRuleHasDerivationNote/DerivationNote.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SubtypeDerivationRule", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRuleHasDerivationNote/DerivationNote.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("962b225e-e9ef-4ba8-b82a-1b63c73087d6")]
		public virtual DerivationNote DerivationNote
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DerivationNote)DslModeling::DomainRoleInfo.GetRolePlayer(this, DerivationNoteDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DerivationNoteDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DerivationNote of a SubtypeDerivationRule
		/// <summary>
		/// Gets DerivationNote.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DerivationNote GetDerivationNote(SubtypeDerivationRule element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DerivationRuleDomainRoleId) as DerivationNote;
		}
		
		/// <summary>
		/// Sets DerivationNote.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDerivationNote(SubtypeDerivationRule element, DerivationNote newDerivationNote)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DerivationRuleDomainRoleId, newDerivationNote);
		}
		#endregion
		#region DerivationRule link accessor
		/// <summary>
		/// Get the SubtypeDerivationRuleHasDerivationNote link to a SubtypeDerivationRule.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRuleHasDerivationNote GetLinkToDerivationNote (global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRule derivationRuleInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRuleHasDerivationNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRuleHasDerivationNote>(derivationRuleInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRuleHasDerivationNote.DerivationRuleDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DerivationRule not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DerivationNote link accessor
		/// <summary>
		/// Get the SubtypeDerivationRuleHasDerivationNote link to a DerivationNote.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRuleHasDerivationNote GetLinkToSubtypeDerivationRule (global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivationNote derivationNoteInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRuleHasDerivationNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRuleHasDerivationNote>(derivationNoteInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRuleHasDerivationNote.DerivationNoteDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DerivationNote not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SubtypeDerivationRuleHasDerivationNote instance accessors
		
		/// <summary>
		/// Get any SubtypeDerivationRuleHasDerivationNote links between a given SubtypeDerivationRule and a DerivationNote.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRuleHasDerivationNote> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRule source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivationNote target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRuleHasDerivationNote> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRuleHasDerivationNote>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRuleHasDerivationNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRuleHasDerivationNote>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRuleHasDerivationNote.DerivationRuleDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRuleHasDerivationNote link in links )
			{
				if ( target.Equals(link.DerivationNote) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SubtypeDerivationRuleHasDerivationNote link between a given SubtypeDerivationRuleand a DerivationNote.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRuleHasDerivationNote GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRule source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivationNote target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRuleHasDerivationNote> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRuleHasDerivationNote>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRuleHasDerivationNote.DerivationRuleDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRuleHasDerivationNote link in links )
			{
				if ( target.Equals(link.DerivationNote) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship RolePathHasRootObjectTypeError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathHasRootObjectTypeError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathHasRootObjectTypeError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathHasRootObjectTypeError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("c831b1cb-d415-4851-ac42-1266c2149bac")]
	public partial class RolePathHasRootObjectTypeError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RolePathHasRootObjectTypeError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc831b1cb, 0xd415, 0x4851, 0xac, 0x42, 0x12, 0x66, 0xc2, 0x14, 0x9b, 0xac);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RolePathHasRootObjectTypeError link in the same Partition as the given RolePath
		/// </summary>
		/// <param name="source">RolePath to use as the source of the relationship.</param>
		/// <param name="target">PathRequiresRootObjectTypeError to use as the target of the relationship.</param>
		public RolePathHasRootObjectTypeError(RolePath source, PathRequiresRootObjectTypeError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RolePathHasRootObjectTypeError.RolePathDomainRoleId, source), new DslModeling::RoleAssignment(RolePathHasRootObjectTypeError.RootObjectTypeRequiredErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RolePathHasRootObjectTypeError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RolePathHasRootObjectTypeError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RolePathHasRootObjectTypeError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RolePathHasRootObjectTypeError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region RolePath domain role code
		
		/// <summary>
		/// RolePath domain role Id.
		/// </summary>
		public static readonly global::System.Guid RolePathDomainRoleId = new global::System.Guid(0x34867f08, 0xcef6, 0x49f3, 0x91, 0xe4, 0x7f, 0xd1, 0x9a, 0x90, 0x79, 0x93);
		
		/// <summary>
		/// DomainRole RolePath
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathHasRootObjectTypeError.RolePath
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathHasRootObjectTypeError/RolePath.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathHasRootObjectTypeError/RolePath.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "RootObjectTypeRequiredError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathHasRootObjectTypeError/RolePath.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("34867f08-cef6-49f3-91e4-7fd19a907993")]
		public virtual RolePath RolePath
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RolePath)DslModeling::DomainRoleInfo.GetRolePlayer(this, RolePathDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RolePathDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RolePath of a PathRequiresRootObjectTypeError
		/// <summary>
		/// Gets RolePath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static RolePath GetRolePath(PathRequiresRootObjectTypeError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RootObjectTypeRequiredErrorDomainRoleId) as RolePath;
		}
		
		/// <summary>
		/// Sets RolePath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRolePath(PathRequiresRootObjectTypeError element, RolePath newRolePath)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RootObjectTypeRequiredErrorDomainRoleId, newRolePath);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing RolePath domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.RolePath;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.RolePath = (RolePath)value;
			}
		}
		
		#endregion
		#region RootObjectTypeRequiredError domain role code
		
		/// <summary>
		/// RootObjectTypeRequiredError domain role Id.
		/// </summary>
		public static readonly global::System.Guid RootObjectTypeRequiredErrorDomainRoleId = new global::System.Guid(0x377992c2, 0x2e35, 0x42fc, 0xbc, 0x11, 0xcb, 0x62, 0x16, 0x69, 0x12, 0x1e);
		
		/// <summary>
		/// DomainRole RootObjectTypeRequiredError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathHasRootObjectTypeError.RootObjectTypeRequiredError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathHasRootObjectTypeError/RootObjectTypeRequiredError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathHasRootObjectTypeError/RootObjectTypeRequiredError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "RolePath", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathHasRootObjectTypeError/RootObjectTypeRequiredError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("377992c2-2e35-42fc-bc11-cb621669121e")]
		public virtual PathRequiresRootObjectTypeError RootObjectTypeRequiredError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PathRequiresRootObjectTypeError)DslModeling::DomainRoleInfo.GetRolePlayer(this, RootObjectTypeRequiredErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RootObjectTypeRequiredErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RootObjectTypeRequiredError of a RolePath
		/// <summary>
		/// Gets RootObjectTypeRequiredError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static PathRequiresRootObjectTypeError GetRootObjectTypeRequiredError(RolePath element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RolePathDomainRoleId) as PathRequiresRootObjectTypeError;
		}
		
		/// <summary>
		/// Sets RootObjectTypeRequiredError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRootObjectTypeRequiredError(RolePath element, PathRequiresRootObjectTypeError newRootObjectTypeRequiredError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RolePathDomainRoleId, newRootObjectTypeRequiredError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing RootObjectTypeRequiredError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.RootObjectTypeRequiredError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.RootObjectTypeRequiredError = (PathRequiresRootObjectTypeError)value;
			}
		}
		
		#endregion
		#region RolePath link accessor
		/// <summary>
		/// Get the RolePathHasRootObjectTypeError link to a RolePath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathHasRootObjectTypeError GetLinkToRootObjectTypeRequiredError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePath rolePathInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathHasRootObjectTypeError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathHasRootObjectTypeError>(rolePathInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathHasRootObjectTypeError.RolePathDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of RolePath not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region RootObjectTypeRequiredError link accessor
		/// <summary>
		/// Get the RolePathHasRootObjectTypeError link to a PathRequiresRootObjectTypeError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathHasRootObjectTypeError GetLinkToRolePath (global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathRequiresRootObjectTypeError rootObjectTypeRequiredErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathHasRootObjectTypeError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathHasRootObjectTypeError>(rootObjectTypeRequiredErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathHasRootObjectTypeError.RootObjectTypeRequiredErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of RootObjectTypeRequiredError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region RolePathHasRootObjectTypeError instance accessors
		
		/// <summary>
		/// Get any RolePathHasRootObjectTypeError links between a given RolePath and a PathRequiresRootObjectTypeError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathHasRootObjectTypeError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePath source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathRequiresRootObjectTypeError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathHasRootObjectTypeError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathHasRootObjectTypeError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathHasRootObjectTypeError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathHasRootObjectTypeError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathHasRootObjectTypeError.RolePathDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathHasRootObjectTypeError link in links )
			{
				if ( target.Equals(link.RootObjectTypeRequiredError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RolePathHasRootObjectTypeError link between a given RolePathand a PathRequiresRootObjectTypeError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathHasRootObjectTypeError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePath source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathRequiresRootObjectTypeError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathHasRootObjectTypeError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathHasRootObjectTypeError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathHasRootObjectTypeError.RolePathDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathHasRootObjectTypeError link in links )
			{
				if ( target.Equals(link.RootObjectTypeRequiredError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship PathedRoleHasCompatibleJoinRolePlayerError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasCompatibleJoinRolePlayerError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasCompatibleJoinRolePlayerError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasCompatibleJoinRolePlayerError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("a1af8bef-cf30-42ad-82e2-64b944da6367")]
	public partial class PathedRoleHasCompatibleJoinRolePlayerError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// PathedRoleHasCompatibleJoinRolePlayerError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa1af8bef, 0xcf30, 0x42ad, 0x82, 0xe2, 0x64, 0xb9, 0x44, 0xda, 0x63, 0x67);
	
				
		/// <summary>
		/// Constructor
		/// Creates a PathedRoleHasCompatibleJoinRolePlayerError link in the same Partition as the given PathedRole
		/// </summary>
		/// <param name="source">PathedRole to use as the source of the relationship.</param>
		/// <param name="target">JoinedPathRoleRequiresCompatibleRolePlayerError to use as the target of the relationship.</param>
		public PathedRoleHasCompatibleJoinRolePlayerError(PathedRole source, JoinedPathRoleRequiresCompatibleRolePlayerError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(PathedRoleHasCompatibleJoinRolePlayerError.PathedRoleDomainRoleId, source), new DslModeling::RoleAssignment(PathedRoleHasCompatibleJoinRolePlayerError.JoinCompatibilityErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PathedRoleHasCompatibleJoinRolePlayerError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PathedRoleHasCompatibleJoinRolePlayerError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PathedRoleHasCompatibleJoinRolePlayerError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PathedRoleHasCompatibleJoinRolePlayerError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region PathedRole domain role code
		
		/// <summary>
		/// PathedRole domain role Id.
		/// </summary>
		public static readonly global::System.Guid PathedRoleDomainRoleId = new global::System.Guid(0xde925d2e, 0x196a, 0x4fb0, 0x87, 0x59, 0x63, 0x12, 0xfb, 0x6d, 0x08, 0x11);
		
		/// <summary>
		/// DomainRole PathedRole
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasCompatibleJoinRolePlayerError.PathedRole
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasCompatibleJoinRolePlayerError/PathedRole.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasCompatibleJoinRolePlayerError/PathedRole.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "JoinCompatibilityError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasCompatibleJoinRolePlayerError/PathedRole.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("de925d2e-196a-4fb0-8759-6312fb6d0811")]
		public virtual PathedRole PathedRole
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PathedRole)DslModeling::DomainRoleInfo.GetRolePlayer(this, PathedRoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PathedRoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PathedRole of a JoinedPathRoleRequiresCompatibleRolePlayerError
		/// <summary>
		/// Gets PathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static PathedRole GetPathedRole(JoinedPathRoleRequiresCompatibleRolePlayerError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, JoinCompatibilityErrorDomainRoleId) as PathedRole;
		}
		
		/// <summary>
		/// Sets PathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetPathedRole(JoinedPathRoleRequiresCompatibleRolePlayerError element, PathedRole newPathedRole)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, JoinCompatibilityErrorDomainRoleId, newPathedRole);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing PathedRole domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.PathedRole;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.PathedRole = (PathedRole)value;
			}
		}
		
		#endregion
		#region JoinCompatibilityError domain role code
		
		/// <summary>
		/// JoinCompatibilityError domain role Id.
		/// </summary>
		public static readonly global::System.Guid JoinCompatibilityErrorDomainRoleId = new global::System.Guid(0x8cbaf10f, 0x3057, 0x4c6f, 0x94, 0xdd, 0xd7, 0x00, 0x44, 0x6e, 0x4a, 0xb9);
		
		/// <summary>
		/// DomainRole JoinCompatibilityError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasCompatibleJoinRolePlayerError.JoinCompatibilityError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasCompatibleJoinRolePlayerError/JoinCompatibilityError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasCompatibleJoinRolePlayerError/JoinCompatibilityError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "PathedRole", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasCompatibleJoinRolePlayerError/JoinCompatibilityError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("8cbaf10f-3057-4c6f-94dd-d700446e4ab9")]
		public virtual JoinedPathRoleRequiresCompatibleRolePlayerError JoinCompatibilityError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (JoinedPathRoleRequiresCompatibleRolePlayerError)DslModeling::DomainRoleInfo.GetRolePlayer(this, JoinCompatibilityErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, JoinCompatibilityErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access JoinCompatibilityError of a PathedRole
		/// <summary>
		/// Gets JoinCompatibilityError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static JoinedPathRoleRequiresCompatibleRolePlayerError GetJoinCompatibilityError(PathedRole element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PathedRoleDomainRoleId) as JoinedPathRoleRequiresCompatibleRolePlayerError;
		}
		
		/// <summary>
		/// Sets JoinCompatibilityError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetJoinCompatibilityError(PathedRole element, JoinedPathRoleRequiresCompatibleRolePlayerError newJoinCompatibilityError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PathedRoleDomainRoleId, newJoinCompatibilityError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing JoinCompatibilityError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.JoinCompatibilityError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.JoinCompatibilityError = (JoinedPathRoleRequiresCompatibleRolePlayerError)value;
			}
		}
		
		#endregion
		#region PathedRole link accessor
		/// <summary>
		/// Get the PathedRoleHasCompatibleJoinRolePlayerError link to a PathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasCompatibleJoinRolePlayerError GetLinkToJoinCompatibilityError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole pathedRoleInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasCompatibleJoinRolePlayerError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasCompatibleJoinRolePlayerError>(pathedRoleInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasCompatibleJoinRolePlayerError.PathedRoleDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of PathedRole not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region JoinCompatibilityError link accessor
		/// <summary>
		/// Get the PathedRoleHasCompatibleJoinRolePlayerError link to a JoinedPathRoleRequiresCompatibleRolePlayerError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasCompatibleJoinRolePlayerError GetLinkToPathedRole (global::ORMSolutions.ORMArchitect.Core.ObjectModel.JoinedPathRoleRequiresCompatibleRolePlayerError joinCompatibilityErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasCompatibleJoinRolePlayerError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasCompatibleJoinRolePlayerError>(joinCompatibilityErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasCompatibleJoinRolePlayerError.JoinCompatibilityErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of JoinCompatibilityError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region PathedRoleHasCompatibleJoinRolePlayerError instance accessors
		
		/// <summary>
		/// Get any PathedRoleHasCompatibleJoinRolePlayerError links between a given PathedRole and a JoinedPathRoleRequiresCompatibleRolePlayerError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasCompatibleJoinRolePlayerError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.JoinedPathRoleRequiresCompatibleRolePlayerError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasCompatibleJoinRolePlayerError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasCompatibleJoinRolePlayerError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasCompatibleJoinRolePlayerError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasCompatibleJoinRolePlayerError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasCompatibleJoinRolePlayerError.PathedRoleDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasCompatibleJoinRolePlayerError link in links )
			{
				if ( target.Equals(link.JoinCompatibilityError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one PathedRoleHasCompatibleJoinRolePlayerError link between a given PathedRoleand a JoinedPathRoleRequiresCompatibleRolePlayerError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasCompatibleJoinRolePlayerError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.JoinedPathRoleRequiresCompatibleRolePlayerError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasCompatibleJoinRolePlayerError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasCompatibleJoinRolePlayerError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasCompatibleJoinRolePlayerError.PathedRoleDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasCompatibleJoinRolePlayerError link in links )
			{
				if ( target.Equals(link.JoinCompatibilityError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship PathObjectUnifierHasCompatibleObjectTypesError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierHasCompatibleObjectTypesError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierHasCompatibleObjectTypesError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierHasCompatibleObjectTypesError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("83511f80-c376-47e6-a269-c0484ae62e10")]
	public partial class PathObjectUnifierHasCompatibleObjectTypesError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// PathObjectUnifierHasCompatibleObjectTypesError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x83511f80, 0xc376, 0x47e6, 0xa2, 0x69, 0xc0, 0x48, 0x4a, 0xe6, 0x2e, 0x10);
	
				
		/// <summary>
		/// Constructor
		/// Creates a PathObjectUnifierHasCompatibleObjectTypesError link in the same Partition as the given PathObjectUnifier
		/// </summary>
		/// <param name="source">PathObjectUnifier to use as the source of the relationship.</param>
		/// <param name="target">PathObjectUnifierRequiresCompatibleObjectTypesError to use as the target of the relationship.</param>
		public PathObjectUnifierHasCompatibleObjectTypesError(PathObjectUnifier source, PathObjectUnifierRequiresCompatibleObjectTypesError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(PathObjectUnifierHasCompatibleObjectTypesError.ObjectUnifierDomainRoleId, source), new DslModeling::RoleAssignment(PathObjectUnifierHasCompatibleObjectTypesError.CompatibilityErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PathObjectUnifierHasCompatibleObjectTypesError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PathObjectUnifierHasCompatibleObjectTypesError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PathObjectUnifierHasCompatibleObjectTypesError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PathObjectUnifierHasCompatibleObjectTypesError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ObjectUnifier domain role code
		
		/// <summary>
		/// ObjectUnifier domain role Id.
		/// </summary>
		public static readonly global::System.Guid ObjectUnifierDomainRoleId = new global::System.Guid(0x13ce0a9c, 0x613d, 0x4525, 0xa5, 0xb5, 0x3c, 0x4b, 0x37, 0x42, 0x18, 0xb0);
		
		/// <summary>
		/// DomainRole ObjectUnifier
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierHasCompatibleObjectTypesError.ObjectUnifier
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierHasCompatibleObjectTypesError/ObjectUnifier.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierHasCompatibleObjectTypesError/ObjectUnifier.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "CompatibilityError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierHasCompatibleObjectTypesError/ObjectUnifier.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("13ce0a9c-613d-4525-a5b5-3c4b374218b0")]
		public virtual PathObjectUnifier ObjectUnifier
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PathObjectUnifier)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjectUnifierDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjectUnifierDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ObjectUnifier of a PathObjectUnifierRequiresCompatibleObjectTypesError
		/// <summary>
		/// Gets ObjectUnifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static PathObjectUnifier GetObjectUnifier(PathObjectUnifierRequiresCompatibleObjectTypesError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CompatibilityErrorDomainRoleId) as PathObjectUnifier;
		}
		
		/// <summary>
		/// Sets ObjectUnifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetObjectUnifier(PathObjectUnifierRequiresCompatibleObjectTypesError element, PathObjectUnifier newObjectUnifier)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CompatibilityErrorDomainRoleId, newObjectUnifier);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing ObjectUnifier domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ObjectUnifier;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ObjectUnifier = (PathObjectUnifier)value;
			}
		}
		
		#endregion
		#region CompatibilityError domain role code
		
		/// <summary>
		/// CompatibilityError domain role Id.
		/// </summary>
		public static readonly global::System.Guid CompatibilityErrorDomainRoleId = new global::System.Guid(0x8cb7baf7, 0x1855, 0x4e26, 0xb6, 0xb2, 0xc4, 0xaa, 0x8c, 0xbc, 0xef, 0xa9);
		
		/// <summary>
		/// DomainRole CompatibilityError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierHasCompatibleObjectTypesError.CompatibilityError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierHasCompatibleObjectTypesError/CompatibilityError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierHasCompatibleObjectTypesError/CompatibilityError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ObjectUnifier", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierHasCompatibleObjectTypesError/CompatibilityError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("8cb7baf7-1855-4e26-b6b2-c4aa8cbcefa9")]
		public virtual PathObjectUnifierRequiresCompatibleObjectTypesError CompatibilityError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PathObjectUnifierRequiresCompatibleObjectTypesError)DslModeling::DomainRoleInfo.GetRolePlayer(this, CompatibilityErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CompatibilityErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CompatibilityError of a PathObjectUnifier
		/// <summary>
		/// Gets CompatibilityError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static PathObjectUnifierRequiresCompatibleObjectTypesError GetCompatibilityError(PathObjectUnifier element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ObjectUnifierDomainRoleId) as PathObjectUnifierRequiresCompatibleObjectTypesError;
		}
		
		/// <summary>
		/// Sets CompatibilityError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetCompatibilityError(PathObjectUnifier element, PathObjectUnifierRequiresCompatibleObjectTypesError newCompatibilityError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ObjectUnifierDomainRoleId, newCompatibilityError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing CompatibilityError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.CompatibilityError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.CompatibilityError = (PathObjectUnifierRequiresCompatibleObjectTypesError)value;
			}
		}
		
		#endregion
		#region ObjectUnifier link accessor
		/// <summary>
		/// Get the PathObjectUnifierHasCompatibleObjectTypesError link to a PathObjectUnifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierHasCompatibleObjectTypesError GetLinkToCompatibilityError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifier objectUnifierInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierHasCompatibleObjectTypesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierHasCompatibleObjectTypesError>(objectUnifierInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierHasCompatibleObjectTypesError.ObjectUnifierDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ObjectUnifier not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CompatibilityError link accessor
		/// <summary>
		/// Get the PathObjectUnifierHasCompatibleObjectTypesError link to a PathObjectUnifierRequiresCompatibleObjectTypesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierHasCompatibleObjectTypesError GetLinkToObjectUnifier (global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierRequiresCompatibleObjectTypesError compatibilityErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierHasCompatibleObjectTypesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierHasCompatibleObjectTypesError>(compatibilityErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierHasCompatibleObjectTypesError.CompatibilityErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CompatibilityError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region PathObjectUnifierHasCompatibleObjectTypesError instance accessors
		
		/// <summary>
		/// Get any PathObjectUnifierHasCompatibleObjectTypesError links between a given PathObjectUnifier and a PathObjectUnifierRequiresCompatibleObjectTypesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierHasCompatibleObjectTypesError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifier source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierRequiresCompatibleObjectTypesError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierHasCompatibleObjectTypesError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierHasCompatibleObjectTypesError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierHasCompatibleObjectTypesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierHasCompatibleObjectTypesError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierHasCompatibleObjectTypesError.ObjectUnifierDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierHasCompatibleObjectTypesError link in links )
			{
				if ( target.Equals(link.CompatibilityError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one PathObjectUnifierHasCompatibleObjectTypesError link between a given PathObjectUnifierand a PathObjectUnifierRequiresCompatibleObjectTypesError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierHasCompatibleObjectTypesError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifier source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierRequiresCompatibleObjectTypesError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierHasCompatibleObjectTypesError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierHasCompatibleObjectTypesError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierHasCompatibleObjectTypesError.ObjectUnifierDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierHasCompatibleObjectTypesError link in links )
			{
				if ( target.Equals(link.CompatibilityError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship PathedRoleHasSameFactTypeFollowsJoinError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasSameFactTypeFollowsJoinError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasSameFactTypeFollowsJoinError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasSameFactTypeFollowsJoinError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("74d91e98-eff2-4be7-93db-1bc0259eae3e")]
	public partial class PathedRoleHasSameFactTypeFollowsJoinError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// PathedRoleHasSameFactTypeFollowsJoinError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x74d91e98, 0xeff2, 0x4be7, 0x93, 0xdb, 0x1b, 0xc0, 0x25, 0x9e, 0xae, 0x3e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a PathedRoleHasSameFactTypeFollowsJoinError link in the same Partition as the given PathedRole
		/// </summary>
		/// <param name="source">PathedRole to use as the source of the relationship.</param>
		/// <param name="target">PathSameFactTypeRoleFollowsJoinError to use as the target of the relationship.</param>
		public PathedRoleHasSameFactTypeFollowsJoinError(PathedRole source, PathSameFactTypeRoleFollowsJoinError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(PathedRoleHasSameFactTypeFollowsJoinError.PathedRoleDomainRoleId, source), new DslModeling::RoleAssignment(PathedRoleHasSameFactTypeFollowsJoinError.SameFactTypeRoleFollowsJoinErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PathedRoleHasSameFactTypeFollowsJoinError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PathedRoleHasSameFactTypeFollowsJoinError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PathedRoleHasSameFactTypeFollowsJoinError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PathedRoleHasSameFactTypeFollowsJoinError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region PathedRole domain role code
		
		/// <summary>
		/// PathedRole domain role Id.
		/// </summary>
		public static readonly global::System.Guid PathedRoleDomainRoleId = new global::System.Guid(0x7ec398b9, 0x09e3, 0x4efd, 0x91, 0xdb, 0x5d, 0x32, 0x2f, 0x7b, 0x12, 0xb4);
		
		/// <summary>
		/// DomainRole PathedRole
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasSameFactTypeFollowsJoinError.PathedRole
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasSameFactTypeFollowsJoinError/PathedRole.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasSameFactTypeFollowsJoinError/PathedRole.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "SameFactTypeRoleWithoutJoinError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasSameFactTypeFollowsJoinError/PathedRole.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("7ec398b9-09e3-4efd-91db-5d322f7b12b4")]
		public virtual PathedRole PathedRole
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PathedRole)DslModeling::DomainRoleInfo.GetRolePlayer(this, PathedRoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PathedRoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PathedRole of a PathSameFactTypeRoleFollowsJoinError
		/// <summary>
		/// Gets PathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static PathedRole GetPathedRole(PathSameFactTypeRoleFollowsJoinError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SameFactTypeRoleFollowsJoinErrorDomainRoleId) as PathedRole;
		}
		
		/// <summary>
		/// Sets PathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetPathedRole(PathSameFactTypeRoleFollowsJoinError element, PathedRole newPathedRole)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SameFactTypeRoleFollowsJoinErrorDomainRoleId, newPathedRole);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing PathedRole domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.PathedRole;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.PathedRole = (PathedRole)value;
			}
		}
		
		#endregion
		#region SameFactTypeRoleFollowsJoinError domain role code
		
		/// <summary>
		/// SameFactTypeRoleFollowsJoinError domain role Id.
		/// </summary>
		public static readonly global::System.Guid SameFactTypeRoleFollowsJoinErrorDomainRoleId = new global::System.Guid(0x7768fb17, 0x4181, 0x466b, 0xa8, 0x8e, 0x85, 0xae, 0x07, 0x7a, 0x88, 0x92);
		
		/// <summary>
		/// DomainRole SameFactTypeRoleFollowsJoinError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasSameFactTypeFollowsJoinError.SameFactTypeRoleFollowsJoinError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasSameFactTypeFollowsJoinError/SameFactTypeRoleFollowsJoinError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasSameFactTypeFollowsJoinError/SameFactTypeRoleFollowsJoinError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "PathedRole", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasSameFactTypeFollowsJoinError/SameFactTypeRoleFollowsJoinError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("7768fb17-4181-466b-a88e-85ae077a8892")]
		public virtual PathSameFactTypeRoleFollowsJoinError SameFactTypeRoleFollowsJoinError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PathSameFactTypeRoleFollowsJoinError)DslModeling::DomainRoleInfo.GetRolePlayer(this, SameFactTypeRoleFollowsJoinErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SameFactTypeRoleFollowsJoinErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SameFactTypeRoleWithoutJoinError of a PathedRole
		/// <summary>
		/// Gets SameFactTypeRoleWithoutJoinError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static PathSameFactTypeRoleFollowsJoinError GetSameFactTypeRoleWithoutJoinError(PathedRole element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PathedRoleDomainRoleId) as PathSameFactTypeRoleFollowsJoinError;
		}
		
		/// <summary>
		/// Sets SameFactTypeRoleWithoutJoinError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSameFactTypeRoleWithoutJoinError(PathedRole element, PathSameFactTypeRoleFollowsJoinError newSameFactTypeRoleFollowsJoinError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PathedRoleDomainRoleId, newSameFactTypeRoleFollowsJoinError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing SameFactTypeRoleFollowsJoinError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.SameFactTypeRoleFollowsJoinError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.SameFactTypeRoleFollowsJoinError = (PathSameFactTypeRoleFollowsJoinError)value;
			}
		}
		
		#endregion
		#region PathedRole link accessor
		/// <summary>
		/// Get the PathedRoleHasSameFactTypeFollowsJoinError link to a PathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasSameFactTypeFollowsJoinError GetLinkToSameFactTypeRoleWithoutJoinError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole pathedRoleInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasSameFactTypeFollowsJoinError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasSameFactTypeFollowsJoinError>(pathedRoleInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasSameFactTypeFollowsJoinError.PathedRoleDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of PathedRole not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SameFactTypeRoleFollowsJoinError link accessor
		/// <summary>
		/// Get the PathedRoleHasSameFactTypeFollowsJoinError link to a PathSameFactTypeRoleFollowsJoinError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasSameFactTypeFollowsJoinError GetLinkToPathedRole (global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathSameFactTypeRoleFollowsJoinError sameFactTypeRoleFollowsJoinErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasSameFactTypeFollowsJoinError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasSameFactTypeFollowsJoinError>(sameFactTypeRoleFollowsJoinErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasSameFactTypeFollowsJoinError.SameFactTypeRoleFollowsJoinErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SameFactTypeRoleFollowsJoinError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region PathedRoleHasSameFactTypeFollowsJoinError instance accessors
		
		/// <summary>
		/// Get any PathedRoleHasSameFactTypeFollowsJoinError links between a given PathedRole and a PathSameFactTypeRoleFollowsJoinError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasSameFactTypeFollowsJoinError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathSameFactTypeRoleFollowsJoinError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasSameFactTypeFollowsJoinError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasSameFactTypeFollowsJoinError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasSameFactTypeFollowsJoinError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasSameFactTypeFollowsJoinError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasSameFactTypeFollowsJoinError.PathedRoleDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasSameFactTypeFollowsJoinError link in links )
			{
				if ( target.Equals(link.SameFactTypeRoleFollowsJoinError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one PathedRoleHasSameFactTypeFollowsJoinError link between a given PathedRoleand a PathSameFactTypeRoleFollowsJoinError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasSameFactTypeFollowsJoinError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathSameFactTypeRoleFollowsJoinError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasSameFactTypeFollowsJoinError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasSameFactTypeFollowsJoinError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasSameFactTypeFollowsJoinError.PathedRoleDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasSameFactTypeFollowsJoinError link in links )
			{
				if ( target.Equals(link.SameFactTypeRoleFollowsJoinError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship PathedRoleHasMandatoryOuterJoinError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasMandatoryOuterJoinError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasMandatoryOuterJoinError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasMandatoryOuterJoinError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("b72c5e98-ec61-48fe-9717-889465c417fa")]
	public partial class PathedRoleHasMandatoryOuterJoinError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// PathedRoleHasMandatoryOuterJoinError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb72c5e98, 0xec61, 0x48fe, 0x97, 0x17, 0x88, 0x94, 0x65, 0xc4, 0x17, 0xfa);
	
				
		/// <summary>
		/// Constructor
		/// Creates a PathedRoleHasMandatoryOuterJoinError link in the same Partition as the given PathedRole
		/// </summary>
		/// <param name="source">PathedRole to use as the source of the relationship.</param>
		/// <param name="target">PathOuterJoinRequiresOptionalRoleError to use as the target of the relationship.</param>
		public PathedRoleHasMandatoryOuterJoinError(PathedRole source, PathOuterJoinRequiresOptionalRoleError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(PathedRoleHasMandatoryOuterJoinError.PathedRoleDomainRoleId, source), new DslModeling::RoleAssignment(PathedRoleHasMandatoryOuterJoinError.MandatoryOuterJoinErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PathedRoleHasMandatoryOuterJoinError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PathedRoleHasMandatoryOuterJoinError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PathedRoleHasMandatoryOuterJoinError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PathedRoleHasMandatoryOuterJoinError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region PathedRole domain role code
		
		/// <summary>
		/// PathedRole domain role Id.
		/// </summary>
		public static readonly global::System.Guid PathedRoleDomainRoleId = new global::System.Guid(0x87de6b3e, 0x0035, 0x4166, 0x8d, 0xb2, 0xe1, 0x44, 0xf9, 0xfc, 0xd4, 0xbe);
		
		/// <summary>
		/// DomainRole PathedRole
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasMandatoryOuterJoinError.PathedRole
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasMandatoryOuterJoinError/PathedRole.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasMandatoryOuterJoinError/PathedRole.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "MandatoryOuterJoinError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasMandatoryOuterJoinError/PathedRole.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("87de6b3e-0035-4166-8db2-e144f9fcd4be")]
		public virtual PathedRole PathedRole
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PathedRole)DslModeling::DomainRoleInfo.GetRolePlayer(this, PathedRoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PathedRoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PathedRole of a PathOuterJoinRequiresOptionalRoleError
		/// <summary>
		/// Gets PathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static PathedRole GetPathedRole(PathOuterJoinRequiresOptionalRoleError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, MandatoryOuterJoinErrorDomainRoleId) as PathedRole;
		}
		
		/// <summary>
		/// Sets PathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetPathedRole(PathOuterJoinRequiresOptionalRoleError element, PathedRole newPathedRole)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, MandatoryOuterJoinErrorDomainRoleId, newPathedRole);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing PathedRole domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.PathedRole;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.PathedRole = (PathedRole)value;
			}
		}
		
		#endregion
		#region MandatoryOuterJoinError domain role code
		
		/// <summary>
		/// MandatoryOuterJoinError domain role Id.
		/// </summary>
		public static readonly global::System.Guid MandatoryOuterJoinErrorDomainRoleId = new global::System.Guid(0x944665cb, 0x08c2, 0x42cb, 0x97, 0x49, 0xc7, 0xb2, 0xd7, 0x38, 0xe5, 0xde);
		
		/// <summary>
		/// DomainRole MandatoryOuterJoinError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasMandatoryOuterJoinError.MandatoryOuterJoinError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasMandatoryOuterJoinError/MandatoryOuterJoinError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasMandatoryOuterJoinError/MandatoryOuterJoinError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "PathedRole", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasMandatoryOuterJoinError/MandatoryOuterJoinError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("944665cb-08c2-42cb-9749-c7b2d738e5de")]
		public virtual PathOuterJoinRequiresOptionalRoleError MandatoryOuterJoinError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PathOuterJoinRequiresOptionalRoleError)DslModeling::DomainRoleInfo.GetRolePlayer(this, MandatoryOuterJoinErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MandatoryOuterJoinErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MandatoryOuterJoinError of a PathedRole
		/// <summary>
		/// Gets MandatoryOuterJoinError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static PathOuterJoinRequiresOptionalRoleError GetMandatoryOuterJoinError(PathedRole element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PathedRoleDomainRoleId) as PathOuterJoinRequiresOptionalRoleError;
		}
		
		/// <summary>
		/// Sets MandatoryOuterJoinError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetMandatoryOuterJoinError(PathedRole element, PathOuterJoinRequiresOptionalRoleError newMandatoryOuterJoinError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PathedRoleDomainRoleId, newMandatoryOuterJoinError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing MandatoryOuterJoinError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.MandatoryOuterJoinError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.MandatoryOuterJoinError = (PathOuterJoinRequiresOptionalRoleError)value;
			}
		}
		
		#endregion
		#region PathedRole link accessor
		/// <summary>
		/// Get the PathedRoleHasMandatoryOuterJoinError link to a PathedRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasMandatoryOuterJoinError GetLinkToMandatoryOuterJoinError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole pathedRoleInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasMandatoryOuterJoinError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasMandatoryOuterJoinError>(pathedRoleInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasMandatoryOuterJoinError.PathedRoleDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of PathedRole not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MandatoryOuterJoinError link accessor
		/// <summary>
		/// Get the PathedRoleHasMandatoryOuterJoinError link to a PathOuterJoinRequiresOptionalRoleError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasMandatoryOuterJoinError GetLinkToPathedRole (global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathOuterJoinRequiresOptionalRoleError mandatoryOuterJoinErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasMandatoryOuterJoinError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasMandatoryOuterJoinError>(mandatoryOuterJoinErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasMandatoryOuterJoinError.MandatoryOuterJoinErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of MandatoryOuterJoinError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region PathedRoleHasMandatoryOuterJoinError instance accessors
		
		/// <summary>
		/// Get any PathedRoleHasMandatoryOuterJoinError links between a given PathedRole and a PathOuterJoinRequiresOptionalRoleError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasMandatoryOuterJoinError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathOuterJoinRequiresOptionalRoleError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasMandatoryOuterJoinError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasMandatoryOuterJoinError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasMandatoryOuterJoinError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasMandatoryOuterJoinError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasMandatoryOuterJoinError.PathedRoleDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasMandatoryOuterJoinError link in links )
			{
				if ( target.Equals(link.MandatoryOuterJoinError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one PathedRoleHasMandatoryOuterJoinError link between a given PathedRoleand a PathOuterJoinRequiresOptionalRoleError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasMandatoryOuterJoinError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathOuterJoinRequiresOptionalRoleError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasMandatoryOuterJoinError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasMandatoryOuterJoinError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasMandatoryOuterJoinError.PathedRoleDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasMandatoryOuterJoinError link in links )
			{
				if ( target.Equals(link.MandatoryOuterJoinError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship CalculatedPathValueHasFunctionRequiredError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasFunctionRequiredError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasFunctionRequiredError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasFunctionRequiredError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("6dd2fae5-bb57-4332-a343-aeffd2e4b3b4")]
	public partial class CalculatedPathValueHasFunctionRequiredError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CalculatedPathValueHasFunctionRequiredError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6dd2fae5, 0xbb57, 0x4332, 0xa3, 0x43, 0xae, 0xff, 0xd2, 0xe4, 0xb3, 0xb4);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CalculatedPathValueHasFunctionRequiredError link in the same Partition as the given CalculatedPathValue
		/// </summary>
		/// <param name="source">CalculatedPathValue to use as the source of the relationship.</param>
		/// <param name="target">CalculatedPathValueRequiresFunctionError to use as the target of the relationship.</param>
		public CalculatedPathValueHasFunctionRequiredError(CalculatedPathValue source, CalculatedPathValueRequiresFunctionError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CalculatedPathValueHasFunctionRequiredError.CalculatedPathValueDomainRoleId, source), new DslModeling::RoleAssignment(CalculatedPathValueHasFunctionRequiredError.FunctionRequiredErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CalculatedPathValueHasFunctionRequiredError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CalculatedPathValueHasFunctionRequiredError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CalculatedPathValueHasFunctionRequiredError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CalculatedPathValueHasFunctionRequiredError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region CalculatedPathValue domain role code
		
		/// <summary>
		/// CalculatedPathValue domain role Id.
		/// </summary>
		public static readonly global::System.Guid CalculatedPathValueDomainRoleId = new global::System.Guid(0x922c4d43, 0x974a, 0x4b32, 0xb8, 0x71, 0xf7, 0xfe, 0x81, 0x3f, 0xff, 0x3b);
		
		/// <summary>
		/// DomainRole CalculatedPathValue
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasFunctionRequiredError.CalculatedPathValue
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasFunctionRequiredError/CalculatedPathValue.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasFunctionRequiredError/CalculatedPathValue.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "FunctionRequiredError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasFunctionRequiredError/CalculatedPathValue.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("922c4d43-974a-4b32-b871-f7fe813fff3b")]
		public virtual CalculatedPathValue CalculatedPathValue
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CalculatedPathValue)DslModeling::DomainRoleInfo.GetRolePlayer(this, CalculatedPathValueDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CalculatedPathValueDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CalculatedPathValue of a CalculatedPathValueRequiresFunctionError
		/// <summary>
		/// Gets CalculatedPathValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static CalculatedPathValue GetCalculatedPathValue(CalculatedPathValueRequiresFunctionError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FunctionRequiredErrorDomainRoleId) as CalculatedPathValue;
		}
		
		/// <summary>
		/// Sets CalculatedPathValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetCalculatedPathValue(CalculatedPathValueRequiresFunctionError element, CalculatedPathValue newCalculatedPathValue)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FunctionRequiredErrorDomainRoleId, newCalculatedPathValue);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing CalculatedPathValue domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.CalculatedPathValue;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.CalculatedPathValue = (CalculatedPathValue)value;
			}
		}
		
		#endregion
		#region FunctionRequiredError domain role code
		
		/// <summary>
		/// FunctionRequiredError domain role Id.
		/// </summary>
		public static readonly global::System.Guid FunctionRequiredErrorDomainRoleId = new global::System.Guid(0xf037c137, 0x43a0, 0x400e, 0x9f, 0x0c, 0x99, 0x0e, 0xa7, 0xbd, 0x69, 0x38);
		
		/// <summary>
		/// DomainRole FunctionRequiredError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasFunctionRequiredError.FunctionRequiredError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasFunctionRequiredError/FunctionRequiredError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasFunctionRequiredError/FunctionRequiredError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "CalculatedPathValue", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasFunctionRequiredError/FunctionRequiredError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("f037c137-43a0-400e-9f0c-990ea7bd6938")]
		public virtual CalculatedPathValueRequiresFunctionError FunctionRequiredError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CalculatedPathValueRequiresFunctionError)DslModeling::DomainRoleInfo.GetRolePlayer(this, FunctionRequiredErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FunctionRequiredErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FunctionRequiredError of a CalculatedPathValue
		/// <summary>
		/// Gets FunctionRequiredError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static CalculatedPathValueRequiresFunctionError GetFunctionRequiredError(CalculatedPathValue element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CalculatedPathValueDomainRoleId) as CalculatedPathValueRequiresFunctionError;
		}
		
		/// <summary>
		/// Sets FunctionRequiredError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFunctionRequiredError(CalculatedPathValue element, CalculatedPathValueRequiresFunctionError newFunctionRequiredError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CalculatedPathValueDomainRoleId, newFunctionRequiredError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing FunctionRequiredError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.FunctionRequiredError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.FunctionRequiredError = (CalculatedPathValueRequiresFunctionError)value;
			}
		}
		
		#endregion
		#region CalculatedPathValue link accessor
		/// <summary>
		/// Get the CalculatedPathValueHasFunctionRequiredError link to a CalculatedPathValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasFunctionRequiredError GetLinkToFunctionRequiredError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue calculatedPathValueInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasFunctionRequiredError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasFunctionRequiredError>(calculatedPathValueInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasFunctionRequiredError.CalculatedPathValueDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CalculatedPathValue not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FunctionRequiredError link accessor
		/// <summary>
		/// Get the CalculatedPathValueHasFunctionRequiredError link to a CalculatedPathValueRequiresFunctionError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasFunctionRequiredError GetLinkToCalculatedPathValue (global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueRequiresFunctionError functionRequiredErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasFunctionRequiredError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasFunctionRequiredError>(functionRequiredErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasFunctionRequiredError.FunctionRequiredErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of FunctionRequiredError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CalculatedPathValueHasFunctionRequiredError instance accessors
		
		/// <summary>
		/// Get any CalculatedPathValueHasFunctionRequiredError links between a given CalculatedPathValue and a CalculatedPathValueRequiresFunctionError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasFunctionRequiredError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueRequiresFunctionError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasFunctionRequiredError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasFunctionRequiredError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasFunctionRequiredError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasFunctionRequiredError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasFunctionRequiredError.CalculatedPathValueDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasFunctionRequiredError link in links )
			{
				if ( target.Equals(link.FunctionRequiredError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CalculatedPathValueHasFunctionRequiredError link between a given CalculatedPathValueand a CalculatedPathValueRequiresFunctionError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasFunctionRequiredError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueRequiresFunctionError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasFunctionRequiredError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasFunctionRequiredError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasFunctionRequiredError.CalculatedPathValueDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasFunctionRequiredError link in links )
			{
				if ( target.Equals(link.FunctionRequiredError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship CalculatedPathValueHasUnboundParameterError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasUnboundParameterError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasUnboundParameterError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasUnboundParameterError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("4e2b57ae-b16a-4d13-9355-00b72337c56d")]
	public partial class CalculatedPathValueHasUnboundParameterError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CalculatedPathValueHasUnboundParameterError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4e2b57ae, 0xb16a, 0x4d13, 0x93, 0x55, 0x00, 0xb7, 0x23, 0x37, 0xc5, 0x6d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CalculatedPathValueHasUnboundParameterError link in the same Partition as the given CalculatedPathValue
		/// </summary>
		/// <param name="source">CalculatedPathValue to use as the source of the relationship.</param>
		/// <param name="target">CalculatedPathValueParameterBindingError to use as the target of the relationship.</param>
		public CalculatedPathValueHasUnboundParameterError(CalculatedPathValue source, CalculatedPathValueParameterBindingError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CalculatedPathValueHasUnboundParameterError.CalculatedPathValueDomainRoleId, source), new DslModeling::RoleAssignment(CalculatedPathValueHasUnboundParameterError.ParameterBindingErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CalculatedPathValueHasUnboundParameterError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CalculatedPathValueHasUnboundParameterError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CalculatedPathValueHasUnboundParameterError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CalculatedPathValueHasUnboundParameterError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region CalculatedPathValue domain role code
		
		/// <summary>
		/// CalculatedPathValue domain role Id.
		/// </summary>
		public static readonly global::System.Guid CalculatedPathValueDomainRoleId = new global::System.Guid(0xf256cf08, 0xb0a4, 0x44c2, 0xaa, 0xe4, 0xa4, 0x6a, 0xec, 0x0d, 0x1c, 0xf6);
		
		/// <summary>
		/// DomainRole CalculatedPathValue
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasUnboundParameterError.CalculatedPathValue
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasUnboundParameterError/CalculatedPathValue.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasUnboundParameterError/CalculatedPathValue.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ParameterBindingErrorCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasUnboundParameterError/CalculatedPathValue.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f256cf08-b0a4-44c2-aae4-a46aec0d1cf6")]
		public virtual CalculatedPathValue CalculatedPathValue
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CalculatedPathValue)DslModeling::DomainRoleInfo.GetRolePlayer(this, CalculatedPathValueDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CalculatedPathValueDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CalculatedPathValue of a CalculatedPathValueParameterBindingError
		/// <summary>
		/// Gets CalculatedPathValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static CalculatedPathValue GetCalculatedPathValue(CalculatedPathValueParameterBindingError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ParameterBindingErrorDomainRoleId) as CalculatedPathValue;
		}
		
		/// <summary>
		/// Sets CalculatedPathValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetCalculatedPathValue(CalculatedPathValueParameterBindingError element, CalculatedPathValue newCalculatedPathValue)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ParameterBindingErrorDomainRoleId, newCalculatedPathValue);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing CalculatedPathValue domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.CalculatedPathValue;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.CalculatedPathValue = (CalculatedPathValue)value;
			}
		}
		
		#endregion
		#region ParameterBindingError domain role code
		
		/// <summary>
		/// ParameterBindingError domain role Id.
		/// </summary>
		public static readonly global::System.Guid ParameterBindingErrorDomainRoleId = new global::System.Guid(0x22244386, 0xfa38, 0x484c, 0x80, 0x65, 0x68, 0x91, 0x06, 0xc6, 0x4f, 0x0d);
		
		/// <summary>
		/// DomainRole ParameterBindingError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasUnboundParameterError.ParameterBindingError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasUnboundParameterError/ParameterBindingError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasUnboundParameterError/ParameterBindingError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "CalculatedPathValue", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasUnboundParameterError/ParameterBindingError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("22244386-fa38-484c-8065-689106c64f0d")]
		public virtual CalculatedPathValueParameterBindingError ParameterBindingError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CalculatedPathValueParameterBindingError)DslModeling::DomainRoleInfo.GetRolePlayer(this, ParameterBindingErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ParameterBindingErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ParameterBindingErrorCollection of a CalculatedPathValue
		/// <summary>
		/// Gets a list of ParameterBindingErrorCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<CalculatedPathValueParameterBindingError> GetParameterBindingErrorCollection(CalculatedPathValue element)
		{
			return new DslModeling::LinkedElementCollection<CalculatedPathValueParameterBindingError>(element, CalculatedPathValueDomainRoleId);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing ParameterBindingError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ParameterBindingError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ParameterBindingError = (CalculatedPathValueParameterBindingError)value;
			}
		}
		
		#endregion
		#region Accessors for roles that this REL plays in other RELs
		#region Parameter opposite domain role accessor
		/// <summary>
		/// Gets or sets Parameter.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueParameterBindingErrorTargetsFunctionParameter.ParameterBindingError
		/// </summary>
		public virtual FunctionParameter Parameter
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueParameterBindingErrorTargetsFunctionParameter.ParameterBindingErrorDomainRoleId) as FunctionParameter;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueParameterBindingErrorTargetsFunctionParameter.ParameterBindingErrorDomainRoleId, value);
			}
		}
		#endregion
		#endregion
		#region CalculatedPathValue link accessor
		/// <summary>
		/// Get the list of CalculatedPathValueHasUnboundParameterError links to a CalculatedPathValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasUnboundParameterError> GetLinksToParameterBindingErrorCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue calculatedPathValueInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasUnboundParameterError>(calculatedPathValueInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasUnboundParameterError.CalculatedPathValueDomainRoleId);
		}
		#endregion
		#region ParameterBindingError link accessor
		/// <summary>
		/// Get the CalculatedPathValueHasUnboundParameterError link to a CalculatedPathValueParameterBindingError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasUnboundParameterError GetLinkToCalculatedPathValue (global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueParameterBindingError parameterBindingErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasUnboundParameterError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasUnboundParameterError>(parameterBindingErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasUnboundParameterError.ParameterBindingErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ParameterBindingError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CalculatedPathValueHasUnboundParameterError instance accessors
		
		/// <summary>
		/// Get any CalculatedPathValueHasUnboundParameterError links between a given CalculatedPathValue and a CalculatedPathValueParameterBindingError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasUnboundParameterError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueParameterBindingError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasUnboundParameterError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasUnboundParameterError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasUnboundParameterError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasUnboundParameterError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasUnboundParameterError.CalculatedPathValueDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasUnboundParameterError link in links )
			{
				if ( target.Equals(link.ParameterBindingError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CalculatedPathValueHasUnboundParameterError link between a given CalculatedPathValueand a CalculatedPathValueParameterBindingError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasUnboundParameterError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueParameterBindingError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasUnboundParameterError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasUnboundParameterError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasUnboundParameterError.CalculatedPathValueDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasUnboundParameterError link in links )
			{
				if ( target.Equals(link.ParameterBindingError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship CalculatedPathValueParameterBindingErrorTargetsFunctionParameter
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueParameterBindingErrorTargetsFunctionParameter
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueParameterBindingErrorTargetsFunctionParameter.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueParameterBindingErrorTargetsFunctionParameter.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("09891ded-6224-453d-ab7b-4e178f74467e")]
	public partial class CalculatedPathValueParameterBindingErrorTargetsFunctionParameter : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CalculatedPathValueParameterBindingErrorTargetsFunctionParameter domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x09891ded, 0x6224, 0x453d, 0xab, 0x7b, 0x4e, 0x17, 0x8f, 0x74, 0x46, 0x7e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CalculatedPathValueParameterBindingErrorTargetsFunctionParameter link in the same Partition as the given CalculatedPathValueHasUnboundParameterError
		/// </summary>
		/// <param name="source">CalculatedPathValueHasUnboundParameterError to use as the source of the relationship.</param>
		/// <param name="target">FunctionParameter to use as the target of the relationship.</param>
		public CalculatedPathValueParameterBindingErrorTargetsFunctionParameter(CalculatedPathValueHasUnboundParameterError source, FunctionParameter target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CalculatedPathValueParameterBindingErrorTargetsFunctionParameter.ParameterBindingErrorDomainRoleId, source), new DslModeling::RoleAssignment(CalculatedPathValueParameterBindingErrorTargetsFunctionParameter.ParameterDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CalculatedPathValueParameterBindingErrorTargetsFunctionParameter(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CalculatedPathValueParameterBindingErrorTargetsFunctionParameter(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CalculatedPathValueParameterBindingErrorTargetsFunctionParameter(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CalculatedPathValueParameterBindingErrorTargetsFunctionParameter(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ParameterBindingError domain role code
		
		/// <summary>
		/// ParameterBindingError domain role Id.
		/// </summary>
		public static readonly global::System.Guid ParameterBindingErrorDomainRoleId = new global::System.Guid(0x77b85305, 0xab1b, 0x4ef4, 0x9f, 0xe2, 0x33, 0x1c, 0xa9, 0x55, 0xc6, 0xcd);
		
		/// <summary>
		/// DomainRole ParameterBindingError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueParameterBindingErrorTargetsFunctionParameter.ParameterBindingError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueParameterBindingErrorTargetsFunctionParameter/ParameterBindingError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueParameterBindingErrorTargetsFunctionParameter/ParameterBindingError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Parameter", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueParameterBindingErrorTargetsFunctionParameter/ParameterBindingError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("77b85305-ab1b-4ef4-9fe2-331ca955c6cd")]
		public virtual CalculatedPathValueHasUnboundParameterError ParameterBindingError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CalculatedPathValueHasUnboundParameterError)DslModeling::DomainRoleInfo.GetRolePlayer(this, ParameterBindingErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ParameterBindingErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ParameterBindingErrorCollection of a FunctionParameter
		/// <summary>
		/// Gets a list of ParameterBindingErrorCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<CalculatedPathValueHasUnboundParameterError> GetParameterBindingErrorCollection(FunctionParameter element)
		{
			return new DslModeling::LinkedElementCollection<CalculatedPathValueHasUnboundParameterError>(element, ParameterDomainRoleId);
		}
		#endregion
		#region Parameter domain role code
		
		/// <summary>
		/// Parameter domain role Id.
		/// </summary>
		public static readonly global::System.Guid ParameterDomainRoleId = new global::System.Guid(0x994360ca, 0x64c9, 0x4095, 0xa4, 0x2b, 0xb6, 0xee, 0x27, 0xef, 0xd1, 0xd5);
		
		/// <summary>
		/// DomainRole Parameter
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueParameterBindingErrorTargetsFunctionParameter.Parameter
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueParameterBindingErrorTargetsFunctionParameter/Parameter.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueParameterBindingErrorTargetsFunctionParameter/Parameter.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ParameterBindingErrorCollection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueParameterBindingErrorTargetsFunctionParameter/Parameter.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("994360ca-64c9-4095-a42b-b6ee27efd1d5")]
		public virtual FunctionParameter Parameter
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FunctionParameter)DslModeling::DomainRoleInfo.GetRolePlayer(this, ParameterDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ParameterDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Parameter of a CalculatedPathValueHasUnboundParameterError
		/// <summary>
		/// Gets Parameter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FunctionParameter GetParameter(CalculatedPathValueHasUnboundParameterError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ParameterBindingErrorDomainRoleId) as FunctionParameter;
		}
		
		/// <summary>
		/// Sets Parameter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetParameter(CalculatedPathValueHasUnboundParameterError element, FunctionParameter newParameter)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ParameterBindingErrorDomainRoleId, newParameter);
		}
		#endregion
		#region ParameterBindingError link accessor
		/// <summary>
		/// Get the CalculatedPathValueParameterBindingErrorTargetsFunctionParameter link to a CalculatedPathValueHasUnboundParameterError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueParameterBindingErrorTargetsFunctionParameter GetLinkToParameter (global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasUnboundParameterError parameterBindingErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueParameterBindingErrorTargetsFunctionParameter> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueParameterBindingErrorTargetsFunctionParameter>(parameterBindingErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueParameterBindingErrorTargetsFunctionParameter.ParameterBindingErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ParameterBindingError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Parameter link accessor
		/// <summary>
		/// Get the list of CalculatedPathValueParameterBindingErrorTargetsFunctionParameter links to a FunctionParameter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueParameterBindingErrorTargetsFunctionParameter> GetLinksToParameterBindingErrorCollection ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionParameter parameterInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueParameterBindingErrorTargetsFunctionParameter>(parameterInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueParameterBindingErrorTargetsFunctionParameter.ParameterDomainRoleId);
		}
		#endregion
		#region CalculatedPathValueParameterBindingErrorTargetsFunctionParameter instance accessors
		
		/// <summary>
		/// Get any CalculatedPathValueParameterBindingErrorTargetsFunctionParameter links between a given CalculatedPathValueHasUnboundParameterError and a FunctionParameter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueParameterBindingErrorTargetsFunctionParameter> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasUnboundParameterError source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionParameter target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueParameterBindingErrorTargetsFunctionParameter> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueParameterBindingErrorTargetsFunctionParameter>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueParameterBindingErrorTargetsFunctionParameter> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueParameterBindingErrorTargetsFunctionParameter>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueParameterBindingErrorTargetsFunctionParameter.ParameterBindingErrorDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueParameterBindingErrorTargetsFunctionParameter link in links )
			{
				if ( target.Equals(link.Parameter) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CalculatedPathValueParameterBindingErrorTargetsFunctionParameter link between a given CalculatedPathValueHasUnboundParameterErrorand a FunctionParameter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueParameterBindingErrorTargetsFunctionParameter GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasUnboundParameterError source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionParameter target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueParameterBindingErrorTargetsFunctionParameter> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueParameterBindingErrorTargetsFunctionParameter>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueParameterBindingErrorTargetsFunctionParameter.ParameterBindingErrorDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueParameterBindingErrorTargetsFunctionParameter link in links )
			{
				if ( target.Equals(link.Parameter) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship CalculatedPathValueHasConsumptionRequiredError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasConsumptionRequiredError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasConsumptionRequiredError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasConsumptionRequiredError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("8b56ed0c-7c34-493b-be51-9d34087ba4bf")]
	public partial class CalculatedPathValueHasConsumptionRequiredError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CalculatedPathValueHasConsumptionRequiredError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8b56ed0c, 0x7c34, 0x493b, 0xbe, 0x51, 0x9d, 0x34, 0x08, 0x7b, 0xa4, 0xbf);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CalculatedPathValueHasConsumptionRequiredError link in the same Partition as the given CalculatedPathValue
		/// </summary>
		/// <param name="source">CalculatedPathValue to use as the source of the relationship.</param>
		/// <param name="target">CalculatedPathValueMustBeConsumedError to use as the target of the relationship.</param>
		public CalculatedPathValueHasConsumptionRequiredError(CalculatedPathValue source, CalculatedPathValueMustBeConsumedError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CalculatedPathValueHasConsumptionRequiredError.CalculatedPathValueDomainRoleId, source), new DslModeling::RoleAssignment(CalculatedPathValueHasConsumptionRequiredError.ConsumptionRequiredErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CalculatedPathValueHasConsumptionRequiredError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CalculatedPathValueHasConsumptionRequiredError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CalculatedPathValueHasConsumptionRequiredError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CalculatedPathValueHasConsumptionRequiredError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region CalculatedPathValue domain role code
		
		/// <summary>
		/// CalculatedPathValue domain role Id.
		/// </summary>
		public static readonly global::System.Guid CalculatedPathValueDomainRoleId = new global::System.Guid(0xfe8a8094, 0x5bd2, 0x407c, 0x93, 0x0f, 0x90, 0x9d, 0x68, 0xb3, 0x77, 0xf6);
		
		/// <summary>
		/// DomainRole CalculatedPathValue
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasConsumptionRequiredError.CalculatedPathValue
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasConsumptionRequiredError/CalculatedPathValue.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasConsumptionRequiredError/CalculatedPathValue.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ConsumptionRequiredError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasConsumptionRequiredError/CalculatedPathValue.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("fe8a8094-5bd2-407c-930f-909d68b377f6")]
		public virtual CalculatedPathValue CalculatedPathValue
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CalculatedPathValue)DslModeling::DomainRoleInfo.GetRolePlayer(this, CalculatedPathValueDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CalculatedPathValueDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CalculatedPathValue of a CalculatedPathValueMustBeConsumedError
		/// <summary>
		/// Gets CalculatedPathValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static CalculatedPathValue GetCalculatedPathValue(CalculatedPathValueMustBeConsumedError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConsumptionRequiredErrorDomainRoleId) as CalculatedPathValue;
		}
		
		/// <summary>
		/// Sets CalculatedPathValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetCalculatedPathValue(CalculatedPathValueMustBeConsumedError element, CalculatedPathValue newCalculatedPathValue)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConsumptionRequiredErrorDomainRoleId, newCalculatedPathValue);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing CalculatedPathValue domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.CalculatedPathValue;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.CalculatedPathValue = (CalculatedPathValue)value;
			}
		}
		
		#endregion
		#region ConsumptionRequiredError domain role code
		
		/// <summary>
		/// ConsumptionRequiredError domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConsumptionRequiredErrorDomainRoleId = new global::System.Guid(0x1b1ad951, 0x4355, 0x42a9, 0x89, 0xb7, 0x78, 0x13, 0x57, 0xd8, 0xb8, 0x0f);
		
		/// <summary>
		/// DomainRole ConsumptionRequiredError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasConsumptionRequiredError.ConsumptionRequiredError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasConsumptionRequiredError/ConsumptionRequiredError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasConsumptionRequiredError/ConsumptionRequiredError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "CalculatedPathValue", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasConsumptionRequiredError/ConsumptionRequiredError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("1b1ad951-4355-42a9-89b7-781357d8b80f")]
		public virtual CalculatedPathValueMustBeConsumedError ConsumptionRequiredError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CalculatedPathValueMustBeConsumedError)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConsumptionRequiredErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConsumptionRequiredErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConsumptionRequiredError of a CalculatedPathValue
		/// <summary>
		/// Gets ConsumptionRequiredError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static CalculatedPathValueMustBeConsumedError GetConsumptionRequiredError(CalculatedPathValue element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CalculatedPathValueDomainRoleId) as CalculatedPathValueMustBeConsumedError;
		}
		
		/// <summary>
		/// Sets ConsumptionRequiredError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetConsumptionRequiredError(CalculatedPathValue element, CalculatedPathValueMustBeConsumedError newConsumptionRequiredError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CalculatedPathValueDomainRoleId, newConsumptionRequiredError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing ConsumptionRequiredError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ConsumptionRequiredError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ConsumptionRequiredError = (CalculatedPathValueMustBeConsumedError)value;
			}
		}
		
		#endregion
		#region CalculatedPathValue link accessor
		/// <summary>
		/// Get the CalculatedPathValueHasConsumptionRequiredError link to a CalculatedPathValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasConsumptionRequiredError GetLinkToConsumptionRequiredError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue calculatedPathValueInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasConsumptionRequiredError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasConsumptionRequiredError>(calculatedPathValueInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasConsumptionRequiredError.CalculatedPathValueDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CalculatedPathValue not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ConsumptionRequiredError link accessor
		/// <summary>
		/// Get the CalculatedPathValueHasConsumptionRequiredError link to a CalculatedPathValueMustBeConsumedError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasConsumptionRequiredError GetLinkToCalculatedPathValue (global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueMustBeConsumedError consumptionRequiredErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasConsumptionRequiredError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasConsumptionRequiredError>(consumptionRequiredErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasConsumptionRequiredError.ConsumptionRequiredErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ConsumptionRequiredError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CalculatedPathValueHasConsumptionRequiredError instance accessors
		
		/// <summary>
		/// Get any CalculatedPathValueHasConsumptionRequiredError links between a given CalculatedPathValue and a CalculatedPathValueMustBeConsumedError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasConsumptionRequiredError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueMustBeConsumedError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasConsumptionRequiredError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasConsumptionRequiredError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasConsumptionRequiredError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasConsumptionRequiredError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasConsumptionRequiredError.CalculatedPathValueDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasConsumptionRequiredError link in links )
			{
				if ( target.Equals(link.ConsumptionRequiredError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CalculatedPathValueHasConsumptionRequiredError link between a given CalculatedPathValueand a CalculatedPathValueMustBeConsumedError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasConsumptionRequiredError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueMustBeConsumedError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasConsumptionRequiredError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasConsumptionRequiredError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasConsumptionRequiredError.CalculatedPathValueDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasConsumptionRequiredError link in links )
			{
				if ( target.Equals(link.ConsumptionRequiredError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship CalculatedPathValueHasAggregationContextRequiredError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasAggregationContextRequiredError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasAggregationContextRequiredError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasAggregationContextRequiredError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("c7ac9ec0-5450-47cd-8dc8-003d80bbaeb3")]
	public partial class CalculatedPathValueHasAggregationContextRequiredError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CalculatedPathValueHasAggregationContextRequiredError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc7ac9ec0, 0x5450, 0x47cd, 0x8d, 0xc8, 0x00, 0x3d, 0x80, 0xbb, 0xae, 0xb3);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CalculatedPathValueHasAggregationContextRequiredError link in the same Partition as the given CalculatedPathValue
		/// </summary>
		/// <param name="source">CalculatedPathValue to use as the source of the relationship.</param>
		/// <param name="target">CalculatedPathValueRequiresAggregationContextError to use as the target of the relationship.</param>
		public CalculatedPathValueHasAggregationContextRequiredError(CalculatedPathValue source, CalculatedPathValueRequiresAggregationContextError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CalculatedPathValueHasAggregationContextRequiredError.CalculatedPathValueDomainRoleId, source), new DslModeling::RoleAssignment(CalculatedPathValueHasAggregationContextRequiredError.AggregationContextRequiredErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CalculatedPathValueHasAggregationContextRequiredError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CalculatedPathValueHasAggregationContextRequiredError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CalculatedPathValueHasAggregationContextRequiredError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CalculatedPathValueHasAggregationContextRequiredError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region CalculatedPathValue domain role code
		
		/// <summary>
		/// CalculatedPathValue domain role Id.
		/// </summary>
		public static readonly global::System.Guid CalculatedPathValueDomainRoleId = new global::System.Guid(0xb4cc26ac, 0xbdad, 0x42e3, 0xa6, 0x30, 0x54, 0xbe, 0xec, 0x95, 0x49, 0x7f);
		
		/// <summary>
		/// DomainRole CalculatedPathValue
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasAggregationContextRequiredError.CalculatedPathValue
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasAggregationContextRequiredError/CalculatedPathValue.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasAggregationContextRequiredError/CalculatedPathValue.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AggregationContextRequiredError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasAggregationContextRequiredError/CalculatedPathValue.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("b4cc26ac-bdad-42e3-a630-54beec95497f")]
		public virtual CalculatedPathValue CalculatedPathValue
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CalculatedPathValue)DslModeling::DomainRoleInfo.GetRolePlayer(this, CalculatedPathValueDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CalculatedPathValueDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CalculatedPathValue of a CalculatedPathValueRequiresAggregationContextError
		/// <summary>
		/// Gets CalculatedPathValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static CalculatedPathValue GetCalculatedPathValue(CalculatedPathValueRequiresAggregationContextError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AggregationContextRequiredErrorDomainRoleId) as CalculatedPathValue;
		}
		
		/// <summary>
		/// Sets CalculatedPathValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetCalculatedPathValue(CalculatedPathValueRequiresAggregationContextError element, CalculatedPathValue newCalculatedPathValue)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AggregationContextRequiredErrorDomainRoleId, newCalculatedPathValue);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing CalculatedPathValue domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.CalculatedPathValue;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.CalculatedPathValue = (CalculatedPathValue)value;
			}
		}
		
		#endregion
		#region AggregationContextRequiredError domain role code
		
		/// <summary>
		/// AggregationContextRequiredError domain role Id.
		/// </summary>
		public static readonly global::System.Guid AggregationContextRequiredErrorDomainRoleId = new global::System.Guid(0xcf95b8a3, 0x45e6, 0x4f1d, 0x84, 0xe8, 0x0f, 0x82, 0x6f, 0x1c, 0xc7, 0x2f);
		
		/// <summary>
		/// DomainRole AggregationContextRequiredError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasAggregationContextRequiredError.AggregationContextRequiredError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasAggregationContextRequiredError/AggregationContextRequiredError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasAggregationContextRequiredError/AggregationContextRequiredError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "CalculatedPathValue", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasAggregationContextRequiredError/AggregationContextRequiredError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("cf95b8a3-45e6-4f1d-84e8-0f826f1cc72f")]
		public virtual CalculatedPathValueRequiresAggregationContextError AggregationContextRequiredError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CalculatedPathValueRequiresAggregationContextError)DslModeling::DomainRoleInfo.GetRolePlayer(this, AggregationContextRequiredErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AggregationContextRequiredErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AggregationContextRequiredError of a CalculatedPathValue
		/// <summary>
		/// Gets AggregationContextRequiredError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static CalculatedPathValueRequiresAggregationContextError GetAggregationContextRequiredError(CalculatedPathValue element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CalculatedPathValueDomainRoleId) as CalculatedPathValueRequiresAggregationContextError;
		}
		
		/// <summary>
		/// Sets AggregationContextRequiredError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAggregationContextRequiredError(CalculatedPathValue element, CalculatedPathValueRequiresAggregationContextError newAggregationContextRequiredError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CalculatedPathValueDomainRoleId, newAggregationContextRequiredError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing AggregationContextRequiredError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.AggregationContextRequiredError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.AggregationContextRequiredError = (CalculatedPathValueRequiresAggregationContextError)value;
			}
		}
		
		#endregion
		#region CalculatedPathValue link accessor
		/// <summary>
		/// Get the CalculatedPathValueHasAggregationContextRequiredError link to a CalculatedPathValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasAggregationContextRequiredError GetLinkToAggregationContextRequiredError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue calculatedPathValueInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasAggregationContextRequiredError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasAggregationContextRequiredError>(calculatedPathValueInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasAggregationContextRequiredError.CalculatedPathValueDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CalculatedPathValue not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AggregationContextRequiredError link accessor
		/// <summary>
		/// Get the CalculatedPathValueHasAggregationContextRequiredError link to a CalculatedPathValueRequiresAggregationContextError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasAggregationContextRequiredError GetLinkToCalculatedPathValue (global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueRequiresAggregationContextError aggregationContextRequiredErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasAggregationContextRequiredError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasAggregationContextRequiredError>(aggregationContextRequiredErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasAggregationContextRequiredError.AggregationContextRequiredErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of AggregationContextRequiredError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CalculatedPathValueHasAggregationContextRequiredError instance accessors
		
		/// <summary>
		/// Get any CalculatedPathValueHasAggregationContextRequiredError links between a given CalculatedPathValue and a CalculatedPathValueRequiresAggregationContextError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasAggregationContextRequiredError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueRequiresAggregationContextError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasAggregationContextRequiredError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasAggregationContextRequiredError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasAggregationContextRequiredError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasAggregationContextRequiredError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasAggregationContextRequiredError.CalculatedPathValueDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasAggregationContextRequiredError link in links )
			{
				if ( target.Equals(link.AggregationContextRequiredError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CalculatedPathValueHasAggregationContextRequiredError link between a given CalculatedPathValueand a CalculatedPathValueRequiresAggregationContextError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasAggregationContextRequiredError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueRequiresAggregationContextError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasAggregationContextRequiredError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasAggregationContextRequiredError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasAggregationContextRequiredError.CalculatedPathValueDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasAggregationContextRequiredError link in links )
			{
				if ( target.Equals(link.AggregationContextRequiredError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship RoleProjectedDerivationRuleHasProjectionRequiredError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRuleHasProjectionRequiredError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRuleHasProjectionRequiredError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRuleHasProjectionRequiredError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("fb983ba1-60f2-4c56-8ba4-b2c2a6de6ca8")]
	public partial class RoleProjectedDerivationRuleHasProjectionRequiredError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RoleProjectedDerivationRuleHasProjectionRequiredError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfb983ba1, 0x60f2, 0x4c56, 0x8b, 0xa4, 0xb2, 0xc2, 0xa6, 0xde, 0x6c, 0xa8);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RoleProjectedDerivationRuleHasProjectionRequiredError link in the same Partition as the given RoleProjectedDerivationRule
		/// </summary>
		/// <param name="source">RoleProjectedDerivationRule to use as the source of the relationship.</param>
		/// <param name="target">RoleProjectedDerivationRequiresProjectionError to use as the target of the relationship.</param>
		public RoleProjectedDerivationRuleHasProjectionRequiredError(RoleProjectedDerivationRule source, RoleProjectedDerivationRequiresProjectionError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RoleProjectedDerivationRuleHasProjectionRequiredError.DerivationRuleDomainRoleId, source), new DslModeling::RoleAssignment(RoleProjectedDerivationRuleHasProjectionRequiredError.ProjectionRequiredErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RoleProjectedDerivationRuleHasProjectionRequiredError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RoleProjectedDerivationRuleHasProjectionRequiredError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RoleProjectedDerivationRuleHasProjectionRequiredError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RoleProjectedDerivationRuleHasProjectionRequiredError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DerivationRule domain role code
		
		/// <summary>
		/// DerivationRule domain role Id.
		/// </summary>
		public static readonly global::System.Guid DerivationRuleDomainRoleId = new global::System.Guid(0xbceaf3f3, 0xc188, 0x4f83, 0xbe, 0xb1, 0x71, 0x92, 0x03, 0x10, 0x71, 0x1d);
		
		/// <summary>
		/// DomainRole DerivationRule
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRuleHasProjectionRequiredError.DerivationRule
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRuleHasProjectionRequiredError/DerivationRule.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRuleHasProjectionRequiredError/DerivationRule.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ProjectionRequiredError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRuleHasProjectionRequiredError/DerivationRule.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("bceaf3f3-c188-4f83-beb1-71920310711d")]
		public virtual RoleProjectedDerivationRule DerivationRule
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RoleProjectedDerivationRule)DslModeling::DomainRoleInfo.GetRolePlayer(this, DerivationRuleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DerivationRuleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DerivationRule of a RoleProjectedDerivationRequiresProjectionError
		/// <summary>
		/// Gets DerivationRule.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static RoleProjectedDerivationRule GetDerivationRule(RoleProjectedDerivationRequiresProjectionError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ProjectionRequiredErrorDomainRoleId) as RoleProjectedDerivationRule;
		}
		
		/// <summary>
		/// Sets DerivationRule.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDerivationRule(RoleProjectedDerivationRequiresProjectionError element, RoleProjectedDerivationRule newDerivationRule)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ProjectionRequiredErrorDomainRoleId, newDerivationRule);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing DerivationRule domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.DerivationRule;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.DerivationRule = (RoleProjectedDerivationRule)value;
			}
		}
		
		#endregion
		#region ProjectionRequiredError domain role code
		
		/// <summary>
		/// ProjectionRequiredError domain role Id.
		/// </summary>
		public static readonly global::System.Guid ProjectionRequiredErrorDomainRoleId = new global::System.Guid(0x4d4b10ef, 0x6a87, 0x4721, 0xb4, 0xc5, 0xcf, 0x0d, 0x32, 0x13, 0x74, 0xf9);
		
		/// <summary>
		/// DomainRole ProjectionRequiredError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRuleHasProjectionRequiredError.ProjectionRequiredError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRuleHasProjectionRequiredError/ProjectionRequiredError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRuleHasProjectionRequiredError/ProjectionRequiredError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DerivationRule", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRuleHasProjectionRequiredError/ProjectionRequiredError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("4d4b10ef-6a87-4721-b4c5-cf0d321374f9")]
		public virtual RoleProjectedDerivationRequiresProjectionError ProjectionRequiredError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RoleProjectedDerivationRequiresProjectionError)DslModeling::DomainRoleInfo.GetRolePlayer(this, ProjectionRequiredErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ProjectionRequiredErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ProjectionRequiredError of a RoleProjectedDerivationRule
		/// <summary>
		/// Gets ProjectionRequiredError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static RoleProjectedDerivationRequiresProjectionError GetProjectionRequiredError(RoleProjectedDerivationRule element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DerivationRuleDomainRoleId) as RoleProjectedDerivationRequiresProjectionError;
		}
		
		/// <summary>
		/// Sets ProjectionRequiredError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetProjectionRequiredError(RoleProjectedDerivationRule element, RoleProjectedDerivationRequiresProjectionError newProjectionRequiredError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DerivationRuleDomainRoleId, newProjectionRequiredError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing ProjectionRequiredError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ProjectionRequiredError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ProjectionRequiredError = (RoleProjectedDerivationRequiresProjectionError)value;
			}
		}
		
		#endregion
		#region DerivationRule link accessor
		/// <summary>
		/// Get the RoleProjectedDerivationRuleHasProjectionRequiredError link to a RoleProjectedDerivationRule.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRuleHasProjectionRequiredError GetLinkToProjectionRequiredError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRule derivationRuleInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRuleHasProjectionRequiredError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRuleHasProjectionRequiredError>(derivationRuleInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRuleHasProjectionRequiredError.DerivationRuleDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DerivationRule not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ProjectionRequiredError link accessor
		/// <summary>
		/// Get the RoleProjectedDerivationRuleHasProjectionRequiredError link to a RoleProjectedDerivationRequiresProjectionError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRuleHasProjectionRequiredError GetLinkToDerivationRule (global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRequiresProjectionError projectionRequiredErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRuleHasProjectionRequiredError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRuleHasProjectionRequiredError>(projectionRequiredErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRuleHasProjectionRequiredError.ProjectionRequiredErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ProjectionRequiredError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region RoleProjectedDerivationRuleHasProjectionRequiredError instance accessors
		
		/// <summary>
		/// Get any RoleProjectedDerivationRuleHasProjectionRequiredError links between a given RoleProjectedDerivationRule and a RoleProjectedDerivationRequiresProjectionError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRuleHasProjectionRequiredError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRule source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRequiresProjectionError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRuleHasProjectionRequiredError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRuleHasProjectionRequiredError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRuleHasProjectionRequiredError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRuleHasProjectionRequiredError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRuleHasProjectionRequiredError.DerivationRuleDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRuleHasProjectionRequiredError link in links )
			{
				if ( target.Equals(link.ProjectionRequiredError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RoleProjectedDerivationRuleHasProjectionRequiredError link between a given RoleProjectedDerivationRuleand a RoleProjectedDerivationRequiresProjectionError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRuleHasProjectionRequiredError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRule source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRequiresProjectionError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRuleHasProjectionRequiredError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRuleHasProjectionRequiredError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRuleHasProjectionRequiredError.DerivationRuleDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRuleHasProjectionRequiredError link in links )
			{
				if ( target.Equals(link.ProjectionRequiredError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship RoleSetDerivationProjectionHasPartialProjectionError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjectionHasPartialProjectionError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjectionHasPartialProjectionError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjectionHasPartialProjectionError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("9972479b-3323-4446-9dd9-fd42f70c96a2")]
	public partial class RoleSetDerivationProjectionHasPartialProjectionError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RoleSetDerivationProjectionHasPartialProjectionError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9972479b, 0x3323, 0x4446, 0x9d, 0xd9, 0xfd, 0x42, 0xf7, 0x0c, 0x96, 0xa2);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RoleSetDerivationProjectionHasPartialProjectionError link in the same Partition as the given RoleSetDerivationProjection
		/// </summary>
		/// <param name="source">RoleSetDerivationProjection to use as the source of the relationship.</param>
		/// <param name="target">PartialRoleSetDerivationProjectionError to use as the target of the relationship.</param>
		public RoleSetDerivationProjectionHasPartialProjectionError(RoleSetDerivationProjection source, PartialRoleSetDerivationProjectionError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RoleSetDerivationProjectionHasPartialProjectionError.DerivationProjectionDomainRoleId, source), new DslModeling::RoleAssignment(RoleSetDerivationProjectionHasPartialProjectionError.PartialProjectionErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RoleSetDerivationProjectionHasPartialProjectionError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RoleSetDerivationProjectionHasPartialProjectionError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RoleSetDerivationProjectionHasPartialProjectionError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RoleSetDerivationProjectionHasPartialProjectionError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DerivationProjection domain role code
		
		/// <summary>
		/// DerivationProjection domain role Id.
		/// </summary>
		public static readonly global::System.Guid DerivationProjectionDomainRoleId = new global::System.Guid(0x29f09464, 0xabff, 0x43cc, 0x9a, 0xa1, 0x06, 0x7a, 0x2f, 0xf0, 0xad, 0xd8);
		
		/// <summary>
		/// DomainRole DerivationProjection
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjectionHasPartialProjectionError.DerivationProjection
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjectionHasPartialProjectionError/DerivationProjection.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjectionHasPartialProjectionError/DerivationProjection.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "PartialProjectionError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjectionHasPartialProjectionError/DerivationProjection.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("29f09464-abff-43cc-9aa1-067a2ff0add8")]
		public virtual RoleSetDerivationProjection DerivationProjection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RoleSetDerivationProjection)DslModeling::DomainRoleInfo.GetRolePlayer(this, DerivationProjectionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DerivationProjectionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DerivationProjection of a PartialRoleSetDerivationProjectionError
		/// <summary>
		/// Gets DerivationProjection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static RoleSetDerivationProjection GetDerivationProjection(PartialRoleSetDerivationProjectionError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PartialProjectionErrorDomainRoleId) as RoleSetDerivationProjection;
		}
		
		/// <summary>
		/// Sets DerivationProjection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDerivationProjection(PartialRoleSetDerivationProjectionError element, RoleSetDerivationProjection newDerivationProjection)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PartialProjectionErrorDomainRoleId, newDerivationProjection);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing DerivationProjection domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.DerivationProjection;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.DerivationProjection = (RoleSetDerivationProjection)value;
			}
		}
		
		#endregion
		#region PartialProjectionError domain role code
		
		/// <summary>
		/// PartialProjectionError domain role Id.
		/// </summary>
		public static readonly global::System.Guid PartialProjectionErrorDomainRoleId = new global::System.Guid(0x53b3d1ce, 0xe61c, 0x4567, 0x81, 0xa0, 0x82, 0x9b, 0xe3, 0x7b, 0x7d, 0xa7);
		
		/// <summary>
		/// DomainRole PartialProjectionError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjectionHasPartialProjectionError.PartialProjectionError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjectionHasPartialProjectionError/PartialProjectionError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjectionHasPartialProjectionError/PartialProjectionError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DerivationProjection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjectionHasPartialProjectionError/PartialProjectionError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("53b3d1ce-e61c-4567-81a0-829be37b7da7")]
		public virtual PartialRoleSetDerivationProjectionError PartialProjectionError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PartialRoleSetDerivationProjectionError)DslModeling::DomainRoleInfo.GetRolePlayer(this, PartialProjectionErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PartialProjectionErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PartialProjectionError of a RoleSetDerivationProjection
		/// <summary>
		/// Gets PartialProjectionError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static PartialRoleSetDerivationProjectionError GetPartialProjectionError(RoleSetDerivationProjection element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DerivationProjectionDomainRoleId) as PartialRoleSetDerivationProjectionError;
		}
		
		/// <summary>
		/// Sets PartialProjectionError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetPartialProjectionError(RoleSetDerivationProjection element, PartialRoleSetDerivationProjectionError newPartialProjectionError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DerivationProjectionDomainRoleId, newPartialProjectionError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing PartialProjectionError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.PartialProjectionError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.PartialProjectionError = (PartialRoleSetDerivationProjectionError)value;
			}
		}
		
		#endregion
		#region DerivationProjection link accessor
		/// <summary>
		/// Get the RoleSetDerivationProjectionHasPartialProjectionError link to a RoleSetDerivationProjection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjectionHasPartialProjectionError GetLinkToPartialProjectionError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjection derivationProjectionInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjectionHasPartialProjectionError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjectionHasPartialProjectionError>(derivationProjectionInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjectionHasPartialProjectionError.DerivationProjectionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DerivationProjection not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region PartialProjectionError link accessor
		/// <summary>
		/// Get the RoleSetDerivationProjectionHasPartialProjectionError link to a PartialRoleSetDerivationProjectionError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjectionHasPartialProjectionError GetLinkToDerivationProjection (global::ORMSolutions.ORMArchitect.Core.ObjectModel.PartialRoleSetDerivationProjectionError partialProjectionErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjectionHasPartialProjectionError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjectionHasPartialProjectionError>(partialProjectionErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjectionHasPartialProjectionError.PartialProjectionErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of PartialProjectionError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region RoleSetDerivationProjectionHasPartialProjectionError instance accessors
		
		/// <summary>
		/// Get any RoleSetDerivationProjectionHasPartialProjectionError links between a given RoleSetDerivationProjection and a PartialRoleSetDerivationProjectionError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjectionHasPartialProjectionError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjection source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PartialRoleSetDerivationProjectionError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjectionHasPartialProjectionError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjectionHasPartialProjectionError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjectionHasPartialProjectionError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjectionHasPartialProjectionError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjectionHasPartialProjectionError.DerivationProjectionDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjectionHasPartialProjectionError link in links )
			{
				if ( target.Equals(link.PartialProjectionError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RoleSetDerivationProjectionHasPartialProjectionError link between a given RoleSetDerivationProjectionand a PartialRoleSetDerivationProjectionError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjectionHasPartialProjectionError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjection source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PartialRoleSetDerivationProjectionError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjectionHasPartialProjectionError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjectionHasPartialProjectionError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjectionHasPartialProjectionError.DerivationProjectionDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjectionHasPartialProjectionError link in links )
			{
				if ( target.Equals(link.PartialProjectionError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("c7f3110f-ec28-44a4-9925-13e3fd9f889f")]
	public partial class DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc7f3110f, 0xec28, 0x44a4, 0x99, 0x25, 0x13, 0xe3, 0xfd, 0x9f, 0x88, 0x9f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError link in the same Partition as the given DerivedRoleProjection
		/// </summary>
		/// <param name="source">DerivedRoleProjection to use as the source of the relationship.</param>
		/// <param name="target">DerivedRoleRequiresCompatibleProjectionError to use as the target of the relationship.</param>
		public DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError(DerivedRoleProjection source, DerivedRoleRequiresCompatibleProjectionError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError.ProjectionDomainRoleId, source), new DslModeling::RoleAssignment(DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError.IncompatibleProjectionErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Projection domain role code
		
		/// <summary>
		/// Projection domain role Id.
		/// </summary>
		public static readonly global::System.Guid ProjectionDomainRoleId = new global::System.Guid(0xd2ee2117, 0xfb73, 0x4803, 0xb2, 0x7a, 0xfc, 0x88, 0x6d, 0x01, 0x7a, 0x5f);
		
		/// <summary>
		/// DomainRole Projection
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError.Projection
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError/Projection.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError/Projection.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "IncompatibleProjectionError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError/Projection.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("d2ee2117-fb73-4803-b27a-fc886d017a5f")]
		public virtual DerivedRoleProjection Projection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DerivedRoleProjection)DslModeling::DomainRoleInfo.GetRolePlayer(this, ProjectionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ProjectionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Projection of a DerivedRoleRequiresCompatibleProjectionError
		/// <summary>
		/// Gets Projection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DerivedRoleProjection GetProjection(DerivedRoleRequiresCompatibleProjectionError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, IncompatibleProjectionErrorDomainRoleId) as DerivedRoleProjection;
		}
		
		/// <summary>
		/// Sets Projection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetProjection(DerivedRoleRequiresCompatibleProjectionError element, DerivedRoleProjection newProjection)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, IncompatibleProjectionErrorDomainRoleId, newProjection);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing Projection domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.Projection;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.Projection = (DerivedRoleProjection)value;
			}
		}
		
		#endregion
		#region IncompatibleProjectionError domain role code
		
		/// <summary>
		/// IncompatibleProjectionError domain role Id.
		/// </summary>
		public static readonly global::System.Guid IncompatibleProjectionErrorDomainRoleId = new global::System.Guid(0x7c2adf2a, 0xf396, 0x4819, 0x83, 0x58, 0x58, 0x01, 0x88, 0x65, 0x72, 0xe9);
		
		/// <summary>
		/// DomainRole IncompatibleProjectionError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError.IncompatibleProjectionError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError/IncompatibleProjectionError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError/IncompatibleProjectionError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Projection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError/IncompatibleProjectionError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("7c2adf2a-f396-4819-8358-5801886572e9")]
		public virtual DerivedRoleRequiresCompatibleProjectionError IncompatibleProjectionError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DerivedRoleRequiresCompatibleProjectionError)DslModeling::DomainRoleInfo.GetRolePlayer(this, IncompatibleProjectionErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, IncompatibleProjectionErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access IncompatibleProjectionError of a DerivedRoleProjection
		/// <summary>
		/// Gets IncompatibleProjectionError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DerivedRoleRequiresCompatibleProjectionError GetIncompatibleProjectionError(DerivedRoleProjection element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ProjectionDomainRoleId) as DerivedRoleRequiresCompatibleProjectionError;
		}
		
		/// <summary>
		/// Sets IncompatibleProjectionError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetIncompatibleProjectionError(DerivedRoleProjection element, DerivedRoleRequiresCompatibleProjectionError newIncompatibleProjectionError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ProjectionDomainRoleId, newIncompatibleProjectionError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing IncompatibleProjectionError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.IncompatibleProjectionError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.IncompatibleProjectionError = (DerivedRoleRequiresCompatibleProjectionError)value;
			}
		}
		
		#endregion
		#region Projection link accessor
		/// <summary>
		/// Get the DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError link to a DerivedRoleProjection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError GetLinkToIncompatibleProjectionError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjection projectionInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError>(projectionInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError.ProjectionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Projection not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region IncompatibleProjectionError link accessor
		/// <summary>
		/// Get the DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError link to a DerivedRoleRequiresCompatibleProjectionError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError GetLinkToProjection (global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleRequiresCompatibleProjectionError incompatibleProjectionErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError>(incompatibleProjectionErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError.IncompatibleProjectionErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of IncompatibleProjectionError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError instance accessors
		
		/// <summary>
		/// Get any DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError links between a given DerivedRoleProjection and a DerivedRoleRequiresCompatibleProjectionError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjection source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleRequiresCompatibleProjectionError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError.ProjectionDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError link in links )
			{
				if ( target.Equals(link.IncompatibleProjectionError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError link between a given DerivedRoleProjectionand a DerivedRoleRequiresCompatibleProjectionError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjection source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleRequiresCompatibleProjectionError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError.ProjectionDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError link in links )
			{
				if ( target.Equals(link.IncompatibleProjectionError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ConstraintRoleSequenceJoinPathHasProjectionRequiredError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathHasProjectionRequiredError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathHasProjectionRequiredError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathHasProjectionRequiredError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("9b4aaf66-ef35-4279-8dc0-5de1c6306ed6")]
	public partial class ConstraintRoleSequenceJoinPathHasProjectionRequiredError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConstraintRoleSequenceJoinPathHasProjectionRequiredError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9b4aaf66, 0xef35, 0x4279, 0x8d, 0xc0, 0x5d, 0xe1, 0xc6, 0x30, 0x6e, 0xd6);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConstraintRoleSequenceJoinPathHasProjectionRequiredError link in the same Partition as the given ConstraintRoleSequenceJoinPath
		/// </summary>
		/// <param name="source">ConstraintRoleSequenceJoinPath to use as the source of the relationship.</param>
		/// <param name="target">ConstraintRoleSequenceJoinPathRequiresProjectionError to use as the target of the relationship.</param>
		public ConstraintRoleSequenceJoinPathHasProjectionRequiredError(ConstraintRoleSequenceJoinPath source, ConstraintRoleSequenceJoinPathRequiresProjectionError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConstraintRoleSequenceJoinPathHasProjectionRequiredError.JoinPathDomainRoleId, source), new DslModeling::RoleAssignment(ConstraintRoleSequenceJoinPathHasProjectionRequiredError.ProjectionRequiredErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConstraintRoleSequenceJoinPathHasProjectionRequiredError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConstraintRoleSequenceJoinPathHasProjectionRequiredError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConstraintRoleSequenceJoinPathHasProjectionRequiredError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConstraintRoleSequenceJoinPathHasProjectionRequiredError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region JoinPath domain role code
		
		/// <summary>
		/// JoinPath domain role Id.
		/// </summary>
		public static readonly global::System.Guid JoinPathDomainRoleId = new global::System.Guid(0x264f2a22, 0x23fd, 0x4358, 0x8c, 0x88, 0xa7, 0x15, 0xff, 0x08, 0x5f, 0x54);
		
		/// <summary>
		/// DomainRole JoinPath
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathHasProjectionRequiredError.JoinPath
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathHasProjectionRequiredError/JoinPath.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathHasProjectionRequiredError/JoinPath.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ProjectionRequiredError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathHasProjectionRequiredError/JoinPath.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("264f2a22-23fd-4358-8c88-a715ff085f54")]
		public virtual ConstraintRoleSequenceJoinPath JoinPath
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConstraintRoleSequenceJoinPath)DslModeling::DomainRoleInfo.GetRolePlayer(this, JoinPathDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, JoinPathDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access JoinPath of a ConstraintRoleSequenceJoinPathRequiresProjectionError
		/// <summary>
		/// Gets JoinPath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ConstraintRoleSequenceJoinPath GetJoinPath(ConstraintRoleSequenceJoinPathRequiresProjectionError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ProjectionRequiredErrorDomainRoleId) as ConstraintRoleSequenceJoinPath;
		}
		
		/// <summary>
		/// Sets JoinPath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetJoinPath(ConstraintRoleSequenceJoinPathRequiresProjectionError element, ConstraintRoleSequenceJoinPath newJoinPath)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ProjectionRequiredErrorDomainRoleId, newJoinPath);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing JoinPath domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.JoinPath;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.JoinPath = (ConstraintRoleSequenceJoinPath)value;
			}
		}
		
		#endregion
		#region ProjectionRequiredError domain role code
		
		/// <summary>
		/// ProjectionRequiredError domain role Id.
		/// </summary>
		public static readonly global::System.Guid ProjectionRequiredErrorDomainRoleId = new global::System.Guid(0x89c0f915, 0xf8cb, 0x4fbb, 0x93, 0x3e, 0x4f, 0x18, 0xcc, 0x77, 0x40, 0x9c);
		
		/// <summary>
		/// DomainRole ProjectionRequiredError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathHasProjectionRequiredError.ProjectionRequiredError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathHasProjectionRequiredError/ProjectionRequiredError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathHasProjectionRequiredError/ProjectionRequiredError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "JoinPath", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathHasProjectionRequiredError/ProjectionRequiredError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("89c0f915-f8cb-4fbb-933e-4f18cc77409c")]
		public virtual ConstraintRoleSequenceJoinPathRequiresProjectionError ProjectionRequiredError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConstraintRoleSequenceJoinPathRequiresProjectionError)DslModeling::DomainRoleInfo.GetRolePlayer(this, ProjectionRequiredErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ProjectionRequiredErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ProjectionRequiredError of a ConstraintRoleSequenceJoinPath
		/// <summary>
		/// Gets ProjectionRequiredError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ConstraintRoleSequenceJoinPathRequiresProjectionError GetProjectionRequiredError(ConstraintRoleSequenceJoinPath element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, JoinPathDomainRoleId) as ConstraintRoleSequenceJoinPathRequiresProjectionError;
		}
		
		/// <summary>
		/// Sets ProjectionRequiredError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetProjectionRequiredError(ConstraintRoleSequenceJoinPath element, ConstraintRoleSequenceJoinPathRequiresProjectionError newProjectionRequiredError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, JoinPathDomainRoleId, newProjectionRequiredError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing ProjectionRequiredError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ProjectionRequiredError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ProjectionRequiredError = (ConstraintRoleSequenceJoinPathRequiresProjectionError)value;
			}
		}
		
		#endregion
		#region JoinPath link accessor
		/// <summary>
		/// Get the ConstraintRoleSequenceJoinPathHasProjectionRequiredError link to a ConstraintRoleSequenceJoinPath.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathHasProjectionRequiredError GetLinkToProjectionRequiredError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPath joinPathInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathHasProjectionRequiredError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathHasProjectionRequiredError>(joinPathInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathHasProjectionRequiredError.JoinPathDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of JoinPath not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ProjectionRequiredError link accessor
		/// <summary>
		/// Get the ConstraintRoleSequenceJoinPathHasProjectionRequiredError link to a ConstraintRoleSequenceJoinPathRequiresProjectionError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathHasProjectionRequiredError GetLinkToJoinPath (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathRequiresProjectionError projectionRequiredErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathHasProjectionRequiredError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathHasProjectionRequiredError>(projectionRequiredErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathHasProjectionRequiredError.ProjectionRequiredErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ProjectionRequiredError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ConstraintRoleSequenceJoinPathHasProjectionRequiredError instance accessors
		
		/// <summary>
		/// Get any ConstraintRoleSequenceJoinPathHasProjectionRequiredError links between a given ConstraintRoleSequenceJoinPath and a ConstraintRoleSequenceJoinPathRequiresProjectionError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathHasProjectionRequiredError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPath source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathRequiresProjectionError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathHasProjectionRequiredError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathHasProjectionRequiredError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathHasProjectionRequiredError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathHasProjectionRequiredError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathHasProjectionRequiredError.JoinPathDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathHasProjectionRequiredError link in links )
			{
				if ( target.Equals(link.ProjectionRequiredError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConstraintRoleSequenceJoinPathHasProjectionRequiredError link between a given ConstraintRoleSequenceJoinPathand a ConstraintRoleSequenceJoinPathRequiresProjectionError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathHasProjectionRequiredError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPath source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathRequiresProjectionError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathHasProjectionRequiredError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathHasProjectionRequiredError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathHasProjectionRequiredError.JoinPathDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathHasProjectionRequiredError link in links )
			{
				if ( target.Equals(link.ProjectionRequiredError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ConstraintRoleSequenceProjectionHasPartialProjectionError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceProjectionHasPartialProjectionError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceProjectionHasPartialProjectionError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceProjectionHasPartialProjectionError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("6710318f-0fcd-4c8b-8c17-1e19c8ea37e9")]
	public partial class ConstraintRoleSequenceProjectionHasPartialProjectionError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConstraintRoleSequenceProjectionHasPartialProjectionError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6710318f, 0x0fcd, 0x4c8b, 0x8c, 0x17, 0x1e, 0x19, 0xc8, 0xea, 0x37, 0xe9);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConstraintRoleSequenceProjectionHasPartialProjectionError link in the same Partition as the given ConstraintRoleSequenceJoinPathProjection
		/// </summary>
		/// <param name="source">ConstraintRoleSequenceJoinPathProjection to use as the source of the relationship.</param>
		/// <param name="target">PartialConstraintRoleSequenceJoinPathProjectionError to use as the target of the relationship.</param>
		public ConstraintRoleSequenceProjectionHasPartialProjectionError(ConstraintRoleSequenceJoinPathProjection source, PartialConstraintRoleSequenceJoinPathProjectionError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConstraintRoleSequenceProjectionHasPartialProjectionError.JoinPathProjectionDomainRoleId, source), new DslModeling::RoleAssignment(ConstraintRoleSequenceProjectionHasPartialProjectionError.PartialProjectionErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConstraintRoleSequenceProjectionHasPartialProjectionError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConstraintRoleSequenceProjectionHasPartialProjectionError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConstraintRoleSequenceProjectionHasPartialProjectionError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConstraintRoleSequenceProjectionHasPartialProjectionError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region JoinPathProjection domain role code
		
		/// <summary>
		/// JoinPathProjection domain role Id.
		/// </summary>
		public static readonly global::System.Guid JoinPathProjectionDomainRoleId = new global::System.Guid(0x72ac227f, 0x7998, 0x4e6f, 0xbf, 0xfe, 0xb8, 0xd0, 0x74, 0xb3, 0xc3, 0xbf);
		
		/// <summary>
		/// DomainRole JoinPathProjection
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceProjectionHasPartialProjectionError.JoinPathProjection
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceProjectionHasPartialProjectionError/JoinPathProjection.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceProjectionHasPartialProjectionError/JoinPathProjection.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "PartialProjectionError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceProjectionHasPartialProjectionError/JoinPathProjection.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("72ac227f-7998-4e6f-bffe-b8d074b3c3bf")]
		public virtual ConstraintRoleSequenceJoinPathProjection JoinPathProjection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConstraintRoleSequenceJoinPathProjection)DslModeling::DomainRoleInfo.GetRolePlayer(this, JoinPathProjectionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, JoinPathProjectionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access JoinPathProjection of a PartialConstraintRoleSequenceJoinPathProjectionError
		/// <summary>
		/// Gets JoinPathProjection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ConstraintRoleSequenceJoinPathProjection GetJoinPathProjection(PartialConstraintRoleSequenceJoinPathProjectionError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PartialProjectionErrorDomainRoleId) as ConstraintRoleSequenceJoinPathProjection;
		}
		
		/// <summary>
		/// Sets JoinPathProjection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetJoinPathProjection(PartialConstraintRoleSequenceJoinPathProjectionError element, ConstraintRoleSequenceJoinPathProjection newJoinPathProjection)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PartialProjectionErrorDomainRoleId, newJoinPathProjection);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing JoinPathProjection domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.JoinPathProjection;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.JoinPathProjection = (ConstraintRoleSequenceJoinPathProjection)value;
			}
		}
		
		#endregion
		#region PartialProjectionError domain role code
		
		/// <summary>
		/// PartialProjectionError domain role Id.
		/// </summary>
		public static readonly global::System.Guid PartialProjectionErrorDomainRoleId = new global::System.Guid(0xf92910d0, 0xfbcd, 0x41a2, 0xb0, 0xb4, 0x8c, 0xf3, 0xda, 0x9d, 0xc7, 0x5e);
		
		/// <summary>
		/// DomainRole PartialProjectionError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceProjectionHasPartialProjectionError.PartialProjectionError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceProjectionHasPartialProjectionError/PartialProjectionError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceProjectionHasPartialProjectionError/PartialProjectionError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "JoinPathProjection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceProjectionHasPartialProjectionError/PartialProjectionError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("f92910d0-fbcd-41a2-b0b4-8cf3da9dc75e")]
		public virtual PartialConstraintRoleSequenceJoinPathProjectionError PartialProjectionError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PartialConstraintRoleSequenceJoinPathProjectionError)DslModeling::DomainRoleInfo.GetRolePlayer(this, PartialProjectionErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PartialProjectionErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PartialProjectionError of a ConstraintRoleSequenceJoinPathProjection
		/// <summary>
		/// Gets PartialProjectionError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static PartialConstraintRoleSequenceJoinPathProjectionError GetPartialProjectionError(ConstraintRoleSequenceJoinPathProjection element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, JoinPathProjectionDomainRoleId) as PartialConstraintRoleSequenceJoinPathProjectionError;
		}
		
		/// <summary>
		/// Sets PartialProjectionError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetPartialProjectionError(ConstraintRoleSequenceJoinPathProjection element, PartialConstraintRoleSequenceJoinPathProjectionError newPartialProjectionError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, JoinPathProjectionDomainRoleId, newPartialProjectionError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing PartialProjectionError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.PartialProjectionError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.PartialProjectionError = (PartialConstraintRoleSequenceJoinPathProjectionError)value;
			}
		}
		
		#endregion
		#region JoinPathProjection link accessor
		/// <summary>
		/// Get the ConstraintRoleSequenceProjectionHasPartialProjectionError link to a ConstraintRoleSequenceJoinPathProjection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceProjectionHasPartialProjectionError GetLinkToPartialProjectionError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathProjection joinPathProjectionInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceProjectionHasPartialProjectionError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceProjectionHasPartialProjectionError>(joinPathProjectionInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceProjectionHasPartialProjectionError.JoinPathProjectionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of JoinPathProjection not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region PartialProjectionError link accessor
		/// <summary>
		/// Get the ConstraintRoleSequenceProjectionHasPartialProjectionError link to a PartialConstraintRoleSequenceJoinPathProjectionError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceProjectionHasPartialProjectionError GetLinkToJoinPathProjection (global::ORMSolutions.ORMArchitect.Core.ObjectModel.PartialConstraintRoleSequenceJoinPathProjectionError partialProjectionErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceProjectionHasPartialProjectionError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceProjectionHasPartialProjectionError>(partialProjectionErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceProjectionHasPartialProjectionError.PartialProjectionErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of PartialProjectionError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ConstraintRoleSequenceProjectionHasPartialProjectionError instance accessors
		
		/// <summary>
		/// Get any ConstraintRoleSequenceProjectionHasPartialProjectionError links between a given ConstraintRoleSequenceJoinPathProjection and a PartialConstraintRoleSequenceJoinPathProjectionError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceProjectionHasPartialProjectionError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathProjection source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PartialConstraintRoleSequenceJoinPathProjectionError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceProjectionHasPartialProjectionError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceProjectionHasPartialProjectionError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceProjectionHasPartialProjectionError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceProjectionHasPartialProjectionError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceProjectionHasPartialProjectionError.JoinPathProjectionDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceProjectionHasPartialProjectionError link in links )
			{
				if ( target.Equals(link.PartialProjectionError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConstraintRoleSequenceProjectionHasPartialProjectionError link between a given ConstraintRoleSequenceJoinPathProjectionand a PartialConstraintRoleSequenceJoinPathProjectionError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceProjectionHasPartialProjectionError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathProjection source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PartialConstraintRoleSequenceJoinPathProjectionError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceProjectionHasPartialProjectionError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceProjectionHasPartialProjectionError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceProjectionHasPartialProjectionError.JoinPathProjectionDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceProjectionHasPartialProjectionError link in links )
			{
				if ( target.Equals(link.PartialProjectionError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainRelationship ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("465c0a3b-06cf-44d8-916f-5651f4a3deac")]
	public partial class ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError : ElementAssociatedWithModelError
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x465c0a3b, 0x06cf, 0x44d8, 0x91, 0x6f, 0x56, 0x51, 0xf4, 0xa3, 0xde, 0xac);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError link in the same Partition as the given ConstraintRoleProjection
		/// </summary>
		/// <param name="source">ConstraintRoleProjection to use as the source of the relationship.</param>
		/// <param name="target">ConstraintRoleRequiresCompatibleJoinPathProjectionError to use as the target of the relationship.</param>
		public ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError(ConstraintRoleProjection source, ConstraintRoleRequiresCompatibleJoinPathProjectionError target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError.ProjectionDomainRoleId, source), new DslModeling::RoleAssignment(ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError.IncompatibleProjectionErrorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Projection domain role code
		
		/// <summary>
		/// Projection domain role Id.
		/// </summary>
		public static readonly global::System.Guid ProjectionDomainRoleId = new global::System.Guid(0xc221c6cc, 0xb400, 0x4985, 0x83, 0x71, 0x74, 0x5d, 0x39, 0x04, 0x28, 0xd7);
		
		/// <summary>
		/// DomainRole Projection
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError.Projection
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError/Projection.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError/Projection.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "IncompatibleProjectionError", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError/Projection.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("c221c6cc-b400-4985-8371-745d390428d7")]
		public virtual ConstraintRoleProjection Projection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConstraintRoleProjection)DslModeling::DomainRoleInfo.GetRolePlayer(this, ProjectionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ProjectionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Projection of a ConstraintRoleRequiresCompatibleJoinPathProjectionError
		/// <summary>
		/// Gets Projection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ConstraintRoleProjection GetProjection(ConstraintRoleRequiresCompatibleJoinPathProjectionError element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, IncompatibleProjectionErrorDomainRoleId) as ConstraintRoleProjection;
		}
		
		/// <summary>
		/// Sets Projection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetProjection(ConstraintRoleRequiresCompatibleJoinPathProjectionError element, ConstraintRoleProjection newProjection)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, IncompatibleProjectionErrorDomainRoleId, newProjection);
		}
		#endregion
		#region AssociatedElement domain role override
		
		/// <summary>
		/// Gets the element playing Projection domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.AssociatedElement
		/// </summary>
		public override global::Microsoft.VisualStudio.Modeling.ModelElement AssociatedElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.Projection;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.Projection = (ConstraintRoleProjection)value;
			}
		}
		
		#endregion
		#region IncompatibleProjectionError domain role code
		
		/// <summary>
		/// IncompatibleProjectionError domain role Id.
		/// </summary>
		public static readonly global::System.Guid IncompatibleProjectionErrorDomainRoleId = new global::System.Guid(0x6cad881f, 0xef56, 0x4e84, 0x97, 0x6f, 0x4d, 0x9d, 0xe8, 0x18, 0xbf, 0x71);
		
		/// <summary>
		/// DomainRole IncompatibleProjectionError
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError.IncompatibleProjectionError
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError/IncompatibleProjectionError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError/IncompatibleProjectionError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Projection", PropertyDisplayNameKey="ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError/IncompatibleProjectionError.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("6cad881f-ef56-4e84-976f-4d9de818bf71")]
		public virtual ConstraintRoleRequiresCompatibleJoinPathProjectionError IncompatibleProjectionError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConstraintRoleRequiresCompatibleJoinPathProjectionError)DslModeling::DomainRoleInfo.GetRolePlayer(this, IncompatibleProjectionErrorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, IncompatibleProjectionErrorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access IncompatibleProjectionError of a ConstraintRoleProjection
		/// <summary>
		/// Gets IncompatibleProjectionError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ConstraintRoleRequiresCompatibleJoinPathProjectionError GetIncompatibleProjectionError(ConstraintRoleProjection element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ProjectionDomainRoleId) as ConstraintRoleRequiresCompatibleJoinPathProjectionError;
		}
		
		/// <summary>
		/// Sets IncompatibleProjectionError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetIncompatibleProjectionError(ConstraintRoleProjection element, ConstraintRoleRequiresCompatibleJoinPathProjectionError newIncompatibleProjectionError)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ProjectionDomainRoleId, newIncompatibleProjectionError);
		}
		#endregion
		#region ModelError domain role override
		
		/// <summary>
		/// Gets the element playing IncompatibleProjectionError domain role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public override ModelError ModelError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.IncompatibleProjectionError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.IncompatibleProjectionError = (ConstraintRoleRequiresCompatibleJoinPathProjectionError)value;
			}
		}
		
		#endregion
		#region Projection link accessor
		/// <summary>
		/// Get the ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError link to a ConstraintRoleProjection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError GetLinkToIncompatibleProjectionError (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjection projectionInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError>(projectionInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError.ProjectionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Projection not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region IncompatibleProjectionError link accessor
		/// <summary>
		/// Get the ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError link to a ConstraintRoleRequiresCompatibleJoinPathProjectionError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError GetLinkToProjection (global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleRequiresCompatibleJoinPathProjectionError incompatibleProjectionErrorInstance)
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError>(incompatibleProjectionErrorInstance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError.IncompatibleProjectionErrorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of IncompatibleProjectionError not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError instance accessors
		
		/// <summary>
		/// Get any ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError links between a given ConstraintRoleProjection and a ConstraintRoleRequiresCompatibleJoinPathProjectionError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError> GetLinks( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjection source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleRequiresCompatibleJoinPathProjectionError target )
		{
			global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError> outLinks = new global::System.Collections.Generic.List<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError>();
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError.ProjectionDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError link in links )
			{
				if ( target.Equals(link.IncompatibleProjectionError) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError link between a given ConstraintRoleProjectionand a ConstraintRoleRequiresCompatibleJoinPathProjectionError.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError GetLink( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjection source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleRequiresCompatibleJoinPathProjectionError target )
		{
			global::System.Collections.Generic.IList<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError>(source, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError.ProjectionDomainRoleId);
			foreach ( global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError link in links )
			{
				if ( target.Equals(link.IncompatibleProjectionError) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
