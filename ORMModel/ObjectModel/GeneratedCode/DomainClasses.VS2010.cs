#region Common Public License Copyright Notice
/**************************************************************************\
* Natural Object-Role Modeling Architect for Visual Studio                 *
*                                                                          *
* Copyright © Neumont University. All rights reserved.                     *
* Copyright © ORM Solutions, LLC. All rights reserved.                     *
*                                                                          *
* The use and distribution terms for this software are covered by the      *
* Common Public License 1.0 (http://opensource.org/licenses/cpl) which     *
* can be found in the file CPL.txt at the root of this distribution.       *
* By using this software in any fashion, you are agreeing to be bound by   *
* the terms of this license.                                               *
*                                                                          *
* You must not remove this notice, or any other, from this software.       *
\**************************************************************************/
#endregion
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass NameConsumer
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameConsumer.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameConsumer.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("491389aa-b7db-4461-b3ce-8064f8de4072")]
	public partial class NameConsumer : ORMModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// NameConsumer domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x491389aa, 0xb7db, 0x4461, 0xb3, 0xce, 0x80, 0x64, 0xf8, 0xde, 0x40, 0x72);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public NameConsumer(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public NameConsumer(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass RecognizedPhrase
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhrase.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhrase.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("df462d31-c2e4-47a5-af48-7ffc55de4b2a")]
	public partial class RecognizedPhrase : ORMNamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// RecognizedPhrase domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xdf462d31, 0xc2e4, 0x47a5, 0xaf, 0x48, 0x7f, 0xfc, 0x55, 0xde, 0x4b, 0x2a);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RecognizedPhrase(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RecognizedPhrase(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region AbbreviationCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of AbbreviationCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasAbbreviation.RecognizedPhrase
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<NameAlias> AbbreviationCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<NameAlias>, NameAlias>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasAbbreviation.RecognizedPhraseDomainRoleId);
			}
		}
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelContainsRecognizedPhrase.RecognizedPhrase
		/// </summary>
		public virtual ORMModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelContainsRecognizedPhrase.RecognizedPhraseDomainRoleId) as ORMModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelContainsRecognizedPhrase.RecognizedPhraseDomainRoleId, value);
			}
		}
		#endregion
		#region DuplicateNameError opposite domain role accessor
		/// <summary>
		/// Gets or sets DuplicateNameError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasDuplicateNameError.RecognizedPhrase
		/// </summary>
		public virtual RecognizedPhraseDuplicateNameError DuplicateNameError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasDuplicateNameError.RecognizedPhraseDomainRoleId) as RecognizedPhraseDuplicateNameError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasDuplicateNameError.RecognizedPhraseDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass NameGenerator
	/// </summary>
	[global::System.ComponentModel.TypeDescriptionProvider(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.ElementTypeDescriptionProvider<NameGenerator, Design.NameGeneratorTypeDescriptor<NameGenerator>>))]
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameGenerator.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameGenerator.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("e032727f-440a-431a-82e7-2454be939c82")]
	public partial class NameGenerator : NameConsumer
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// NameGenerator domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe032727f, 0x440a, 0x431a, 0x82, 0xe7, 0x24, 0x54, 0xbe, 0x93, 0x9c, 0x82);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public NameGenerator(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public NameGenerator(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region NameUsage domain property code
		
		/// <summary>
		/// NameUsage domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameUsageDomainPropertyId = new global::System.Guid(0xb92d3173, 0x900e, 0x4f35, 0xba, 0xc2, 0x32, 0xa6, 0x07, 0xe7, 0x44, 0xfa);
		
		/// <summary>
		/// Gets or sets the value of NameUsage domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameGenerator/NameUsage.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameGenerator/NameUsage.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("b92d3173-900e-4f35-bac2-32a607e744fa")]
		public global::System.String NameUsage
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return NameUsagePropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NameUsagePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the NameGenerator.NameUsage domain property.
		/// </summary>
		internal sealed partial class NameUsagePropertyHandler : DslModeling::DomainPropertyValueHandler<NameGenerator, global::System.String>
		{
			private NameUsagePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NameGenerator.NameUsage domain property value handler.
			/// </summary>
			public static readonly NameUsagePropertyHandler Instance = new NameUsagePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NameGenerator.NameUsage domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameUsageDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(NameGenerator element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for NameUsage because its Kind is
				// set to CustomStorage. Please provide the GetNameUsageValue()
				// method on the domain class.
				return element.GetNameUsageValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(NameGenerator element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for NameUsage because its Kind is
					// set to CustomStorage. Please provide the SetNameUsageValue()
					// method on the domain class.
					element.SetNameUsageValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region CasingOption domain property code
		
		/// <summary>
		/// CasingOption domain property Id.
		/// </summary>
		public static readonly global::System.Guid CasingOptionDomainPropertyId = new global::System.Guid(0x30950747, 0x68e7, 0x4a64, 0x8e, 0xd7, 0xba, 0xce, 0xda, 0xaf, 0xd4, 0xa2);
		
		/// <summary>
		/// Gets or sets the value of CasingOption domain property.
		/// Specify upper/lower case settings of names generated for this context.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameGenerator/CasingOption.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameGenerator/CasingOption.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue(NameGeneratorCasingOption.Uninitialized)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("30950747-68e7-4a64-8ed7-bacedaafd4a2")]
		public NameGeneratorCasingOption CasingOption
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return CasingOptionPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CasingOptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the NameGenerator.CasingOption domain property.
		/// </summary>
		internal sealed partial class CasingOptionPropertyHandler : DslModeling::DomainPropertyValueHandler<NameGenerator, NameGeneratorCasingOption>
		{
			private CasingOptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NameGenerator.CasingOption domain property value handler.
			/// </summary>
			public static readonly CasingOptionPropertyHandler Instance = new CasingOptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NameGenerator.CasingOption domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CasingOptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed NameGeneratorCasingOption GetValue(NameGenerator element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for CasingOption because its Kind is
				// set to CustomStorage. Please provide the GetCasingOptionValue()
				// method on the domain class.
				return element.GetCasingOptionValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(NameGenerator element, NameGeneratorCasingOption newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				NameGeneratorCasingOption oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for CasingOption because its Kind is
					// set to CustomStorage. Please provide the SetCasingOptionValue()
					// method on the domain class.
					element.SetCasingOptionValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SpacingFormat domain property code
		
		/// <summary>
		/// SpacingFormat domain property Id.
		/// </summary>
		public static readonly global::System.Guid SpacingFormatDomainPropertyId = new global::System.Guid(0xcfd3e74c, 0xde51, 0x4fd9, 0xad, 0xdb, 0x01, 0xb0, 0xf5, 0x41, 0x4b, 0xfd);
		
		/// <summary>
		/// Gets or sets the value of SpacingFormat domain property.
		/// Specify if whitespace is preserved, removed, or replaced in names generated for
		/// this context.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameGenerator/SpacingFormat.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameGenerator/SpacingFormat.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue(NameGeneratorSpacingFormat.Uninitialized)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("cfd3e74c-de51-4fd9-addb-01b0f5414bfd")]
		public NameGeneratorSpacingFormat SpacingFormat
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return SpacingFormatPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SpacingFormatPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the NameGenerator.SpacingFormat domain property.
		/// </summary>
		internal sealed partial class SpacingFormatPropertyHandler : DslModeling::DomainPropertyValueHandler<NameGenerator, NameGeneratorSpacingFormat>
		{
			private SpacingFormatPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NameGenerator.SpacingFormat domain property value handler.
			/// </summary>
			public static readonly SpacingFormatPropertyHandler Instance = new SpacingFormatPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NameGenerator.SpacingFormat domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SpacingFormatDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed NameGeneratorSpacingFormat GetValue(NameGenerator element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for SpacingFormat because its Kind is
				// set to CustomStorage. Please provide the GetSpacingFormatValue()
				// method on the domain class.
				return element.GetSpacingFormatValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(NameGenerator element, NameGeneratorSpacingFormat newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				NameGeneratorSpacingFormat oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for SpacingFormat because its Kind is
					// set to CustomStorage. Please provide the SetSpacingFormatValue()
					// method on the domain class.
					element.SetSpacingFormatValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SpacingReplacement domain property code
		
		/// <summary>
		/// SpacingReplacement domain property Id.
		/// </summary>
		public static readonly global::System.Guid SpacingReplacementDomainPropertyId = new global::System.Guid(0x0e203acb, 0x3611, 0x4180, 0x93, 0x24, 0x7f, 0xd7, 0xd3, 0x0a, 0x5a, 0xe4);
		
		/// <summary>
		/// Gets or sets the value of SpacingReplacement domain property.
		/// Specify the characters used instead of spaces in names generated for this
		/// context.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameGenerator/SpacingReplacement.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameGenerator/SpacingReplacement.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("0e203acb-3611-4180-9324-7fd7d30a5ae4")]
		public global::System.String SpacingReplacement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return SpacingReplacementPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SpacingReplacementPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the NameGenerator.SpacingReplacement domain property.
		/// </summary>
		internal sealed partial class SpacingReplacementPropertyHandler : DslModeling::DomainPropertyValueHandler<NameGenerator, global::System.String>
		{
			private SpacingReplacementPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NameGenerator.SpacingReplacement domain property value handler.
			/// </summary>
			public static readonly SpacingReplacementPropertyHandler Instance = new SpacingReplacementPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NameGenerator.SpacingReplacement domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SpacingReplacementDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(NameGenerator element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for SpacingReplacement because its Kind is
				// set to CustomStorage. Please provide the GetSpacingReplacementValue()
				// method on the domain class.
				return element.GetSpacingReplacementValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(NameGenerator element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for SpacingReplacement because its Kind is
					// set to CustomStorage. Please provide the SetSpacingReplacementValue()
					// method on the domain class.
					element.SetSpacingReplacementValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region AutomaticallyShortenNames domain property code
		
		/// <summary>
		/// AutomaticallyShortenNames domain property Id.
		/// </summary>
		public static readonly global::System.Guid AutomaticallyShortenNamesDomainPropertyId = new global::System.Guid(0x6a3526d9, 0xafb3, 0x417e, 0xa9, 0x88, 0xa4, 0x46, 0x44, 0xaa, 0x09, 0x4e);
		
		/// <summary>
		/// Gets or sets the value of AutomaticallyShortenNames domain property.
		/// Specify if names generated for this context should be automatically shortened if
		/// they are too long for the generation target.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameGenerator/AutomaticallyShortenNames.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameGenerator/AutomaticallyShortenNames.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("6a3526d9-afb3-417e-a988-a44644aa094e")]
		public global::System.Boolean AutomaticallyShortenNames
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return AutomaticallyShortenNamesPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				AutomaticallyShortenNamesPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the NameGenerator.AutomaticallyShortenNames domain property.
		/// </summary>
		internal sealed partial class AutomaticallyShortenNamesPropertyHandler : DslModeling::DomainPropertyValueHandler<NameGenerator, global::System.Boolean>
		{
			private AutomaticallyShortenNamesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NameGenerator.AutomaticallyShortenNames domain property value handler.
			/// </summary>
			public static readonly AutomaticallyShortenNamesPropertyHandler Instance = new AutomaticallyShortenNamesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NameGenerator.AutomaticallyShortenNames domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return AutomaticallyShortenNamesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(NameGenerator element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for AutomaticallyShortenNames because its Kind is
				// set to CustomStorage. Please provide the GetAutomaticallyShortenNamesValue()
				// method on the domain class.
				return element.GetAutomaticallyShortenNamesValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(NameGenerator element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for AutomaticallyShortenNames because its Kind is
					// set to CustomStorage. Please provide the SetAutomaticallyShortenNamesValue()
					// method on the domain class.
					element.SetAutomaticallyShortenNamesValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region AutomaticallyShortenNamesInitializer domain property code
		
		/// <summary>
		/// AutomaticallyShortenNamesInitializer domain property Id.
		/// </summary>
		public static readonly global::System.Guid AutomaticallyShortenNamesInitializerDomainPropertyId = new global::System.Guid(0x896c28dd, 0x567b, 0x40fd, 0x8d, 0xce, 0x8b, 0x31, 0x08, 0x0f, 0x32, 0x7f);
		
		/// <summary>
		/// Gets or sets the value of AutomaticallyShortenNamesInitializer domain property.
		/// Alternate storage for AutomaticallyShortenNames boolean so we can track whether
		/// the value has been initialized or not.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameGenerator/AutomaticallyShortenNamesInitializer.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameGenerator/AutomaticallyShortenNamesInitializer.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue(NameGeneratorUninitializedBoolean.Uninitialized)]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("896c28dd-567b-40fd-8dce-8b31080f327f")]
		private NameGeneratorUninitializedBoolean AutomaticallyShortenNamesInitializer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return AutomaticallyShortenNamesInitializerPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				AutomaticallyShortenNamesInitializerPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the NameGenerator.AutomaticallyShortenNamesInitializer domain property.
		/// </summary>
		internal sealed partial class AutomaticallyShortenNamesInitializerPropertyHandler : DslModeling::DomainPropertyValueHandler<NameGenerator, NameGeneratorUninitializedBoolean>
		{
			private AutomaticallyShortenNamesInitializerPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NameGenerator.AutomaticallyShortenNamesInitializer domain property value handler.
			/// </summary>
			public static readonly AutomaticallyShortenNamesInitializerPropertyHandler Instance = new AutomaticallyShortenNamesInitializerPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NameGenerator.AutomaticallyShortenNamesInitializer domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return AutomaticallyShortenNamesInitializerDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed NameGeneratorUninitializedBoolean GetValue(NameGenerator element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for AutomaticallyShortenNamesInitializer because its Kind is
				// set to CustomStorage. Please provide the GetAutomaticallyShortenNamesInitializerValue()
				// method on the domain class.
				return element.GetAutomaticallyShortenNamesInitializerValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(NameGenerator element, NameGeneratorUninitializedBoolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				NameGeneratorUninitializedBoolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for AutomaticallyShortenNamesInitializer because its Kind is
					// set to CustomStorage. Please provide the SetAutomaticallyShortenNamesInitializerValue()
					// method on the domain class.
					element.SetAutomaticallyShortenNamesInitializerValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region UseTargetDefaultMaximum domain property code
		
		/// <summary>
		/// UseTargetDefaultMaximum domain property Id.
		/// </summary>
		public static readonly global::System.Guid UseTargetDefaultMaximumDomainPropertyId = new global::System.Guid(0x67b83b76, 0x394f, 0x4702, 0xa9, 0x84, 0x60, 0x09, 0xdc, 0x51, 0xd2, 0x24);
		
		/// <summary>
		/// Gets or sets the value of UseTargetDefaultMaximum domain property.
		/// Specify if the default maximum name length for this name generation context
		/// should be used when shortening names.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameGenerator/UseTargetDefaultMaximum.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameGenerator/UseTargetDefaultMaximum.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("67b83b76-394f-4702-a984-6009dc51d224")]
		public global::System.Boolean UseTargetDefaultMaximum
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return UseTargetDefaultMaximumPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				UseTargetDefaultMaximumPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the NameGenerator.UseTargetDefaultMaximum domain property.
		/// </summary>
		internal sealed partial class UseTargetDefaultMaximumPropertyHandler : DslModeling::DomainPropertyValueHandler<NameGenerator, global::System.Boolean>
		{
			private UseTargetDefaultMaximumPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NameGenerator.UseTargetDefaultMaximum domain property value handler.
			/// </summary>
			public static readonly UseTargetDefaultMaximumPropertyHandler Instance = new UseTargetDefaultMaximumPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NameGenerator.UseTargetDefaultMaximum domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return UseTargetDefaultMaximumDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(NameGenerator element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for UseTargetDefaultMaximum because its Kind is
				// set to CustomStorage. Please provide the GetUseTargetDefaultMaximumValue()
				// method on the domain class.
				return element.GetUseTargetDefaultMaximumValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(NameGenerator element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for UseTargetDefaultMaximum because its Kind is
					// set to CustomStorage. Please provide the SetUseTargetDefaultMaximumValue()
					// method on the domain class.
					element.SetUseTargetDefaultMaximumValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region UseTargetDefaultMaximumInitializer domain property code
		
		/// <summary>
		/// UseTargetDefaultMaximumInitializer domain property Id.
		/// </summary>
		public static readonly global::System.Guid UseTargetDefaultMaximumInitializerDomainPropertyId = new global::System.Guid(0x12ba0152, 0x03c5, 0x4db7, 0x8d, 0x09, 0x2a, 0x66, 0x89, 0xba, 0x4f, 0xd1);
		
		/// <summary>
		/// Gets or sets the value of UseTargetDefaultMaximumInitializer domain property.
		/// Alternate storage for UseTargetDefaultMaximum boolean so we can track whether
		/// the value has been initialized or not.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameGenerator/UseTargetDefaultMaximumInitializer.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameGenerator/UseTargetDefaultMaximumInitializer.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue(NameGeneratorUninitializedBoolean.Uninitialized)]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("12ba0152-03c5-4db7-8d09-2a6689ba4fd1")]
		private NameGeneratorUninitializedBoolean UseTargetDefaultMaximumInitializer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return UseTargetDefaultMaximumInitializerPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				UseTargetDefaultMaximumInitializerPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the NameGenerator.UseTargetDefaultMaximumInitializer domain property.
		/// </summary>
		internal sealed partial class UseTargetDefaultMaximumInitializerPropertyHandler : DslModeling::DomainPropertyValueHandler<NameGenerator, NameGeneratorUninitializedBoolean>
		{
			private UseTargetDefaultMaximumInitializerPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NameGenerator.UseTargetDefaultMaximumInitializer domain property value handler.
			/// </summary>
			public static readonly UseTargetDefaultMaximumInitializerPropertyHandler Instance = new UseTargetDefaultMaximumInitializerPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NameGenerator.UseTargetDefaultMaximumInitializer domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return UseTargetDefaultMaximumInitializerDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed NameGeneratorUninitializedBoolean GetValue(NameGenerator element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for UseTargetDefaultMaximumInitializer because its Kind is
				// set to CustomStorage. Please provide the GetUseTargetDefaultMaximumInitializerValue()
				// method on the domain class.
				return element.GetUseTargetDefaultMaximumInitializerValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(NameGenerator element, NameGeneratorUninitializedBoolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				NameGeneratorUninitializedBoolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for UseTargetDefaultMaximumInitializer because its Kind is
					// set to CustomStorage. Please provide the SetUseTargetDefaultMaximumInitializerValue()
					// method on the domain class.
					element.SetUseTargetDefaultMaximumInitializerValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region UserDefinedMaximum domain property code
		
		/// <summary>
		/// UserDefinedMaximum domain property Id.
		/// </summary>
		public static readonly global::System.Guid UserDefinedMaximumDomainPropertyId = new global::System.Guid(0xfc154ad5, 0xab52, 0x4ac8, 0x85, 0x6c, 0x28, 0xb0, 0x03, 0x95, 0xab, 0xf4);
		
		/// <summary>
		/// Gets or sets the value of UserDefinedMaximum domain property.
		/// Specify a custom maximum name length for this name generation context.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameGenerator/UserDefinedMaximum.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameGenerator/UserDefinedMaximum.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("fc154ad5-ab52-4ac8-856c-28b00395abf4")]
		public global::System.Int32 UserDefinedMaximum
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return UserDefinedMaximumPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				UserDefinedMaximumPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the NameGenerator.UserDefinedMaximum domain property.
		/// </summary>
		internal sealed partial class UserDefinedMaximumPropertyHandler : DslModeling::DomainPropertyValueHandler<NameGenerator, global::System.Int32>
		{
			private UserDefinedMaximumPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NameGenerator.UserDefinedMaximum domain property value handler.
			/// </summary>
			public static readonly UserDefinedMaximumPropertyHandler Instance = new UserDefinedMaximumPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NameGenerator.UserDefinedMaximum domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return UserDefinedMaximumDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(NameGenerator element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for UserDefinedMaximum because its Kind is
				// set to CustomStorage. Please provide the GetUserDefinedMaximumValue()
				// method on the domain class.
				return element.GetUserDefinedMaximumValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(NameGenerator element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for UserDefinedMaximum because its Kind is
					// set to CustomStorage. Please provide the SetUserDefinedMaximumValue()
					// method on the domain class.
					element.SetUserDefinedMaximumValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region RefinedByGeneratorCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of RefinedByGeneratorCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesNameGenerator.Parent
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<NameGenerator> RefinedByGeneratorCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<NameGenerator>, NameGenerator>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesNameGenerator.ParentDomainRoleId);
			}
		}
		#endregion
		#region RefinesGenerator opposite domain role accessor
		/// <summary>
		/// Gets or sets RefinesGenerator.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesNameGenerator.Refinement
		/// </summary>
		public virtual NameGenerator RefinesGenerator
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesNameGenerator.RefinementDomainRoleId) as NameGenerator;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesNameGenerator.RefinementDomainRoleId, value);
			}
		}
		#endregion
		#region RefinedInstance opposite domain role accessor
		/// <summary>
		/// Gets or sets RefinedInstance.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesInstance.NameGenerator
		/// </summary>
		public virtual global::Microsoft.VisualStudio.Modeling.ModelElement RefinedInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesInstance.NameGeneratorDomainRoleId) as global::Microsoft.VisualStudio.Modeling.ModelElement;
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass NameUsage
	/// </summary>
	[ORMSolutions.ORMArchitect.Core.ObjectModel.NameUsageIdentifier("NameUsage")]
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameUsage.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameUsage.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("5b10b7dc-2018-41d9-aef6-e12104614ca0")]
	public abstract partial class NameUsage : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// NameUsage domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5b10b7dc, 0x2018, 0x41d9, 0xae, 0xf6, 0xe1, 0x21, 0x04, 0x61, 0x4c, 0xa0);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected NameUsage(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass GenerationState
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.GenerationState.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.GenerationState.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("cd0749e6-ddb0-4890-a559-eb70d3f698e0")]
	public partial class GenerationState : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// GenerationState domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xcd0749e6, 0xddb0, 0x4890, 0xa5, 0x59, 0xeb, 0x70, 0xd3, 0xf6, 0x98, 0xe0);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public GenerationState(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public GenerationState(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region GenerationSettingCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of GenerationSettingCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.GenerationStateHasGenerationSetting.GenerationState
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<GenerationSetting> GenerationSettingCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<GenerationSetting>, GenerationSetting>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.GenerationStateHasGenerationSetting.GenerationStateDomainRoleId);
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass GenerationSetting
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.GenerationSetting.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.GenerationSetting.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("b707a1d2-87d1-43ea-93b0-92ed9308a0a5")]
	public abstract partial class GenerationSetting : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// GenerationSetting domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb707a1d2, 0x87d1, 0x43ea, 0x93, 0xb0, 0x92, 0xed, 0x93, 0x08, 0xa0, 0xa5);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected GenerationSetting(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region GenerationState opposite domain role accessor
		/// <summary>
		/// Gets or sets GenerationState.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.GenerationStateHasGenerationSetting.GenerationSetting
		/// </summary>
		public virtual GenerationState GenerationState
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.GenerationStateHasGenerationSetting.GenerationSettingDomainRoleId) as GenerationState;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.GenerationStateHasGenerationSetting.GenerationSettingDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass ModelErrorCategory
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelErrorCategory.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelErrorCategory.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("c9730e21-67a1-47e1-a065-b08c2b3815ce")]
	public abstract partial class ModelErrorCategory : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ModelErrorCategory domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc9730e21, 0x67a1, 0x47e1, 0xa0, 0x65, 0xb0, 0x8c, 0x2b, 0x38, 0x15, 0xce);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ModelErrorCategory(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass ModelErrorDisplayFilter
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelErrorDisplayFilter.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelErrorDisplayFilter.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("67cdce7b-3d28-4a92-b9eb-00418152a13f")]
	public sealed partial class ModelErrorDisplayFilter : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ModelErrorDisplayFilter domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x67cdce7b, 0x3d28, 0x4a92, 0xb9, 0xeb, 0x00, 0x41, 0x81, 0x52, 0xa1, 0x3f);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelErrorDisplayFilter(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelErrorDisplayFilter(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ExcludedCategories domain property code
		
		/// <summary>
		/// ExcludedCategories domain property Id.
		/// </summary>
		public static readonly global::System.Guid ExcludedCategoriesDomainPropertyId = new global::System.Guid(0x46f355f4, 0x001c, 0x4a3f, 0x8a, 0x0f, 0x56, 0xbe, 0xc4, 0xea, 0xcd, 0xeb);
		
		/// <summary>
		/// Gets or sets the value of ExcludedCategories domain property.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelErrorDisplayFilter.ExcludedCategories
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelErrorDisplayFilter/ExcludedCategories.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelErrorDisplayFilter/ExcludedCategories.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("46f355f4-001c-4a3f-8a0f-56bec4eacdeb")]
		public global::System.String ExcludedCategories
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return ExcludedCategoriesPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ExcludedCategoriesPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelErrorDisplayFilter.ExcludedCategories domain property.
		/// </summary>
		internal sealed partial class ExcludedCategoriesPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelErrorDisplayFilter, global::System.String>
		{
			private ExcludedCategoriesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelErrorDisplayFilter.ExcludedCategories domain property value handler.
			/// </summary>
			public static readonly ExcludedCategoriesPropertyHandler Instance = new ExcludedCategoriesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelErrorDisplayFilter.ExcludedCategories domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ExcludedCategoriesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelErrorDisplayFilter element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for ExcludedCategories because its Kind is
				// set to CustomStorage. Please provide the GetExcludedCategoriesValue()
				// method on the domain class.
				return element.GetExcludedCategoriesValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelErrorDisplayFilter element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for ExcludedCategories because its Kind is
					// set to CustomStorage. Please provide the SetExcludedCategoriesValue()
					// method on the domain class.
					element.SetExcludedCategoriesValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IncludedErrors domain property code
		
		/// <summary>
		/// IncludedErrors domain property Id.
		/// </summary>
		public static readonly global::System.Guid IncludedErrorsDomainPropertyId = new global::System.Guid(0xd83d0737, 0x79b4, 0x415d, 0x9c, 0x93, 0x73, 0x44, 0x2f, 0x3c, 0x60, 0x6f);
		
		/// <summary>
		/// Gets or sets the value of IncludedErrors domain property.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelErrorDisplayFilter.IncludedErrors
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelErrorDisplayFilter/IncludedErrors.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelErrorDisplayFilter/IncludedErrors.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("d83d0737-79b4-415d-9c93-73442f3c606f")]
		public global::System.String IncludedErrors
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return IncludedErrorsPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IncludedErrorsPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelErrorDisplayFilter.IncludedErrors domain property.
		/// </summary>
		internal sealed partial class IncludedErrorsPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelErrorDisplayFilter, global::System.String>
		{
			private IncludedErrorsPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelErrorDisplayFilter.IncludedErrors domain property value handler.
			/// </summary>
			public static readonly IncludedErrorsPropertyHandler Instance = new IncludedErrorsPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelErrorDisplayFilter.IncludedErrors domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IncludedErrorsDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelErrorDisplayFilter element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for IncludedErrors because its Kind is
				// set to CustomStorage. Please provide the GetIncludedErrorsValue()
				// method on the domain class.
				return element.GetIncludedErrorsValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelErrorDisplayFilter element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for IncludedErrors because its Kind is
					// set to CustomStorage. Please provide the SetIncludedErrorsValue()
					// method on the domain class.
					element.SetIncludedErrorsValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ExcludedErrors domain property code
		
		/// <summary>
		/// ExcludedErrors domain property Id.
		/// </summary>
		public static readonly global::System.Guid ExcludedErrorsDomainPropertyId = new global::System.Guid(0x593d1e1a, 0xc01d, 0x48e8, 0x83, 0x85, 0x15, 0x07, 0xc7, 0xf9, 0x5a, 0x25);
		
		/// <summary>
		/// Gets or sets the value of ExcludedErrors domain property.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelErrorDisplayFilter.ExcludedErrors
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelErrorDisplayFilter/ExcludedErrors.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelErrorDisplayFilter/ExcludedErrors.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("593d1e1a-c01d-48e8-8385-1507c7f95a25")]
		public global::System.String ExcludedErrors
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return ExcludedErrorsPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ExcludedErrorsPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelErrorDisplayFilter.ExcludedErrors domain property.
		/// </summary>
		internal sealed partial class ExcludedErrorsPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelErrorDisplayFilter, global::System.String>
		{
			private ExcludedErrorsPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelErrorDisplayFilter.ExcludedErrors domain property value handler.
			/// </summary>
			public static readonly ExcludedErrorsPropertyHandler Instance = new ExcludedErrorsPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelErrorDisplayFilter.ExcludedErrors domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ExcludedErrorsDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelErrorDisplayFilter element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for ExcludedErrors because its Kind is
				// set to CustomStorage. Please provide the GetExcludedErrorsValue()
				// method on the domain class.
				return element.GetExcludedErrorsValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelErrorDisplayFilter element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for ExcludedErrors because its Kind is
					// set to CustomStorage. Please provide the SetExcludedErrorsValue()
					// method on the domain class.
					element.SetExcludedErrorsValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelErrorDisplayFilter.ModelErrorDisplayFilter
		/// </summary>
		public ORMModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelErrorDisplayFilter.ModelErrorDisplayFilterDomainRoleId) as ORMModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelErrorDisplayFilter.ModelDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelErrorDisplayFilter.ModelDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelErrorDisplayFilter.ModelErrorDisplayFilterDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass PopulationErrorCategory
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PopulationErrorCategory.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PopulationErrorCategory.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("18c1ae31-7241-453e-9dcb-9409aca41896")]
	public abstract partial class PopulationErrorCategory : ModelErrorCategory
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// PopulationErrorCategory domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x18c1ae31, 0x7241, 0x453e, 0x9d, 0xcb, 0x94, 0x09, 0xac, 0xa4, 0x18, 0x96);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected PopulationErrorCategory(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass DataTypeAndValueErrorCategory
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DataTypeAndValueErrorCategory.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DataTypeAndValueErrorCategory.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("d98ce8a4-2cb0-423e-80ac-4e4e7a963ec3")]
	public abstract partial class DataTypeAndValueErrorCategory : ModelErrorCategory
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DataTypeAndValueErrorCategory domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd98ce8a4, 0x2cb0, 0x423e, 0x80, 0xac, 0x4e, 0x4e, 0x7a, 0x96, 0x3e, 0xc3);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected DataTypeAndValueErrorCategory(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass ConstraintImplicationAndContradictionErrorCategory
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintImplicationAndContradictionErrorCategory.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintImplicationAndContradictionErrorCategory.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("a8846faf-a765-4e39-a876-cfa09a1ffb3a")]
	public abstract partial class ConstraintImplicationAndContradictionErrorCategory : ModelErrorCategory
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ConstraintImplicationAndContradictionErrorCategory domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa8846faf, 0xa765, 0x4e39, 0xa8, 0x76, 0xcf, 0xa0, 0x9a, 0x1f, 0xfb, 0x3a);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ConstraintImplicationAndContradictionErrorCategory(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass ConstraintStructureErrorCategory
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintStructureErrorCategory.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintStructureErrorCategory.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("feabde83-e7b0-44c1-b6c8-3f0ef3e09589")]
	public abstract partial class ConstraintStructureErrorCategory : ModelErrorCategory
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ConstraintStructureErrorCategory domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfeabde83, 0xe7b0, 0x44c1, 0xb6, 0xc8, 0x3f, 0x0e, 0xf3, 0xe0, 0x95, 0x89);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ConstraintStructureErrorCategory(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass FactTypeDefinitionErrorCategory
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDefinitionErrorCategory.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDefinitionErrorCategory.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("1360b437-c64f-4a30-956b-47d4f1c7e85b")]
	public abstract partial class FactTypeDefinitionErrorCategory : ModelErrorCategory
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// FactTypeDefinitionErrorCategory domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1360b437, 0xc64f, 0x4a30, 0x95, 0x6b, 0x47, 0xd4, 0xf1, 0xc7, 0xe8, 0x5b);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected FactTypeDefinitionErrorCategory(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass ReferenceSchemeErrorCategory
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceSchemeErrorCategory.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceSchemeErrorCategory.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("2f515685-36d3-4631-a6c4-572bd9644fd7")]
	public abstract partial class ReferenceSchemeErrorCategory : ModelErrorCategory
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ReferenceSchemeErrorCategory domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2f515685, 0x36d3, 0x4631, 0xa6, 0xc4, 0x57, 0x2b, 0xd9, 0x64, 0x4f, 0xd7);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ReferenceSchemeErrorCategory(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass NameErrorCategory
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameErrorCategory.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameErrorCategory.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("57ae5888-89e0-4449-b0c8-80802deb014c")]
	public abstract partial class NameErrorCategory : ModelErrorCategory
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// NameErrorCategory domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x57ae5888, 0x89e0, 0x4449, 0xb0, 0xc8, 0x80, 0x80, 0x2d, 0xeb, 0x01, 0x4c);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected NameErrorCategory(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass RolePathErrorCategory
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathErrorCategory.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathErrorCategory.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("abb9db45-338e-47ff-994f-7766818c8a2a")]
	public abstract partial class RolePathErrorCategory : ModelErrorCategory
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// RolePathErrorCategory domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xabb9db45, 0x338e, 0x47ff, 0x99, 0x4f, 0x77, 0x66, 0x81, 0x8c, 0x8a, 0x2a);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected RolePathErrorCategory(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass ElementGroupingSet
	/// A Group owner, allows group containment, order, and naming enforcement.
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSet.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSet.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("c0436ce8-6957-4fb9-a526-d94dc2073c02")]
	public sealed partial class ElementGroupingSet : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ElementGroupingSet domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc0436ce8, 0x6957, 0x4fb9, 0xa5, 0x26, 0xd9, 0x4d, 0xc2, 0x07, 0x3c, 0x02);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ElementGroupingSet(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ElementGroupingSet(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetRelatesToORMModel.GroupingSet
		/// </summary>
		public ORMModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetRelatesToORMModel.GroupingSetDomainRoleId) as ORMModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetRelatesToORMModel.ModelDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetRelatesToORMModel.ModelDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetRelatesToORMModel.GroupingSetDomainRoleId, value);
				}
			}
		}
		#endregion
		#region GroupingCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of GroupingCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetContainsElementGrouping.GroupingSet
		/// </summary>
		public DslModeling::LinkedElementCollection<ElementGrouping> GroupingCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ElementGrouping>, ElementGrouping>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetContainsElementGrouping.GroupingSetDomainRoleId);
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass ElementGrouping
	/// A group of elements. A GroupType is associated with the Group to control the
	/// group contents.
	/// </summary>
	[global::System.ComponentModel.TypeDescriptionProvider(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.ElementTypeDescriptionProvider<ElementGrouping, Design.ElementGroupingTypeDescriptor<ElementGrouping>>))]
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("b3856187-efeb-4437-af4c-8df5504fb461")]
	public partial class ElementGrouping : ORMNamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ElementGrouping domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb3856187, 0xefeb, 0x4437, 0xaf, 0x4c, 0x8d, 0xf5, 0x50, 0x4f, 0xb4, 0x61);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ElementGrouping(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ElementGrouping(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region DefinitionText domain property code
		
		/// <summary>
		/// DefinitionText domain property Id.
		/// </summary>
		public static readonly global::System.Guid DefinitionTextDomainPropertyId = new global::System.Guid(0xd1539042, 0x2a67, 0x413b, 0x8b, 0x3b, 0x12, 0xd0, 0x07, 0x75, 0xbb, 0x8d);
		
		/// <summary>
		/// Gets or sets the value of DefinitionText domain property.
		/// An informal description of this group.
		///     To insert new lines, use Control-Enter in the dropdown editor, or open the
		/// 'ORM Informal Description Editor' tool window.
		/// </summary>
		[global::System.ComponentModel.Editor(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.MultilineTextEditor<global::ORMSolutions.ORMArchitect.Core.ObjectModel.Definition>), typeof(global::System.Drawing.Design.UITypeEditor))]
		[global::System.ComponentModel.MergableProperty(false)]
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping/DefinitionText.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::CategoryResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping/DefinitionText.Category", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping/DefinitionText.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("d1539042-2a67-413b-8b3b-12d00775bb8d")]
		public global::System.String DefinitionText
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DefinitionTextPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DefinitionTextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ElementGrouping.DefinitionText domain property.
		/// </summary>
		internal sealed partial class DefinitionTextPropertyHandler : DslModeling::DomainPropertyValueHandler<ElementGrouping, global::System.String>
		{
			private DefinitionTextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ElementGrouping.DefinitionText domain property value handler.
			/// </summary>
			public static readonly DefinitionTextPropertyHandler Instance = new DefinitionTextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ElementGrouping.DefinitionText domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DefinitionTextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ElementGrouping element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for DefinitionText because its Kind is
				// set to CustomStorage. Please provide the GetDefinitionTextValue()
				// method on the domain class.
				return element.GetDefinitionTextValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ElementGrouping element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for DefinitionText because its Kind is
					// set to CustomStorage. Please provide the SetDefinitionTextValue()
					// method on the domain class.
					element.SetDefinitionTextValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region NoteText domain property code
		
		/// <summary>
		/// NoteText domain property Id.
		/// </summary>
		public static readonly global::System.Guid NoteTextDomainPropertyId = new global::System.Guid(0x39b0228b, 0x8884, 0x4e4e, 0xb5, 0x95, 0x4f, 0x05, 0x8f, 0x19, 0x2b, 0x50);
		
		/// <summary>
		/// Gets or sets the value of NoteText domain property.
		/// A note to associate with this group.
		///     To insert new lines, use Control-Enter in the dropdown editor, or open the
		/// 'ORM Notes Editor' tool window.
		/// </summary>
		[global::System.ComponentModel.Editor(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.MultilineTextEditor<global::ORMSolutions.ORMArchitect.Core.ObjectModel.Note>), typeof(global::System.Drawing.Design.UITypeEditor))]
		[global::System.ComponentModel.MergableProperty(false)]
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping/NoteText.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::CategoryResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping/NoteText.Category", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping/NoteText.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("39b0228b-8884-4e4e-b595-4f058f192b50")]
		public global::System.String NoteText
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return NoteTextPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NoteTextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ElementGrouping.NoteText domain property.
		/// </summary>
		internal sealed partial class NoteTextPropertyHandler : DslModeling::DomainPropertyValueHandler<ElementGrouping, global::System.String>
		{
			private NoteTextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ElementGrouping.NoteText domain property value handler.
			/// </summary>
			public static readonly NoteTextPropertyHandler Instance = new NoteTextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ElementGrouping.NoteText domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NoteTextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ElementGrouping element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for NoteText because its Kind is
				// set to CustomStorage. Please provide the GetNoteTextValue()
				// method on the domain class.
				return element.GetNoteTextValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ElementGrouping element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for NoteText because its Kind is
					// set to CustomStorage. Please provide the SetNoteTextValue()
					// method on the domain class.
					element.SetNoteTextValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TypeCompliance domain property code
		
		/// <summary>
		/// TypeCompliance domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypeComplianceDomainPropertyId = new global::System.Guid(0x16e7b546, 0x46ce, 0x4a46, 0xae, 0xd5, 0x14, 0x37, 0xed, 0xb5, 0xfa, 0x6c);
		
		/// <summary>
		/// Storage for TypeCompliance
		/// </summary>
		private GroupingMembershipTypeCompliance typeCompliancePropertyStorage = GroupingMembershipTypeCompliance.NotExcluded;
		
		/// <summary>
		/// Gets or sets the value of TypeCompliance domain property.
		/// Specify the level of GroupType compliance for elements in this group.
		///     Not Excluded: Allow elements not explicitly excluded by a selected
		/// GroupType.
		///     Approved by Some Type: Allow elements explicitly approved by at least one
		/// GroupType.
		///     Approved by All Types: Allow elements explicitly approved by all selected
		/// GroupTypes.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping/TypeCompliance.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::CategoryResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping/TypeCompliance.Category", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping/TypeCompliance.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue(GroupingMembershipTypeCompliance.NotExcluded)]
		[DslModeling::DomainObjectId("16e7b546-46ce-4a46-aed5-1437edb5fa6c")]
		public GroupingMembershipTypeCompliance TypeCompliance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return typeCompliancePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TypeCompliancePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ElementGrouping.TypeCompliance domain property.
		/// </summary>
		internal sealed partial class TypeCompliancePropertyHandler : DslModeling::DomainPropertyValueHandler<ElementGrouping, GroupingMembershipTypeCompliance>
		{
			private TypeCompliancePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ElementGrouping.TypeCompliance domain property value handler.
			/// </summary>
			public static readonly TypeCompliancePropertyHandler Instance = new TypeCompliancePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ElementGrouping.TypeCompliance domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TypeComplianceDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed GroupingMembershipTypeCompliance GetValue(ElementGrouping element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.typeCompliancePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ElementGrouping element, GroupingMembershipTypeCompliance newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				GroupingMembershipTypeCompliance oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.typeCompliancePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Priority domain property code
		
		/// <summary>
		/// Priority domain property Id.
		/// </summary>
		public static readonly global::System.Guid PriorityDomainPropertyId = new global::System.Guid(0xc290cb24, 0x0f2c, 0x4e67, 0xa5, 0x61, 0xfc, 0xd2, 0x5d, 0xda, 0x53, 0xe8);
		
		/// <summary>
		/// Storage for Priority
		/// </summary>
		private global::System.Int32 priorityPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Priority domain property.
		/// Specify a priority relative to other Groups. If an element is included in two
		/// groups of the same type, the settings for the Group with the highest
		/// GroupPriority are given precedence.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping/Priority.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::CategoryResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping/Priority.Category", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGrouping/Priority.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainObjectId("c290cb24-0f2c-4e67-a561-fcd25dda53e8")]
		public global::System.Int32 Priority
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return priorityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				PriorityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ElementGrouping.Priority domain property.
		/// </summary>
		internal sealed partial class PriorityPropertyHandler : DslModeling::DomainPropertyValueHandler<ElementGrouping, global::System.Int32>
		{
			private PriorityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ElementGrouping.Priority domain property value handler.
			/// </summary>
			public static readonly PriorityPropertyHandler Instance = new PriorityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ElementGrouping.Priority domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PriorityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(ElementGrouping element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.priorityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ElementGrouping element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.priorityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Definition opposite domain role accessor
		/// <summary>
		/// Gets or sets Definition.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDefinition.Grouping
		/// </summary>
		public virtual Definition Definition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDefinition.GroupingDomainRoleId) as Definition;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDefinition.DefinitionDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDefinition.DefinitionDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDefinition.GroupingDomainRoleId, value);
				}
			}
		}
		#endregion
		#region Note opposite domain role accessor
		/// <summary>
		/// Gets or sets Note.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasNote.Grouping
		/// </summary>
		public virtual Note Note
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasNote.GroupingDomainRoleId) as Note;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasNote.NoteDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasNote.NoteDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasNote.GroupingDomainRoleId, value);
				}
			}
		}
		#endregion
		#region GroupingSet opposite domain role accessor
		/// <summary>
		/// Gets or sets GroupingSet.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetContainsElementGrouping.Grouping
		/// </summary>
		public ElementGroupingSet GroupingSet
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetContainsElementGrouping.GroupingDomainRoleId) as ElementGroupingSet;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetContainsElementGrouping.GroupingDomainRoleId, value);
			}
		}
		#endregion
		#region GroupingTypeCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of GroupingTypeCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIsOfElementGroupingType.Grouping
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ElementGroupingType> GroupingTypeCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ElementGroupingType>, ElementGroupingType>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIsOfElementGroupingType.GroupingDomainRoleId);
			}
		}
		#endregion
		#region ElementCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ElementCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementRelationship.Grouping
		/// </summary>
		public virtual DslModeling::ReadOnlyLinkedElementCollection<global::Microsoft.VisualStudio.Modeling.ModelElement> ElementCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::ReadOnlyLinkedElementCollection<global::Microsoft.VisualStudio.Modeling.ModelElement>, global::Microsoft.VisualStudio.Modeling.ModelElement>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementRelationship.GroupingDomainRoleId);
			}
		}
		#endregion
		#region IncludedElementCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of IncludedElementCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementInclusion.Grouping
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<global::Microsoft.VisualStudio.Modeling.ModelElement> IncludedElementCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<global::Microsoft.VisualStudio.Modeling.ModelElement>, global::Microsoft.VisualStudio.Modeling.ModelElement>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementInclusion.GroupingDomainRoleId);
			}
		}
		#endregion
		#region ExcludedElementCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ExcludedElementCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementExclusion.Grouping
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<global::Microsoft.VisualStudio.Modeling.ModelElement> ExcludedElementCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<global::Microsoft.VisualStudio.Modeling.ModelElement>, global::Microsoft.VisualStudio.Modeling.ModelElement>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingElementExclusion.GroupingDomainRoleId);
			}
		}
		#endregion
		#region ChildGroupingCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ChildGroupingCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingContainsElementGrouping.ParentGrouping
		/// </summary>
		public virtual DslModeling::ReadOnlyLinkedElementCollection<ElementGrouping> ChildGroupingCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::ReadOnlyLinkedElementCollection<ElementGrouping>, ElementGrouping>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingContainsElementGrouping.ParentGroupingDomainRoleId);
			}
		}
		#endregion
		#region ParentGroupingCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ParentGroupingCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingContainsElementGrouping.ChildGrouping
		/// </summary>
		public virtual DslModeling::ReadOnlyLinkedElementCollection<ElementGrouping> ParentGroupingCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::ReadOnlyLinkedElementCollection<ElementGrouping>, ElementGrouping>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingContainsElementGrouping.ChildGroupingDomainRoleId);
			}
		}
		#endregion
		#region IncludedChildGroupingCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of IncludedChildGroupingCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIncludesElementGrouping.ParentGrouping
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ElementGrouping> IncludedChildGroupingCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ElementGrouping>, ElementGrouping>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIncludesElementGrouping.ParentGroupingDomainRoleId);
			}
		}
		#endregion
		#region IncludedParentGroupingCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of IncludedParentGroupingCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIncludesElementGrouping.IncludedChildGrouping
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ElementGrouping> IncludedParentGroupingCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ElementGrouping>, ElementGrouping>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIncludesElementGrouping.IncludedChildGroupingDomainRoleId);
			}
		}
		#endregion
		#region ExcludedChildGroupingCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ExcludedChildGroupingCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingExcludesElementGrouping.ParentGrouping
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ElementGrouping> ExcludedChildGroupingCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ElementGrouping>, ElementGrouping>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingExcludesElementGrouping.ParentGroupingDomainRoleId);
			}
		}
		#endregion
		#region ExcludedParentGroupingCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ExcludedParentGroupingCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingExcludesElementGrouping.ExcludedChildGrouping
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ElementGrouping> ExcludedParentGroupingCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ElementGrouping>, ElementGrouping>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingExcludesElementGrouping.ExcludedChildGroupingDomainRoleId);
			}
		}
		#endregion
		#region DuplicateNameError opposite domain role accessor
		/// <summary>
		/// Gets or sets DuplicateNameError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDuplicateNameError.Grouping
		/// </summary>
		public virtual ElementGroupingDuplicateNameError DuplicateNameError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDuplicateNameError.GroupingDomainRoleId) as ElementGroupingDuplicateNameError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDuplicateNameError.GroupingDomainRoleId, value);
			}
		}
		#endregion
		#region MembershipContradictionErrorCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of MembershipContradictionErrorCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasMembershipContradictionError.Grouping
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ElementGroupingMembershipContradictionError> MembershipContradictionErrorCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ElementGroupingMembershipContradictionError>, ElementGroupingMembershipContradictionError>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasMembershipContradictionError.GroupingDomainRoleId);
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass ElementGroupingType
	/// A type for a group. Each Group is associated with a new instance of each of its
	/// GroupTypes, allowing individual settings per group.
	/// </summary>
	[global::System.ComponentModel.TypeDescriptionProvider(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.ElementTypeDescriptionProvider<ElementGroupingType, Design.ElementGroupingTypeTypeDescriptor<ElementGroupingType>>))]
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("0f0515df-287f-44a2-9ec1-74dbdba87146")]
	public abstract partial class ElementGroupingType : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ElementGroupingType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0f0515df, 0x287f, 0x44a2, 0x9e, 0xc1, 0x74, 0xdb, 0xdb, 0xa8, 0x71, 0x46);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ElementGroupingType(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Grouping opposite domain role accessor
		/// <summary>
		/// Gets or sets Grouping.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIsOfElementGroupingType.GroupingType
		/// </summary>
		public virtual ElementGrouping Grouping
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIsOfElementGroupingType.GroupingTypeDomainRoleId) as ElementGrouping;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIsOfElementGroupingType.GroupingTypeDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass ElementGroupingErrorCategory
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingErrorCategory.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingErrorCategory.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("7da10a75-7d12-41d9-8d11-38675314c654")]
	public abstract partial class ElementGroupingErrorCategory : ModelErrorCategory
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ElementGroupingErrorCategory domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7da10a75, 0x7d12, 0x41d9, 0x8d, 0x11, 0x38, 0x67, 0x53, 0x14, 0xc6, 0x54);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ElementGroupingErrorCategory(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass ElementGroupingDuplicateNameError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingDuplicateNameError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingDuplicateNameError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("374625ca-858d-42b7-a9e4-1b33bae89eff")]
	public partial class ElementGroupingDuplicateNameError : DuplicateNameError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ElementGroupingDuplicateNameError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x374625ca, 0x858d, 0x42b7, 0xa9, 0xe4, 0x1b, 0x33, 0xba, 0xe8, 0x9e, 0xff);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ElementGroupingDuplicateNameError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ElementGroupingDuplicateNameError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region GroupingCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of GroupingCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDuplicateNameError.DuplicateNameError
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ElementGrouping> GroupingCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ElementGrouping>, ElementGrouping>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDuplicateNameError.DuplicateNameErrorDomainRoleId);
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass ElementGroupingMembershipContradictionError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingMembershipContradictionError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingMembershipContradictionError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("db58cea7-1371-4433-b455-2ac77dee27ad")]
	public partial class ElementGroupingMembershipContradictionError : ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ElementGroupingMembershipContradictionError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xdb58cea7, 0x1371, 0x4433, 0xb4, 0x55, 0x2a, 0xc7, 0x7d, 0xee, 0x27, 0xad);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ElementGroupingMembershipContradictionError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ElementGroupingMembershipContradictionError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Grouping opposite domain role accessor
		/// <summary>
		/// Gets or sets Grouping.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasMembershipContradictionError.MembershipContradictionError
		/// </summary>
		public virtual ElementGrouping Grouping
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasMembershipContradictionError.MembershipContradictionErrorDomainRoleId) as ElementGrouping;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasMembershipContradictionError.MembershipContradictionErrorDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass ORMModelElement
	/// </summary>
	[global::System.ComponentModel.TypeDescriptionProvider(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.ElementTypeDescriptionProvider<ORMModelElement, Design.ORMModelElementTypeDescriptor<ORMModelElement>>))]
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElement.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElement.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("bfbbee5e-c691-4299-b958-77ac1b701f28")]
	public abstract partial class ORMModelElement : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ORMModelElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbfbbee5e, 0xc691, 0x4299, 0xb9, 0x58, 0x77, 0xac, 0x1b, 0x70, 0x1f, 0x28);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ORMModelElement(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ExtensionCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ExtensionCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionElement.ExtendedElement
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<global::Microsoft.VisualStudio.Modeling.ModelElement> ExtensionCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<global::Microsoft.VisualStudio.Modeling.ModelElement>, global::Microsoft.VisualStudio.Modeling.ModelElement>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionElement.ExtendedElementDomainRoleId);
			}
		}
		#endregion
		#region ExtensionModelErrorCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ExtensionModelErrorCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionModelError.ExtendedElement
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelError> ExtensionModelErrorCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ModelError>, ModelError>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionModelError.ExtendedElementDomainRoleId);
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass ORMNamedElement
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ORMNamedElement.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ORMNamedElement.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("c2be18ba-bc16-4764-baa1-18e721435bce")]
	public abstract partial class ORMNamedElement : ORMModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ORMNamedElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc2be18ba, 0xbc16, 0x4764, 0xba, 0xa1, 0x18, 0xe7, 0x21, 0x43, 0x5b, 0xce);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ORMNamedElement(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x4a557c1e, 0x0a89, 0x49b7, 0xb4, 0xbd, 0xfa, 0x09, 0x5f, 0x62, 0x67, 0xd7);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// A name for this element.
		/// </summary>
		[global::System.ComponentModel.MergableProperty(false)]
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ORMNamedElement/Name.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ORMNamedElement/Name.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("4a557c1e-0a89-49b7-b4bd-fa095f6267d7")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ORMNamedElement.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<ORMNamedElement, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ORMNamedElement.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ORMNamedElement.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ORMNamedElement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ORMNamedElement element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// Double-derived base class for DomainClass ORMModel
	/// </summary>
	[global::System.ComponentModel.TypeDescriptionProvider(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.ElementTypeDescriptionProvider<ORMModel, Design.ORMModelTypeDescriptor>))]
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("73e1f528-9e60-4198-aac2-f8d6ccf62eb3")]
	public abstract partial class ORMModelBase : ORMNamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ORMModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x73e1f528, 0x9e60, 0x4198, 0xaa, 0xc2, 0xf8, 0xd6, 0xcc, 0xf6, 0x2e, 0xb3);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ORMModelBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region DefinitionText domain property code
		
		/// <summary>
		/// DefinitionText domain property Id.
		/// </summary>
		public static readonly global::System.Guid DefinitionTextDomainPropertyId = new global::System.Guid(0xe86a38c9, 0x2f8e, 0x4066, 0x81, 0x14, 0x38, 0x41, 0x84, 0xc5, 0xe3, 0xc3);
		
		/// <summary>
		/// Gets or sets the value of DefinitionText domain property.
		/// An informal description of this Model.
		///     To insert new lines, use Control-Enter in the dropdown editor, or open the
		/// 'ORM Informal Description Editor' tool window.
		/// </summary>
		[global::System.ComponentModel.Editor(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.MultilineTextEditor<global::ORMSolutions.ORMArchitect.Core.ObjectModel.Definition>), typeof(global::System.Drawing.Design.UITypeEditor))]
		[global::System.ComponentModel.MergableProperty(false)]
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel/DefinitionText.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel/DefinitionText.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("e86a38c9-2f8e-4066-8114-384184c5e3c3")]
		public global::System.String DefinitionText
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DefinitionTextPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DefinitionTextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ORMModel.DefinitionText domain property.
		/// </summary>
		internal sealed partial class DefinitionTextPropertyHandler : DslModeling::DomainPropertyValueHandler<ORMModelBase, global::System.String>
		{
			private DefinitionTextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ORMModel.DefinitionText domain property value handler.
			/// </summary>
			public static readonly DefinitionTextPropertyHandler Instance = new DefinitionTextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ORMModel.DefinitionText domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DefinitionTextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ORMModelBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for DefinitionText because its Kind is
				// set to CustomStorage. Please provide the GetDefinitionTextValue()
				// method on the domain class.
				return element.GetDefinitionTextValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ORMModelBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for DefinitionText because its Kind is
					// set to CustomStorage. Please provide the SetDefinitionTextValue()
					// method on the domain class.
					element.SetDefinitionTextValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region NoteText domain property code
		
		/// <summary>
		/// NoteText domain property Id.
		/// </summary>
		public static readonly global::System.Guid NoteTextDomainPropertyId = new global::System.Guid(0x603a1f7b, 0x06a4, 0x4b85, 0x9b, 0x0d, 0xe3, 0xa8, 0x56, 0x29, 0xff, 0x98);
		
		/// <summary>
		/// Gets or sets the value of NoteText domain property.
		/// A note to associate with this Model.
		///     To insert new lines, use Control-Enter in the dropdown editor, or open the
		/// 'ORM Notes Editor' tool window.
		/// </summary>
		[global::System.ComponentModel.Editor(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.MultilineTextEditor<global::ORMSolutions.ORMArchitect.Core.ObjectModel.Note>), typeof(global::System.Drawing.Design.UITypeEditor))]
		[global::System.ComponentModel.MergableProperty(false)]
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel/NoteText.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel/NoteText.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("603a1f7b-06a4-4b85-9b0d-e3a85629ff98")]
		public global::System.String NoteText
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return NoteTextPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NoteTextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ORMModel.NoteText domain property.
		/// </summary>
		internal sealed partial class NoteTextPropertyHandler : DslModeling::DomainPropertyValueHandler<ORMModelBase, global::System.String>
		{
			private NoteTextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ORMModel.NoteText domain property value handler.
			/// </summary>
			public static readonly NoteTextPropertyHandler Instance = new NoteTextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ORMModel.NoteText domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NoteTextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ORMModelBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for NoteText because its Kind is
				// set to CustomStorage. Please provide the GetNoteTextValue()
				// method on the domain class.
				return element.GetNoteTextValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ORMModelBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for NoteText because its Kind is
					// set to CustomStorage. Please provide the SetNoteTextValue()
					// method on the domain class.
					element.SetNoteTextValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ObjectTypeCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ObjectTypeCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasObjectType.Model
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ObjectType> ObjectTypeCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ObjectType>, ObjectType>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasObjectType.ModelDomainRoleId);
			}
		}
		#endregion
		#region FactTypeCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of FactTypeCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasFactType.Model
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<FactType> FactTypeCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<FactType>, FactType>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasFactType.ModelDomainRoleId);
			}
		}
		#endregion
		#region ReferenceModeKindCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ReferenceModeKindCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceModeKind.Model
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ReferenceModeKind> ReferenceModeKindCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ReferenceModeKind>, ReferenceModeKind>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceModeKind.ModelDomainRoleId);
			}
		}
		#endregion
		#region ReferenceModeCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ReferenceModeCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceMode.Model
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ReferenceMode> ReferenceModeCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ReferenceMode>, ReferenceMode>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceMode.ModelDomainRoleId);
			}
		}
		#endregion
		#region SetConstraintCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SetConstraintCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetConstraint.Model
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<SetConstraint> SetConstraintCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<SetConstraint>, SetConstraint>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetConstraint.ModelDomainRoleId);
			}
		}
		#endregion
		#region SetComparisonConstraintCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SetComparisonConstraintCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetComparisonConstraint.Model
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<SetComparisonConstraint> SetComparisonConstraintCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<SetComparisonConstraint>, SetComparisonConstraint>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetComparisonConstraint.ModelDomainRoleId);
			}
		}
		#endregion
		#region DataTypeCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of DataTypeCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDataType.Model
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<DataType> DataTypeCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<DataType>, DataType>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDataType.ModelDomainRoleId);
			}
		}
		#endregion
		#region RecognizedPhraseCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of RecognizedPhraseCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelContainsRecognizedPhrase.Model
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<RecognizedPhrase> RecognizedPhraseCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<RecognizedPhrase>, RecognizedPhrase>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelContainsRecognizedPhrase.ModelDomainRoleId);
			}
		}
		#endregion
		#region Definition opposite domain role accessor
		/// <summary>
		/// Gets or sets Definition.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDefinition.Model
		/// </summary>
		public virtual Definition Definition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDefinition.ModelDomainRoleId) as Definition;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDefinition.DefinitionDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDefinition.DefinitionDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDefinition.ModelDomainRoleId, value);
				}
			}
		}
		#endregion
		#region Note opposite domain role accessor
		/// <summary>
		/// Gets or sets Note.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasPrimaryNote.Model
		/// </summary>
		public virtual Note Note
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasPrimaryNote.ModelDomainRoleId) as Note;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasPrimaryNote.NoteDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasPrimaryNote.NoteDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasPrimaryNote.ModelDomainRoleId, value);
				}
			}
		}
		#endregion
		#region NoteCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of NoteCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelNote.Model
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelNote> NoteCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ModelNote>, ModelNote>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelNote.ModelDomainRoleId);
			}
		}
		#endregion
		#region ModelErrorDisplayFilter opposite domain role accessor
		/// <summary>
		/// Gets or sets ModelErrorDisplayFilter.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelErrorDisplayFilter.Model
		/// </summary>
		public virtual ModelErrorDisplayFilter ModelErrorDisplayFilter
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelErrorDisplayFilter.ModelDomainRoleId) as ModelErrorDisplayFilter;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelErrorDisplayFilter.ModelErrorDisplayFilterDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelErrorDisplayFilter.ModelErrorDisplayFilterDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelErrorDisplayFilter.ModelDomainRoleId, value);
				}
			}
		}
		#endregion
		#region FunctionCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of FunctionCollection.
		/// Function definitions used for calculated role path values.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Function> FunctionCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Function>, Function>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelDefinesFunction.ModelDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint.DomainClassId)) 
				{
					// Call custom method implemented in partial class
					return this.CanMergeSetConstraint(rootElement, elementGroupPrototype);
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNote.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint sourceSetConstraint1 = sourceElement as global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint;
			if (sourceSetConstraint1 != null)
			{
				// Create link for path ModelHasSetConstraint.SetConstraintCollection
				this.SetConstraintCollection.Add(sourceSetConstraint1);

				return;
			}
				
			global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType sourceObjectType2 = sourceElement as global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType;
			if (sourceObjectType2 != null)
			{
				
				// Call custom method implemented in partial class
				this.MergeRelateObjectType(sourceObjectType2, elementGroup);
				return;
			}
				
			global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint sourceSetComparisonConstraint3 = sourceElement as global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint;
			if (sourceSetComparisonConstraint3 != null)
			{
				// Create link for path ModelHasSetComparisonConstraint.SetComparisonConstraintCollection
				this.SetComparisonConstraintCollection.Add(sourceSetComparisonConstraint3);

				return;
			}
				
			global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNote sourceModelNote4 = sourceElement as global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNote;
			if (sourceModelNote4 != null)
			{
				// Create link for path ModelHasModelNote.NoteCollection
				this.NoteCollection.Add(sourceModelNote4);

				return;
			}
				
			global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType sourceFactType5 = sourceElement as global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType;
			if (sourceFactType5 != null)
			{
				// Create link for path ModelHasFactType.FactTypeCollection
				this.FactTypeCollection.Add(sourceFactType5);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint sourceSetConstraint1 = sourceElement as global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint;
			if (sourceSetConstraint1 != null)
			{
				// Delete link for path ModelHasSetConstraint.SetConstraintCollection
				
				foreach (DslModeling::ElementLink link in global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetConstraint.GetLinks((global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel)this, sourceSetConstraint1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetConstraint.ModelDomainRoleId, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetConstraint.SetConstraintDomainRoleId);
				}

				return;
			}
				
			global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType sourceObjectType2 = sourceElement as global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType;
			if (sourceObjectType2 != null)
			{
				
				// Call custom method implemented in partial class
				this.MergeDisconnectObjectType(sourceObjectType2);
				return;
			}
				
			global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint sourceSetComparisonConstraint3 = sourceElement as global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint;
			if (sourceSetComparisonConstraint3 != null)
			{
				// Delete link for path ModelHasSetComparisonConstraint.SetComparisonConstraintCollection
				
				foreach (DslModeling::ElementLink link in global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetComparisonConstraint.GetLinks((global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel)this, sourceSetComparisonConstraint3))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetComparisonConstraint.ModelDomainRoleId, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetComparisonConstraint.SetComparisonConstraintDomainRoleId);
				}

				return;
			}
				
			global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNote sourceModelNote4 = sourceElement as global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNote;
			if (sourceModelNote4 != null)
			{
				// Delete link for path ModelHasModelNote.NoteCollection
				
				foreach (DslModeling::ElementLink link in global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelNote.GetLinks((global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel)this, sourceModelNote4))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelNote.ModelDomainRoleId, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelNote.NoteDomainRoleId);
				}

				return;
			}
				
			global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType sourceFactType5 = sourceElement as global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactType;
			if (sourceFactType5 != null)
			{
				// Delete link for path ModelHasFactType.FactTypeCollection
				
				foreach (DslModeling::ElementLink link in global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasFactType.GetLinks((global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel)this, sourceFactType5))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasFactType.ModelDomainRoleId, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasFactType.FactTypeDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
	/// <summary>
	/// DomainClass ORMModel
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public partial class ORMModel : ORMModelBase
	{
		#region Constructors
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ORMModel(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ORMModel(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass ObjectType
	/// </summary>
	[global::System.ComponentModel.TypeDescriptionProvider(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.ElementTypeDescriptionProvider<ObjectType, Design.ObjectTypeTypeDescriptor>))]
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("2fed415e-1786-4fbf-8556-a507f2f765fd")]
	public partial class ObjectType : ORMNamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ObjectType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2fed415e, 0x1786, 0x4fbf, 0x85, 0x56, 0xa5, 0x07, 0xf2, 0xf7, 0x65, 0xfd);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ObjectType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ObjectType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region IsExternal domain property code
		
		/// <summary>
		/// IsExternal domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsExternalDomainPropertyId = new global::System.Guid(0xd03828fd, 0x1da7, 0x4804, 0xa1, 0x6b, 0xcc, 0x27, 0xf2, 0x04, 0x6f, 0x57);
		
		/// <summary>
		/// Gets or sets the value of IsExternal domain property.
		/// Is this ObjectType defined in an external model?
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType/IsExternal.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType/IsExternal.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("d03828fd-1da7-4804-a16b-cc27f2046f57")]
		public global::System.Boolean IsExternal
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return IsExternalPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsExternalPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ObjectType.IsExternal domain property.
		/// </summary>
		internal sealed partial class IsExternalPropertyHandler : DslModeling::DomainPropertyValueHandler<ObjectType, global::System.Boolean>
		{
			private IsExternalPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ObjectType.IsExternal domain property value handler.
			/// </summary>
			public static readonly IsExternalPropertyHandler Instance = new IsExternalPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ObjectType.IsExternal domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsExternalDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ObjectType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for IsExternal because its Kind is
				// set to CustomStorage. Please provide the GetIsExternalValue()
				// method on the domain class.
				return element.GetIsExternalValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ObjectType element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for IsExternal because its Kind is
					// set to CustomStorage. Please provide the SetIsExternalValue()
					// method on the domain class.
					element.SetIsExternalValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DefinitionText domain property code
		
		/// <summary>
		/// DefinitionText domain property Id.
		/// </summary>
		public static readonly global::System.Guid DefinitionTextDomainPropertyId = new global::System.Guid(0x431a8a8f, 0xe8ec, 0x4014, 0xb1, 0xa1, 0x84, 0x3e, 0x55, 0x75, 0x1a, 0x55);
		
		/// <summary>
		/// Gets or sets the value of DefinitionText domain property.
		/// An informal description of this ObjectType.
		///     To insert new lines, use Control-Enter in the dropdown editor, or open the
		/// 'ORM Informal Description Editor' tool window.
		/// </summary>
		[global::System.ComponentModel.Editor(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.MultilineTextEditor<global::ORMSolutions.ORMArchitect.Core.ObjectModel.Definition>), typeof(global::System.Drawing.Design.UITypeEditor))]
		[global::System.ComponentModel.MergableProperty(false)]
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType/DefinitionText.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType/DefinitionText.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("431a8a8f-e8ec-4014-b1a1-843e55751a55")]
		public global::System.String DefinitionText
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DefinitionTextPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DefinitionTextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ObjectType.DefinitionText domain property.
		/// </summary>
		internal sealed partial class DefinitionTextPropertyHandler : DslModeling::DomainPropertyValueHandler<ObjectType, global::System.String>
		{
			private DefinitionTextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ObjectType.DefinitionText domain property value handler.
			/// </summary>
			public static readonly DefinitionTextPropertyHandler Instance = new DefinitionTextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ObjectType.DefinitionText domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DefinitionTextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ObjectType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for DefinitionText because its Kind is
				// set to CustomStorage. Please provide the GetDefinitionTextValue()
				// method on the domain class.
				return element.GetDefinitionTextValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ObjectType element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for DefinitionText because its Kind is
					// set to CustomStorage. Please provide the SetDefinitionTextValue()
					// method on the domain class.
					element.SetDefinitionTextValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region NoteText domain property code
		
		/// <summary>
		/// NoteText domain property Id.
		/// </summary>
		public static readonly global::System.Guid NoteTextDomainPropertyId = new global::System.Guid(0x17c4e23d, 0xca49, 0x4329, 0x98, 0x2f, 0x48, 0xf4, 0xef, 0xca, 0x23, 0xbd);
		
		/// <summary>
		/// Gets or sets the value of NoteText domain property.
		/// A note to associate with this ObjectType.
		///     To insert new lines, use Control-Enter in the dropdown editor, or open the
		/// 'ORM Notes Editor' tool window.
		/// </summary>
		[global::System.ComponentModel.Editor(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.MultilineTextEditor<global::ORMSolutions.ORMArchitect.Core.ObjectModel.Note>), typeof(global::System.Drawing.Design.UITypeEditor))]
		[global::System.ComponentModel.MergableProperty(false)]
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType/NoteText.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType/NoteText.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("17c4e23d-ca49-4329-982f-48f4efca23bd")]
		public global::System.String NoteText
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return NoteTextPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NoteTextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ObjectType.NoteText domain property.
		/// </summary>
		internal sealed partial class NoteTextPropertyHandler : DslModeling::DomainPropertyValueHandler<ObjectType, global::System.String>
		{
			private NoteTextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ObjectType.NoteText domain property value handler.
			/// </summary>
			public static readonly NoteTextPropertyHandler Instance = new NoteTextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ObjectType.NoteText domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NoteTextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ObjectType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for NoteText because its Kind is
				// set to CustomStorage. Please provide the GetNoteTextValue()
				// method on the domain class.
				return element.GetNoteTextValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ObjectType element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for NoteText because its Kind is
					// set to CustomStorage. Please provide the SetNoteTextValue()
					// method on the domain class.
					element.SetNoteTextValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsIndependent domain property code
		
		/// <summary>
		/// IsIndependent domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsIndependentDomainPropertyId = new global::System.Guid(0xd52257ef, 0xd76a, 0x404d, 0xaa, 0xc5, 0x74, 0x50, 0xba, 0x5c, 0xc7, 0x90);
		
		/// <summary>
		/// Gets or sets the value of IsIndependent domain property.
		/// Can an instance of this ObjectType exist if that instance plays no roles?
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType/IsIndependent.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType/IsIndependent.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("d52257ef-d76a-404d-aac5-7450ba5cc790")]
		public global::System.Boolean IsIndependent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return IsIndependentPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsIndependentPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ObjectType.IsIndependent domain property.
		/// </summary>
		internal sealed partial class IsIndependentPropertyHandler : DslModeling::DomainPropertyValueHandler<ObjectType, global::System.Boolean>
		{
			private IsIndependentPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ObjectType.IsIndependent domain property value handler.
			/// </summary>
			public static readonly IsIndependentPropertyHandler Instance = new IsIndependentPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ObjectType.IsIndependent domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsIndependentDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ObjectType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for IsIndependent because its Kind is
				// set to CustomStorage. Please provide the GetIsIndependentValue()
				// method on the domain class.
				return element.GetIsIndependentValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ObjectType element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for IsIndependent because its Kind is
					// set to CustomStorage. Please provide the SetIsIndependentValue()
					// method on the domain class.
					element.SetIsIndependentValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsValueType domain property code
		
		/// <summary>
		/// IsValueType domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsValueTypeDomainPropertyId = new global::System.Guid(0xf63acb94, 0x8526, 0x432e, 0x96, 0x4c, 0x3b, 0x44, 0x41, 0x19, 0x57, 0x54);
		
		/// <summary>
		/// Gets or sets the value of IsValueType domain property.
		/// Is this ObjectType a self-identifying value or an entity?
		/// </summary>
		[global::System.ComponentModel.RefreshProperties(global::System.ComponentModel.RefreshProperties.All)]
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType/IsValueType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType/IsValueType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("f63acb94-8526-432e-964c-3b4441195754")]
		public global::System.Boolean IsValueType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return IsValueTypePropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsValueTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ObjectType.IsValueType domain property.
		/// </summary>
		internal sealed partial class IsValueTypePropertyHandler : DslModeling::DomainPropertyValueHandler<ObjectType, global::System.Boolean>
		{
			private IsValueTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ObjectType.IsValueType domain property value handler.
			/// </summary>
			public static readonly IsValueTypePropertyHandler Instance = new IsValueTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ObjectType.IsValueType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsValueTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ObjectType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for IsValueType because its Kind is
				// set to CustomStorage. Please provide the GetIsValueTypeValue()
				// method on the domain class.
				return element.GetIsValueTypeValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ObjectType element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for IsValueType because its Kind is
					// set to CustomStorage. Please provide the SetIsValueTypeValue()
					// method on the domain class.
					element.SetIsValueTypeValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DataTypeScale domain property code
		
		/// <summary>
		/// DataTypeScale domain property Id.
		/// </summary>
		public static readonly global::System.Guid DataTypeScaleDomainPropertyId = new global::System.Guid(0xbd2d708a, 0x7687, 0x4218, 0x94, 0xbc, 0x05, 0x83, 0x4a, 0xfa, 0xc8, 0x69);
		
		/// <summary>
		/// Gets or sets the value of DataTypeScale domain property.
		/// The number of digits allowed to the right of the decimal point in a value with
		/// this DataType.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType/DataTypeScale.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType/DataTypeScale.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("bd2d708a-7687-4218-94bc-05834afac869")]
		public global::System.Int32 DataTypeScale
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DataTypeScalePropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DataTypeScalePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ObjectType.DataTypeScale domain property.
		/// </summary>
		internal sealed partial class DataTypeScalePropertyHandler : DslModeling::DomainPropertyValueHandler<ObjectType, global::System.Int32>
		{
			private DataTypeScalePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ObjectType.DataTypeScale domain property value handler.
			/// </summary>
			public static readonly DataTypeScalePropertyHandler Instance = new DataTypeScalePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ObjectType.DataTypeScale domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DataTypeScaleDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(ObjectType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for DataTypeScale because its Kind is
				// set to CustomStorage. Please provide the GetDataTypeScaleValue()
				// method on the domain class.
				return element.GetDataTypeScaleValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ObjectType element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for DataTypeScale because its Kind is
					// set to CustomStorage. Please provide the SetDataTypeScaleValue()
					// method on the domain class.
					element.SetDataTypeScaleValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DataTypeLength domain property code
		
		/// <summary>
		/// DataTypeLength domain property Id.
		/// </summary>
		public static readonly global::System.Guid DataTypeLengthDomainPropertyId = new global::System.Guid(0xc9b01797, 0x2ca1, 0x4ff8, 0x86, 0x5a, 0xfd, 0xa0, 0xdd, 0xf3, 0x3f, 0x8d);
		
		/// <summary>
		/// Gets or sets the value of DataTypeLength domain property.
		/// The maximum length of values with this DataType.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType/DataTypeLength.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType/DataTypeLength.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("c9b01797-2ca1-4ff8-865a-fda0ddf33f8d")]
		public global::System.Int32 DataTypeLength
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DataTypeLengthPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DataTypeLengthPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ObjectType.DataTypeLength domain property.
		/// </summary>
		internal sealed partial class DataTypeLengthPropertyHandler : DslModeling::DomainPropertyValueHandler<ObjectType, global::System.Int32>
		{
			private DataTypeLengthPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ObjectType.DataTypeLength domain property value handler.
			/// </summary>
			public static readonly DataTypeLengthPropertyHandler Instance = new DataTypeLengthPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ObjectType.DataTypeLength domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DataTypeLengthDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(ObjectType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for DataTypeLength because its Kind is
				// set to CustomStorage. Please provide the GetDataTypeLengthValue()
				// method on the domain class.
				return element.GetDataTypeLengthValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ObjectType element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for DataTypeLength because its Kind is
					// set to CustomStorage. Please provide the SetDataTypeLengthValue()
					// method on the domain class.
					element.SetDataTypeLengthValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ReferenceModeDisplay domain property code
		
		/// <summary>
		/// ReferenceModeDisplay domain property Id.
		/// </summary>
		public static readonly global::System.Guid ReferenceModeDisplayDomainPropertyId = new global::System.Guid(0x2e56d25a, 0xbd96, 0x4478, 0xa5, 0x5c, 0x9f, 0x17, 0xa1, 0x5c, 0x94, 0xb6);
		
		/// <summary>
		/// Gets or sets the value of ReferenceModeDisplay domain property.
		/// The reference mode pattern for the EntityType.
		///     If the desired reference mode pattern is not specified in the dropdown, then
		/// a new pattern can be entered. The type of a new reference mode pattern is set by
		/// prepending a '.' for a popular reference mode, appending a ':' for a unit-based
		/// reference mode, and applying no decorators for a general reference mode.
		/// Reference mode settings can also be managed with the 'ORM Reference Mode Editor'
		/// tool window.
		/// </summary>
		[global::System.ComponentModel.Editor(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.Design.ReferenceModePicker), typeof(global::System.Drawing.Design.UITypeEditor))]
		[global::System.ComponentModel.TypeConverter(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.Design.ReferenceModeConverter))]
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType/ReferenceModeDisplay.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType/ReferenceModeDisplay.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("2e56d25a-bd96-4478-a55c-9f17a15c94b6")]
		public global::System.Object ReferenceModeDisplay
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return ReferenceModeDisplayPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ReferenceModeDisplayPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ObjectType.ReferenceModeDisplay domain property.
		/// </summary>
		internal sealed partial class ReferenceModeDisplayPropertyHandler : DslModeling::DomainPropertyValueHandler<ObjectType, global::System.Object>
		{
			private ReferenceModeDisplayPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ObjectType.ReferenceModeDisplay domain property value handler.
			/// </summary>
			public static readonly ReferenceModeDisplayPropertyHandler Instance = new ReferenceModeDisplayPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ObjectType.ReferenceModeDisplay domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ReferenceModeDisplayDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Object GetValue(ObjectType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for ReferenceModeDisplay because its Kind is
				// set to CustomStorage. Please provide the GetReferenceModeDisplayValue()
				// method on the domain class.
				return element.GetReferenceModeDisplayValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ObjectType element, global::System.Object newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Object oldValue = GetValue(element);
				// Don't use != with object properties
				if (!global::System.Object.Equals(newValue, oldValue))
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for ReferenceModeDisplay because its Kind is
					// set to CustomStorage. Please provide the SetReferenceModeDisplayValue()
					// method on the domain class.
					element.SetReferenceModeDisplayValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ReferenceModeString domain property code
		
		/// <summary>
		/// ReferenceModeString domain property Id.
		/// </summary>
		public static readonly global::System.Guid ReferenceModeStringDomainPropertyId = new global::System.Guid(0xce61c7ad, 0xb177, 0x4c56, 0x88, 0x43, 0x14, 0x9c, 0x01, 0x43, 0x9d, 0x25);
		
		/// <summary>
		/// Gets or sets the value of ReferenceModeString domain property.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType.ReferenceModeString
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType/ReferenceModeString.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType/ReferenceModeString.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("ce61c7ad-b177-4c56-8843-149c01439d25")]
		public global::System.String ReferenceModeString
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return ReferenceModeStringPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ReferenceModeStringPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ObjectType.ReferenceModeString domain property.
		/// </summary>
		internal sealed partial class ReferenceModeStringPropertyHandler : DslModeling::DomainPropertyValueHandler<ObjectType, global::System.String>
		{
			private ReferenceModeStringPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ObjectType.ReferenceModeString domain property value handler.
			/// </summary>
			public static readonly ReferenceModeStringPropertyHandler Instance = new ReferenceModeStringPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ObjectType.ReferenceModeString domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ReferenceModeStringDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ObjectType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for ReferenceModeString because its Kind is
				// set to CustomStorage. Please provide the GetReferenceModeStringValue()
				// method on the domain class.
				return element.GetReferenceModeStringValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ObjectType element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for ReferenceModeString because its Kind is
					// set to CustomStorage. Please provide the SetReferenceModeStringValue()
					// method on the domain class.
					element.SetReferenceModeStringValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ReferenceModeDecoratedString domain property code
		
		/// <summary>
		/// ReferenceModeDecoratedString domain property Id.
		/// </summary>
		public static readonly global::System.Guid ReferenceModeDecoratedStringDomainPropertyId = new global::System.Guid(0xe139f1e3, 0xdc42, 0x498f, 0xbb, 0x70, 0x89, 0x0c, 0x3b, 0x1f, 0xdd, 0x13);
		
		/// <summary>
		/// Gets or sets the value of ReferenceModeDecoratedString domain property.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType.ReferenceModeDecoratedString
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType/ReferenceModeDecoratedString.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType/ReferenceModeDecoratedString.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("e139f1e3-dc42-498f-bb70-890c3b1fdd13")]
		public global::System.String ReferenceModeDecoratedString
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return ReferenceModeDecoratedStringPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ReferenceModeDecoratedStringPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ObjectType.ReferenceModeDecoratedString domain property.
		/// </summary>
		internal sealed partial class ReferenceModeDecoratedStringPropertyHandler : DslModeling::DomainPropertyValueHandler<ObjectType, global::System.String>
		{
			private ReferenceModeDecoratedStringPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ObjectType.ReferenceModeDecoratedString domain property value handler.
			/// </summary>
			public static readonly ReferenceModeDecoratedStringPropertyHandler Instance = new ReferenceModeDecoratedStringPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ObjectType.ReferenceModeDecoratedString domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ReferenceModeDecoratedStringDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ObjectType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for ReferenceModeDecoratedString because its Kind is
				// set to CustomStorage. Please provide the GetReferenceModeDecoratedStringValue()
				// method on the domain class.
				return element.GetReferenceModeDecoratedStringValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ObjectType element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for ReferenceModeDecoratedString because its Kind is
					// set to CustomStorage. Please provide the SetReferenceModeDecoratedStringValue()
					// method on the domain class.
					element.SetReferenceModeDecoratedStringValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ValueRangeText domain property code
		
		/// <summary>
		/// ValueRangeText domain property Id.
		/// </summary>
		public static readonly global::System.Guid ValueRangeTextDomainPropertyId = new global::System.Guid(0xf0662c59, 0x700b, 0x435c, 0xb5, 0x7b, 0x93, 0xe5, 0xfd, 0x84, 0xb7, 0x1f);
		
		/// <summary>
		/// Gets or sets the value of ValueRangeText domain property.
		/// Restrict the range of possible values for instances of this ObjectType.
		///     To specify a range, use '..' between the range endpoints, square brackets to
		/// specify a closed endpoint, and parentheses to specify an open endpoint. Commas
		/// are used to entered multiple ranges or discrete values.
		///     Example: {[10..20), 30} specifies all values between 10 and 20 (but not
		/// including 20) and the value 30.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType/ValueRangeText.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType/ValueRangeText.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("f0662c59-700b-435c-b57b-93e5fd84b71f")]
		public global::System.String ValueRangeText
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return ValueRangeTextPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ValueRangeTextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ObjectType.ValueRangeText domain property.
		/// </summary>
		internal sealed partial class ValueRangeTextPropertyHandler : DslModeling::DomainPropertyValueHandler<ObjectType, global::System.String>
		{
			private ValueRangeTextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ObjectType.ValueRangeText domain property value handler.
			/// </summary>
			public static readonly ValueRangeTextPropertyHandler Instance = new ValueRangeTextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ObjectType.ValueRangeText domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ValueRangeTextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ObjectType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for ValueRangeText because its Kind is
				// set to CustomStorage. Please provide the GetValueRangeTextValue()
				// method on the domain class.
				return element.GetValueRangeTextValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ObjectType element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for ValueRangeText because its Kind is
					// set to CustomStorage. Please provide the SetValueRangeTextValue()
					// method on the domain class.
					element.SetValueRangeTextValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ValueTypeValueRangeText domain property code
		
		/// <summary>
		/// ValueTypeValueRangeText domain property Id.
		/// </summary>
		public static readonly global::System.Guid ValueTypeValueRangeTextDomainPropertyId = new global::System.Guid(0x6ebe45bb, 0x1054, 0x4785, 0x8c, 0x9d, 0x90, 0x5a, 0x41, 0x59, 0x9e, 0xf9);
		
		/// <summary>
		/// Gets or sets the value of ValueTypeValueRangeText domain property.
		/// The ValueRange property for the ValueType that identifies this EntityType.
		///     The ValueRange property of an EntityType is applied to the identifying role,
		/// not directly to the identifying ValueType. This allows EntityType ValueRanges to
		/// be specified independently for multiple EntityTypes identified with the same
		/// unit-based or general reference mode patterns.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType/ValueTypeValueRangeText.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType/ValueTypeValueRangeText.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("6ebe45bb-1054-4785-8c9d-905a41599ef9")]
		public global::System.String ValueTypeValueRangeText
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return ValueTypeValueRangeTextPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ValueTypeValueRangeTextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ObjectType.ValueTypeValueRangeText domain property.
		/// </summary>
		internal sealed partial class ValueTypeValueRangeTextPropertyHandler : DslModeling::DomainPropertyValueHandler<ObjectType, global::System.String>
		{
			private ValueTypeValueRangeTextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ObjectType.ValueTypeValueRangeText domain property value handler.
			/// </summary>
			public static readonly ValueTypeValueRangeTextPropertyHandler Instance = new ValueTypeValueRangeTextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ObjectType.ValueTypeValueRangeText domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ValueTypeValueRangeTextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ObjectType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for ValueTypeValueRangeText because its Kind is
				// set to CustomStorage. Please provide the GetValueTypeValueRangeTextValue()
				// method on the domain class.
				return element.GetValueTypeValueRangeTextValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ObjectType element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for ValueTypeValueRangeText because its Kind is
					// set to CustomStorage. Please provide the SetValueTypeValueRangeTextValue()
					// method on the domain class.
					element.SetValueTypeValueRangeTextValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsPersonal domain property code
		
		/// <summary>
		/// IsPersonal domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsPersonalDomainPropertyId = new global::System.Guid(0xef9ae461, 0x4327, 0x46dc, 0x8f, 0xe0, 0xd1, 0x38, 0x8f, 0x06, 0x1b, 0x30);
		
		/// <summary>
		/// Gets or sets the value of IsPersonal domain property.
		/// Does this ObjectType represent a person instead of a thing? This value is
		/// ignored if any direct or indirect supertype is personal.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType/IsPersonal.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType/IsPersonal.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("ef9ae461-4327-46dc-8fe0-d1388f061b30")]
		public global::System.Boolean IsPersonal
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return IsPersonalPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsPersonalPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ObjectType.IsPersonal domain property.
		/// </summary>
		internal sealed partial class IsPersonalPropertyHandler : DslModeling::DomainPropertyValueHandler<ObjectType, global::System.Boolean>
		{
			private IsPersonalPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ObjectType.IsPersonal domain property value handler.
			/// </summary>
			public static readonly IsPersonalPropertyHandler Instance = new IsPersonalPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ObjectType.IsPersonal domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsPersonalDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ObjectType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for IsPersonal because its Kind is
				// set to CustomStorage. Please provide the GetIsPersonalValue()
				// method on the domain class.
				return element.GetIsPersonalValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ObjectType element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for IsPersonal because its Kind is
					// set to CustomStorage. Please provide the SetIsPersonalValue()
					// method on the domain class.
					element.SetIsPersonalValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsSupertypePersonal domain property code
		
		/// <summary>
		/// IsSupertypePersonal domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsSupertypePersonalDomainPropertyId = new global::System.Guid(0xe7f4fc9d, 0x2dba, 0x4273, 0xaa, 0xc4, 0xf2, 0xaa, 0x76, 0x2d, 0xb5, 0x39);
		
		/// <summary>
		/// Gets or sets the value of IsSupertypePersonal domain property.
		/// Cache if IsPersonal is set for one or more supertypes.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType/IsSupertypePersonal.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType/IsSupertypePersonal.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("e7f4fc9d-2dba-4273-aac4-f2aa762db539")]
		public global::System.Boolean IsSupertypePersonal
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return IsSupertypePersonalPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsSupertypePersonalPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ObjectType.IsSupertypePersonal domain property.
		/// </summary>
		internal sealed partial class IsSupertypePersonalPropertyHandler : DslModeling::DomainPropertyValueHandler<ObjectType, global::System.Boolean>
		{
			private IsSupertypePersonalPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ObjectType.IsSupertypePersonal domain property value handler.
			/// </summary>
			public static readonly IsSupertypePersonalPropertyHandler Instance = new IsSupertypePersonalPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ObjectType.IsSupertypePersonal domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsSupertypePersonalDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ObjectType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for IsSupertypePersonal because its Kind is
				// set to CustomStorage. Please provide the GetIsSupertypePersonalValue()
				// method on the domain class.
				return element.GetIsSupertypePersonalValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ObjectType element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for IsSupertypePersonal because its Kind is
					// set to CustomStorage. Please provide the SetIsSupertypePersonalValue()
					// method on the domain class.
					element.SetIsSupertypePersonalValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TreatAsPersonal domain property code
		
		/// <summary>
		/// TreatAsPersonal domain property Id.
		/// </summary>
		public static readonly global::System.Guid TreatAsPersonalDomainPropertyId = new global::System.Guid(0x114d5af4, 0xee4a, 0x4baa, 0x9f, 0x07, 0x16, 0x1c, 0x3b, 0x70, 0x8e, 0x1f);
		
		/// <summary>
		/// Gets or sets the value of TreatAsPersonal domain property.
		/// Does this ObjectType represent a person instead of a thing?
		///     Used as a verbalization directive to render references to this type using a
		/// personal pronoun ('who' instead of 'that').
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType/TreatAsPersonal.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType/TreatAsPersonal.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("114d5af4-ee4a-4baa-9f07-161c3b708e1f")]
		public global::System.Boolean TreatAsPersonal
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return TreatAsPersonalPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TreatAsPersonalPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ObjectType.TreatAsPersonal domain property.
		/// </summary>
		internal sealed partial class TreatAsPersonalPropertyHandler : DslModeling::DomainPropertyValueHandler<ObjectType, global::System.Boolean>
		{
			private TreatAsPersonalPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ObjectType.TreatAsPersonal domain property value handler.
			/// </summary>
			public static readonly TreatAsPersonalPropertyHandler Instance = new TreatAsPersonalPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ObjectType.TreatAsPersonal domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TreatAsPersonalDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ObjectType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for TreatAsPersonal because its Kind is
				// set to CustomStorage. Please provide the GetTreatAsPersonalValue()
				// method on the domain class.
				return element.GetTreatAsPersonalValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ObjectType element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for TreatAsPersonal because its Kind is
					// set to CustomStorage. Please provide the SetTreatAsPersonalValue()
					// method on the domain class.
					element.SetTreatAsPersonalValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsImplicitBooleanValue domain property code
		
		/// <summary>
		/// IsImplicitBooleanValue domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsImplicitBooleanValueDomainPropertyId = new global::System.Guid(0xae665fcf, 0xb90a, 0x41bd, 0xb3, 0xe9, 0x86, 0x11, 0xb4, 0x2e, 0x66, 0x8c);
		
		/// <summary>
		/// Gets or sets the value of IsImplicitBooleanValue domain property.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType.IsImplicitBooleanValue
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType/IsImplicitBooleanValue.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType/IsImplicitBooleanValue.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("ae665fcf-b90a-41bd-b3e9-8611b42e668c")]
		public global::System.Boolean IsImplicitBooleanValue
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return IsImplicitBooleanValuePropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsImplicitBooleanValuePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ObjectType.IsImplicitBooleanValue domain property.
		/// </summary>
		internal sealed partial class IsImplicitBooleanValuePropertyHandler : DslModeling::DomainPropertyValueHandler<ObjectType, global::System.Boolean>
		{
			private IsImplicitBooleanValuePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ObjectType.IsImplicitBooleanValue domain property value handler.
			/// </summary>
			public static readonly IsImplicitBooleanValuePropertyHandler Instance = new IsImplicitBooleanValuePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ObjectType.IsImplicitBooleanValue domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsImplicitBooleanValueDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ObjectType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for IsImplicitBooleanValue because its Kind is
				// set to CustomStorage. Please provide the GetIsImplicitBooleanValueValue()
				// method on the domain class.
				return element.GetIsImplicitBooleanValueValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ObjectType element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for IsImplicitBooleanValue because its Kind is
					// set to CustomStorage. Please provide the SetIsImplicitBooleanValueValue()
					// method on the domain class.
					element.SetIsImplicitBooleanValueValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DerivationNoteDisplay domain property code
		
		/// <summary>
		/// DerivationNoteDisplay domain property Id.
		/// </summary>
		public static readonly global::System.Guid DerivationNoteDisplayDomainPropertyId = new global::System.Guid(0xb852bc09, 0x7887, 0x4ba7, 0xa7, 0xaa, 0x09, 0xd4, 0xf4, 0xe2, 0xaa, 0xd2);
		
		/// <summary>
		/// Gets or sets the value of DerivationNoteDisplay domain property.
		/// A description of the derivation rule for this subtype. If a rule is not
		/// specified, then this is treated as an asserted subtype.
		/// </summary>
		[global::System.ComponentModel.Editor(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.Design.DerivationNoteEditor), typeof(global::System.Drawing.Design.UITypeEditor))]
		[global::System.ComponentModel.MergableProperty(false)]
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType/DerivationNoteDisplay.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType/DerivationNoteDisplay.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("b852bc09-7887-4ba7-a7aa-09d4f4e2aad2")]
		public global::System.String DerivationNoteDisplay
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DerivationNoteDisplayPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DerivationNoteDisplayPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ObjectType.DerivationNoteDisplay domain property.
		/// </summary>
		internal sealed partial class DerivationNoteDisplayPropertyHandler : DslModeling::DomainPropertyValueHandler<ObjectType, global::System.String>
		{
			private DerivationNoteDisplayPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ObjectType.DerivationNoteDisplay domain property value handler.
			/// </summary>
			public static readonly DerivationNoteDisplayPropertyHandler Instance = new DerivationNoteDisplayPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ObjectType.DerivationNoteDisplay domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DerivationNoteDisplayDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ObjectType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for DerivationNoteDisplay because its Kind is
				// set to CustomStorage. Please provide the GetDerivationNoteDisplayValue()
				// method on the domain class.
				return element.GetDerivationNoteDisplayValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ObjectType element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for DerivationNoteDisplay because its Kind is
					// set to CustomStorage. Please provide the SetDerivationNoteDisplayValue()
					// method on the domain class.
					element.SetDerivationNoteDisplayValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DerivationStorageDisplay domain property code
		
		/// <summary>
		/// DerivationStorageDisplay domain property Id.
		/// </summary>
		public static readonly global::System.Guid DerivationStorageDisplayDomainPropertyId = new global::System.Guid(0xc68ed183, 0x1908, 0x444b, 0xb2, 0x1a, 0xdb, 0xfc, 0xe6, 0xe3, 0xe4, 0xea);
		
		/// <summary>
		/// Gets or sets the value of DerivationStorageDisplay domain property.
		/// Storage options for a derived subtype.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType/DerivationStorageDisplay.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType/DerivationStorageDisplay.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("c68ed183-1908-444b-b21a-dbfce6e3e4ea")]
		public DerivationExpressionStorageType DerivationStorageDisplay
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DerivationStorageDisplayPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DerivationStorageDisplayPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ObjectType.DerivationStorageDisplay domain property.
		/// </summary>
		internal sealed partial class DerivationStorageDisplayPropertyHandler : DslModeling::DomainPropertyValueHandler<ObjectType, DerivationExpressionStorageType>
		{
			private DerivationStorageDisplayPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ObjectType.DerivationStorageDisplay domain property value handler.
			/// </summary>
			public static readonly DerivationStorageDisplayPropertyHandler Instance = new DerivationStorageDisplayPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ObjectType.DerivationStorageDisplay domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DerivationStorageDisplayDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed DerivationExpressionStorageType GetValue(ObjectType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for DerivationStorageDisplay because its Kind is
				// set to CustomStorage. Please provide the GetDerivationStorageDisplayValue()
				// method on the domain class.
				return element.GetDerivationStorageDisplayValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ObjectType element, DerivationExpressionStorageType newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				DerivationExpressionStorageType oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for DerivationStorageDisplay because its Kind is
					// set to CustomStorage. Please provide the SetDerivationStorageDisplayValue()
					// method on the domain class.
					element.SetDerivationStorageDisplayValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DataType opposite domain role accessor
		/// <summary>
		/// Gets or sets DataType.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasDataType.ValueType
		/// </summary>
		public virtual DataType DataType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasDataType.ValueTypeDomainRoleId) as DataType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasDataType.ValueTypeDomainRoleId, value);
			}
		}
		#endregion
		#region NestedFactType opposite domain role accessor
		/// <summary>
		/// Gets or sets NestedFactType.
		/// The FactType objectified by this EntityType.
		/// </summary>
		public virtual FactType NestedFactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Objectification.NestingTypeDomainRoleId) as FactType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Objectification.NestedFactTypeDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Objectification.NestedFactTypeDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Objectification.NestingTypeDomainRoleId, value);
				}
			}
		}
		#endregion
		#region PlayedRoleCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of PlayedRoleCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypePlaysRole.RolePlayer
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Role> PlayedRoleCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Role>, Role>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypePlaysRole.RolePlayerDomainRoleId);
			}
		}
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasObjectType.ObjectType
		/// </summary>
		public virtual ORMModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasObjectType.ObjectTypeDomainRoleId) as ORMModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasObjectType.ObjectTypeDomainRoleId, value);
			}
		}
		#endregion
		#region ImpliedMandatoryConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets ImpliedMandatoryConstraint.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeImpliesMandatoryConstraint.ObjectType
		/// </summary>
		public virtual MandatoryConstraint ImpliedMandatoryConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeImpliesMandatoryConstraint.ObjectTypeDomainRoleId) as MandatoryConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeImpliesMandatoryConstraint.MandatoryConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeImpliesMandatoryConstraint.MandatoryConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeImpliesMandatoryConstraint.ObjectTypeDomainRoleId, value);
				}
			}
		}
		#endregion
		#region InherentMandatoryConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets InherentMandatoryConstraint.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintIsInherentForObjectType.ObjectType
		/// </summary>
		public virtual MandatoryConstraint InherentMandatoryConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintIsInherentForObjectType.ObjectTypeDomainRoleId) as MandatoryConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintIsInherentForObjectType.MandatoryConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintIsInherentForObjectType.MandatoryConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintIsInherentForObjectType.ObjectTypeDomainRoleId, value);
				}
			}
		}
		#endregion
		#region AbbreviationCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of AbbreviationCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasAbbreviation.ObjectType
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<NameAlias> AbbreviationCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<NameAlias>, NameAlias>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasAbbreviation.ObjectTypeDomainRoleId);
			}
		}
		#endregion
		#region DuplicateNameError opposite domain role accessor
		/// <summary>
		/// Gets or sets DuplicateNameError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDuplicateNameError.ObjectType
		/// </summary>
		public virtual ObjectTypeDuplicateNameError DuplicateNameError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDuplicateNameError.ObjectTypeDomainRoleId) as ObjectTypeDuplicateNameError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDuplicateNameError.ObjectTypeDomainRoleId, value);
			}
		}
		#endregion
		#region PreferredIdentifier opposite domain role accessor
		/// <summary>
		/// Gets or sets PreferredIdentifier.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifierFor
		/// </summary>
		public virtual UniquenessConstraint PreferredIdentifier
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifierForDomainRoleId) as UniquenessConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifierDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifierDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifierForDomainRoleId, value);
				}
			}
		}
		#endregion
		#region ValueConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets ValueConstraint.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueConstraint.ValueType
		/// </summary>
		public virtual ValueTypeValueConstraint ValueConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueConstraint.ValueTypeDomainRoleId) as ValueTypeValueConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueConstraint.ValueConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueConstraint.ValueConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueConstraint.ValueTypeDomainRoleId, value);
				}
			}
		}
		#endregion
		#region Cardinality opposite domain role accessor
		/// <summary>
		/// Gets or sets Cardinality.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCardinalityConstraint.ObjectType
		/// </summary>
		public virtual ObjectTypeCardinalityConstraint Cardinality
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCardinalityConstraint.ObjectTypeDomainRoleId) as ObjectTypeCardinalityConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCardinalityConstraint.CardinalityConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCardinalityConstraint.CardinalityConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCardinalityConstraint.ObjectTypeDomainRoleId, value);
				}
			}
		}
		#endregion
		#region ReferenceSchemeError opposite domain role accessor
		/// <summary>
		/// Gets or sets ReferenceSchemeError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ObjectType
		/// </summary>
		public virtual EntityTypeRequiresReferenceSchemeError ReferenceSchemeError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ObjectTypeDomainRoleId) as EntityTypeRequiresReferenceSchemeError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ReferenceSchemeErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ReferenceSchemeErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ObjectTypeDomainRoleId, value);
				}
			}
		}
		#endregion
		#region Definition opposite domain role accessor
		/// <summary>
		/// Gets or sets Definition.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDefinition.ObjectType
		/// </summary>
		public virtual Definition Definition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDefinition.ObjectTypeDomainRoleId) as Definition;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDefinition.DefinitionDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDefinition.DefinitionDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDefinition.ObjectTypeDomainRoleId, value);
				}
			}
		}
		#endregion
		#region Note opposite domain role accessor
		/// <summary>
		/// Gets or sets Note.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasNote.ObjectType
		/// </summary>
		public virtual Note Note
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasNote.ObjectTypeDomainRoleId) as Note;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasNote.NoteDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasNote.NoteDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasNote.ObjectTypeDomainRoleId, value);
				}
			}
		}
		#endregion
		#region ModelNoteCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ModelNoteCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesObjectType.Element
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelNote> ModelNoteCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ModelNote>, ModelNote>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesObjectType.ElementDomainRoleId);
			}
		}
		#endregion
		#region CompatibleSupertypesError opposite domain role accessor
		/// <summary>
		/// Gets or sets CompatibleSupertypesError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCompatibleSupertypesError.ObjectType
		/// </summary>
		public virtual CompatibleSupertypesError CompatibleSupertypesError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCompatibleSupertypesError.ObjectTypeDomainRoleId) as CompatibleSupertypesError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCompatibleSupertypesError.CompatibleSupertypesErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCompatibleSupertypesError.CompatibleSupertypesErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCompatibleSupertypesError.ObjectTypeDomainRoleId, value);
				}
			}
		}
		#endregion
		#region PreferredIdentifierRequiresMandatoryError opposite domain role accessor
		/// <summary>
		/// Gets or sets PreferredIdentifierRequiresMandatoryError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.ObjectType
		/// </summary>
		public virtual PreferredIdentifierRequiresMandatoryError PreferredIdentifierRequiresMandatoryError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.ObjectTypeDomainRoleId) as PreferredIdentifierRequiresMandatoryError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.PreferredIdentifierRequiresMandatoryErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.PreferredIdentifierRequiresMandatoryErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.ObjectTypeDomainRoleId, value);
				}
			}
		}
		#endregion
		#region DerivationExpression opposite domain role accessor
		/// <summary>
		/// Gets or sets DerivationExpression.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationExpression.Subtype
		/// </summary>
		public virtual SubtypeDerivationExpression DerivationExpression
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationExpression.SubtypeDomainRoleId) as SubtypeDerivationExpression;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationExpression.DerivationRuleDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationExpression.DerivationRuleDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationExpression.SubtypeDomainRoleId, value);
				}
			}
		}
		#endregion
		#region ObjectTypeInstanceCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ObjectTypeInstanceCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasObjectTypeInstance.ObjectType
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ObjectTypeInstance> ObjectTypeInstanceCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ObjectTypeInstance>, ObjectTypeInstance>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasObjectTypeInstance.ObjectTypeDomainRoleId);
			}
		}
		#endregion
		#region EntityTypeInstanceCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of EntityTypeInstanceCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasEntityTypeInstance.EntityType
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<EntityTypeInstance> EntityTypeInstanceCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<EntityTypeInstance>, EntityTypeInstance>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasEntityTypeInstance.EntityTypeDomainRoleId);
			}
		}
		#endregion
		#region EntityTypeSubtypeInstanceCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of EntityTypeSubtypeInstanceCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeHasEntityTypeSubtypeInstance.EntityTypeSubtype
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<EntityTypeSubtypeInstance> EntityTypeSubtypeInstanceCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<EntityTypeSubtypeInstance>, EntityTypeSubtypeInstance>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeHasEntityTypeSubtypeInstance.EntityTypeSubtypeDomainRoleId);
			}
		}
		#endregion
		#region ValueTypeInstanceCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ValueTypeInstanceCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueTypeInstance.ValueType
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ValueTypeInstance> ValueTypeInstanceCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ValueTypeInstance>, ValueTypeInstance>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueTypeInstance.ValueTypeDomainRoleId);
			}
		}
		#endregion
		#region RolePathCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of RolePathCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot.RootObjectType
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<RolePath> RolePathCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<RolePath>, RolePath>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot.RootObjectTypeDomainRoleId);
			}
		}
		#endregion
		#region TypedQueryParameterCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of TypedQueryParameterCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterHasParameterType.ParameterType
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<QueryParameter> TypedQueryParameterCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<QueryParameter>, QueryParameter>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterHasParameterType.ParameterTypeDomainRoleId);
			}
		}
		#endregion
		#region DerivationRule opposite domain role accessor
		/// <summary>
		/// Gets or sets DerivationRule.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationRule.Subtype
		/// </summary>
		public virtual SubtypeDerivationRule DerivationRule
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationRule.SubtypeDomainRoleId) as SubtypeDerivationRule;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationRule.DerivationRuleDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationRule.DerivationRuleDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationRule.SubtypeDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass FactType
	/// </summary>
	[global::System.ComponentModel.TypeDescriptionProvider(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.ElementTypeDescriptionProvider<FactType, Design.FactTypeTypeDescriptor<FactType>>))]
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {Name})")]
	[DslModeling::DomainObjectId("723a2b28-6cda-4185-b597-87866e257265")]
	public partial class FactType : ORMModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// FactType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x723a2b28, 0x6cda, 0x4185, 0xb5, 0x97, 0x87, 0x86, 0x6e, 0x25, 0x72, 0x65);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FactType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FactType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region IsExternal domain property code
		
		/// <summary>
		/// IsExternal domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsExternalDomainPropertyId = new global::System.Guid(0x67ea8c95, 0xfd9a, 0x473b, 0x8a, 0xa2, 0xe3, 0x5f, 0xcd, 0xd6, 0x83, 0x61);
		
		/// <summary>
		/// Storage for IsExternal
		/// </summary>
		private global::System.Boolean isExternalPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsExternal domain property.
		/// Is this FactType defined in an external model?
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactType/IsExternal.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactType/IsExternal.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainObjectId("67ea8c95-fd9a-473b-8aa2-e35fcdd68361")]
		public global::System.Boolean IsExternal
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isExternalPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsExternalPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FactType.IsExternal domain property.
		/// </summary>
		internal sealed partial class IsExternalPropertyHandler : DslModeling::DomainPropertyValueHandler<FactType, global::System.Boolean>
		{
			private IsExternalPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FactType.IsExternal domain property value handler.
			/// </summary>
			public static readonly IsExternalPropertyHandler Instance = new IsExternalPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FactType.IsExternal domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsExternalDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(FactType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isExternalPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FactType element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isExternalPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DefinitionText domain property code
		
		/// <summary>
		/// DefinitionText domain property Id.
		/// </summary>
		public static readonly global::System.Guid DefinitionTextDomainPropertyId = new global::System.Guid(0x3f58e4d1, 0x4562, 0x478a, 0xa3, 0xfe, 0x08, 0x71, 0x5e, 0x45, 0x5c, 0xd8);
		
		/// <summary>
		/// Gets or sets the value of DefinitionText domain property.
		/// An informal description of this FactType.
		///     To insert new lines, use Control-Enter in the dropdown editor, or open the
		/// 'ORM Informal Description Editor' tool window.
		/// </summary>
		[global::System.ComponentModel.Editor(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.MultilineTextEditor<global::ORMSolutions.ORMArchitect.Core.ObjectModel.Definition>), typeof(global::System.Drawing.Design.UITypeEditor))]
		[global::System.ComponentModel.MergableProperty(false)]
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactType/DefinitionText.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactType/DefinitionText.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("3f58e4d1-4562-478a-a3fe-08715e455cd8")]
		public global::System.String DefinitionText
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DefinitionTextPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DefinitionTextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FactType.DefinitionText domain property.
		/// </summary>
		internal sealed partial class DefinitionTextPropertyHandler : DslModeling::DomainPropertyValueHandler<FactType, global::System.String>
		{
			private DefinitionTextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FactType.DefinitionText domain property value handler.
			/// </summary>
			public static readonly DefinitionTextPropertyHandler Instance = new DefinitionTextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FactType.DefinitionText domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DefinitionTextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FactType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for DefinitionText because its Kind is
				// set to CustomStorage. Please provide the GetDefinitionTextValue()
				// method on the domain class.
				return element.GetDefinitionTextValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FactType element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for DefinitionText because its Kind is
					// set to CustomStorage. Please provide the SetDefinitionTextValue()
					// method on the domain class.
					element.SetDefinitionTextValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region NoteText domain property code
		
		/// <summary>
		/// NoteText domain property Id.
		/// </summary>
		public static readonly global::System.Guid NoteTextDomainPropertyId = new global::System.Guid(0xaf6200b1, 0x068d, 0x434a, 0x98, 0xd3, 0x44, 0xe8, 0x72, 0xb9, 0x21, 0xbd);
		
		/// <summary>
		/// Gets or sets the value of NoteText domain property.
		/// A note to associate with this FactType.
		///     To insert new lines, use Control-Enter in the dropdown editor, or open the
		/// 'ORM Notes Editor' tool window.
		/// </summary>
		[global::System.ComponentModel.Editor(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.MultilineTextEditor<global::ORMSolutions.ORMArchitect.Core.ObjectModel.Note>), typeof(global::System.Drawing.Design.UITypeEditor))]
		[global::System.ComponentModel.MergableProperty(false)]
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactType/NoteText.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactType/NoteText.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("af6200b1-068d-434a-98d3-44e872b921bd")]
		public global::System.String NoteText
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return NoteTextPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NoteTextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FactType.NoteText domain property.
		/// </summary>
		internal sealed partial class NoteTextPropertyHandler : DslModeling::DomainPropertyValueHandler<FactType, global::System.String>
		{
			private NoteTextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FactType.NoteText domain property value handler.
			/// </summary>
			public static readonly NoteTextPropertyHandler Instance = new NoteTextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FactType.NoteText domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NoteTextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FactType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for NoteText because its Kind is
				// set to CustomStorage. Please provide the GetNoteTextValue()
				// method on the domain class.
				return element.GetNoteTextValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FactType element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for NoteText because its Kind is
					// set to CustomStorage. Please provide the SetNoteTextValue()
					// method on the domain class.
					element.SetNoteTextValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xb17f5e42, 0xa0fa, 0x4b88, 0x9d, 0x24, 0xd1, 0x48, 0xce, 0xee, 0x7d, 0xb0);
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// The name for this FactType.
		///     If the Name property is read-only, then it is a generated name based on
		/// primary reading.
		///     If the Name property is editable, then it is the name of an explicit or
		/// implicit objectifying EntityType. The editable name can be reset to match the
		/// generated name by clearing the property value.
		/// </summary>
		[global::System.ComponentModel.MergableProperty(false)]
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactType/Name.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactType/Name.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("b17f5e42-a0fa-4b88-9d24-d148ceee7db0")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return NamePropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FactType.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<FactType, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FactType.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FactType.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FactType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for Name because its Kind is
				// set to CustomStorage. Please provide the GetNameValue()
				// method on the domain class.
				return element.GetNameValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FactType element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for Name because its Kind is
					// set to CustomStorage. Please provide the SetNameValue()
					// method on the domain class.
					element.SetNameValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region GeneratedName domain property code
		
		/// <summary>
		/// GeneratedName domain property Id.
		/// </summary>
		public static readonly global::System.Guid GeneratedNameDomainPropertyId = new global::System.Guid(0xf6fc3149, 0x2ed8, 0x458d, 0xa2, 0x9c, 0xfd, 0x64, 0x0a, 0x81, 0x0a, 0x79);
		
		/// <summary>
		/// Gets or sets the value of GeneratedName domain property.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactType.GeneratedName
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactType/GeneratedName.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactType/GeneratedName.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("f6fc3149-2ed8-458d-a29c-fd640a810a79")]
		private global::System.String GeneratedName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GeneratedNamePropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				GeneratedNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FactType.GeneratedName domain property.
		/// </summary>
		internal sealed partial class GeneratedNamePropertyHandler : DslModeling::DomainPropertyValueHandler<FactType, global::System.String>
		{
			private GeneratedNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FactType.GeneratedName domain property value handler.
			/// </summary>
			public static readonly GeneratedNamePropertyHandler Instance = new GeneratedNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FactType.GeneratedName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return GeneratedNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FactType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for GeneratedName because its Kind is
				// set to CustomStorage. Please provide the GetGeneratedNameValue()
				// method on the domain class.
				return element.GetGeneratedNameValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FactType element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for GeneratedName because its Kind is
					// set to CustomStorage. Please provide the SetGeneratedNameValue()
					// method on the domain class.
					element.SetGeneratedNameValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region NameChanged domain property code
		
		/// <summary>
		/// NameChanged domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameChangedDomainPropertyId = new global::System.Guid(0x20a75b4b, 0x69d4, 0x4d1b, 0xbe, 0xb5, 0x9b, 0x0d, 0x66, 0xfd, 0xb1, 0xf3);
		
		/// <summary>
		/// Gets or sets the value of NameChanged domain property.
		/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.FactType.NameChanged
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactType/NameChanged.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactType/NameChanged.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("20a75b4b-69d4-4d1b-beb5-9b0d66fdb1f3")]
		public global::System.Int64 NameChanged
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return NameChangedPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NameChangedPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FactType.NameChanged domain property.
		/// </summary>
		internal sealed partial class NameChangedPropertyHandler : DslModeling::DomainPropertyValueHandler<FactType, global::System.Int64>
		{
			private NameChangedPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FactType.NameChanged domain property value handler.
			/// </summary>
			public static readonly NameChangedPropertyHandler Instance = new NameChangedPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FactType.NameChanged domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameChangedDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int64 GetValue(FactType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for NameChanged because its Kind is
				// set to CustomStorage. Please provide the GetNameChangedValue()
				// method on the domain class.
				return element.GetNameChangedValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FactType element, global::System.Int64 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int64 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for NameChanged because its Kind is
					// set to CustomStorage. Please provide the SetNameChangedValue()
					// method on the domain class.
					element.SetNameChangedValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DerivationNoteDisplay domain property code
		
		/// <summary>
		/// DerivationNoteDisplay domain property Id.
		/// </summary>
		public static readonly global::System.Guid DerivationNoteDisplayDomainPropertyId = new global::System.Guid(0x7af5c436, 0xc28a, 0x49ba, 0xb8, 0xe0, 0x05, 0xc4, 0x09, 0xb6, 0x73, 0x58);
		
		/// <summary>
		/// Gets or sets the value of DerivationNoteDisplay domain property.
		/// A description of the derivation rule for this FactType.
		/// </summary>
		[global::System.ComponentModel.Editor(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.Design.DerivationNoteEditor), typeof(global::System.Drawing.Design.UITypeEditor))]
		[global::System.ComponentModel.MergableProperty(false)]
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactType/DerivationNoteDisplay.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactType/DerivationNoteDisplay.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("7af5c436-c28a-49ba-b8e0-05c409b67358")]
		public global::System.String DerivationNoteDisplay
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DerivationNoteDisplayPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DerivationNoteDisplayPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FactType.DerivationNoteDisplay domain property.
		/// </summary>
		internal sealed partial class DerivationNoteDisplayPropertyHandler : DslModeling::DomainPropertyValueHandler<FactType, global::System.String>
		{
			private DerivationNoteDisplayPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FactType.DerivationNoteDisplay domain property value handler.
			/// </summary>
			public static readonly DerivationNoteDisplayPropertyHandler Instance = new DerivationNoteDisplayPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FactType.DerivationNoteDisplay domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DerivationNoteDisplayDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FactType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for DerivationNoteDisplay because its Kind is
				// set to CustomStorage. Please provide the GetDerivationNoteDisplayValue()
				// method on the domain class.
				return element.GetDerivationNoteDisplayValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FactType element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for DerivationNoteDisplay because its Kind is
					// set to CustomStorage. Please provide the SetDerivationNoteDisplayValue()
					// method on the domain class.
					element.SetDerivationNoteDisplayValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DerivationStorageDisplay domain property code
		
		/// <summary>
		/// DerivationStorageDisplay domain property Id.
		/// </summary>
		public static readonly global::System.Guid DerivationStorageDisplayDomainPropertyId = new global::System.Guid(0x307c9629, 0xace8, 0x43e1, 0xab, 0xf3, 0x33, 0xe8, 0xbb, 0x71, 0x46, 0xb7);
		
		/// <summary>
		/// Gets or sets the value of DerivationStorageDisplay domain property.
		/// Storage options for a derived FactType.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactType/DerivationStorageDisplay.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactType/DerivationStorageDisplay.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("307c9629-ace8-43e1-abf3-33e8bb7146b7")]
		public DerivationExpressionStorageType DerivationStorageDisplay
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DerivationStorageDisplayPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DerivationStorageDisplayPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FactType.DerivationStorageDisplay domain property.
		/// </summary>
		internal sealed partial class DerivationStorageDisplayPropertyHandler : DslModeling::DomainPropertyValueHandler<FactType, DerivationExpressionStorageType>
		{
			private DerivationStorageDisplayPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FactType.DerivationStorageDisplay domain property value handler.
			/// </summary>
			public static readonly DerivationStorageDisplayPropertyHandler Instance = new DerivationStorageDisplayPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FactType.DerivationStorageDisplay domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DerivationStorageDisplayDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed DerivationExpressionStorageType GetValue(FactType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for DerivationStorageDisplay because its Kind is
				// set to CustomStorage. Please provide the GetDerivationStorageDisplayValue()
				// method on the domain class.
				return element.GetDerivationStorageDisplayValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FactType element, DerivationExpressionStorageType newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				DerivationExpressionStorageType oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for DerivationStorageDisplay because its Kind is
					// set to CustomStorage. Please provide the SetDerivationStorageDisplayValue()
					// method on the domain class.
					element.SetDerivationStorageDisplayValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SetComparisonConstraintCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SetComparisonConstraintCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetComparisonConstraint.FactType
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<SetComparisonConstraint> SetComparisonConstraintCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<SetComparisonConstraint>, SetComparisonConstraint>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetComparisonConstraint.FactTypeDomainRoleId);
			}
		}
		#endregion
		#region SetConstraintCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SetConstraintCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetConstraint.FactType
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<SetConstraint> SetConstraintCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<SetConstraint>, SetConstraint>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetConstraint.FactTypeDomainRoleId);
			}
		}
		#endregion
		#region NestingType opposite domain role accessor
		/// <summary>
		/// Gets or sets NestingType.
		/// The EntityType that objectifies this FactType.
		/// </summary>
		public virtual ObjectType NestingType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Objectification.NestedFactTypeDomainRoleId) as ObjectType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Objectification.NestingTypeDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Objectification.NestingTypeDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.Objectification.NestedFactTypeDomainRoleId, value);
				}
			}
		}
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasFactType.FactType
		/// </summary>
		public virtual ORMModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasFactType.FactTypeDomainRoleId) as ORMModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasFactType.FactTypeDomainRoleId, value);
			}
		}
		#endregion
		#region ReadingOrderCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ReadingOrderCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasReadingOrder.FactType
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ReadingOrder> ReadingOrderCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ReadingOrder>, ReadingOrder>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasReadingOrder.FactTypeDomainRoleId);
			}
		}
		#endregion
		#region ReadingRequiredError opposite domain role accessor
		/// <summary>
		/// Gets or sets ReadingRequiredError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresReadingError.FactType
		/// </summary>
		public virtual FactTypeRequiresReadingError ReadingRequiredError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresReadingError.FactTypeDomainRoleId) as FactTypeRequiresReadingError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresReadingError.ReadingRequiredErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresReadingError.ReadingRequiredErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresReadingError.FactTypeDomainRoleId, value);
				}
			}
		}
		#endregion
		#region InternalUniquenessConstraintRequiredError opposite domain role accessor
		/// <summary>
		/// Gets or sets InternalUniquenessConstraintRequiredError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.FactType
		/// </summary>
		public virtual FactTypeRequiresInternalUniquenessConstraintError InternalUniquenessConstraintRequiredError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.FactTypeDomainRoleId) as FactTypeRequiresInternalUniquenessConstraintError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.InternalUniquenessConstraintRequiredErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.InternalUniquenessConstraintRequiredErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.FactTypeDomainRoleId, value);
				}
			}
		}
		#endregion
		#region ImpliedByObjectification opposite domain role accessor
		/// <summary>
		/// Gets or sets ImpliedByObjectification.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationImpliesFactType.ImpliedFactType
		/// </summary>
		public virtual Objectification ImpliedByObjectification
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationImpliesFactType.ImpliedFactTypeDomainRoleId) as Objectification;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationImpliesFactType.ImpliedFactTypeDomainRoleId, value);
			}
		}
		#endregion
		#region ImpliedInternalUniquenessConstraintError opposite domain role accessor
		/// <summary>
		/// Gets or sets ImpliedInternalUniquenessConstraintError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.FactType
		/// </summary>
		public virtual ImpliedInternalUniquenessConstraintError ImpliedInternalUniquenessConstraintError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.FactTypeDomainRoleId) as ImpliedInternalUniquenessConstraintError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.ImpliedInternalUniquenessConstraintErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.ImpliedInternalUniquenessConstraintErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.FactTypeDomainRoleId, value);
				}
			}
		}
		#endregion
		#region Definition opposite domain role accessor
		/// <summary>
		/// Gets or sets Definition.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDefinition.FactType
		/// </summary>
		public virtual Definition Definition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDefinition.FactTypeDomainRoleId) as Definition;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDefinition.DefinitionDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDefinition.DefinitionDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDefinition.FactTypeDomainRoleId, value);
				}
			}
		}
		#endregion
		#region Note opposite domain role accessor
		/// <summary>
		/// Gets or sets Note.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasNote.FactType
		/// </summary>
		public virtual Note Note
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasNote.FactTypeDomainRoleId) as Note;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasNote.NoteDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasNote.NoteDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasNote.FactTypeDomainRoleId, value);
				}
			}
		}
		#endregion
		#region ModelNoteCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ModelNoteCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesFactType.Element
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelNote> ModelNoteCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ModelNote>, ModelNote>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesFactType.ElementDomainRoleId);
			}
		}
		#endregion
		#region RoleCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of RoleCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasRole.FactType
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<RoleBase> RoleCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<RoleBase>, RoleBase>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasRole.FactTypeDomainRoleId);
			}
		}
		#endregion
		#region DerivationExpression opposite domain role accessor
		/// <summary>
		/// Gets or sets DerivationExpression.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationExpression.FactType
		/// </summary>
		public virtual FactTypeDerivationExpression DerivationExpression
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationExpression.FactTypeDomainRoleId) as FactTypeDerivationExpression;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationExpression.DerivationRuleDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationExpression.DerivationRuleDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationExpression.FactTypeDomainRoleId, value);
				}
			}
		}
		#endregion
		#region FactTypeInstanceCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of FactTypeInstanceCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeInstance.FactType
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<FactTypeInstance> FactTypeInstanceCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<FactTypeInstance>, FactTypeInstance>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeInstance.FactTypeDomainRoleId);
			}
		}
		#endregion
		#region DerivationRule opposite domain role accessor
		/// <summary>
		/// Gets or sets DerivationRule.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationRule.FactType
		/// </summary>
		public virtual RoleProjectedDerivationRule DerivationRule
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationRule.FactTypeDomainRoleId) as RoleProjectedDerivationRule;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationRule.DerivationRuleDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationRule.DerivationRuleDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationRule.FactTypeDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass SubtypeFact
	/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeFact
	/// </summary>
	[global::System.ComponentModel.TypeDescriptionProvider(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.ElementTypeDescriptionProvider<SubtypeFact, Design.SubtypeFactTypeDescriptor<SubtypeFact>>))]
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeFact.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeFact.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("7a957450-ad7e-4c29-af59-a10f8c8052cc")]
	public partial class SubtypeFact : FactType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SubtypeFact domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7a957450, 0xad7e, 0x4c29, 0xaf, 0x59, 0xa1, 0x0f, 0x8c, 0x80, 0x52, 0xcc);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SubtypeFact(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SubtypeFact(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region IsPrimary domain property code
		
		/// <summary>
		/// IsPrimary domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsPrimaryDomainPropertyId = new global::System.Guid(0x9a2a6585, 0x7caa, 0x41f9, 0x81, 0x17, 0x9f, 0x35, 0x7a, 0x6c, 0x36, 0x26);
		
		/// <summary>
		/// Storage for IsPrimary
		/// </summary>
		private global::System.Boolean isPrimaryPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsPrimary domain property.
		/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeFact.IsPrimary
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeFact/IsPrimary.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeFact/IsPrimary.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("9a2a6585-7caa-41f9-8117-9f357a6c3626")]
		public global::System.Boolean IsPrimary
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isPrimaryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsPrimaryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SubtypeFact.IsPrimary domain property.
		/// </summary>
		internal sealed partial class IsPrimaryPropertyHandler : DslModeling::DomainPropertyValueHandler<SubtypeFact, global::System.Boolean>
		{
			private IsPrimaryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SubtypeFact.IsPrimary domain property value handler.
			/// </summary>
			public static readonly IsPrimaryPropertyHandler Instance = new IsPrimaryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SubtypeFact.IsPrimary domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsPrimaryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(SubtypeFact element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isPrimaryPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SubtypeFact element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isPrimaryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ProvidesPreferredIdentifier domain property code
		
		/// <summary>
		/// ProvidesPreferredIdentifier domain property Id.
		/// </summary>
		public static readonly global::System.Guid ProvidesPreferredIdentifierDomainPropertyId = new global::System.Guid(0xe4e9e28d, 0x1a60, 0x4321, 0x85, 0x7e, 0x01, 0x8f, 0x39, 0xaa, 0x3e, 0xe3);
		
		/// <summary>
		/// Storage for ProvidesPreferredIdentifier
		/// </summary>
		private global::System.Boolean providesPreferredIdentifierPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ProvidesPreferredIdentifier domain property.
		/// The preferred identification scheme for the subtype is provided by a supertype
		/// reached through this path.
		/// </summary>
		[global::System.ComponentModel.MergableProperty(false)]
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeFact/ProvidesPreferredIdentifier.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeFact/ProvidesPreferredIdentifier.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainObjectId("e4e9e28d-1a60-4321-857e-018f39aa3ee3")]
		public global::System.Boolean ProvidesPreferredIdentifier
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return providesPreferredIdentifierPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ProvidesPreferredIdentifierPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SubtypeFact.ProvidesPreferredIdentifier domain property.
		/// </summary>
		internal sealed partial class ProvidesPreferredIdentifierPropertyHandler : DslModeling::DomainPropertyValueHandler<SubtypeFact, global::System.Boolean>
		{
			private ProvidesPreferredIdentifierPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SubtypeFact.ProvidesPreferredIdentifier domain property value handler.
			/// </summary>
			public static readonly ProvidesPreferredIdentifierPropertyHandler Instance = new ProvidesPreferredIdentifierPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SubtypeFact.ProvidesPreferredIdentifier domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ProvidesPreferredIdentifierDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(SubtypeFact element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.providesPreferredIdentifierPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SubtypeFact element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.providesPreferredIdentifierPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass RoleBase
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleBase.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleBase.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("62293718-2f14-4a4c-88eb-0ba3aa6b7b91")]
	public abstract partial class RoleBase : ORMModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// RoleBase domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x62293718, 0x2f14, 0x4a4c, 0x88, 0xeb, 0x0b, 0xa3, 0xaa, 0x6b, 0x7b, 0x91);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected RoleBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region FactType opposite domain role accessor
		/// <summary>
		/// Gets or sets FactType.
		/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasRole.Role
		/// </summary>
		public virtual FactType FactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasRole.RoleDomainRoleId) as FactType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasRole.RoleDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass RoleProxy
	/// </summary>
	[global::System.ComponentModel.TypeDescriptionProvider(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.ElementTypeDescriptionProvider<RoleProxy, Design.RoleProxyTypeDescriptor>))]
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProxy.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProxy.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("ff552152-bd43-4731-8eda-675e68d6c5db")]
	public partial class RoleProxy : RoleBase
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// RoleProxy domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xff552152, 0xbd43, 0x4731, 0x8e, 0xda, 0x67, 0x5e, 0x68, 0xd6, 0xc5, 0xdb);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RoleProxy(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RoleProxy(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region TargetRole opposite domain role accessor
		/// <summary>
		/// Gets or sets TargetRole.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProxyHasRole.Proxy
		/// </summary>
		public virtual Role TargetRole
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProxyHasRole.ProxyDomainRoleId) as Role;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProxyHasRole.TargetRoleDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProxyHasRole.TargetRoleDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProxyHasRole.ProxyDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass Role
	/// </summary>
	[global::System.ComponentModel.TypeDescriptionProvider(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.ElementTypeDescriptionProvider<Role, Design.RoleTypeDescriptor>))]
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Role.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Role.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("291feb71-371a-4b23-9ddc-61154a10a3d7")]
	public partial class Role : RoleBase
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Role domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x291feb71, 0x371a, 0x4b23, 0x9d, 0xdc, 0x61, 0x15, 0x4a, 0x10, 0xa3, 0xd7);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Role(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Role(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region IsMandatory domain property code
		
		/// <summary>
		/// IsMandatory domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsMandatoryDomainPropertyId = new global::System.Guid(0x0f5eed7e, 0x7584, 0x413a, 0x92, 0x50, 0xbd, 0x46, 0x24, 0xdc, 0x16, 0x4e);
		
		/// <summary>
		/// Gets or sets the value of IsMandatory domain property.
		/// Does this Role have a simple mandatory constraint?
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Role/IsMandatory.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Role/IsMandatory.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("0f5eed7e-7584-413a-9250-bd4624dc164e")]
		public global::System.Boolean IsMandatory
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return IsMandatoryPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsMandatoryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Role.IsMandatory domain property.
		/// </summary>
		internal sealed partial class IsMandatoryPropertyHandler : DslModeling::DomainPropertyValueHandler<Role, global::System.Boolean>
		{
			private IsMandatoryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Role.IsMandatory domain property value handler.
			/// </summary>
			public static readonly IsMandatoryPropertyHandler Instance = new IsMandatoryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Role.IsMandatory domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsMandatoryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(Role element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for IsMandatory because its Kind is
				// set to CustomStorage. Please provide the GetIsMandatoryValue()
				// method on the domain class.
				return element.GetIsMandatoryValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Role element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for IsMandatory because its Kind is
					// set to CustomStorage. Please provide the SetIsMandatoryValue()
					// method on the domain class.
					element.SetIsMandatoryValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Multiplicity domain property code
		
		/// <summary>
		/// Multiplicity domain property Id.
		/// </summary>
		public static readonly global::System.Guid MultiplicityDomainPropertyId = new global::System.Guid(0xada46024, 0x61b8, 0x4e1d, 0xbb, 0x28, 0x2f, 0xf2, 0xc7, 0x1b, 0x83, 0xcd);
		
		/// <summary>
		/// Gets or sets the value of Multiplicity domain property.
		/// The multiplicity specification for a Role of a binary FactType. Affects the
		/// uniqueness and mandatory constraints on the opposite Role.
		/// </summary>
		[global::System.ComponentModel.MergableProperty(false)]
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Role/Multiplicity.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Role/Multiplicity.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue(RoleMultiplicity.Unspecified)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("ada46024-61b8-4e1d-bb28-2ff2c71b83cd")]
		public RoleMultiplicity Multiplicity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return MultiplicityPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MultiplicityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Role.Multiplicity domain property.
		/// </summary>
		internal sealed partial class MultiplicityPropertyHandler : DslModeling::DomainPropertyValueHandler<Role, RoleMultiplicity>
		{
			private MultiplicityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Role.Multiplicity domain property value handler.
			/// </summary>
			public static readonly MultiplicityPropertyHandler Instance = new MultiplicityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Role.Multiplicity domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MultiplicityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed RoleMultiplicity GetValue(Role element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for Multiplicity because its Kind is
				// set to CustomStorage. Please provide the GetMultiplicityValue()
				// method on the domain class.
				return element.GetMultiplicityValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Role element, RoleMultiplicity newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				RoleMultiplicity oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for Multiplicity because its Kind is
					// set to CustomStorage. Please provide the SetMultiplicityValue()
					// method on the domain class.
					element.SetMultiplicityValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ValueRangeText domain property code
		
		/// <summary>
		/// ValueRangeText domain property Id.
		/// </summary>
		public static readonly global::System.Guid ValueRangeTextDomainPropertyId = new global::System.Guid(0x3882c0ac, 0x6f4a, 0x4cf1, 0xb8, 0x56, 0xe5, 0x7a, 0x2d, 0xd4, 0x65, 0x0c);
		
		/// <summary>
		/// Gets or sets the value of ValueRangeText domain property.
		/// Restrict the range of possible values for instances of the RolePlayer
		/// ObjectType.
		///     To specify a range, use '..' between the range endpoints, square brackets to
		/// specify a closed endpoint, and parentheses to specify an open endpoint. Commas
		/// are used to entered multiple ranges or discrete values.
		///     Example: {[10..20), 30} specifies all values between 10 and 20 (but not
		/// including 20) and the value 30.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Role/ValueRangeText.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Role/ValueRangeText.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("3882c0ac-6f4a-4cf1-b856-e57a2dd4650c")]
		public global::System.String ValueRangeText
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return ValueRangeTextPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ValueRangeTextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Role.ValueRangeText domain property.
		/// </summary>
		internal sealed partial class ValueRangeTextPropertyHandler : DslModeling::DomainPropertyValueHandler<Role, global::System.String>
		{
			private ValueRangeTextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Role.ValueRangeText domain property value handler.
			/// </summary>
			public static readonly ValueRangeTextPropertyHandler Instance = new ValueRangeTextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Role.ValueRangeText domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ValueRangeTextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Role element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for ValueRangeText because its Kind is
				// set to CustomStorage. Please provide the GetValueRangeTextValue()
				// method on the domain class.
				return element.GetValueRangeTextValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Role element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for ValueRangeText because its Kind is
					// set to CustomStorage. Please provide the SetValueRangeTextValue()
					// method on the domain class.
					element.SetValueRangeTextValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region MandatoryConstraintName domain property code
		
		/// <summary>
		/// MandatoryConstraintName domain property Id.
		/// </summary>
		public static readonly global::System.Guid MandatoryConstraintNameDomainPropertyId = new global::System.Guid(0xa6680c0f, 0x84b1, 0x499c, 0x8b, 0x58, 0x1e, 0x1c, 0x5d, 0x09, 0x57, 0x0c);
		
		/// <summary>
		/// Gets or sets the value of MandatoryConstraintName domain property.
		/// The Name of the simple mandatory constraint on this Role.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Role/MandatoryConstraintName.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Role/MandatoryConstraintName.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("a6680c0f-84b1-499c-8b58-1e1c5d09570c")]
		public global::System.String MandatoryConstraintName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return MandatoryConstraintNamePropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MandatoryConstraintNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Role.MandatoryConstraintName domain property.
		/// </summary>
		internal sealed partial class MandatoryConstraintNamePropertyHandler : DslModeling::DomainPropertyValueHandler<Role, global::System.String>
		{
			private MandatoryConstraintNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Role.MandatoryConstraintName domain property value handler.
			/// </summary>
			public static readonly MandatoryConstraintNamePropertyHandler Instance = new MandatoryConstraintNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Role.MandatoryConstraintName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MandatoryConstraintNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Role element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for MandatoryConstraintName because its Kind is
				// set to CustomStorage. Please provide the GetMandatoryConstraintNameValue()
				// method on the domain class.
				return element.GetMandatoryConstraintNameValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Role element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for MandatoryConstraintName because its Kind is
					// set to CustomStorage. Please provide the SetMandatoryConstraintNameValue()
					// method on the domain class.
					element.SetMandatoryConstraintNameValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region MandatoryConstraintModality domain property code
		
		/// <summary>
		/// MandatoryConstraintModality domain property Id.
		/// </summary>
		public static readonly global::System.Guid MandatoryConstraintModalityDomainPropertyId = new global::System.Guid(0x29b14765, 0x434b, 0x4ccf, 0x9c, 0x93, 0xbe, 0xe8, 0xbb, 0x7e, 0x26, 0x97);
		
		/// <summary>
		/// Gets or sets the value of MandatoryConstraintModality domain property.
		/// The Modality of the simple mandatory constraint on this Role.
		///     Alethic modality means the constraint is structurally enforced and data
		/// violating the constraint cannot be entered in the system;
		///     Deontic modality means that data violating the constraint can be recorded.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Role/MandatoryConstraintModality.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Role/MandatoryConstraintModality.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("29b14765-434b-4ccf-9c93-bee8bb7e2697")]
		public ConstraintModality MandatoryConstraintModality
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return MandatoryConstraintModalityPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MandatoryConstraintModalityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Role.MandatoryConstraintModality domain property.
		/// </summary>
		internal sealed partial class MandatoryConstraintModalityPropertyHandler : DslModeling::DomainPropertyValueHandler<Role, ConstraintModality>
		{
			private MandatoryConstraintModalityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Role.MandatoryConstraintModality domain property value handler.
			/// </summary>
			public static readonly MandatoryConstraintModalityPropertyHandler Instance = new MandatoryConstraintModalityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Role.MandatoryConstraintModality domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MandatoryConstraintModalityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed ConstraintModality GetValue(Role element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for MandatoryConstraintModality because its Kind is
				// set to CustomStorage. Please provide the GetMandatoryConstraintModalityValue()
				// method on the domain class.
				return element.GetMandatoryConstraintModalityValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Role element, ConstraintModality newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				ConstraintModality oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for MandatoryConstraintModality because its Kind is
					// set to CustomStorage. Please provide the SetMandatoryConstraintModalityValue()
					// method on the domain class.
					element.SetMandatoryConstraintModalityValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xf173d0fa, 0x8f94, 0x479d, 0x87, 0x94, 0x25, 0x72, 0xb8, 0xcd, 0x8d, 0x9a);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// The explicit Name for this role.
		/// </summary>
		[global::System.ComponentModel.MergableProperty(false)]
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Role/Name.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Role/Name.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("f173d0fa-8f94-479d-8794-2572b8cd8d9a")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Role.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Role, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Role.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Role.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Role element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Role element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ObjectificationOppositeRoleName domain property code
		
		/// <summary>
		/// ObjectificationOppositeRoleName domain property Id.
		/// </summary>
		public static readonly global::System.Guid ObjectificationOppositeRoleNameDomainPropertyId = new global::System.Guid(0x4719aac4, 0xe0e7, 0x467a, 0xb2, 0x61, 0xcd, 0xb8, 0xae, 0x98, 0x26, 0xed);
		
		/// <summary>
		/// Gets or sets the value of ObjectificationOppositeRoleName domain property.
		/// The Name of the implied Role attached to the objectifying EntityType.
		///     An implied binary FactType is created relating the objectifying EntityType
		/// to each of the role players of an objectified FactType. Binary FactTypes with a
		/// spanning internal uniqueness constraint and ternary (or higher arity) FactTypes
		/// are automatically objectified.
		/// </summary>
		[global::System.ComponentModel.MergableProperty(false)]
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Role/ObjectificationOppositeRoleName.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Role/ObjectificationOppositeRoleName.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("4719aac4-e0e7-467a-b261-cdb8ae9826ed")]
		public global::System.String ObjectificationOppositeRoleName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return ObjectificationOppositeRoleNamePropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ObjectificationOppositeRoleNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Role.ObjectificationOppositeRoleName domain property.
		/// </summary>
		internal sealed partial class ObjectificationOppositeRoleNamePropertyHandler : DslModeling::DomainPropertyValueHandler<Role, global::System.String>
		{
			private ObjectificationOppositeRoleNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Role.ObjectificationOppositeRoleName domain property value handler.
			/// </summary>
			public static readonly ObjectificationOppositeRoleNamePropertyHandler Instance = new ObjectificationOppositeRoleNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Role.ObjectificationOppositeRoleName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ObjectificationOppositeRoleNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Role element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for ObjectificationOppositeRoleName because its Kind is
				// set to CustomStorage. Please provide the GetObjectificationOppositeRoleNameValue()
				// method on the domain class.
				return element.GetObjectificationOppositeRoleNameValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Role element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for ObjectificationOppositeRoleName because its Kind is
					// set to CustomStorage. Please provide the SetObjectificationOppositeRoleNameValue()
					// method on the domain class.
					element.SetObjectificationOppositeRoleNameValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region RolePlayer opposite domain role accessor
		/// <summary>
		/// Gets or sets RolePlayer.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypePlaysRole.PlayedRole
		/// </summary>
		public virtual ObjectType RolePlayer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypePlaysRole.PlayedRoleDomainRoleId) as ObjectType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypePlaysRole.PlayedRoleDomainRoleId, value);
			}
		}
		#endregion
		#region ConstraintRoleSequenceCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ConstraintRoleSequenceCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasRole.Role
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ConstraintRoleSequence> ConstraintRoleSequenceCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ConstraintRoleSequence>, ConstraintRoleSequence>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasRole.RoleDomainRoleId);
			}
		}
		#endregion
		#region Cardinality opposite domain role accessor
		/// <summary>
		/// Gets or sets Cardinality.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.UnaryRoleHasCardinalityConstraint.UnaryRole
		/// </summary>
		public virtual UnaryRoleCardinalityConstraint Cardinality
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.UnaryRoleHasCardinalityConstraint.UnaryRoleDomainRoleId) as UnaryRoleCardinalityConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.UnaryRoleHasCardinalityConstraint.CardinalityConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.UnaryRoleHasCardinalityConstraint.CardinalityConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.UnaryRoleHasCardinalityConstraint.UnaryRoleDomainRoleId, value);
				}
			}
		}
		#endregion
		#region ValueConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets ValueConstraint.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasValueConstraint.Role
		/// </summary>
		public virtual RoleValueConstraint ValueConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasValueConstraint.RoleDomainRoleId) as RoleValueConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasValueConstraint.ValueConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasValueConstraint.ValueConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasValueConstraint.RoleDomainRoleId, value);
				}
			}
		}
		#endregion
		#region RolePlayerRequiredError opposite domain role accessor
		/// <summary>
		/// Gets or sets RolePlayerRequiredError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasRolePlayerRequiredError.Role
		/// </summary>
		public virtual RolePlayerRequiredError RolePlayerRequiredError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasRolePlayerRequiredError.RoleDomainRoleId) as RolePlayerRequiredError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasRolePlayerRequiredError.RolePlayerRequiredErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasRolePlayerRequiredError.RolePlayerRequiredErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasRolePlayerRequiredError.RoleDomainRoleId, value);
				}
			}
		}
		#endregion
		#region Proxy opposite domain role accessor
		/// <summary>
		/// Gets or sets Proxy.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProxyHasRole.TargetRole
		/// </summary>
		public virtual RoleProxy Proxy
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProxyHasRole.TargetRoleDomainRoleId) as RoleProxy;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProxyHasRole.ProxyDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProxyHasRole.ProxyDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProxyHasRole.TargetRoleDomainRoleId, value);
				}
			}
		}
		#endregion
		#region ObjectifiedUnaryRole opposite domain role accessor
		/// <summary>
		/// Gets or sets ObjectifiedUnaryRole.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedUnaryRoleHasRole.TargetRole
		/// </summary>
		public virtual ObjectifiedUnaryRole ObjectifiedUnaryRole
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedUnaryRoleHasRole.TargetRoleDomainRoleId) as ObjectifiedUnaryRole;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedUnaryRoleHasRole.ObjectifiedUnaryRoleDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedUnaryRoleHasRole.ObjectifiedUnaryRoleDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedUnaryRoleHasRole.TargetRoleDomainRoleId, value);
				}
			}
		}
		#endregion
		#region ObjectTypeInstanceCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ObjectTypeInstanceCollection.
		/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstance.Role
		/// </summary>
		public virtual DslModeling::ReadOnlyLinkedElementCollection<ObjectTypeInstance> ObjectTypeInstanceCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::ReadOnlyLinkedElementCollection<ObjectTypeInstance>, ObjectTypeInstance>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstance.RoleDomainRoleId);
			}
		}
		#endregion
		#region RolePathCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of RolePathCollection.
		/// The role paths that reference this role.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<RolePath> RolePathCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<RolePath>, RolePath>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole.RoleDomainRoleId);
			}
		}
		#endregion
		#region DerivationProjectionCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of DerivationProjectionCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjection.ProjectedRole
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<RoleSetDerivationProjection> DerivationProjectionCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<RoleSetDerivationProjection>, RoleSetDerivationProjection>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjection.ProjectedRoleDomainRoleId);
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass ObjectifiedUnaryRole
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedUnaryRole.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedUnaryRole.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("ee1efd02-7ad8-42fa-9062-1f499941617f")]
	public partial class ObjectifiedUnaryRole : Role
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ObjectifiedUnaryRole domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xee1efd02, 0x7ad8, 0x42fa, 0x90, 0x62, 0x1f, 0x49, 0x99, 0x41, 0x61, 0x7f);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ObjectifiedUnaryRole(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ObjectifiedUnaryRole(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region TargetRole opposite domain role accessor
		/// <summary>
		/// Gets or sets TargetRole.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedUnaryRoleHasRole.ObjectifiedUnaryRole
		/// </summary>
		public virtual Role TargetRole
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedUnaryRoleHasRole.ObjectifiedUnaryRoleDomainRoleId) as Role;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedUnaryRoleHasRole.TargetRoleDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedUnaryRoleHasRole.TargetRoleDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedUnaryRoleHasRole.ObjectifiedUnaryRoleDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass NameAlias
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameAlias.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameAlias.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("a0ad1270-e3d1-4851-a5ab-d87e5942f9ae")]
	public partial class NameAlias : ORMNamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// NameAlias domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa0ad1270, 0xe3d1, 0x4851, 0xa5, 0xab, 0xd8, 0x7e, 0x59, 0x42, 0xf9, 0xae);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public NameAlias(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public NameAlias(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region NameConsumer domain property code
		
		/// <summary>
		/// NameConsumer domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameConsumerDomainPropertyId = new global::System.Guid(0xbe9edeb2, 0xc60e, 0x4446, 0xba, 0xc0, 0x73, 0xcc, 0xd6, 0x17, 0x16, 0xea);
		
		/// <summary>
		/// Gets or sets the value of NameConsumer domain property.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.NameAlias.NameConsumer
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameAlias/NameConsumer.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameAlias/NameConsumer.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("be9edeb2-c60e-4446-bac0-73ccd61716ea")]
		public global::System.String NameConsumer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return NameConsumerPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NameConsumerPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the NameAlias.NameConsumer domain property.
		/// </summary>
		internal sealed partial class NameConsumerPropertyHandler : DslModeling::DomainPropertyValueHandler<NameAlias, global::System.String>
		{
			private NameConsumerPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NameAlias.NameConsumer domain property value handler.
			/// </summary>
			public static readonly NameConsumerPropertyHandler Instance = new NameConsumerPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NameAlias.NameConsumer domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameConsumerDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(NameAlias element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for NameConsumer because its Kind is
				// set to CustomStorage. Please provide the GetNameConsumerValue()
				// method on the domain class.
				return element.GetNameConsumerValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(NameAlias element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for NameConsumer because its Kind is
					// set to CustomStorage. Please provide the SetNameConsumerValue()
					// method on the domain class.
					element.SetNameConsumerValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region NameUsage domain property code
		
		/// <summary>
		/// NameUsage domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameUsageDomainPropertyId = new global::System.Guid(0x18dbb768, 0xb471, 0x4926, 0xb6, 0x78, 0x5b, 0x22, 0x45, 0x76, 0x03, 0x33);
		
		/// <summary>
		/// Gets or sets the value of NameUsage domain property.
		/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.NameAlias.NameUsage
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameAlias/NameUsage.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameAlias/NameUsage.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("18dbb768-b471-4926-b678-5b2245760333")]
		public global::System.String NameUsage
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return NameUsagePropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NameUsagePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the NameAlias.NameUsage domain property.
		/// </summary>
		internal sealed partial class NameUsagePropertyHandler : DslModeling::DomainPropertyValueHandler<NameAlias, global::System.String>
		{
			private NameUsagePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NameAlias.NameUsage domain property value handler.
			/// </summary>
			public static readonly NameUsagePropertyHandler Instance = new NameUsagePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NameAlias.NameUsage domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameUsageDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(NameAlias element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for NameUsage because its Kind is
				// set to CustomStorage. Please provide the GetNameUsageValue()
				// method on the domain class.
				return element.GetNameUsageValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(NameAlias element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for NameUsage because its Kind is
					// set to CustomStorage. Please provide the SetNameUsageValue()
					// method on the domain class.
					element.SetNameUsageValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Element opposite domain role accessor
		/// <summary>
		/// Gets or sets Element.
		/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.ElementHasAlias.Alias
		/// </summary>
		public virtual global::Microsoft.VisualStudio.Modeling.ModelElement Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementHasAlias.AliasDomainRoleId) as global::Microsoft.VisualStudio.Modeling.ModelElement;
			}
		}
		#endregion
		#region RefinedInstance opposite domain role accessor
		/// <summary>
		/// Gets or sets RefinedInstance.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.NameAliasRefinesInstance.Alias
		/// </summary>
		public global::Microsoft.VisualStudio.Modeling.ModelElement RefinedInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameAliasRefinesInstance.AliasDomainRoleId) as global::Microsoft.VisualStudio.Modeling.ModelElement;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameAliasRefinesInstance.AliasDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass EqualityConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EqualityConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EqualityConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("e4f8e935-c07c-4269-81e3-978110f6dc68")]
	public partial class EqualityConstraint : SetComparisonConstraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// EqualityConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe4f8e935, 0xc07c, 0x4269, 0x81, 0xe3, 0x97, 0x81, 0x10, 0xf6, 0xdc, 0x68);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EqualityConstraint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EqualityConstraint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass ExclusionConstraint
	/// </summary>
	[global::System.ComponentModel.TypeDescriptionProvider(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.ElementTypeDescriptionProvider<ExclusionConstraint, Design.ExclusionConstraintTypeDescriptor<ExclusionConstraint>>))]
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("7766c350-adfc-464c-b200-e4473f551e03")]
	public partial class ExclusionConstraint : SetComparisonConstraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ExclusionConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7766c350, 0xadfc, 0x464c, 0xb2, 0x00, 0xe4, 0x47, 0x3f, 0x55, 0x1e, 0x03);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ExclusionConstraint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ExclusionConstraint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ExclusiveOrMandatoryConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets ExclusiveOrMandatoryConstraint.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusiveOrConstraintCoupler.ExclusionConstraint
		/// </summary>
		public virtual MandatoryConstraint ExclusiveOrMandatoryConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusiveOrConstraintCoupler.ExclusionConstraintDomainRoleId) as MandatoryConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusiveOrConstraintCoupler.MandatoryConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusiveOrConstraintCoupler.MandatoryConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusiveOrConstraintCoupler.ExclusionConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
		#region ExclusionContradictsMandatoryError opposite domain role accessor
		/// <summary>
		/// Gets or sets ExclusionContradictsMandatoryError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError.ExclusionConstraint
		/// </summary>
		public virtual ExclusionContradictsMandatoryError ExclusionContradictsMandatoryError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError.ExclusionConstraintDomainRoleId) as ExclusionContradictsMandatoryError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError.ExclusionConstraintDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass SubsetConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("9b5982e3-a852-4071-a973-9719f87546f0")]
	public partial class SubsetConstraint : SetComparisonConstraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SubsetConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9b5982e3, 0xa852, 0x4071, 0xa9, 0x73, 0x97, 0x19, 0xf8, 0x75, 0x46, 0xf0);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SubsetConstraint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SubsetConstraint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region NotWellModeledSubsetAndMandatoryError opposite domain role accessor
		/// <summary>
		/// Gets or sets NotWellModeledSubsetAndMandatoryError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError.SubsetConstraint
		/// </summary>
		public virtual NotWellModeledSubsetAndMandatoryError NotWellModeledSubsetAndMandatoryError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError.SubsetConstraintDomainRoleId) as NotWellModeledSubsetAndMandatoryError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError.NotWellModeledSubsetAndMandatoryErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError.NotWellModeledSubsetAndMandatoryErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError.SubsetConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
		#region SupersetRoleOfSubtypeSubsetConstraintNotSubtypeError opposite domain role accessor
		/// <summary>
		/// Gets or sets SupersetRoleOfSubtypeSubsetConstraintNotSubtypeError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError.SubsetConstraint
		/// </summary>
		public virtual SupersetRoleOfSubtypeSubsetConstraintNotSubtypeError SupersetRoleOfSubtypeSubsetConstraintNotSubtypeError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError.SubsetConstraintDomainRoleId) as SupersetRoleOfSubtypeSubsetConstraintNotSubtypeError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError.SupersetRoleOfSubtypeSubsetConstraintNotSubtypeErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError.SupersetRoleOfSubtypeSubsetConstraintNotSubtypeErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError.SubsetConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass SetComparisonConstraint
	/// </summary>
	[global::System.ComponentModel.TypeDescriptionProvider(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.ElementTypeDescriptionProvider<SetComparisonConstraint, Design.SetComparisonConstraintTypeDescriptor<SetComparisonConstraint>>))]
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("85074b82-ed14-4d70-b95c-0b29f2d64210")]
	public abstract partial class SetComparisonConstraint : ORMNamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SetComparisonConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x85074b82, 0xed14, 0x4d70, 0xb9, 0x5c, 0x0b, 0x29, 0xf2, 0xd6, 0x42, 0x10);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected SetComparisonConstraint(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Modality domain property code
		
		/// <summary>
		/// Modality domain property Id.
		/// </summary>
		public static readonly global::System.Guid ModalityDomainPropertyId = new global::System.Guid(0xc0aef802, 0xd9e9, 0x4938, 0xb4, 0x4b, 0xde, 0x9a, 0x6a, 0x53, 0x0d, 0x9b);
		
		/// <summary>
		/// Storage for Modality
		/// </summary>
		private ConstraintModality modalityPropertyStorage = ConstraintModality.Alethic;
		
		/// <summary>
		/// Gets or sets the value of Modality domain property.
		/// The constraint Modality.
		///     Alethic modality means the constraint is structurally enforced and data
		/// violating the constraint cannot be entered in the system;
		///     Deontic modality means that data violating the constraint can be recorded.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint/Modality.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint/Modality.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue(ConstraintModality.Alethic)]
		[DslModeling::DomainObjectId("c0aef802-d9e9-4938-b44b-de9a6a530d9b")]
		public ConstraintModality Modality
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return modalityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ModalityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SetComparisonConstraint.Modality domain property.
		/// </summary>
		internal sealed partial class ModalityPropertyHandler : DslModeling::DomainPropertyValueHandler<SetComparisonConstraint, ConstraintModality>
		{
			private ModalityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SetComparisonConstraint.Modality domain property value handler.
			/// </summary>
			public static readonly ModalityPropertyHandler Instance = new ModalityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SetComparisonConstraint.Modality domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ModalityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed ConstraintModality GetValue(SetComparisonConstraint element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.modalityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SetComparisonConstraint element, ConstraintModality newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				ConstraintModality oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.modalityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DefinitionText domain property code
		
		/// <summary>
		/// DefinitionText domain property Id.
		/// </summary>
		public static readonly global::System.Guid DefinitionTextDomainPropertyId = new global::System.Guid(0x57b17d7f, 0xc707, 0x4ceb, 0x8b, 0x95, 0x36, 0xa1, 0x96, 0x48, 0xc0, 0x59);
		
		/// <summary>
		/// Gets or sets the value of DefinitionText domain property.
		/// An informal description of this constraint.
		///     To insert new lines, use Control-Enter in the dropdown editor, or open the
		/// 'ORM Informal Description Editor' tool window.
		/// </summary>
		[global::System.ComponentModel.Editor(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.MultilineTextEditor<global::ORMSolutions.ORMArchitect.Core.ObjectModel.Definition>), typeof(global::System.Drawing.Design.UITypeEditor))]
		[global::System.ComponentModel.MergableProperty(false)]
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint/DefinitionText.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint/DefinitionText.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("57b17d7f-c707-4ceb-8b95-36a19648c059")]
		public global::System.String DefinitionText
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DefinitionTextPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DefinitionTextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SetComparisonConstraint.DefinitionText domain property.
		/// </summary>
		internal sealed partial class DefinitionTextPropertyHandler : DslModeling::DomainPropertyValueHandler<SetComparisonConstraint, global::System.String>
		{
			private DefinitionTextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SetComparisonConstraint.DefinitionText domain property value handler.
			/// </summary>
			public static readonly DefinitionTextPropertyHandler Instance = new DefinitionTextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SetComparisonConstraint.DefinitionText domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DefinitionTextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(SetComparisonConstraint element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for DefinitionText because its Kind is
				// set to CustomStorage. Please provide the GetDefinitionTextValue()
				// method on the domain class.
				return element.GetDefinitionTextValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SetComparisonConstraint element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for DefinitionText because its Kind is
					// set to CustomStorage. Please provide the SetDefinitionTextValue()
					// method on the domain class.
					element.SetDefinitionTextValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region NoteText domain property code
		
		/// <summary>
		/// NoteText domain property Id.
		/// </summary>
		public static readonly global::System.Guid NoteTextDomainPropertyId = new global::System.Guid(0x00a8bec9, 0x8fdb, 0x4961, 0xb3, 0x45, 0x3a, 0x7c, 0x8f, 0xd1, 0x8c, 0xfa);
		
		/// <summary>
		/// Gets or sets the value of NoteText domain property.
		/// A note to associate with this constraint.
		///     To insert new lines, use Control-Enter in the dropdown editor, or open the
		/// 'ORM Notes Editor' tool window.
		/// </summary>
		[global::System.ComponentModel.Editor(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.MultilineTextEditor<global::ORMSolutions.ORMArchitect.Core.ObjectModel.Note>), typeof(global::System.Drawing.Design.UITypeEditor))]
		[global::System.ComponentModel.MergableProperty(false)]
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint/NoteText.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraint/NoteText.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("00a8bec9-8fdb-4961-b345-3a7c8fd18cfa")]
		public global::System.String NoteText
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return NoteTextPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NoteTextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SetComparisonConstraint.NoteText domain property.
		/// </summary>
		internal sealed partial class NoteTextPropertyHandler : DslModeling::DomainPropertyValueHandler<SetComparisonConstraint, global::System.String>
		{
			private NoteTextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SetComparisonConstraint.NoteText domain property value handler.
			/// </summary>
			public static readonly NoteTextPropertyHandler Instance = new NoteTextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SetComparisonConstraint.NoteText domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NoteTextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(SetComparisonConstraint element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for NoteText because its Kind is
				// set to CustomStorage. Please provide the GetNoteTextValue()
				// method on the domain class.
				return element.GetNoteTextValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SetComparisonConstraint element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for NoteText because its Kind is
					// set to CustomStorage. Please provide the SetNoteTextValue()
					// method on the domain class.
					element.SetNoteTextValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region FactTypeCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of FactTypeCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetComparisonConstraint.SetComparisonConstraint
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<FactType> FactTypeCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<FactType>, FactType>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetComparisonConstraint.SetComparisonConstraintDomainRoleId);
			}
		}
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetComparisonConstraint.SetComparisonConstraint
		/// </summary>
		public virtual ORMModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetComparisonConstraint.SetComparisonConstraintDomainRoleId) as ORMModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetComparisonConstraint.SetComparisonConstraintDomainRoleId, value);
			}
		}
		#endregion
		#region RoleSequenceCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of RoleSequenceCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasRoleSequence.ExternalConstraint
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<SetComparisonConstraintRoleSequence> RoleSequenceCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<SetComparisonConstraintRoleSequence>, SetComparisonConstraintRoleSequence>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasRoleSequence.ExternalConstraintDomainRoleId);
			}
		}
		#endregion
		#region TooFewRoleSequencesError opposite domain role accessor
		/// <summary>
		/// Gets or sets TooFewRoleSequencesError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.SetComparisonConstraint
		/// </summary>
		public virtual TooFewRoleSequencesError TooFewRoleSequencesError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.SetComparisonConstraintDomainRoleId) as TooFewRoleSequencesError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.SetComparisonConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
		#region TooManyRoleSequencesError opposite domain role accessor
		/// <summary>
		/// Gets or sets TooManyRoleSequencesError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.SetComparisonConstraint
		/// </summary>
		public virtual TooManyRoleSequencesError TooManyRoleSequencesError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.SetComparisonConstraintDomainRoleId) as TooManyRoleSequencesError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.SetComparisonConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
		#region ContradictionError opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ContradictionError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasContradictionError.SetComparisonConstraint
		/// </summary>
		public virtual DslModeling::ReadOnlyLinkedElementCollection<ContradictionError> ContradictionError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::ReadOnlyLinkedElementCollection<ContradictionError>, ContradictionError>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasContradictionError.SetComparisonConstraintDomainRoleId);
			}
		}
		#endregion
		#region ExclusionContradictsEqualityError opposite domain role accessor
		/// <summary>
		/// Gets or sets ExclusionContradictsEqualityError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError.SetComparisonConstraint
		/// </summary>
		public virtual ExclusionContradictsEqualityError ExclusionContradictsEqualityError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError.SetComparisonConstraintDomainRoleId) as ExclusionContradictsEqualityError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError.SetComparisonConstraintDomainRoleId, value);
			}
		}
		#endregion
		#region ExclusionContradictsSubsetError opposite domain role accessor
		/// <summary>
		/// Gets or sets ExclusionContradictsSubsetError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError.SetComparisonConstraint
		/// </summary>
		public virtual ExclusionContradictsSubsetError ExclusionContradictsSubsetError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError.SetComparisonConstraintDomainRoleId) as ExclusionContradictsSubsetError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError.SetComparisonConstraintDomainRoleId, value);
			}
		}
		#endregion
		#region DuplicateNameError opposite domain role accessor
		/// <summary>
		/// Gets or sets DuplicateNameError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDuplicateNameError.SetComparisonConstraint
		/// </summary>
		public virtual ConstraintDuplicateNameError DuplicateNameError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDuplicateNameError.SetComparisonConstraintDomainRoleId) as ConstraintDuplicateNameError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDuplicateNameError.SetComparisonConstraintDomainRoleId, value);
			}
		}
		#endregion
		#region ArityMismatchError opposite domain role accessor
		/// <summary>
		/// Gets or sets ArityMismatchError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.Constraint
		/// </summary>
		public virtual ExternalConstraintRoleSequenceArityMismatchError ArityMismatchError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ConstraintDomainRoleId) as ExternalConstraintRoleSequenceArityMismatchError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ArityMismatchErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ArityMismatchErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
		#region CompatibleRolePlayerTypeErrorCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of CompatibleRolePlayerTypeErrorCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError.SetComparisonConstraint
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<CompatibleRolePlayerTypeError> CompatibleRolePlayerTypeErrorCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<CompatibleRolePlayerTypeError>, CompatibleRolePlayerTypeError>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError.SetComparisonConstraintDomainRoleId);
			}
		}
		#endregion
		#region Definition opposite domain role accessor
		/// <summary>
		/// Gets or sets Definition.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDefinition.SetComparisonConstraint
		/// </summary>
		public virtual Definition Definition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDefinition.SetComparisonConstraintDomainRoleId) as Definition;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDefinition.DefinitionDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDefinition.DefinitionDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDefinition.SetComparisonConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
		#region Note opposite domain role accessor
		/// <summary>
		/// Gets or sets Note.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasNote.SetComparisonConstraint
		/// </summary>
		public virtual Note Note
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasNote.SetComparisonConstraintDomainRoleId) as Note;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasNote.NoteDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasNote.NoteDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasNote.SetComparisonConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
		#region ModelNoteCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ModelNoteCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetComparisonConstraint.Element
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelNote> ModelNoteCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ModelNote>, ModelNote>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetComparisonConstraint.ElementDomainRoleId);
			}
		}
		#endregion
		#region ImplicationError opposite domain role accessor
		/// <summary>
		/// Gets or sets ImplicationError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasImplicationError.SetComparisonConstraint
		/// </summary>
		public virtual ImplicationError ImplicationError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasImplicationError.SetComparisonConstraintDomainRoleId) as ImplicationError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasImplicationError.ImplicationErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasImplicationError.ImplicationErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasImplicationError.SetComparisonConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
		#region EqualityOrSubsetImpliedByMandatoryError opposite domain role accessor
		/// <summary>
		/// Gets or sets EqualityOrSubsetImpliedByMandatoryError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError.SetComparisonConstraint
		/// </summary>
		public virtual EqualityOrSubsetImpliedByMandatoryError EqualityOrSubsetImpliedByMandatoryError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError.SetComparisonConstraintDomainRoleId) as EqualityOrSubsetImpliedByMandatoryError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError.EqualityOrSubsetImpliedByMandatoryErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError.EqualityOrSubsetImpliedByMandatoryErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError.SetComparisonConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass Expression
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Expression.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Expression.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("1b62af68-86a9-4a14-8b32-8988041bbccf")]
	public abstract partial class Expression : ORMModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Expression domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1b62af68, 0x86a9, 0x4a14, 0x8b, 0x32, 0x89, 0x88, 0x04, 0x1b, 0xbc, 0xcf);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected Expression(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Body domain property code
		
		/// <summary>
		/// Body domain property Id.
		/// </summary>
		public static readonly global::System.Guid BodyDomainPropertyId = new global::System.Guid(0x9760d258, 0x0126, 0x4749, 0xa3, 0x70, 0xd7, 0xcc, 0x5a, 0x04, 0xf1, 0x38);
		
		/// <summary>
		/// Storage for Body
		/// </summary>
		private global::System.String bodyPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Body domain property.
		/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.Expression.Body
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Expression/Body.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Expression/Body.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("9760d258-0126-4749-a370-d7cc5a04f138")]
		public global::System.String Body
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return bodyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				BodyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Expression.Body domain property.
		/// </summary>
		internal sealed partial class BodyPropertyHandler : DslModeling::DomainPropertyValueHandler<Expression, global::System.String>
		{
			private BodyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Expression.Body domain property value handler.
			/// </summary>
			public static readonly BodyPropertyHandler Instance = new BodyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Expression.Body domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return BodyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Expression element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.bodyPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Expression element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.bodyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Language domain property code
		
		/// <summary>
		/// Language domain property Id.
		/// </summary>
		public static readonly global::System.Guid LanguageDomainPropertyId = new global::System.Guid(0x53d116fa, 0xe39c, 0x47c5, 0xa4, 0xd6, 0x41, 0xe4, 0x27, 0x86, 0xee, 0xdb);
		
		/// <summary>
		/// Storage for Language
		/// </summary>
		private global::System.String languagePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Language domain property.
		/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.Expression.Language
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Expression/Language.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Expression/Language.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("53d116fa-e39c-47c5-a4d6-41e42786eedb")]
		public global::System.String Language
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return languagePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				LanguagePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Expression.Language domain property.
		/// </summary>
		internal sealed partial class LanguagePropertyHandler : DslModeling::DomainPropertyValueHandler<Expression, global::System.String>
		{
			private LanguagePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Expression.Language domain property value handler.
			/// </summary>
			public static readonly LanguagePropertyHandler Instance = new LanguagePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Expression.Language domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return LanguageDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Expression element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.languagePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Expression element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.languagePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass SetComparisonConstraintRoleSequence
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintRoleSequence.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintRoleSequence.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("9e59f946-8745-4936-a4aa-74552664790e")]
	public partial class SetComparisonConstraintRoleSequence : ConstraintRoleSequence
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SetComparisonConstraintRoleSequence domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9e59f946, 0x8745, 0x4936, 0xa4, 0xaa, 0x74, 0x55, 0x26, 0x64, 0x79, 0x0e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SetComparisonConstraintRoleSequence(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SetComparisonConstraintRoleSequence(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ExternalConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets ExternalConstraint.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasRoleSequence.RoleSequence
		/// </summary>
		public virtual SetComparisonConstraint ExternalConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasRoleSequence.RoleSequenceDomainRoleId) as SetComparisonConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasRoleSequence.RoleSequenceDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass RingConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("31792dbe-49eb-4544-9fb4-3a692aac39c9")]
	public partial class RingConstraint : SetConstraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// RingConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x31792dbe, 0x49eb, 0x4544, 0x9f, 0xb4, 0x3a, 0x69, 0x2a, 0xac, 0x39, 0xc9);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RingConstraint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RingConstraint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region RingType domain property code
		
		/// <summary>
		/// RingType domain property Id.
		/// </summary>
		public static readonly global::System.Guid RingTypeDomainPropertyId = new global::System.Guid(0x54d182e1, 0x6650, 0x4393, 0x8b, 0xd8, 0x9d, 0x9e, 0x42, 0xbb, 0x8c, 0xe7);
		
		/// <summary>
		/// Storage for RingType
		/// </summary>
		private RingConstraintType ringTypePropertyStorage = RingConstraintType.Undefined;
		
		/// <summary>
		/// Gets or sets the value of RingType domain property.
		/// Restriction type of this Ring constraint.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraint/RingType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraint/RingType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue(RingConstraintType.Undefined)]
		[DslModeling::DomainObjectId("54d182e1-6650-4393-8bd8-9d9e42bb8ce7")]
		public RingConstraintType RingType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return ringTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				RingTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the RingConstraint.RingType domain property.
		/// </summary>
		internal sealed partial class RingTypePropertyHandler : DslModeling::DomainPropertyValueHandler<RingConstraint, RingConstraintType>
		{
			private RingTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the RingConstraint.RingType domain property value handler.
			/// </summary>
			public static readonly RingTypePropertyHandler Instance = new RingTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the RingConstraint.RingType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return RingTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed RingConstraintType GetValue(RingConstraint element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.ringTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(RingConstraint element, RingConstraintType newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				RingConstraintType oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.ringTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region RingConstraintTypeNotSpecifiedError opposite domain role accessor
		/// <summary>
		/// Gets or sets RingConstraintTypeNotSpecifiedError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraint
		/// </summary>
		public virtual RingConstraintTypeNotSpecifiedError RingConstraintTypeNotSpecifiedError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintDomainRoleId) as RingConstraintTypeNotSpecifiedError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintTypeNotSpecifiedErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintTypeNotSpecifiedErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass FrequencyConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("a6d76d01-fdc3-43a2-8aaf-56c2e0bd0465")]
	public partial class FrequencyConstraint : SetConstraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// FrequencyConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa6d76d01, 0xfdc3, 0x43a2, 0x8a, 0xaf, 0x56, 0xc2, 0xe0, 0xbd, 0x04, 0x65);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FrequencyConstraint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FrequencyConstraint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region MinFrequency domain property code
		
		/// <summary>
		/// MinFrequency domain property Id.
		/// </summary>
		public static readonly global::System.Guid MinFrequencyDomainPropertyId = new global::System.Guid(0x2d48d3ca, 0x564d, 0x459e, 0xa7, 0x01, 0x42, 0x09, 0xa1, 0x2c, 0x47, 0x83);
		
		/// <summary>
		/// Storage for MinFrequency
		/// </summary>
		private global::System.Int32 minFrequencyPropertyStorage = 1;
		
		/// <summary>
		/// Gets or sets the value of MinFrequency domain property.
		/// The minimum number of occurrences for each instance that plays the restricted
		/// roles.
		/// </summary>
		[global::System.ComponentModel.TypeConverter(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.Design.FrequencyConstraintMinConverter))]
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraint/MinFrequency.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraint/MinFrequency.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue(1)]
		[DslModeling::DomainObjectId("2d48d3ca-564d-459e-a701-4209a12c4783")]
		public global::System.Int32 MinFrequency
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return minFrequencyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MinFrequencyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FrequencyConstraint.MinFrequency domain property.
		/// </summary>
		internal sealed partial class MinFrequencyPropertyHandler : DslModeling::DomainPropertyValueHandler<FrequencyConstraint, global::System.Int32>
		{
			private MinFrequencyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FrequencyConstraint.MinFrequency domain property value handler.
			/// </summary>
			public static readonly MinFrequencyPropertyHandler Instance = new MinFrequencyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FrequencyConstraint.MinFrequency domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MinFrequencyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(FrequencyConstraint element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.minFrequencyPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FrequencyConstraint element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.minFrequencyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region MaxFrequency domain property code
		
		/// <summary>
		/// MaxFrequency domain property Id.
		/// </summary>
		public static readonly global::System.Guid MaxFrequencyDomainPropertyId = new global::System.Guid(0xf46d9200, 0x3602, 0x435c, 0xb8, 0x52, 0xc5, 0x3b, 0xe1, 0x0d, 0x99, 0xc6);
		
		/// <summary>
		/// Storage for MaxFrequency
		/// </summary>
		private global::System.Int32 maxFrequencyPropertyStorage = 2;
		
		/// <summary>
		/// Gets or sets the value of MaxFrequency domain property.
		/// The maximum number of occurrences for each instance that plays the restricted
		/// roles.
		/// </summary>
		[global::System.ComponentModel.Editor(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.Design.FrequencyConstraintMaxPicker), typeof(global::System.Drawing.Design.UITypeEditor))]
		[global::System.ComponentModel.TypeConverter(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.Design.FrequencyConstraintMaxConverter))]
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraint/MaxFrequency.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraint/MaxFrequency.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue(2)]
		[DslModeling::DomainObjectId("f46d9200-3602-435c-b852-c53be10d99c6")]
		public global::System.Int32 MaxFrequency
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return maxFrequencyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MaxFrequencyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FrequencyConstraint.MaxFrequency domain property.
		/// </summary>
		internal sealed partial class MaxFrequencyPropertyHandler : DslModeling::DomainPropertyValueHandler<FrequencyConstraint, global::System.Int32>
		{
			private MaxFrequencyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FrequencyConstraint.MaxFrequency domain property value handler.
			/// </summary>
			public static readonly MaxFrequencyPropertyHandler Instance = new MaxFrequencyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FrequencyConstraint.MaxFrequency domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MaxFrequencyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(FrequencyConstraint element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.maxFrequencyPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FrequencyConstraint element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.maxFrequencyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region FrequencyConstraintMinMaxError opposite domain role accessor
		/// <summary>
		/// Gets or sets FrequencyConstraintMinMaxError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraint
		/// </summary>
		public virtual FrequencyConstraintMinMaxError FrequencyConstraintMinMaxError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintDomainRoleId) as FrequencyConstraintMinMaxError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintMinMaxErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintMinMaxErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
		#region FrequencyConstraintExactlyOneError opposite domain role accessor
		/// <summary>
		/// Gets or sets FrequencyConstraintExactlyOneError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintExactlyOneError.FrequencyConstraint
		/// </summary>
		public virtual FrequencyConstraintExactlyOneError FrequencyConstraintExactlyOneError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintExactlyOneError.FrequencyConstraintDomainRoleId) as FrequencyConstraintExactlyOneError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintExactlyOneError.FrequencyConstraintExactlyOneErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintExactlyOneError.FrequencyConstraintExactlyOneErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintExactlyOneError.FrequencyConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
		#region FrequencyConstraintNonRestrictiveRangeError opposite domain role accessor
		/// <summary>
		/// Gets or sets FrequencyConstraintNonRestrictiveRangeError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError.FrequencyConstraint
		/// </summary>
		public virtual FrequencyConstraintNonRestrictiveRangeError FrequencyConstraintNonRestrictiveRangeError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError.FrequencyConstraintDomainRoleId) as FrequencyConstraintNonRestrictiveRangeError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError.FrequencyConstraintNonRestrictiveRangeErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError.FrequencyConstraintNonRestrictiveRangeErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError.FrequencyConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
		#region FrequencyConstraintViolatedByUniquenessConstraintError opposite domain role accessor
		/// <summary>
		/// Gets or sets FrequencyConstraintViolatedByUniquenessConstraintError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError.FrequencyConstraint
		/// </summary>
		public virtual FrequencyConstraintViolatedByUniquenessConstraintError FrequencyConstraintViolatedByUniquenessConstraintError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError.FrequencyConstraintDomainRoleId) as FrequencyConstraintViolatedByUniquenessConstraintError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError.FrequencyConstraintViolatedByUniquenessConstraintErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError.FrequencyConstraintViolatedByUniquenessConstraintErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError.FrequencyConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass UniquenessConstraint
	/// </summary>
	[global::System.ComponentModel.TypeDescriptionProvider(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.ElementTypeDescriptionProvider<UniquenessConstraint, Design.UniquenessConstraintTypeDescriptor<UniquenessConstraint>>))]
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("49c7e3ce-c4f9-417d-b49c-27ea4016371e")]
	public partial class UniquenessConstraint : SetConstraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// UniquenessConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x49c7e3ce, 0xc4f9, 0x417d, 0xb4, 0x9c, 0x27, 0xea, 0x40, 0x16, 0x37, 0x1e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public UniquenessConstraint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public UniquenessConstraint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region IsPreferred domain property code
		
		/// <summary>
		/// IsPreferred domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsPreferredDomainPropertyId = new global::System.Guid(0x585de7a0, 0x8e09, 0x43f3, 0x84, 0x63, 0xf2, 0x06, 0x09, 0xa1, 0x67, 0x90);
		
		/// <summary>
		/// Gets or sets the value of IsPreferred domain property.
		/// Is this the preferred identifier for the EntityType role player of the opposite
		/// role(s)?
		///     The opposite role player of an internal constraint on an objectified
		/// FactType is the objectifying EntityType. Binary FactTypes with a spanning
		/// internal uniqueness constraint and ternary (or higher arity) FactTypes are
		/// automatically objectified.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraint/IsPreferred.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraint/IsPreferred.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("585de7a0-8e09-43f3-8463-f20609a16790")]
		public global::System.Boolean IsPreferred
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return IsPreferredPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsPreferredPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the UniquenessConstraint.IsPreferred domain property.
		/// </summary>
		internal sealed partial class IsPreferredPropertyHandler : DslModeling::DomainPropertyValueHandler<UniquenessConstraint, global::System.Boolean>
		{
			private IsPreferredPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the UniquenessConstraint.IsPreferred domain property value handler.
			/// </summary>
			public static readonly IsPreferredPropertyHandler Instance = new IsPreferredPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the UniquenessConstraint.IsPreferred domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsPreferredDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(UniquenessConstraint element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for IsPreferred because its Kind is
				// set to CustomStorage. Please provide the GetIsPreferredValue()
				// method on the domain class.
				return element.GetIsPreferredValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(UniquenessConstraint element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for IsPreferred because its Kind is
					// set to CustomStorage. Please provide the SetIsPreferredValue()
					// method on the domain class.
					element.SetIsPreferredValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsInternal domain property code
		
		/// <summary>
		/// IsInternal domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsInternalDomainPropertyId = new global::System.Guid(0x55b187ed, 0x3869, 0x4f83, 0xb6, 0xa7, 0x86, 0x61, 0xd6, 0x1b, 0x1c, 0x62);
		
		/// <summary>
		/// Storage for IsInternal
		/// </summary>
		private global::System.Boolean isInternalPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsInternal domain property.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraint.IsInternal
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraint/IsInternal.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraint/IsInternal.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("55b187ed-3869-4f83-b6a7-8661d61b1c62")]
		public global::System.Boolean IsInternal
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isInternalPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsInternalPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the UniquenessConstraint.IsInternal domain property.
		/// </summary>
		internal sealed partial class IsInternalPropertyHandler : DslModeling::DomainPropertyValueHandler<UniquenessConstraint, global::System.Boolean>
		{
			private IsInternalPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the UniquenessConstraint.IsInternal domain property value handler.
			/// </summary>
			public static readonly IsInternalPropertyHandler Instance = new IsInternalPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the UniquenessConstraint.IsInternal domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsInternalDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(UniquenessConstraint element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isInternalPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(UniquenessConstraint element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isInternalPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region PreferredIdentifierFor opposite domain role accessor
		/// <summary>
		/// Gets or sets PreferredIdentifierFor.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifier
		/// </summary>
		public virtual ObjectType PreferredIdentifierFor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifierDomainRoleId) as ObjectType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifierForDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifierForDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasPreferredIdentifier.PreferredIdentifierDomainRoleId, value);
				}
			}
		}
		#endregion
		#region NMinusOneError opposite domain role accessor
		/// <summary>
		/// Gets or sets NMinusOneError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraintHasNMinusOneError.Constraint
		/// </summary>
		public virtual NMinusOneError NMinusOneError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraintHasNMinusOneError.ConstraintDomainRoleId) as NMinusOneError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraintHasNMinusOneError.NMinusOneErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraintHasNMinusOneError.NMinusOneErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraintHasNMinusOneError.ConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass MandatoryConstraint
	/// </summary>
	[global::System.ComponentModel.TypeDescriptionProvider(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.ElementTypeDescriptionProvider<MandatoryConstraint, Design.MandatoryConstraintTypeDescriptor<MandatoryConstraint>>))]
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("f054be4d-bfca-4cd3-a0d8-97f61c165753")]
	public partial class MandatoryConstraint : SetConstraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// MandatoryConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf054be4d, 0xbfca, 0x4cd3, 0xa0, 0xd8, 0x97, 0xf6, 0x1c, 0x16, 0x57, 0x53);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MandatoryConstraint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MandatoryConstraint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region IsSimple domain property code
		
		/// <summary>
		/// IsSimple domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsSimpleDomainPropertyId = new global::System.Guid(0xbbda6bd3, 0xb3ac, 0x4e26, 0xab, 0xc3, 0x3f, 0xe1, 0xda, 0xfa, 0x01, 0x65);
		
		/// <summary>
		/// Storage for IsSimple
		/// </summary>
		private global::System.Boolean isSimplePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsSimple domain property.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraint.IsSimple
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraint/IsSimple.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraint/IsSimple.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("bbda6bd3-b3ac-4e26-abc3-3fe1dafa0165")]
		public global::System.Boolean IsSimple
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isSimplePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsSimplePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the MandatoryConstraint.IsSimple domain property.
		/// </summary>
		internal sealed partial class IsSimplePropertyHandler : DslModeling::DomainPropertyValueHandler<MandatoryConstraint, global::System.Boolean>
		{
			private IsSimplePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the MandatoryConstraint.IsSimple domain property value handler.
			/// </summary>
			public static readonly IsSimplePropertyHandler Instance = new IsSimplePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the MandatoryConstraint.IsSimple domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsSimpleDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(MandatoryConstraint element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isSimplePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(MandatoryConstraint element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isSimplePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsImplied domain property code
		
		/// <summary>
		/// IsImplied domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsImpliedDomainPropertyId = new global::System.Guid(0xebf58507, 0x1c28, 0x4c7b, 0x8c, 0x1b, 0xed, 0x4c, 0x31, 0x9c, 0x9c, 0x3c);
		
		/// <summary>
		/// Storage for IsImplied
		/// </summary>
		private global::System.Boolean isImpliedPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsImplied domain property.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraint.IsImplied
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraint/IsImplied.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraint/IsImplied.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("ebf58507-1c28-4c7b-8c1b-ed4c319c9c3c")]
		public global::System.Boolean IsImplied
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isImpliedPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsImpliedPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the MandatoryConstraint.IsImplied domain property.
		/// </summary>
		internal sealed partial class IsImpliedPropertyHandler : DslModeling::DomainPropertyValueHandler<MandatoryConstraint, global::System.Boolean>
		{
			private IsImpliedPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the MandatoryConstraint.IsImplied domain property value handler.
			/// </summary>
			public static readonly IsImpliedPropertyHandler Instance = new IsImpliedPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the MandatoryConstraint.IsImplied domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsImpliedDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(MandatoryConstraint element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isImpliedPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(MandatoryConstraint element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isImpliedPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ImpliedByObjectType opposite domain role accessor
		/// <summary>
		/// Gets or sets ImpliedByObjectType.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeImpliesMandatoryConstraint.MandatoryConstraint
		/// </summary>
		public virtual ObjectType ImpliedByObjectType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeImpliesMandatoryConstraint.MandatoryConstraintDomainRoleId) as ObjectType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeImpliesMandatoryConstraint.ObjectTypeDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeImpliesMandatoryConstraint.ObjectTypeDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeImpliesMandatoryConstraint.MandatoryConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
		#region InherentForObjectType opposite domain role accessor
		/// <summary>
		/// Gets or sets InherentForObjectType.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintIsInherentForObjectType.MandatoryConstraint
		/// </summary>
		public virtual ObjectType InherentForObjectType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintIsInherentForObjectType.MandatoryConstraintDomainRoleId) as ObjectType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintIsInherentForObjectType.ObjectTypeDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintIsInherentForObjectType.ObjectTypeDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintIsInherentForObjectType.MandatoryConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
		#region ExclusiveOrExclusionConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets ExclusiveOrExclusionConstraint.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusiveOrConstraintCoupler.MandatoryConstraint
		/// </summary>
		public virtual ExclusionConstraint ExclusiveOrExclusionConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusiveOrConstraintCoupler.MandatoryConstraintDomainRoleId) as ExclusionConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusiveOrConstraintCoupler.ExclusionConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusiveOrConstraintCoupler.ExclusionConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusiveOrConstraintCoupler.MandatoryConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
		#region ExclusionContradictsMandatoryError opposite domain role accessor
		/// <summary>
		/// Gets or sets ExclusionContradictsMandatoryError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError.MandatoryConstraint
		/// </summary>
		public virtual ExclusionContradictsMandatoryError ExclusionContradictsMandatoryError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError.MandatoryConstraintDomainRoleId) as ExclusionContradictsMandatoryError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError.MandatoryConstraintDomainRoleId, value);
			}
		}
		#endregion
		#region NotWellModeledSubsetAndMandatoryError opposite domain role accessor
		/// <summary>
		/// Gets or sets NotWellModeledSubsetAndMandatoryError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError.MandatoryConstraint
		/// </summary>
		public virtual NotWellModeledSubsetAndMandatoryError NotWellModeledSubsetAndMandatoryError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError.MandatoryConstraintDomainRoleId) as NotWellModeledSubsetAndMandatoryError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError.NotWellModeledSubsetAndMandatoryErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError.NotWellModeledSubsetAndMandatoryErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError.MandatoryConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
		#region PopulationMandatoryErrorCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of PopulationMandatoryErrorCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasPopulationMandatoryError.MandatoryConstraint
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<PopulationMandatoryError> PopulationMandatoryErrorCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<PopulationMandatoryError>, PopulationMandatoryError>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasPopulationMandatoryError.MandatoryConstraintDomainRoleId);
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass ValueComparisonConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("865fece5-1df2-4d6f-a33f-6e4862d10374")]
	public partial class ValueComparisonConstraint : SetConstraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ValueComparisonConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x865fece5, 0x1df2, 0x4d6f, 0xa3, 0x3f, 0x6e, 0x48, 0x62, 0xd1, 0x03, 0x74);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ValueComparisonConstraint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ValueComparisonConstraint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Operator domain property code
		
		/// <summary>
		/// Operator domain property Id.
		/// </summary>
		public static readonly global::System.Guid OperatorDomainPropertyId = new global::System.Guid(0x02bd277d, 0xfa64, 0x4dc5, 0x9e, 0x38, 0x32, 0x7c, 0xeb, 0x0d, 0xea, 0x03);
		
		/// <summary>
		/// Storage for Operator
		/// </summary>
		private ValueComparisonOperator operatorPropertyStorage = ValueComparisonOperator.Undefined;
		
		/// <summary>
		/// Gets or sets the value of Operator domain property.
		/// The operator used for comparing constrained values.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraint/Operator.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraint/Operator.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue(ValueComparisonOperator.Undefined)]
		[DslModeling::DomainObjectId("02bd277d-fa64-4dc5-9e38-327ceb0dea03")]
		public ValueComparisonOperator Operator
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return operatorPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				OperatorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ValueComparisonConstraint.Operator domain property.
		/// </summary>
		internal sealed partial class OperatorPropertyHandler : DslModeling::DomainPropertyValueHandler<ValueComparisonConstraint, ValueComparisonOperator>
		{
			private OperatorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ValueComparisonConstraint.Operator domain property value handler.
			/// </summary>
			public static readonly OperatorPropertyHandler Instance = new OperatorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ValueComparisonConstraint.Operator domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OperatorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed ValueComparisonOperator GetValue(ValueComparisonConstraint element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.operatorPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ValueComparisonConstraint element, ValueComparisonOperator newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				ValueComparisonOperator oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.operatorPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region OperatorNotSpecifiedError opposite domain role accessor
		/// <summary>
		/// Gets or sets OperatorNotSpecifiedError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasOperatorNotSpecifiedError.ValueComparisonConstraint
		/// </summary>
		public virtual ValueComparisonConstraintOperatorNotSpecifiedError OperatorNotSpecifiedError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasOperatorNotSpecifiedError.ValueComparisonConstraintDomainRoleId) as ValueComparisonConstraintOperatorNotSpecifiedError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasOperatorNotSpecifiedError.OperatorNotSpecifiedErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasOperatorNotSpecifiedError.OperatorNotSpecifiedErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasOperatorNotSpecifiedError.ValueComparisonConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
		#region RolesNotComparableError opposite domain role accessor
		/// <summary>
		/// Gets or sets RolesNotComparableError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasRolesNotComparableError.ValueComparisonConstraint
		/// </summary>
		public virtual ValueComparisonRolesNotComparableError RolesNotComparableError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasRolesNotComparableError.ValueComparisonConstraintDomainRoleId) as ValueComparisonRolesNotComparableError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasRolesNotComparableError.RolesNotComparableErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasRolesNotComparableError.RolesNotComparableErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasRolesNotComparableError.ValueComparisonConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass SetConstraint
	/// </summary>
	[global::System.ComponentModel.TypeDescriptionProvider(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.ElementTypeDescriptionProvider<SetConstraint, Design.SetConstraintTypeDescriptor<SetConstraint>>))]
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("1b85e4be-0c95-45bd-a76f-2087456f891b")]
	public abstract partial class SetConstraint : ConstraintRoleSequence
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SetConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1b85e4be, 0x0c95, 0x45bd, 0xa7, 0x6f, 0x20, 0x87, 0x45, 0x6f, 0x89, 0x1b);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected SetConstraint(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Modality domain property code
		
		/// <summary>
		/// Modality domain property Id.
		/// </summary>
		public static readonly global::System.Guid ModalityDomainPropertyId = new global::System.Guid(0xb4f1902a, 0x7eb9, 0x464f, 0xa0, 0xf8, 0xf8, 0x16, 0x65, 0x8c, 0x1b, 0xd8);
		
		/// <summary>
		/// Storage for Modality
		/// </summary>
		private ConstraintModality modalityPropertyStorage = ConstraintModality.Alethic;
		
		/// <summary>
		/// Gets or sets the value of Modality domain property.
		/// The constraint Modality.
		///     Alethic modality means the constraint is structurally enforced and data
		/// violating the constraint cannot be entered in the system;
		///     Deontic modality means that data violating the constraint can be recorded.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint/Modality.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint/Modality.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue(ConstraintModality.Alethic)]
		[DslModeling::DomainObjectId("b4f1902a-7eb9-464f-a0f8-f816658c1bd8")]
		public ConstraintModality Modality
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return modalityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ModalityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SetConstraint.Modality domain property.
		/// </summary>
		internal sealed partial class ModalityPropertyHandler : DslModeling::DomainPropertyValueHandler<SetConstraint, ConstraintModality>
		{
			private ModalityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SetConstraint.Modality domain property value handler.
			/// </summary>
			public static readonly ModalityPropertyHandler Instance = new ModalityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SetConstraint.Modality domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ModalityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed ConstraintModality GetValue(SetConstraint element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.modalityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SetConstraint element, ConstraintModality newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				ConstraintModality oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.modalityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DefinitionText domain property code
		
		/// <summary>
		/// DefinitionText domain property Id.
		/// </summary>
		public static readonly global::System.Guid DefinitionTextDomainPropertyId = new global::System.Guid(0x27353884, 0xff01, 0x4da8, 0x9c, 0x95, 0xa4, 0x18, 0x6e, 0x1b, 0x56, 0x9f);
		
		/// <summary>
		/// Gets or sets the value of DefinitionText domain property.
		/// An informal description of this constraint.
		///     To insert new lines, use Control-Enter in the dropdown editor, or open the
		/// 'ORM Informal Description Editor' tool window.
		/// </summary>
		[global::System.ComponentModel.Editor(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.MultilineTextEditor<global::ORMSolutions.ORMArchitect.Core.ObjectModel.Definition>), typeof(global::System.Drawing.Design.UITypeEditor))]
		[global::System.ComponentModel.MergableProperty(false)]
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint/DefinitionText.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint/DefinitionText.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("27353884-ff01-4da8-9c95-a4186e1b569f")]
		public global::System.String DefinitionText
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DefinitionTextPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DefinitionTextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SetConstraint.DefinitionText domain property.
		/// </summary>
		internal sealed partial class DefinitionTextPropertyHandler : DslModeling::DomainPropertyValueHandler<SetConstraint, global::System.String>
		{
			private DefinitionTextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SetConstraint.DefinitionText domain property value handler.
			/// </summary>
			public static readonly DefinitionTextPropertyHandler Instance = new DefinitionTextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SetConstraint.DefinitionText domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DefinitionTextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(SetConstraint element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for DefinitionText because its Kind is
				// set to CustomStorage. Please provide the GetDefinitionTextValue()
				// method on the domain class.
				return element.GetDefinitionTextValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SetConstraint element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for DefinitionText because its Kind is
					// set to CustomStorage. Please provide the SetDefinitionTextValue()
					// method on the domain class.
					element.SetDefinitionTextValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region NoteText domain property code
		
		/// <summary>
		/// NoteText domain property Id.
		/// </summary>
		public static readonly global::System.Guid NoteTextDomainPropertyId = new global::System.Guid(0x63e2f8fc, 0x6003, 0x47f0, 0xaf, 0x9a, 0xac, 0x53, 0x99, 0x07, 0xcf, 0x11);
		
		/// <summary>
		/// Gets or sets the value of NoteText domain property.
		/// A note to associate with this constraint.
		///     To insert new lines, use Control-Enter in the dropdown editor, or open the
		/// 'ORM Notes Editor' tool window.
		/// </summary>
		[global::System.ComponentModel.Editor(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.MultilineTextEditor<global::ORMSolutions.ORMArchitect.Core.ObjectModel.Note>), typeof(global::System.Drawing.Design.UITypeEditor))]
		[global::System.ComponentModel.MergableProperty(false)]
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint/NoteText.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraint/NoteText.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("63e2f8fc-6003-47f0-af9a-ac539907cf11")]
		public global::System.String NoteText
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return NoteTextPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NoteTextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SetConstraint.NoteText domain property.
		/// </summary>
		internal sealed partial class NoteTextPropertyHandler : DslModeling::DomainPropertyValueHandler<SetConstraint, global::System.String>
		{
			private NoteTextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SetConstraint.NoteText domain property value handler.
			/// </summary>
			public static readonly NoteTextPropertyHandler Instance = new NoteTextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SetConstraint.NoteText domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NoteTextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(SetConstraint element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for NoteText because its Kind is
				// set to CustomStorage. Please provide the GetNoteTextValue()
				// method on the domain class.
				return element.GetNoteTextValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SetConstraint element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for NoteText because its Kind is
					// set to CustomStorage. Please provide the SetNoteTextValue()
					// method on the domain class.
					element.SetNoteTextValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region FactTypeCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of FactTypeCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetConstraint.SetConstraint
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<FactType> FactTypeCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<FactType>, FactType>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactSetConstraint.SetConstraintDomainRoleId);
			}
		}
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetConstraint.SetConstraint
		/// </summary>
		public virtual ORMModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetConstraint.SetConstraintDomainRoleId) as ORMModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetConstraint.SetConstraintDomainRoleId, value);
			}
		}
		#endregion
		#region DuplicateNameError opposite domain role accessor
		/// <summary>
		/// Gets or sets DuplicateNameError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDuplicateNameError.SetConstraint
		/// </summary>
		public virtual ConstraintDuplicateNameError DuplicateNameError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDuplicateNameError.SetConstraintDomainRoleId) as ConstraintDuplicateNameError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDuplicateNameError.SetConstraintDomainRoleId, value);
			}
		}
		#endregion
		#region CompatibleRolePlayerTypeError opposite domain role accessor
		/// <summary>
		/// Gets or sets CompatibleRolePlayerTypeError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.SetConstraint
		/// </summary>
		public virtual CompatibleRolePlayerTypeError CompatibleRolePlayerTypeError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.SetConstraintDomainRoleId) as CompatibleRolePlayerTypeError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.SetConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
		#region TooFewRoleSequencesError opposite domain role accessor
		/// <summary>
		/// Gets or sets TooFewRoleSequencesError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooFewRoleSequencesError.SetConstraint
		/// </summary>
		public virtual TooFewRoleSequencesError TooFewRoleSequencesError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooFewRoleSequencesError.SetConstraintDomainRoleId) as TooFewRoleSequencesError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooFewRoleSequencesError.SetConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
		#region TooManyRoleSequencesError opposite domain role accessor
		/// <summary>
		/// Gets or sets TooManyRoleSequencesError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooManyRoleSequencesError.SetConstraint
		/// </summary>
		public virtual TooManyRoleSequencesError TooManyRoleSequencesError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooManyRoleSequencesError.SetConstraintDomainRoleId) as TooManyRoleSequencesError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooManyRoleSequencesError.SetConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
		#region Definition opposite domain role accessor
		/// <summary>
		/// Gets or sets Definition.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDefinition.SetConstraint
		/// </summary>
		public virtual Definition Definition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDefinition.SetConstraintDomainRoleId) as Definition;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDefinition.DefinitionDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDefinition.DefinitionDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDefinition.SetConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
		#region Note opposite domain role accessor
		/// <summary>
		/// Gets or sets Note.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasNote.SetConstraint
		/// </summary>
		public virtual Note Note
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasNote.SetConstraintDomainRoleId) as Note;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasNote.NoteDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasNote.NoteDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasNote.SetConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
		#region ModelNoteCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ModelNoteCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetConstraint.Element
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelNote> ModelNoteCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ModelNote>, ModelNote>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetConstraint.ElementDomainRoleId);
			}
		}
		#endregion
		#region ImplicationError opposite domain role accessor
		/// <summary>
		/// Gets or sets ImplicationError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasImplicationError.SetConstraint
		/// </summary>
		public virtual ImplicationError ImplicationError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasImplicationError.SetConstraintDomainRoleId) as ImplicationError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasImplicationError.ImplicationErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasImplicationError.ImplicationErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasImplicationError.SetConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass ConstraintRoleSequence
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequence.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequence.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("e279c66b-e89c-4e02-9de2-64791c8a4511")]
	public abstract partial class ConstraintRoleSequence : ORMNamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ConstraintRoleSequence domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe279c66b, 0xe89c, 0x4e02, 0x9d, 0xe2, 0x64, 0x79, 0x1c, 0x8a, 0x45, 0x11);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ConstraintRoleSequence(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region RoleCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of RoleCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasRole.ConstraintRoleSequence
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Role> RoleCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Role>, Role>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasRole.ConstraintRoleSequenceDomainRoleId);
			}
		}
		#endregion
		#region JoinPathRequiredError opposite domain role accessor
		/// <summary>
		/// Gets or sets JoinPathRequiredError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPathRequiredError.RoleSequence
		/// </summary>
		public virtual JoinPathRequiredError JoinPathRequiredError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPathRequiredError.RoleSequenceDomainRoleId) as JoinPathRequiredError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPathRequiredError.JoinPathRequiredErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPathRequiredError.JoinPathRequiredErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPathRequiredError.RoleSequenceDomainRoleId, value);
				}
			}
		}
		#endregion
		#region JoinPath opposite domain role accessor
		/// <summary>
		/// Gets or sets JoinPath.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPath.RoleSequence
		/// </summary>
		public virtual ConstraintRoleSequenceJoinPath JoinPath
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPath.RoleSequenceDomainRoleId) as ConstraintRoleSequenceJoinPath;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPath.JoinPathDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPath.JoinPathDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPath.RoleSequenceDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass RolePathOwner
	/// An abstract owner for one or more path objects.
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwner.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwner.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("444d962d-bae2-4278-a8a2-40a4605cf5ab")]
	public abstract partial class RolePathOwner : ORMModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// RolePathOwner domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x444d962d, 0xbae2, 0x4278, 0xa8, 0xa2, 0x40, 0xa4, 0x60, 0x5c, 0xf5, 0xab);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected RolePathOwner(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region LeadRolePathCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of LeadRolePathCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasLeadRolePath.PathOwner
		/// </summary>
		public virtual DslModeling::ReadOnlyLinkedElementCollection<LeadRolePath> LeadRolePathCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::ReadOnlyLinkedElementCollection<LeadRolePath>, LeadRolePath>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasLeadRolePath.PathOwnerDomainRoleId);
			}
		}
		#endregion
		#region OwnedLeadRolePathCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of OwnedLeadRolePathCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsLeadRolePath.PathOwner
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<LeadRolePath> OwnedLeadRolePathCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<LeadRolePath>, LeadRolePath>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsLeadRolePath.PathOwnerDomainRoleId);
			}
		}
		#endregion
		#region SharedLeadRolePathCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SharedLeadRolePathCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedLeadRolePath.PathOwner
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<LeadRolePath> SharedLeadRolePathCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<LeadRolePath>, LeadRolePath>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedLeadRolePath.PathOwnerDomainRoleId);
			}
		}
		#endregion
		#region SingleLeadRolePath opposite domain role accessor
		/// <summary>
		/// Gets or sets SingleLeadRolePath.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleLeadRolePath.PathOwner
		/// </summary>
		public virtual LeadRolePath SingleLeadRolePath
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleLeadRolePath.PathOwnerDomainRoleId) as LeadRolePath;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleLeadRolePath.PathOwnerDomainRoleId, value);
			}
		}
		#endregion
		#region SingleOwnedLeadRolePath opposite domain role accessor
		/// <summary>
		/// Gets or sets SingleOwnedLeadRolePath.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleOwnedLeadRolePath.PathOwner
		/// </summary>
		public virtual LeadRolePath SingleOwnedLeadRolePath
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleOwnedLeadRolePath.PathOwnerDomainRoleId) as LeadRolePath;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleOwnedLeadRolePath.RolePathDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleOwnedLeadRolePath.RolePathDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSingleOwnedLeadRolePath.PathOwnerDomainRoleId, value);
				}
			}
		}
		#endregion
		#region SubqueryCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SubqueryCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSubquery.PathOwner
		/// </summary>
		public virtual DslModeling::ReadOnlyLinkedElementCollection<Subquery> SubqueryCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::ReadOnlyLinkedElementCollection<Subquery>, Subquery>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSubquery.PathOwnerDomainRoleId);
			}
		}
		#endregion
		#region OwnedSubqueryCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of OwnedSubqueryCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsSubquery.PathOwner
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Subquery> OwnedSubqueryCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Subquery>, Subquery>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsSubquery.PathOwnerDomainRoleId);
			}
		}
		#endregion
		#region SharedSubqueryCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SharedSubqueryCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedSubquery.PathOwner
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Subquery> SharedSubqueryCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Subquery>, Subquery>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedSubquery.PathOwnerDomainRoleId);
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass RolePath
	/// An ordered sequence of roles through ORM space with a tail split branching into
	/// other subpaths
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePath.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePath.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("37599e0f-212c-4290-88a6-7406b8ef7e57")]
	public abstract partial class RolePath : ORMModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// RolePath domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x37599e0f, 0x212c, 0x4290, 0x88, 0xa6, 0x74, 0x06, 0xb8, 0xef, 0x7e, 0x57);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected RolePath(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region SplitIsNegated domain property code
		
		/// <summary>
		/// SplitIsNegated domain property Id.
		/// </summary>
		public static readonly global::System.Guid SplitIsNegatedDomainPropertyId = new global::System.Guid(0x2670bb76, 0x4732, 0x4c0d, 0x91, 0x6b, 0x3f, 0x07, 0xf5, 0x4f, 0x71, 0xc7);
		
		/// <summary>
		/// Storage for SplitIsNegated
		/// </summary>
		private global::System.Boolean splitIsNegatedPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of SplitIsNegated domain property.
		/// Indicates if the tail split in its entirety should be treated as a negation.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePath/SplitIsNegated.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePath/SplitIsNegated.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainObjectId("2670bb76-4732-4c0d-916b-3f07f54f71c7")]
		public global::System.Boolean SplitIsNegated
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return splitIsNegatedPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SplitIsNegatedPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the RolePath.SplitIsNegated domain property.
		/// </summary>
		internal sealed partial class SplitIsNegatedPropertyHandler : DslModeling::DomainPropertyValueHandler<RolePath, global::System.Boolean>
		{
			private SplitIsNegatedPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the RolePath.SplitIsNegated domain property value handler.
			/// </summary>
			public static readonly SplitIsNegatedPropertyHandler Instance = new SplitIsNegatedPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the RolePath.SplitIsNegated domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SplitIsNegatedDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(RolePath element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.splitIsNegatedPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(RolePath element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.splitIsNegatedPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SplitCombinationOperator domain property code
		
		/// <summary>
		/// SplitCombinationOperator domain property Id.
		/// </summary>
		public static readonly global::System.Guid SplitCombinationOperatorDomainPropertyId = new global::System.Guid(0x2e4570b4, 0x163c, 0x4add, 0x95, 0x9d, 0x24, 0x6c, 0xc4, 0x54, 0x40, 0x9d);
		
		/// <summary>
		/// Storage for SplitCombinationOperator
		/// </summary>
		private LogicalCombinationOperator splitCombinationOperatorPropertyStorage = LogicalCombinationOperator.And;
		
		/// <summary>
		/// Gets or sets the value of SplitCombinationOperator domain property.
		/// Determines the logical operator used to combine split paths.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePath/SplitCombinationOperator.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePath/SplitCombinationOperator.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue(LogicalCombinationOperator.And)]
		[DslModeling::DomainObjectId("2e4570b4-163c-4add-959d-246cc454409d")]
		public LogicalCombinationOperator SplitCombinationOperator
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return splitCombinationOperatorPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SplitCombinationOperatorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the RolePath.SplitCombinationOperator domain property.
		/// </summary>
		internal sealed partial class SplitCombinationOperatorPropertyHandler : DslModeling::DomainPropertyValueHandler<RolePath, LogicalCombinationOperator>
		{
			private SplitCombinationOperatorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the RolePath.SplitCombinationOperator domain property value handler.
			/// </summary>
			public static readonly SplitCombinationOperatorPropertyHandler Instance = new SplitCombinationOperatorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the RolePath.SplitCombinationOperator domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SplitCombinationOperatorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed LogicalCombinationOperator GetValue(RolePath element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.splitCombinationOperatorPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(RolePath element, LogicalCombinationOperator newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				LogicalCombinationOperator oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.splitCombinationOperatorPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region RootObjectType opposite domain role accessor
		/// <summary>
		/// Gets or sets RootObjectType.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot.RolePath
		/// </summary>
		public virtual ObjectType RootObjectType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot.RolePathDomainRoleId) as ObjectType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathObjectTypeRoot.RolePathDomainRoleId, value);
			}
		}
		#endregion
		#region RoleCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of RoleCollection.
		/// The roles included in this path.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Role> RoleCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Role>, Role>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRole.RolePathDomainRoleId);
			}
		}
		#endregion
		#region SubPathCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SubPathCollection.
		/// Sub paths branched from the end of the current path.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<RoleSubPath> SubPathCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<RoleSubPath>, RoleSubPath>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSubPathIsContinuationOfRolePath.ParentRolePathDomainRoleId);
			}
		}
		#endregion
		#region RootObjectTypeRequiredError opposite domain role accessor
		/// <summary>
		/// Gets or sets RootObjectTypeRequiredError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathHasRootObjectTypeError.RolePath
		/// </summary>
		public virtual PathRequiresRootObjectTypeError RootObjectTypeRequiredError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathHasRootObjectTypeError.RolePathDomainRoleId) as PathRequiresRootObjectTypeError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathHasRootObjectTypeError.RootObjectTypeRequiredErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathHasRootObjectTypeError.RootObjectTypeRequiredErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathHasRootObjectTypeError.RolePathDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass LeadRolePath
	/// A top level role path starting at a root object type. Provides a context for
	/// subpaths, functions, and constraints specific to this path.
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePath.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePath.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("404b14cd-3f82-44f3-8ddd-e1e729ebb9fb")]
	public partial class LeadRolePath : RolePath
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// LeadRolePath domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x404b14cd, 0x3f82, 0x44f3, 0x8d, 0xdd, 0xe1, 0xe7, 0x29, 0xeb, 0xb9, 0xfb);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public LeadRolePath(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public LeadRolePath(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region NoteText domain property code
		
		/// <summary>
		/// NoteText domain property Id.
		/// </summary>
		public static readonly global::System.Guid NoteTextDomainPropertyId = new global::System.Guid(0xd6949829, 0xf14b, 0x467f, 0xab, 0x02, 0x04, 0x76, 0x19, 0x57, 0x81, 0x1c);
		
		/// <summary>
		/// Gets or sets the value of NoteText domain property.
		/// A note to associate with this path.
		///     To insert new lines, use Control-Enter in the dropdown editor, or open the
		/// 'ORM Notes Editor' tool window.
		/// </summary>
		[global::System.ComponentModel.Editor(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.MultilineTextEditor<global::ORMSolutions.ORMArchitect.Core.ObjectModel.Note>), typeof(global::System.Drawing.Design.UITypeEditor))]
		[global::System.ComponentModel.MergableProperty(false)]
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePath/NoteText.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePath/NoteText.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("d6949829-f14b-467f-ab02-04761957811c")]
		public global::System.String NoteText
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return NoteTextPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NoteTextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the LeadRolePath.NoteText domain property.
		/// </summary>
		internal sealed partial class NoteTextPropertyHandler : DslModeling::DomainPropertyValueHandler<LeadRolePath, global::System.String>
		{
			private NoteTextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the LeadRolePath.NoteText domain property value handler.
			/// </summary>
			public static readonly NoteTextPropertyHandler Instance = new NoteTextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the LeadRolePath.NoteText domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NoteTextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(LeadRolePath element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for NoteText because its Kind is
				// set to CustomStorage. Please provide the GetNoteTextValue()
				// method on the domain class.
				return element.GetNoteTextValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(LeadRolePath element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for NoteText because its Kind is
					// set to CustomStorage. Please provide the SetNoteTextValue()
					// method on the domain class.
					element.SetNoteTextValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Note opposite domain role accessor
		/// <summary>
		/// Gets or sets Note.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasNote.LeadRolePath
		/// </summary>
		public virtual Note Note
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasNote.LeadRolePathDomainRoleId) as Note;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasNote.NoteDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasNote.NoteDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasNote.LeadRolePathDomainRoleId, value);
				}
			}
		}
		#endregion
		#region PathOwner opposite domain role accessor
		/// <summary>
		/// Gets or sets PathOwner.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsLeadRolePath.RolePath
		/// </summary>
		public virtual RolePathOwner PathOwner
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsLeadRolePath.RolePathDomainRoleId) as RolePathOwner;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsLeadRolePath.RolePathDomainRoleId, value);
			}
		}
		#endregion
		#region SharedWithPathOwnerCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SharedWithPathOwnerCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedLeadRolePath.RolePath
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<RolePathOwner> SharedWithPathOwnerCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<RolePathOwner>, RolePathOwner>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedLeadRolePath.RolePathDomainRoleId);
			}
		}
		#endregion
		#region ObjectUnifierCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ObjectUnifierCollection.
		/// The object unifier that uses pathed roles and path roots in this role path.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<PathObjectUnifier> ObjectUnifierCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<PathObjectUnifier>, PathObjectUnifier>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasObjectUnifier.LeadRolePathDomainRoleId);
			}
		}
		#endregion
		#region CalculatedValueCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of CalculatedValueCollection.
		/// The values calculated using roles in this component.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<CalculatedPathValue> CalculatedValueCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<CalculatedPathValue>, CalculatedPathValue>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathCalculatesCalculatedPathValue.LeadRolePathDomainRoleId);
			}
		}
		#endregion
		#region CalculatedConditionCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of CalculatedConditionCollection.
		/// The calculated values that must be satisfied by the path.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<CalculatedPathValue> CalculatedConditionCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<CalculatedPathValue>, CalculatedPathValue>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathSatisfiesCalculatedCondition.LeadRolePathDomainRoleId);
			}
		}
		#endregion
		#region SubqueryParameterInputsCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SubqueryParameterInputsCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputs.RolePath
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<PathedRole> SubqueryParameterInputsCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<PathedRole>, PathedRole>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputs.RolePathDomainRoleId);
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass RoleSubPath
	/// A branched path split from the end of another path.
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSubPath.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSubPath.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("aa7b4894-c286-45c3-a95f-09d04e286038")]
	public partial class RoleSubPath : RolePath
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// RoleSubPath domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xaa7b4894, 0xc286, 0x45c3, 0xa9, 0x5f, 0x09, 0xd0, 0x4e, 0x28, 0x60, 0x38);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RoleSubPath(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RoleSubPath(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ParentRolePath opposite domain role accessor
		/// <summary>
		/// Gets or sets ParentRolePath.
		/// The containing path this sub path branches off of.
		/// </summary>
		public virtual RolePath ParentRolePath
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSubPathIsContinuationOfRolePath.SubPathDomainRoleId) as RolePath;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSubPathIsContinuationOfRolePath.SubPathDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass PathObjectUnifier
	/// A unification indicating that pathed roles and path roots that are not naturally
	/// connected refer to the same object type.
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifier.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifier.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("adfd5537-b91b-456e-b837-bcb84e85215a")]
	public partial class PathObjectUnifier : ORMModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// PathObjectUnifier domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xadfd5537, 0xb91b, 0x456e, 0xb8, 0x37, 0xbc, 0xb8, 0x4e, 0x85, 0x21, 0x5a);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PathObjectUnifier(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PathObjectUnifier(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region LeadRolePath opposite domain role accessor
		/// <summary>
		/// Gets or sets LeadRolePath.
		/// The lead role path for this object unifier.
		/// </summary>
		public virtual LeadRolePath LeadRolePath
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasObjectUnifier.ObjectUnifierDomainRoleId) as LeadRolePath;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasObjectUnifier.ObjectUnifierDomainRoleId, value);
			}
		}
		#endregion
		#region PathedRoleCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of PathedRoleCollection.
		/// The unified pathed roles.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<PathedRole> PathedRoleCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<PathedRole>, PathedRole>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesPathedRole.ObjectUnifierDomainRoleId);
			}
		}
		#endregion
		#region PathRootCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of PathRootCollection.
		/// The unified path roots.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<RolePathObjectTypeRoot> PathRootCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<RolePathObjectTypeRoot>, RolePathObjectTypeRoot>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierUnifiesRolePathRoot.ObjectUnifierDomainRoleId);
			}
		}
		#endregion
		#region CompatibilityError opposite domain role accessor
		/// <summary>
		/// Gets or sets CompatibilityError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierHasCompatibleObjectTypesError.ObjectUnifier
		/// </summary>
		public virtual PathObjectUnifierRequiresCompatibleObjectTypesError CompatibilityError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierHasCompatibleObjectTypesError.ObjectUnifierDomainRoleId) as PathObjectUnifierRequiresCompatibleObjectTypesError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierHasCompatibleObjectTypesError.CompatibilityErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierHasCompatibleObjectTypesError.CompatibilityErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierHasCompatibleObjectTypesError.ObjectUnifierDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass CalculatedPathValue
	/// A calculated value used in a role path.
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("c4c327b6-f1de-4f02-af04-3ea358ed0684")]
	public partial class CalculatedPathValue : ORMModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// CalculatedPathValue domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc4c327b6, 0xf1de, 0x4f02, 0xaf, 0x04, 0x3e, 0xa3, 0x58, 0xed, 0x06, 0x84);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CalculatedPathValue(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CalculatedPathValue(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region UniversalAggregationContext domain property code
		
		/// <summary>
		/// UniversalAggregationContext domain property Id.
		/// </summary>
		public static readonly global::System.Guid UniversalAggregationContextDomainPropertyId = new global::System.Guid(0x17cb3fcb, 0x1b9c, 0x4c2d, 0xa6, 0x89, 0xf0, 0x92, 0x78, 0x93, 0xd8, 0x8d);
		
		/// <summary>
		/// Storage for UniversalAggregationContext
		/// </summary>
		private global::System.Boolean universalAggregationContextPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of UniversalAggregationContext domain property.
		/// Set for a calculation with an aggregate function to use universal context
		/// (meaning all elements of the given type in the universal of discourse) instead
		/// of a context at one or more specific path nodes.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue/UniversalAggregationContext.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValue/UniversalAggregationContext.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("17cb3fcb-1b9c-4c2d-a689-f0927893d88d")]
		public global::System.Boolean UniversalAggregationContext
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return universalAggregationContextPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				UniversalAggregationContextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CalculatedPathValue.UniversalAggregationContext domain property.
		/// </summary>
		internal sealed partial class UniversalAggregationContextPropertyHandler : DslModeling::DomainPropertyValueHandler<CalculatedPathValue, global::System.Boolean>
		{
			private UniversalAggregationContextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CalculatedPathValue.UniversalAggregationContext domain property value handler.
			/// </summary>
			public static readonly UniversalAggregationContextPropertyHandler Instance = new UniversalAggregationContextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CalculatedPathValue.UniversalAggregationContext domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return UniversalAggregationContextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(CalculatedPathValue element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.universalAggregationContextPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CalculatedPathValue element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.universalAggregationContextPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region LeadRolePath opposite domain role accessor
		/// <summary>
		/// Gets or sets LeadRolePath.
		/// The path component this value is calculated for.
		/// </summary>
		public virtual LeadRolePath LeadRolePath
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathCalculatesCalculatedPathValue.CalculatedValueDomainRoleId) as LeadRolePath;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathCalculatesCalculatedPathValue.CalculatedValueDomainRoleId, value);
			}
		}
		#endregion
		#region RequiredForLeadRolePath opposite domain role accessor
		/// <summary>
		/// Gets or sets RequiredForLeadRolePath.
		/// The lead role path that requires this condition to be true.
		/// </summary>
		public virtual LeadRolePath RequiredForLeadRolePath
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathSatisfiesCalculatedCondition.CalculatedConditionDomainRoleId) as LeadRolePath;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathSatisfiesCalculatedCondition.CalculatedConditionDomainRoleId, value);
			}
		}
		#endregion
		#region InputCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of InputCollection.
		/// Inputs used to calculate this value.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<CalculatedPathValueInput> InputCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<CalculatedPathValueInput>, CalculatedPathValueInput>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasInput.CalculatedValueDomainRoleId);
			}
		}
		#endregion
		#region AggregationContextPathedRoleCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of AggregationContextPathedRoleCollection.
		/// A PathedRole that is part of the aggregation context for this function.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<PathedRole> AggregationContextPathedRoleCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<PathedRole>, PathedRole>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesPathedRole.CalculatedValueDomainRoleId);
			}
		}
		#endregion
		#region AggregationContextPathRootCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of AggregationContextPathRootCollection.
		/// A role path root that is part of the aggregation context for this function.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<RolePathObjectTypeRoot> AggregationContextPathRootCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<RolePathObjectTypeRoot>, RolePathObjectTypeRoot>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueAggregationContextIncludesRolePathRoot.CalculatedValueDomainRoleId);
			}
		}
		#endregion
		#region Function opposite domain role accessor
		/// <summary>
		/// Gets or sets Function.
		/// The function used to calculate this value.
		/// </summary>
		public virtual Function Function
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueIsCalculatedWithFunction.CalculatedValueDomainRoleId) as Function;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueIsCalculatedWithFunction.CalculatedValueDomainRoleId, value);
			}
		}
		#endregion
		#region BoundInputCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of BoundInputCollection.
		/// The calculated value inputs bound to this path node.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<CalculatedPathValueInput> BoundInputCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<CalculatedPathValueInput>, CalculatedPathValueInput>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToCalculatedPathValue.SourceDomainRoleId);
			}
		}
		#endregion
		#region FunctionRequiredError opposite domain role accessor
		/// <summary>
		/// Gets or sets FunctionRequiredError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasFunctionRequiredError.CalculatedPathValue
		/// </summary>
		public virtual CalculatedPathValueRequiresFunctionError FunctionRequiredError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasFunctionRequiredError.CalculatedPathValueDomainRoleId) as CalculatedPathValueRequiresFunctionError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasFunctionRequiredError.FunctionRequiredErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasFunctionRequiredError.FunctionRequiredErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasFunctionRequiredError.CalculatedPathValueDomainRoleId, value);
				}
			}
		}
		#endregion
		#region ParameterBindingErrorCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ParameterBindingErrorCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasUnboundParameterError.CalculatedPathValue
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<CalculatedPathValueParameterBindingError> ParameterBindingErrorCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<CalculatedPathValueParameterBindingError>, CalculatedPathValueParameterBindingError>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasUnboundParameterError.CalculatedPathValueDomainRoleId);
			}
		}
		#endregion
		#region ConsumptionRequiredError opposite domain role accessor
		/// <summary>
		/// Gets or sets ConsumptionRequiredError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasConsumptionRequiredError.CalculatedPathValue
		/// </summary>
		public virtual CalculatedPathValueMustBeConsumedError ConsumptionRequiredError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasConsumptionRequiredError.CalculatedPathValueDomainRoleId) as CalculatedPathValueMustBeConsumedError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasConsumptionRequiredError.ConsumptionRequiredErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasConsumptionRequiredError.ConsumptionRequiredErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasConsumptionRequiredError.CalculatedPathValueDomainRoleId, value);
				}
			}
		}
		#endregion
		#region AggregationContextRequiredError opposite domain role accessor
		/// <summary>
		/// Gets or sets AggregationContextRequiredError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasAggregationContextRequiredError.CalculatedPathValue
		/// </summary>
		public virtual CalculatedPathValueRequiresAggregationContextError AggregationContextRequiredError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasAggregationContextRequiredError.CalculatedPathValueDomainRoleId) as CalculatedPathValueRequiresAggregationContextError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasAggregationContextRequiredError.AggregationContextRequiredErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasAggregationContextRequiredError.AggregationContextRequiredErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasAggregationContextRequiredError.CalculatedPathValueDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass PathConstant
	/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.PathConstant
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathConstant.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathConstant.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("b8f65cc9-2bde-4688-9671-9f4789a3828a")]
	public partial class PathConstant : ORMModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// PathConstant domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb8f65cc9, 0x2bde, 0x4688, 0x96, 0x71, 0x9f, 0x47, 0x89, 0xa3, 0x82, 0x8a);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PathConstant(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PathConstant(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region LexicalValue domain property code
		
		/// <summary>
		/// LexicalValue domain property Id.
		/// </summary>
		public static readonly global::System.Guid LexicalValueDomainPropertyId = new global::System.Guid(0x4e5c5b55, 0xb001, 0x44c6, 0xb0, 0x57, 0xd5, 0xda, 0x26, 0xb6, 0x32, 0x46);
		
		/// <summary>
		/// Storage for LexicalValue
		/// </summary>
		private global::System.String lexicalValuePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of LexicalValue domain property.
		/// A lexical constant value interpreted based on context.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathConstant/LexicalValue.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathConstant/LexicalValue.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainObjectId("4e5c5b55-b001-44c6-b057-d5da26b63246")]
		public global::System.String LexicalValue
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return lexicalValuePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				LexicalValuePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PathConstant.LexicalValue domain property.
		/// </summary>
		internal sealed partial class LexicalValuePropertyHandler : DslModeling::DomainPropertyValueHandler<PathConstant, global::System.String>
		{
			private LexicalValuePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PathConstant.LexicalValue domain property value handler.
			/// </summary>
			public static readonly LexicalValuePropertyHandler Instance = new LexicalValuePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PathConstant.LexicalValue domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return LexicalValueDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(PathConstant element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.lexicalValuePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PathConstant element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.lexicalValuePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ConstraintRoleProjection opposite domain role accessor
		/// <summary>
		/// Gets or sets ConstraintRoleProjection.
		/// The constraint role that uses this path constant.
		/// </summary>
		public virtual ConstraintRoleProjection ConstraintRoleProjection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant.SourceDomainRoleId) as ConstraintRoleProjection;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant.ConstraintRoleProjectionDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant.ConstraintRoleProjectionDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant.SourceDomainRoleId, value);
				}
			}
		}
		#endregion
		#region BoundInput opposite domain role accessor
		/// <summary>
		/// Gets or sets BoundInput.
		/// The calculated value input that uses this path constant.
		/// </summary>
		public virtual CalculatedPathValueInput BoundInput
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathConstant.SourceDomainRoleId) as CalculatedPathValueInput;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathConstant.InputDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathConstant.InputDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathConstant.SourceDomainRoleId, value);
				}
			}
		}
		#endregion
		#region SubqueryParameterInput opposite domain role accessor
		/// <summary>
		/// Gets or sets SubqueryParameterInput.
		/// The parameter binding that uses this path constant.
		/// </summary>
		public virtual SubqueryParameterInput SubqueryParameterInput
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathConstant.SourceDomainRoleId) as SubqueryParameterInput;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathConstant.ParameterInputDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathConstant.ParameterInputDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathConstant.SourceDomainRoleId, value);
				}
			}
		}
		#endregion
		#region DerivedRoleProjection opposite domain role accessor
		/// <summary>
		/// Gets or sets DerivedRoleProjection.
		/// The derived role that uses this path constant.
		/// </summary>
		public virtual DerivedRoleProjection DerivedRoleProjection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathConstant.SourceDomainRoleId) as DerivedRoleProjection;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathConstant.RoleProjectionDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathConstant.RoleProjectionDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathConstant.SourceDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass Function
	/// A function or operator used to represented a calculation algorithm.
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Function.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Function.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("921037ff-d266-4f31-9256-9a6d4f410109")]
	public partial class Function : ORMNamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Function domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x921037ff, 0xd266, 0x4f31, 0x92, 0x56, 0x9a, 0x6d, 0x4f, 0x41, 0x01, 0x09);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Function(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Function(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region IsBoolean domain property code
		
		/// <summary>
		/// IsBoolean domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsBooleanDomainPropertyId = new global::System.Guid(0x363be96e, 0x1bd8, 0x46b1, 0xb5, 0x4b, 0x41, 0xdf, 0xe6, 0xb9, 0xd4, 0xcf);
		
		/// <summary>
		/// Storage for IsBoolean
		/// </summary>
		private global::System.Boolean isBooleanPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsBoolean domain property.
		/// Set if this function returns a boolean value that can be evaluated directly as a
		/// condition.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Function/IsBoolean.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Function/IsBoolean.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainObjectId("363be96e-1bd8-46b1-b54b-41dfe6b9d4cf")]
		public global::System.Boolean IsBoolean
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isBooleanPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsBooleanPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Function.IsBoolean domain property.
		/// </summary>
		internal sealed partial class IsBooleanPropertyHandler : DslModeling::DomainPropertyValueHandler<Function, global::System.Boolean>
		{
			private IsBooleanPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Function.IsBoolean domain property value handler.
			/// </summary>
			public static readonly IsBooleanPropertyHandler Instance = new IsBooleanPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Function.IsBoolean domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsBooleanDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(Function element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isBooleanPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Function element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isBooleanPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsAggregate domain property code
		
		/// <summary>
		/// IsAggregate domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsAggregateDomainPropertyId = new global::System.Guid(0xc09ed9b0, 0xa977, 0x4980, 0x84, 0x8a, 0xc5, 0x76, 0x98, 0x2c, 0x86, 0xcb);
		
		/// <summary>
		/// Storage for IsAggregate
		/// </summary>
		private global::System.Boolean isAggregatePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsAggregate domain property.
		/// Set if this function defines a bag input parameter.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Function/IsAggregate.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Function/IsAggregate.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("c09ed9b0-a977-4980-848a-c576982c86cb")]
		public global::System.Boolean IsAggregate
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isAggregatePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsAggregatePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Function.IsAggregate domain property.
		/// </summary>
		internal sealed partial class IsAggregatePropertyHandler : DslModeling::DomainPropertyValueHandler<Function, global::System.Boolean>
		{
			private IsAggregatePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Function.IsAggregate domain property value handler.
			/// </summary>
			public static readonly IsAggregatePropertyHandler Instance = new IsAggregatePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Function.IsAggregate domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsAggregateDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(Function element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isAggregatePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Function element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isAggregatePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region OperatorSymbol domain property code
		
		/// <summary>
		/// OperatorSymbol domain property Id.
		/// </summary>
		public static readonly global::System.Guid OperatorSymbolDomainPropertyId = new global::System.Guid(0xece5ddec, 0x7ab3, 0x4b65, 0xbd, 0xe9, 0xdd, 0xd8, 0x36, 0xe9, 0x22, 0x88);
		
		/// <summary>
		/// Storage for OperatorSymbol
		/// </summary>
		private global::System.String operatorSymbolPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of OperatorSymbol domain property.
		/// A string indicating this function should be displayed as an operator instead of
		/// using functional notation. Represents infix notation for a binary operator and
		/// prefix notation for a unary.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Function/OperatorSymbol.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Function/OperatorSymbol.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("ece5ddec-7ab3-4b65-bde9-ddd836e92288")]
		public global::System.String OperatorSymbol
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return operatorSymbolPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				OperatorSymbolPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Function.OperatorSymbol domain property.
		/// </summary>
		internal sealed partial class OperatorSymbolPropertyHandler : DslModeling::DomainPropertyValueHandler<Function, global::System.String>
		{
			private OperatorSymbolPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Function.OperatorSymbol domain property value handler.
			/// </summary>
			public static readonly OperatorSymbolPropertyHandler Instance = new OperatorSymbolPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Function.OperatorSymbol domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OperatorSymbolDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Function element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.operatorSymbolPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Function element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.operatorSymbolPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DuplicateNameError opposite domain role accessor
		/// <summary>
		/// Gets or sets DuplicateNameError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionHasDuplicateNameError.Function
		/// </summary>
		public virtual FunctionDuplicateNameError DuplicateNameError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionHasDuplicateNameError.FunctionDomainRoleId) as FunctionDuplicateNameError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionHasDuplicateNameError.FunctionDomainRoleId, value);
			}
		}
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// The model defining this function.
		/// </summary>
		public virtual ORMModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelDefinesFunction.FunctionDomainRoleId) as ORMModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelDefinesFunction.FunctionDomainRoleId, value);
			}
		}
		#endregion
		#region ParameterCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ParameterCollection.
		/// Parameters defined by this function.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<FunctionParameter> ParameterCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<FunctionParameter>, FunctionParameter>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionOperatesOnParameter.FunctionDomainRoleId);
			}
		}
		#endregion
		#region CalculatedValueCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of CalculatedValueCollection.
		/// The calculated values based on this function.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<CalculatedPathValue> CalculatedValueCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<CalculatedPathValue>, CalculatedPathValue>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueIsCalculatedWithFunction.FunctionDomainRoleId);
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass FunctionParameter
	/// A formal function parameter describing expected input to a function.
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionParameter.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionParameter.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("1c650e60-597e-4b84-a007-acd640654354")]
	public partial class FunctionParameter : ORMNamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// FunctionParameter domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1c650e60, 0x597e, 0x4b84, 0xa0, 0x07, 0xac, 0xd6, 0x40, 0x65, 0x43, 0x54);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FunctionParameter(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FunctionParameter(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region BagInput domain property code
		
		/// <summary>
		/// BagInput domain property Id.
		/// </summary>
		public static readonly global::System.Guid BagInputDomainPropertyId = new global::System.Guid(0x42acd532, 0x5e46, 0x4200, 0xac, 0x29, 0xc2, 0x0e, 0x92, 0x6d, 0xc7, 0x3f);
		
		/// <summary>
		/// Storage for BagInput
		/// </summary>
		private global::System.Boolean bagInputPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of BagInput domain property.
		/// Set if a bag input is expected for this parameter, such as with an aggregation
		/// function.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionParameter/BagInput.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionParameter/BagInput.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainObjectId("42acd532-5e46-4200-ac29-c20e926dc73f")]
		public global::System.Boolean BagInput
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return bagInputPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				BagInputPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FunctionParameter.BagInput domain property.
		/// </summary>
		internal sealed partial class BagInputPropertyHandler : DslModeling::DomainPropertyValueHandler<FunctionParameter, global::System.Boolean>
		{
			private BagInputPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FunctionParameter.BagInput domain property value handler.
			/// </summary>
			public static readonly BagInputPropertyHandler Instance = new BagInputPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FunctionParameter.BagInput domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return BagInputDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(FunctionParameter element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.bagInputPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FunctionParameter element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.bagInputPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Function opposite domain role accessor
		/// <summary>
		/// Gets or sets Function.
		/// The function this parameter is defined for.
		/// </summary>
		public virtual Function Function
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionOperatesOnParameter.ParameterDomainRoleId) as Function;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionOperatesOnParameter.ParameterDomainRoleId, value);
			}
		}
		#endregion
		#region CalculatedInputCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of CalculatedInputCollection.
		/// The calculated value inputs that use this parameter.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<CalculatedPathValueInput> CalculatedInputCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<CalculatedPathValueInput>, CalculatedPathValueInput>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputCorrespondsToFunctionParameter.ParameterDomainRoleId);
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass CalculatedPathValueInput
	/// An input value or bag passed to a function parameter calculate a value.
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInput.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInput.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("79e5ebef-2ffa-49e6-8a22-cc90b68a6941")]
	public partial class CalculatedPathValueInput : ORMModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// CalculatedPathValueInput domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x79e5ebef, 0x2ffa, 0x49e6, 0x8a, 0x22, 0xcc, 0x90, 0xb6, 0x8a, 0x69, 0x41);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CalculatedPathValueInput(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CalculatedPathValueInput(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region DistinctValues domain property code
		
		/// <summary>
		/// DistinctValues domain property Id.
		/// </summary>
		public static readonly global::System.Guid DistinctValuesDomainPropertyId = new global::System.Guid(0x8f1b2264, 0xb859, 0x48c2, 0xbc, 0xdc, 0x3e, 0xe9, 0x64, 0x72, 0x9c, 0x77);
		
		/// <summary>
		/// Storage for DistinctValues
		/// </summary>
		private global::System.Boolean distinctValuesPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of DistinctValues domain property.
		/// Should the bag be limited to distinct values, resulting in a set of values
		/// instead of a bag of values?
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInput/DistinctValues.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInput/DistinctValues.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainObjectId("8f1b2264-b859-48c2-bcdc-3ee964729c77")]
		public global::System.Boolean DistinctValues
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return distinctValuesPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DistinctValuesPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CalculatedPathValueInput.DistinctValues domain property.
		/// </summary>
		internal sealed partial class DistinctValuesPropertyHandler : DslModeling::DomainPropertyValueHandler<CalculatedPathValueInput, global::System.Boolean>
		{
			private DistinctValuesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CalculatedPathValueInput.DistinctValues domain property value handler.
			/// </summary>
			public static readonly DistinctValuesPropertyHandler Instance = new DistinctValuesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CalculatedPathValueInput.DistinctValues domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DistinctValuesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(CalculatedPathValueInput element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.distinctValuesPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CalculatedPathValueInput element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.distinctValuesPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region CalculatedValue opposite domain role accessor
		/// <summary>
		/// Gets or sets CalculatedValue.
		/// The calculated value that owns this input for.
		/// </summary>
		public virtual CalculatedPathValue CalculatedValue
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasInput.InputDomainRoleId) as CalculatedPathValue;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasInput.InputDomainRoleId, value);
			}
		}
		#endregion
		#region Parameter opposite domain role accessor
		/// <summary>
		/// Gets or sets Parameter.
		/// The function parameter associated with this input value.
		/// </summary>
		public virtual FunctionParameter Parameter
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputCorrespondsToFunctionParameter.InputDomainRoleId) as FunctionParameter;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputCorrespondsToFunctionParameter.InputDomainRoleId, value);
			}
		}
		#endregion
		#region SourcePathRoot opposite domain role accessor
		/// <summary>
		/// Gets or sets SourcePathRoot.
		/// The role path root bound to this function input.
		/// </summary>
		public virtual RolePathObjectTypeRoot SourcePathRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToRolePathRoot.InputDomainRoleId) as RolePathObjectTypeRoot;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToRolePathRoot.InputDomainRoleId, value);
			}
		}
		#endregion
		#region SourcePathedRole opposite domain role accessor
		/// <summary>
		/// Gets or sets SourcePathedRole.
		/// The pathed value bound to this function input.
		/// </summary>
		public virtual PathedRole SourcePathedRole
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathedRole.InputDomainRoleId) as PathedRole;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathedRole.InputDomainRoleId, value);
			}
		}
		#endregion
		#region SourceCalculatedValue opposite domain role accessor
		/// <summary>
		/// Gets or sets SourceCalculatedValue.
		/// The pathed value bound to this function input.
		/// </summary>
		public virtual CalculatedPathValue SourceCalculatedValue
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToCalculatedPathValue.InputDomainRoleId) as CalculatedPathValue;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToCalculatedPathValue.InputDomainRoleId, value);
			}
		}
		#endregion
		#region SourceConstant opposite domain role accessor
		/// <summary>
		/// Gets or sets SourceConstant.
		/// The constant value bound to this function input.
		/// </summary>
		public virtual PathConstant SourceConstant
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathConstant.InputDomainRoleId) as PathConstant;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathConstant.SourceDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathConstant.SourceDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathConstant.InputDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass QueryBase
	/// A query representation based on a fact type structure. Queries support
	/// parameterization and do not need readings.
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.QueryBase.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.QueryBase.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("fc900eb1-9874-4648-9040-59ea3ebff1f3")]
	public abstract partial class QueryBase : FactType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// QueryBase domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfc900eb1, 0x9874, 0x4648, 0x90, 0x40, 0x59, 0xea, 0x3e, 0xbf, 0xf1, 0xf3);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected QueryBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ParameterCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ParameterCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.QueryDefinesParameter.Query
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<QueryParameter> ParameterCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<QueryParameter>, QueryParameter>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryDefinesParameter.QueryDomainRoleId);
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass QueryParameter
	/// An input parameter for a query.
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameter.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameter.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("2a84ca88-86b8-4ddf-996a-2e79f130aa9f")]
	public partial class QueryParameter : ORMModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// QueryParameter domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2a84ca88, 0x86b8, 0x4ddf, 0x99, 0x6a, 0x2e, 0x79, 0xf1, 0x30, 0xaa, 0x9f);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public QueryParameter(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public QueryParameter(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x8717ddf3, 0x5254, 0x4cde, 0x89, 0x4f, 0x7d, 0xab, 0x9f, 0x90, 0x03, 0xe5);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// The explicit name for this parameter.
		/// </summary>
		[global::System.ComponentModel.MergableProperty(false)]
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameter/Name.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameter/Name.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("8717ddf3-5254-4cde-894f-7dab9f9003e5")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the QueryParameter.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<QueryParameter, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the QueryParameter.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the QueryParameter.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(QueryParameter element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(QueryParameter element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Query opposite domain role accessor
		/// <summary>
		/// Gets or sets Query.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.QueryDefinesParameter.Parameter
		/// </summary>
		public virtual QueryBase Query
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryDefinesParameter.ParameterDomainRoleId) as QueryBase;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryDefinesParameter.ParameterDomainRoleId, value);
			}
		}
		#endregion
		#region ParameterType opposite domain role accessor
		/// <summary>
		/// Gets or sets ParameterType.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterHasParameterType.Parameter
		/// </summary>
		public virtual ObjectType ParameterType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterHasParameterType.ParameterDomainRoleId) as ObjectType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterHasParameterType.ParameterDomainRoleId, value);
			}
		}
		#endregion
		#region PathBindingCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of PathBindingCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBinding.QueryParameter
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<LeadRolePath> PathBindingCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<LeadRolePath>, LeadRolePath>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryParameterBinding.QueryParameterDomainRoleId);
			}
		}
		#endregion
		#region SubqueryParameterInputsCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SubqueryParameterInputsCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInput.Parameter
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<SubqueryParameterInputs> SubqueryParameterInputsCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<SubqueryParameterInputs>, SubqueryParameterInputs>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInput.ParameterDomainRoleId);
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass Subquery
	/// A query used as a component of a role path.
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Subquery.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Subquery.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("24d28542-e929-4bd2-b4ff-b0257fc285a1")]
	public partial class Subquery : QueryBase
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Subquery domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x24d28542, 0xe929, 0x4bd2, 0xb4, 0xff, 0xb0, 0x25, 0x7f, 0xc2, 0x85, 0xa1);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Subquery(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Subquery(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region PathOwner opposite domain role accessor
		/// <summary>
		/// Gets or sets PathOwner.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsSubquery.Subquery
		/// </summary>
		public virtual RolePathOwner PathOwner
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsSubquery.SubqueryDomainRoleId) as RolePathOwner;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerOwnsSubquery.SubqueryDomainRoleId, value);
			}
		}
		#endregion
		#region SharedWithPathOwnerCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SharedWithPathOwnerCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedSubquery.Subquery
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<RolePathOwner> SharedWithPathOwnerCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<RolePathOwner>, RolePathOwner>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerUsesSharedSubquery.SubqueryDomainRoleId);
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass RoleProjectedDerivationRule
	/// Role path(s) projected onto a set of roles. Forms the base type for
	/// FactTypeDerivationRule and QueryDerivationRule.
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRule.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRule.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("8567ec6a-5a9d-45ab-8c8e-9e3142b2f384")]
	public abstract partial class RoleProjectedDerivationRule : RolePathOwner
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// RoleProjectedDerivationRule domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8567ec6a, 0x5a9d, 0x45ab, 0x8c, 0x8e, 0x9e, 0x31, 0x42, 0xb2, 0xf3, 0x84);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected RoleProjectedDerivationRule(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region FactType opposite domain role accessor
		/// <summary>
		/// Gets or sets FactType.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationRule.DerivationRule
		/// </summary>
		public virtual FactType FactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationRule.DerivationRuleDomainRoleId) as FactType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationRule.FactTypeDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationRule.FactTypeDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationRule.DerivationRuleDomainRoleId, value);
				}
			}
		}
		#endregion
		#region ProjectedPathComponentCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ProjectedPathComponentCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjection.DerivationRule
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<LeadRolePath> ProjectedPathComponentCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<LeadRolePath>, LeadRolePath>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjection.DerivationRuleDomainRoleId);
			}
		}
		#endregion
		#region ProjectionRequiredError opposite domain role accessor
		/// <summary>
		/// Gets or sets ProjectionRequiredError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRuleHasProjectionRequiredError.DerivationRule
		/// </summary>
		public virtual RoleProjectedDerivationRequiresProjectionError ProjectionRequiredError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRuleHasProjectionRequiredError.DerivationRuleDomainRoleId) as RoleProjectedDerivationRequiresProjectionError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRuleHasProjectionRequiredError.ProjectionRequiredErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRuleHasProjectionRequiredError.ProjectionRequiredErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRuleHasProjectionRequiredError.DerivationRuleDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass FactTypeDerivationRule
	/// A role path defining a fact type derivation.
	/// </summary>
	[global::System.ComponentModel.TypeDescriptionProvider(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.ElementTypeDescriptionProvider<FactTypeDerivationRule, Design.FactTypeDerivationRuleTypeDescriptor<FactTypeDerivationRule>>))]
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRule.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRule.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("dedadfce-c351-4fcb-a455-b19fb91875b8")]
	public partial class FactTypeDerivationRule : RoleProjectedDerivationRule
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// FactTypeDerivationRule domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xdedadfce, 0xc351, 0x4fcb, 0xa4, 0x55, 0xb1, 0x9f, 0xb9, 0x18, 0x75, 0xb8);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FactTypeDerivationRule(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FactTypeDerivationRule(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region DerivationCompleteness domain property code
		
		/// <summary>
		/// DerivationCompleteness domain property Id.
		/// </summary>
		public static readonly global::System.Guid DerivationCompletenessDomainPropertyId = new global::System.Guid(0xf254f0a7, 0xe37e, 0x4fda, 0xac, 0x96, 0xde, 0xee, 0xb8, 0x82, 0x8f, 0xec);
		
		/// <summary>
		/// Storage for DerivationCompleteness
		/// </summary>
		private DerivationCompleteness derivationCompletenessPropertyStorage = DerivationCompleteness.FullyDerived;
		
		/// <summary>
		/// Gets or sets the value of DerivationCompleteness domain property.
		/// Specify if a fact can be explicitly populated without satisfying the derivation
		/// path.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRule/DerivationCompleteness.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRule/DerivationCompleteness.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue(DerivationCompleteness.FullyDerived)]
		[DslModeling::DomainObjectId("f254f0a7-e37e-4fda-ac96-deeeb8828fec")]
		public DerivationCompleteness DerivationCompleteness
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return derivationCompletenessPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DerivationCompletenessPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FactTypeDerivationRule.DerivationCompleteness domain property.
		/// </summary>
		internal sealed partial class DerivationCompletenessPropertyHandler : DslModeling::DomainPropertyValueHandler<FactTypeDerivationRule, DerivationCompleteness>
		{
			private DerivationCompletenessPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FactTypeDerivationRule.DerivationCompleteness domain property value handler.
			/// </summary>
			public static readonly DerivationCompletenessPropertyHandler Instance = new DerivationCompletenessPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FactTypeDerivationRule.DerivationCompleteness domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DerivationCompletenessDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed DerivationCompleteness GetValue(FactTypeDerivationRule element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.derivationCompletenessPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FactTypeDerivationRule element, DerivationCompleteness newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				DerivationCompleteness oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.derivationCompletenessPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DerivationStorage domain property code
		
		/// <summary>
		/// DerivationStorage domain property Id.
		/// </summary>
		public static readonly global::System.Guid DerivationStorageDomainPropertyId = new global::System.Guid(0x5f83f8c7, 0xd15d, 0x4985, 0x9c, 0xcc, 0x09, 0x9b, 0x35, 0x4b, 0xd1, 0x78);
		
		/// <summary>
		/// Storage for DerivationStorage
		/// </summary>
		private DerivationStorage derivationStoragePropertyStorage = DerivationStorage.NotStored;
		
		/// <summary>
		/// Gets or sets the value of DerivationStorage domain property.
		/// Specify if the derivation results are determined on demand or stored when
		/// derivation path components are changed.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRule/DerivationStorage.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRule/DerivationStorage.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue(DerivationStorage.NotStored)]
		[DslModeling::DomainObjectId("5f83f8c7-d15d-4985-9ccc-099b354bd178")]
		public DerivationStorage DerivationStorage
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return derivationStoragePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DerivationStoragePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FactTypeDerivationRule.DerivationStorage domain property.
		/// </summary>
		internal sealed partial class DerivationStoragePropertyHandler : DslModeling::DomainPropertyValueHandler<FactTypeDerivationRule, DerivationStorage>
		{
			private DerivationStoragePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FactTypeDerivationRule.DerivationStorage domain property value handler.
			/// </summary>
			public static readonly DerivationStoragePropertyHandler Instance = new DerivationStoragePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FactTypeDerivationRule.DerivationStorage domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DerivationStorageDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed DerivationStorage GetValue(FactTypeDerivationRule element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.derivationStoragePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FactTypeDerivationRule element, DerivationStorage newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				DerivationStorage oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.derivationStoragePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SetProjection domain property code
		
		/// <summary>
		/// SetProjection domain property Id.
		/// </summary>
		public static readonly global::System.Guid SetProjectionDomainPropertyId = new global::System.Guid(0xcb6a01d4, 0x8e6c, 0x4320, 0xaf, 0xd3, 0x49, 0x2a, 0x9d, 0x47, 0x3b, 0x17);
		
		/// <summary>
		/// Storage for SetProjection
		/// </summary>
		private global::System.Boolean setProjectionPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of SetProjection domain property.
		/// The derivation rule results in a set of distinct facts instead of a bag that
		/// might contain duplicates.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRule/SetProjection.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRule/SetProjection.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainObjectId("cb6a01d4-8e6c-4320-afd3-492a9d473b17")]
		public global::System.Boolean SetProjection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return setProjectionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SetProjectionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FactTypeDerivationRule.SetProjection domain property.
		/// </summary>
		internal sealed partial class SetProjectionPropertyHandler : DslModeling::DomainPropertyValueHandler<FactTypeDerivationRule, global::System.Boolean>
		{
			private SetProjectionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FactTypeDerivationRule.SetProjection domain property value handler.
			/// </summary>
			public static readonly SetProjectionPropertyHandler Instance = new SetProjectionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FactTypeDerivationRule.SetProjection domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SetProjectionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(FactTypeDerivationRule element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.setProjectionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FactTypeDerivationRule element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.setProjectionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xa630abd7, 0x9b57, 0x44d1, 0xa6, 0x3b, 0x8b, 0x92, 0x3d, 0x91, 0x37, 0x9f);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// The name for a fully derived fact type.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRule/Name.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRule/Name.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("a630abd7-9b57-44d1-a63b-8b923d91379f")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FactTypeDerivationRule.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<FactTypeDerivationRule, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FactTypeDerivationRule.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FactTypeDerivationRule.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FactTypeDerivationRule element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FactTypeDerivationRule element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ExternalDerivation domain property code
		
		/// <summary>
		/// ExternalDerivation domain property Id.
		/// </summary>
		public static readonly global::System.Guid ExternalDerivationDomainPropertyId = new global::System.Guid(0xc74c453b, 0x4539, 0x4c67, 0xbf, 0x96, 0xe3, 0xa7, 0x64, 0x67, 0xde, 0xaa);
		
		/// <summary>
		/// Storage for ExternalDerivation
		/// </summary>
		private global::System.Boolean externalDerivationPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ExternalDerivation domain property.
		/// An empty path is a placeholder for an externally defined derivation rule and is
		/// not validated.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRule/ExternalDerivation.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRule/ExternalDerivation.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainObjectId("c74c453b-4539-4c67-bf96-e3a76467deaa")]
		public global::System.Boolean ExternalDerivation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return externalDerivationPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ExternalDerivationPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FactTypeDerivationRule.ExternalDerivation domain property.
		/// </summary>
		internal sealed partial class ExternalDerivationPropertyHandler : DslModeling::DomainPropertyValueHandler<FactTypeDerivationRule, global::System.Boolean>
		{
			private ExternalDerivationPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FactTypeDerivationRule.ExternalDerivation domain property value handler.
			/// </summary>
			public static readonly ExternalDerivationPropertyHandler Instance = new ExternalDerivationPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FactTypeDerivationRule.ExternalDerivation domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ExternalDerivationDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(FactTypeDerivationRule element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.externalDerivationPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FactTypeDerivationRule element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.externalDerivationPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DerivationNote opposite domain role accessor
		/// <summary>
		/// Gets or sets DerivationNote.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRuleHasDerivationNote.DerivationRule
		/// </summary>
		public virtual DerivationNote DerivationNote
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRuleHasDerivationNote.DerivationRuleDomainRoleId) as DerivationNote;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRuleHasDerivationNote.DerivationNoteDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRuleHasDerivationNote.DerivationNoteDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRuleHasDerivationNote.DerivationRuleDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass QueryDerivationRule
	/// Role path(s) defining a query.
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.QueryDerivationRule.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.QueryDerivationRule.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("9a0271e5-d818-4e11-94a7-6758db41b867")]
	public partial class QueryDerivationRule : RoleProjectedDerivationRule
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// QueryDerivationRule domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9a0271e5, 0xd818, 0x4e11, 0x94, 0xa7, 0x67, 0x58, 0xdb, 0x41, 0xb8, 0x67);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public QueryDerivationRule(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public QueryDerivationRule(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass SubtypeDerivationRule
	/// A role path defining subtype population.
	/// </summary>
	[global::System.ComponentModel.TypeDescriptionProvider(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.ElementTypeDescriptionProvider<SubtypeDerivationRule, Design.SubtypeDerivationRuleTypeDescriptor<SubtypeDerivationRule>>))]
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRule.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRule.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("7b27fbfe-0a5e-447c-89b7-1ba25f9ed880")]
	public partial class SubtypeDerivationRule : RolePathOwner
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SubtypeDerivationRule domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7b27fbfe, 0x0a5e, 0x447c, 0x89, 0xb7, 0x1b, 0xa2, 0x5f, 0x9e, 0xd8, 0x80);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SubtypeDerivationRule(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SubtypeDerivationRule(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region DerivationCompleteness domain property code
		
		/// <summary>
		/// DerivationCompleteness domain property Id.
		/// </summary>
		public static readonly global::System.Guid DerivationCompletenessDomainPropertyId = new global::System.Guid(0xeef36119, 0xcd07, 0x414b, 0xae, 0x29, 0x50, 0xb9, 0x3f, 0x11, 0x39, 0x3b);
		
		/// <summary>
		/// Storage for DerivationCompleteness
		/// </summary>
		private DerivationCompleteness derivationCompletenessPropertyStorage = DerivationCompleteness.FullyDerived;
		
		/// <summary>
		/// Gets or sets the value of DerivationCompleteness domain property.
		/// Specify if a subtype can be explicitly populated without satisfying the
		/// derivation path.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRule/DerivationCompleteness.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRule/DerivationCompleteness.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue(DerivationCompleteness.FullyDerived)]
		[DslModeling::DomainObjectId("eef36119-cd07-414b-ae29-50b93f11393b")]
		public DerivationCompleteness DerivationCompleteness
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return derivationCompletenessPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DerivationCompletenessPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SubtypeDerivationRule.DerivationCompleteness domain property.
		/// </summary>
		internal sealed partial class DerivationCompletenessPropertyHandler : DslModeling::DomainPropertyValueHandler<SubtypeDerivationRule, DerivationCompleteness>
		{
			private DerivationCompletenessPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SubtypeDerivationRule.DerivationCompleteness domain property value handler.
			/// </summary>
			public static readonly DerivationCompletenessPropertyHandler Instance = new DerivationCompletenessPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SubtypeDerivationRule.DerivationCompleteness domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DerivationCompletenessDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed DerivationCompleteness GetValue(SubtypeDerivationRule element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.derivationCompletenessPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SubtypeDerivationRule element, DerivationCompleteness newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				DerivationCompleteness oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.derivationCompletenessPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DerivationStorage domain property code
		
		/// <summary>
		/// DerivationStorage domain property Id.
		/// </summary>
		public static readonly global::System.Guid DerivationStorageDomainPropertyId = new global::System.Guid(0xaf358b6f, 0x5791, 0x442a, 0x8e, 0x15, 0x35, 0x7f, 0x99, 0x0f, 0x96, 0x5f);
		
		/// <summary>
		/// Storage for DerivationStorage
		/// </summary>
		private DerivationStorage derivationStoragePropertyStorage = DerivationStorage.NotStored;
		
		/// <summary>
		/// Gets or sets the value of DerivationStorage domain property.
		/// Specify if the derivation results are determined on demand or stored when
		/// derivation path components are changed.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRule/DerivationStorage.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRule/DerivationStorage.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue(DerivationStorage.NotStored)]
		[DslModeling::DomainObjectId("af358b6f-5791-442a-8e15-357f990f965f")]
		public DerivationStorage DerivationStorage
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return derivationStoragePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DerivationStoragePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SubtypeDerivationRule.DerivationStorage domain property.
		/// </summary>
		internal sealed partial class DerivationStoragePropertyHandler : DslModeling::DomainPropertyValueHandler<SubtypeDerivationRule, DerivationStorage>
		{
			private DerivationStoragePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SubtypeDerivationRule.DerivationStorage domain property value handler.
			/// </summary>
			public static readonly DerivationStoragePropertyHandler Instance = new DerivationStoragePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SubtypeDerivationRule.DerivationStorage domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DerivationStorageDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed DerivationStorage GetValue(SubtypeDerivationRule element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.derivationStoragePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SubtypeDerivationRule element, DerivationStorage newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				DerivationStorage oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.derivationStoragePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ExternalDerivation domain property code
		
		/// <summary>
		/// ExternalDerivation domain property Id.
		/// </summary>
		public static readonly global::System.Guid ExternalDerivationDomainPropertyId = new global::System.Guid(0x975022fc, 0xc9e1, 0x441b, 0xbc, 0x0b, 0xc9, 0x39, 0x17, 0x2c, 0x33, 0x40);
		
		/// <summary>
		/// Storage for ExternalDerivation
		/// </summary>
		private global::System.Boolean externalDerivationPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ExternalDerivation domain property.
		/// An empty path is a placeholder for an externally defined derivation rule and is
		/// not validated.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRule/ExternalDerivation.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRule/ExternalDerivation.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainObjectId("975022fc-c9e1-441b-bc0b-c939172c3340")]
		public global::System.Boolean ExternalDerivation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return externalDerivationPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ExternalDerivationPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SubtypeDerivationRule.ExternalDerivation domain property.
		/// </summary>
		internal sealed partial class ExternalDerivationPropertyHandler : DslModeling::DomainPropertyValueHandler<SubtypeDerivationRule, global::System.Boolean>
		{
			private ExternalDerivationPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SubtypeDerivationRule.ExternalDerivation domain property value handler.
			/// </summary>
			public static readonly ExternalDerivationPropertyHandler Instance = new ExternalDerivationPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SubtypeDerivationRule.ExternalDerivation domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ExternalDerivationDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(SubtypeDerivationRule element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.externalDerivationPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SubtypeDerivationRule element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.externalDerivationPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Subtype opposite domain role accessor
		/// <summary>
		/// Gets or sets Subtype.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationRule.DerivationRule
		/// </summary>
		public virtual ObjectType Subtype
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationRule.DerivationRuleDomainRoleId) as ObjectType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationRule.SubtypeDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationRule.SubtypeDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationRule.DerivationRuleDomainRoleId, value);
				}
			}
		}
		#endregion
		#region DerivationNote opposite domain role accessor
		/// <summary>
		/// Gets or sets DerivationNote.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRuleHasDerivationNote.DerivationRule
		/// </summary>
		public virtual DerivationNote DerivationNote
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRuleHasDerivationNote.DerivationRuleDomainRoleId) as DerivationNote;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRuleHasDerivationNote.DerivationNoteDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRuleHasDerivationNote.DerivationNoteDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRuleHasDerivationNote.DerivationRuleDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass ConstraintRoleSequenceJoinPath
	/// A role path defining cross fact type relationships within a constraint role
	/// sequence.
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPath.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPath.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("56690364-4793-49f3-94c2-2984ed932d84")]
	public partial class ConstraintRoleSequenceJoinPath : RolePathOwner
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ConstraintRoleSequenceJoinPath domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x56690364, 0x4793, 0x49f3, 0x94, 0xc2, 0x29, 0x84, 0xed, 0x93, 0x2d, 0x84);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ConstraintRoleSequenceJoinPath(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ConstraintRoleSequenceJoinPath(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region IsAutomatic domain property code
		
		/// <summary>
		/// IsAutomatic domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsAutomaticDomainPropertyId = new global::System.Guid(0xe6d3dfad, 0xf849, 0x4d4e, 0xaa, 0x81, 0x46, 0xfa, 0xbe, 0xba, 0x74, 0x09);
		
		/// <summary>
		/// Storage for IsAutomatic
		/// </summary>
		private global::System.Boolean isAutomaticPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsAutomatic domain property.
		/// The join path is automatically created from the constraint sequence.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPath/IsAutomatic.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPath/IsAutomatic.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslModeling::DomainObjectId("e6d3dfad-f849-4d4e-aa81-46fabeba7409")]
		public global::System.Boolean IsAutomatic
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isAutomaticPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsAutomaticPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ConstraintRoleSequenceJoinPath.IsAutomatic domain property.
		/// </summary>
		internal sealed partial class IsAutomaticPropertyHandler : DslModeling::DomainPropertyValueHandler<ConstraintRoleSequenceJoinPath, global::System.Boolean>
		{
			private IsAutomaticPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ConstraintRoleSequenceJoinPath.IsAutomatic domain property value handler.
			/// </summary>
			public static readonly IsAutomaticPropertyHandler Instance = new IsAutomaticPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ConstraintRoleSequenceJoinPath.IsAutomatic domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsAutomaticDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ConstraintRoleSequenceJoinPath element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isAutomaticPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ConstraintRoleSequenceJoinPath element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isAutomaticPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region RoleSequence opposite domain role accessor
		/// <summary>
		/// Gets or sets RoleSequence.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPath.JoinPath
		/// </summary>
		public virtual ConstraintRoleSequence RoleSequence
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPath.JoinPathDomainRoleId) as ConstraintRoleSequence;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPath.RoleSequenceDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPath.RoleSequenceDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPath.JoinPathDomainRoleId, value);
				}
			}
		}
		#endregion
		#region ProjectedPathComponentCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ProjectedPathComponentCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathProjection.JoinPath
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<LeadRolePath> ProjectedPathComponentCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<LeadRolePath>, LeadRolePath>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathProjection.JoinPathDomainRoleId);
			}
		}
		#endregion
		#region ProjectionRequiredError opposite domain role accessor
		/// <summary>
		/// Gets or sets ProjectionRequiredError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathHasProjectionRequiredError.JoinPath
		/// </summary>
		public virtual ConstraintRoleSequenceJoinPathRequiresProjectionError ProjectionRequiredError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathHasProjectionRequiredError.JoinPathDomainRoleId) as ConstraintRoleSequenceJoinPathRequiresProjectionError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathHasProjectionRequiredError.ProjectionRequiredErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathHasProjectionRequiredError.ProjectionRequiredErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathHasProjectionRequiredError.JoinPathDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass PathRequiresRootObjectTypeError
	/// A LeadRolePath must specify a root object type.
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathRequiresRootObjectTypeError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathRequiresRootObjectTypeError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("6dfce057-33b0-45bb-a957-8f45b6d3a673")]
	public partial class PathRequiresRootObjectTypeError : ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// PathRequiresRootObjectTypeError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6dfce057, 0x33b0, 0x45bb, 0xa9, 0x57, 0x8f, 0x45, 0xb6, 0xd3, 0xa6, 0x73);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PathRequiresRootObjectTypeError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PathRequiresRootObjectTypeError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region RolePath opposite domain role accessor
		/// <summary>
		/// Gets or sets RolePath.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathHasRootObjectTypeError.RootObjectTypeRequiredError
		/// </summary>
		public virtual RolePath RolePath
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathHasRootObjectTypeError.RootObjectTypeRequiredErrorDomainRoleId) as RolePath;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathHasRootObjectTypeError.RolePathDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathHasRootObjectTypeError.RolePathDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathHasRootObjectTypeError.RootObjectTypeRequiredErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass PathSameFactTypeRoleFollowsJoinError
	/// A role in a fact type was used without a join role entering that fact type, or a
	/// role from a single fact type was used multiple times without an intermediate
	/// join.
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathSameFactTypeRoleFollowsJoinError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathSameFactTypeRoleFollowsJoinError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("0573dd32-9d70-487e-9fff-72ca8d57fcbe")]
	public partial class PathSameFactTypeRoleFollowsJoinError : ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// PathSameFactTypeRoleFollowsJoinError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0573dd32, 0x9d70, 0x487e, 0x9f, 0xff, 0x72, 0xca, 0x8d, 0x57, 0xfc, 0xbe);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PathSameFactTypeRoleFollowsJoinError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PathSameFactTypeRoleFollowsJoinError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region PathedRole opposite domain role accessor
		/// <summary>
		/// Gets or sets PathedRole.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasSameFactTypeFollowsJoinError.SameFactTypeRoleFollowsJoinError
		/// </summary>
		public virtual PathedRole PathedRole
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasSameFactTypeFollowsJoinError.SameFactTypeRoleFollowsJoinErrorDomainRoleId) as PathedRole;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasSameFactTypeFollowsJoinError.PathedRoleDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasSameFactTypeFollowsJoinError.PathedRoleDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasSameFactTypeFollowsJoinError.SameFactTypeRoleFollowsJoinErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass JoinedPathRoleRequiresCompatibleRolePlayerError
	/// A joined pathed roles must have a role player that is compatible with the join
	/// source, and a start role must be compatible with the root object type.
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.JoinedPathRoleRequiresCompatibleRolePlayerError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.JoinedPathRoleRequiresCompatibleRolePlayerError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("92cb3188-9baf-4317-8558-6a6c4349663e")]
	public partial class JoinedPathRoleRequiresCompatibleRolePlayerError : ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// JoinedPathRoleRequiresCompatibleRolePlayerError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x92cb3188, 0x9baf, 0x4317, 0x85, 0x58, 0x6a, 0x6c, 0x43, 0x49, 0x66, 0x3e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public JoinedPathRoleRequiresCompatibleRolePlayerError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public JoinedPathRoleRequiresCompatibleRolePlayerError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region PathedRole opposite domain role accessor
		/// <summary>
		/// Gets or sets PathedRole.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasCompatibleJoinRolePlayerError.JoinCompatibilityError
		/// </summary>
		public virtual PathedRole PathedRole
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasCompatibleJoinRolePlayerError.JoinCompatibilityErrorDomainRoleId) as PathedRole;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasCompatibleJoinRolePlayerError.PathedRoleDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasCompatibleJoinRolePlayerError.PathedRoleDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasCompatibleJoinRolePlayerError.JoinCompatibilityErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass PathObjectUnifierRequiresCompatibleObjectTypesError
	/// Unified path elements must have compatible object types.
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierRequiresCompatibleObjectTypesError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierRequiresCompatibleObjectTypesError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("5e811d63-4b15-4ae4-8660-8d031b66126b")]
	public partial class PathObjectUnifierRequiresCompatibleObjectTypesError : ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// PathObjectUnifierRequiresCompatibleObjectTypesError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5e811d63, 0x4b15, 0x4ae4, 0x86, 0x60, 0x8d, 0x03, 0x1b, 0x66, 0x12, 0x6b);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PathObjectUnifierRequiresCompatibleObjectTypesError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PathObjectUnifierRequiresCompatibleObjectTypesError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ObjectUnifier opposite domain role accessor
		/// <summary>
		/// Gets or sets ObjectUnifier.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierHasCompatibleObjectTypesError.CompatibilityError
		/// </summary>
		public virtual PathObjectUnifier ObjectUnifier
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierHasCompatibleObjectTypesError.CompatibilityErrorDomainRoleId) as PathObjectUnifier;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierHasCompatibleObjectTypesError.ObjectUnifierDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierHasCompatibleObjectTypesError.ObjectUnifierDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierHasCompatibleObjectTypesError.CompatibilityErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass PathOuterJoinRequiresOptionalRoleError
	/// Outer join semantics are not supported for roles with explicit or implied simple
	/// mandatory constraints.
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathOuterJoinRequiresOptionalRoleError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathOuterJoinRequiresOptionalRoleError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("4d292209-cd06-4f23-9bdb-46d0ed1fcb97")]
	public partial class PathOuterJoinRequiresOptionalRoleError : ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// PathOuterJoinRequiresOptionalRoleError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4d292209, 0xcd06, 0x4f23, 0x9b, 0xdb, 0x46, 0xd0, 0xed, 0x1f, 0xcb, 0x97);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PathOuterJoinRequiresOptionalRoleError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PathOuterJoinRequiresOptionalRoleError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region PathedRole opposite domain role accessor
		/// <summary>
		/// Gets or sets PathedRole.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasMandatoryOuterJoinError.MandatoryOuterJoinError
		/// </summary>
		public virtual PathedRole PathedRole
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasMandatoryOuterJoinError.MandatoryOuterJoinErrorDomainRoleId) as PathedRole;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasMandatoryOuterJoinError.PathedRoleDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasMandatoryOuterJoinError.PathedRoleDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasMandatoryOuterJoinError.MandatoryOuterJoinErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass CalculatedPathValueRequiresFunctionError
	/// A calculation is specified but does not have an associated function.
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueRequiresFunctionError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueRequiresFunctionError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("638e20fd-3743-4967-94fe-f3a1cdb985e5")]
	public partial class CalculatedPathValueRequiresFunctionError : ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// CalculatedPathValueRequiresFunctionError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x638e20fd, 0x3743, 0x4967, 0x94, 0xfe, 0xf3, 0xa1, 0xcd, 0xb9, 0x85, 0xe5);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CalculatedPathValueRequiresFunctionError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CalculatedPathValueRequiresFunctionError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region CalculatedPathValue opposite domain role accessor
		/// <summary>
		/// Gets or sets CalculatedPathValue.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasFunctionRequiredError.FunctionRequiredError
		/// </summary>
		public virtual CalculatedPathValue CalculatedPathValue
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasFunctionRequiredError.FunctionRequiredErrorDomainRoleId) as CalculatedPathValue;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasFunctionRequiredError.CalculatedPathValueDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasFunctionRequiredError.CalculatedPathValueDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasFunctionRequiredError.FunctionRequiredErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass CalculatedPathValueRequiresAggregationContextError
	/// A calculation using an aggregate function requires an aggregation context.
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueRequiresAggregationContextError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueRequiresAggregationContextError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("c9ae4bb0-9a00-4fd9-9b38-05978d6c4af1")]
	public partial class CalculatedPathValueRequiresAggregationContextError : ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// CalculatedPathValueRequiresAggregationContextError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc9ae4bb0, 0x9a00, 0x4fd9, 0x9b, 0x38, 0x05, 0x97, 0x8d, 0x6c, 0x4a, 0xf1);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CalculatedPathValueRequiresAggregationContextError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CalculatedPathValueRequiresAggregationContextError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region CalculatedPathValue opposite domain role accessor
		/// <summary>
		/// Gets or sets CalculatedPathValue.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasAggregationContextRequiredError.AggregationContextRequiredError
		/// </summary>
		public virtual CalculatedPathValue CalculatedPathValue
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasAggregationContextRequiredError.AggregationContextRequiredErrorDomainRoleId) as CalculatedPathValue;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasAggregationContextRequiredError.CalculatedPathValueDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasAggregationContextRequiredError.CalculatedPathValueDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasAggregationContextRequiredError.AggregationContextRequiredErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass CalculatedPathValueParameterBindingError
	/// A path calculation is missing an input for a function parameter.
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueParameterBindingError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueParameterBindingError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("32af177a-3acb-435c-9005-9318a7be64e7")]
	public partial class CalculatedPathValueParameterBindingError : ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// CalculatedPathValueParameterBindingError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x32af177a, 0x3acb, 0x435c, 0x90, 0x05, 0x93, 0x18, 0xa7, 0xbe, 0x64, 0xe7);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CalculatedPathValueParameterBindingError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CalculatedPathValueParameterBindingError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region CalculatedPathValue opposite domain role accessor
		/// <summary>
		/// Gets or sets CalculatedPathValue.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasUnboundParameterError.ParameterBindingError
		/// </summary>
		public virtual CalculatedPathValue CalculatedPathValue
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasUnboundParameterError.ParameterBindingErrorDomainRoleId) as CalculatedPathValue;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasUnboundParameterError.ParameterBindingErrorDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass CalculatedPathValueMustBeConsumedError
	/// A path calculation must be consumed as a path condition, an input to another
	/// calculation, or as a projection from the path.
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueMustBeConsumedError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueMustBeConsumedError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("878cb335-f636-4e0f-82c4-a64a6badd63d")]
	public partial class CalculatedPathValueMustBeConsumedError : ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// CalculatedPathValueMustBeConsumedError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x878cb335, 0xf636, 0x4e0f, 0x82, 0xc4, 0xa6, 0x4a, 0x6b, 0xad, 0xd6, 0x3d);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CalculatedPathValueMustBeConsumedError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CalculatedPathValueMustBeConsumedError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region CalculatedPathValue opposite domain role accessor
		/// <summary>
		/// Gets or sets CalculatedPathValue.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasConsumptionRequiredError.ConsumptionRequiredError
		/// </summary>
		public virtual CalculatedPathValue CalculatedPathValue
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasConsumptionRequiredError.ConsumptionRequiredErrorDomainRoleId) as CalculatedPathValue;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasConsumptionRequiredError.CalculatedPathValueDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasConsumptionRequiredError.CalculatedPathValueDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasConsumptionRequiredError.ConsumptionRequiredErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass RoleProjectedDerivationRequiresProjectionError
	/// Roles in a fact type derivation rule must be projected from at least one role
	/// path.
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRequiresProjectionError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRequiresProjectionError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("e9b0f6e7-b1d4-4437-ab27-375dc63fb7c3")]
	public partial class RoleProjectedDerivationRequiresProjectionError : ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// RoleProjectedDerivationRequiresProjectionError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe9b0f6e7, 0xb1d4, 0x4437, 0xab, 0x27, 0x37, 0x5d, 0xc6, 0x3f, 0xb7, 0xc3);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RoleProjectedDerivationRequiresProjectionError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RoleProjectedDerivationRequiresProjectionError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region DerivationRule opposite domain role accessor
		/// <summary>
		/// Gets or sets DerivationRule.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRuleHasProjectionRequiredError.ProjectionRequiredError
		/// </summary>
		public virtual RoleProjectedDerivationRule DerivationRule
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRuleHasProjectionRequiredError.ProjectionRequiredErrorDomainRoleId) as RoleProjectedDerivationRule;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRuleHasProjectionRequiredError.DerivationRuleDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRuleHasProjectionRequiredError.DerivationRuleDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRuleHasProjectionRequiredError.ProjectionRequiredErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass PartialRoleSetDerivationProjectionError
	/// A fact type derivation projection must project on every role in the fact type.
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PartialRoleSetDerivationProjectionError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PartialRoleSetDerivationProjectionError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("926850be-ea62-4552-91b6-b9a7e0e22dcc")]
	public partial class PartialRoleSetDerivationProjectionError : ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// PartialRoleSetDerivationProjectionError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x926850be, 0xea62, 0x4552, 0x91, 0xb6, 0xb9, 0xa7, 0xe0, 0xe2, 0x2d, 0xcc);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PartialRoleSetDerivationProjectionError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PartialRoleSetDerivationProjectionError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region DerivationProjection opposite domain role accessor
		/// <summary>
		/// Gets or sets DerivationProjection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjectionHasPartialProjectionError.PartialProjectionError
		/// </summary>
		public virtual RoleSetDerivationProjection DerivationProjection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjectionHasPartialProjectionError.PartialProjectionErrorDomainRoleId) as RoleSetDerivationProjection;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjectionHasPartialProjectionError.DerivationProjectionDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjectionHasPartialProjectionError.DerivationProjectionDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjectionHasPartialProjectionError.PartialProjectionErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass DerivedRoleRequiresCompatibleProjectionError
	/// A role path projection onto a derived role must be of a type that is compatible
	/// with the derived role.
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleRequiresCompatibleProjectionError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleRequiresCompatibleProjectionError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("7929f50f-70eb-4bab-9230-1ebb4f8331b5")]
	public partial class DerivedRoleRequiresCompatibleProjectionError : ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DerivedRoleRequiresCompatibleProjectionError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7929f50f, 0x70eb, 0x4bab, 0x92, 0x30, 0x1e, 0xbb, 0x4f, 0x83, 0x31, 0xb5);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DerivedRoleRequiresCompatibleProjectionError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DerivedRoleRequiresCompatibleProjectionError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Projection opposite domain role accessor
		/// <summary>
		/// Gets or sets Projection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError.IncompatibleProjectionError
		/// </summary>
		public virtual DerivedRoleProjection Projection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError.IncompatibleProjectionErrorDomainRoleId) as DerivedRoleProjection;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError.ProjectionDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError.ProjectionDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError.IncompatibleProjectionErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass ConstraintRoleSequenceJoinPathRequiresProjectionError
	/// Roles in a constraint role sequence join path must be projected from at least
	/// one role path.
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathRequiresProjectionError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathRequiresProjectionError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("07b0f1a0-148e-4d8e-aa59-77f3d301b2be")]
	public partial class ConstraintRoleSequenceJoinPathRequiresProjectionError : ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ConstraintRoleSequenceJoinPathRequiresProjectionError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x07b0f1a0, 0x148e, 0x4d8e, 0xaa, 0x59, 0x77, 0xf3, 0xd3, 0x01, 0xb2, 0xbe);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ConstraintRoleSequenceJoinPathRequiresProjectionError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ConstraintRoleSequenceJoinPathRequiresProjectionError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region JoinPath opposite domain role accessor
		/// <summary>
		/// Gets or sets JoinPath.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathHasProjectionRequiredError.ProjectionRequiredError
		/// </summary>
		public virtual ConstraintRoleSequenceJoinPath JoinPath
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathHasProjectionRequiredError.ProjectionRequiredErrorDomainRoleId) as ConstraintRoleSequenceJoinPath;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathHasProjectionRequiredError.JoinPathDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathHasProjectionRequiredError.JoinPathDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathHasProjectionRequiredError.ProjectionRequiredErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass PartialConstraintRoleSequenceJoinPathProjectionError
	/// A constraint role sequence join path projection must project on every role in
	/// the sequence.
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PartialConstraintRoleSequenceJoinPathProjectionError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PartialConstraintRoleSequenceJoinPathProjectionError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("d58118a4-7d4c-4361-9245-ea71dbd54702")]
	public partial class PartialConstraintRoleSequenceJoinPathProjectionError : ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// PartialConstraintRoleSequenceJoinPathProjectionError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd58118a4, 0x7d4c, 0x4361, 0x92, 0x45, 0xea, 0x71, 0xdb, 0xd5, 0x47, 0x02);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PartialConstraintRoleSequenceJoinPathProjectionError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PartialConstraintRoleSequenceJoinPathProjectionError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region JoinPathProjection opposite domain role accessor
		/// <summary>
		/// Gets or sets JoinPathProjection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceProjectionHasPartialProjectionError.PartialProjectionError
		/// </summary>
		public virtual ConstraintRoleSequenceJoinPathProjection JoinPathProjection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceProjectionHasPartialProjectionError.PartialProjectionErrorDomainRoleId) as ConstraintRoleSequenceJoinPathProjection;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceProjectionHasPartialProjectionError.JoinPathProjectionDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceProjectionHasPartialProjectionError.JoinPathProjectionDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceProjectionHasPartialProjectionError.PartialProjectionErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass ConstraintRoleRequiresCompatibleJoinPathProjectionError
	/// A constraint role join path projection must be of a type that is compatible with
	/// the constrained role.
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleRequiresCompatibleJoinPathProjectionError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleRequiresCompatibleJoinPathProjectionError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("11a7fc14-052c-4d22-b59c-59b39e5964b9")]
	public partial class ConstraintRoleRequiresCompatibleJoinPathProjectionError : ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ConstraintRoleRequiresCompatibleJoinPathProjectionError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x11a7fc14, 0x052c, 0x4d22, 0xb5, 0x9c, 0x59, 0xb3, 0x9e, 0x59, 0x64, 0xb9);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ConstraintRoleRequiresCompatibleJoinPathProjectionError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ConstraintRoleRequiresCompatibleJoinPathProjectionError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Projection opposite domain role accessor
		/// <summary>
		/// Gets or sets Projection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError.IncompatibleProjectionError
		/// </summary>
		public virtual ConstraintRoleProjection Projection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError.IncompatibleProjectionErrorDomainRoleId) as ConstraintRoleProjection;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError.ProjectionDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError.ProjectionDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError.IncompatibleProjectionErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass TooFewRoleSequencesError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.TooFewRoleSequencesError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.TooFewRoleSequencesError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("686a4b07-0ed9-4143-8225-5524c4d6c001")]
	public partial class TooFewRoleSequencesError : ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// TooFewRoleSequencesError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x686a4b07, 0x0ed9, 0x4143, 0x82, 0x25, 0x55, 0x24, 0xc4, 0xd6, 0xc0, 0x01);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TooFewRoleSequencesError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TooFewRoleSequencesError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region SetComparisonConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets SetComparisonConstraint.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesError
		/// </summary>
		public virtual SetComparisonConstraint SetComparisonConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorDomainRoleId) as SetComparisonConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.SetComparisonConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.SetComparisonConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorDomainRoleId, value);
				}
			}
		}
		#endregion
		#region SetConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets SetConstraint.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesError
		/// </summary>
		public virtual SetConstraint SetConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorDomainRoleId) as SetConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooFewRoleSequencesError.SetConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooFewRoleSequencesError.SetConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass TooManyRoleSequencesError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.TooManyRoleSequencesError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.TooManyRoleSequencesError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("1adacf12-94f5-430d-9e14-6a3b0334139e")]
	public partial class TooManyRoleSequencesError : ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// TooManyRoleSequencesError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1adacf12, 0x94f5, 0x430d, 0x9e, 0x14, 0x6a, 0x3b, 0x03, 0x34, 0x13, 0x9e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TooManyRoleSequencesError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TooManyRoleSequencesError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region SetComparisonConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets SetComparisonConstraint.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesError
		/// </summary>
		public virtual SetComparisonConstraint SetComparisonConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorDomainRoleId) as SetComparisonConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.SetComparisonConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.SetComparisonConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorDomainRoleId, value);
				}
			}
		}
		#endregion
		#region SetConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets SetConstraint.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesError
		/// </summary>
		public virtual SetConstraint SetConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorDomainRoleId) as SetConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooManyRoleSequencesError.SetConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooManyRoleSequencesError.SetConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass ObjectTypeDuplicateNameError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeDuplicateNameError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeDuplicateNameError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("798d4cc7-1ad8-4a83-afd5-5730ac342dc2")]
	public partial class ObjectTypeDuplicateNameError : DuplicateNameError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ObjectTypeDuplicateNameError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x798d4cc7, 0x1ad8, 0x4a83, 0xaf, 0xd5, 0x57, 0x30, 0xac, 0x34, 0x2d, 0xc2);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ObjectTypeDuplicateNameError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ObjectTypeDuplicateNameError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ObjectTypeCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ObjectTypeCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDuplicateNameError.DuplicateNameError
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ObjectType> ObjectTypeCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ObjectType>, ObjectType>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDuplicateNameError.DuplicateNameErrorDomainRoleId);
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass RecognizedPhraseDuplicateNameError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseDuplicateNameError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseDuplicateNameError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("e4f41332-9a69-4ce8-871c-3507326d7cdb")]
	public partial class RecognizedPhraseDuplicateNameError : DuplicateNameError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// RecognizedPhraseDuplicateNameError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe4f41332, 0x9a69, 0x4ce8, 0x87, 0x1c, 0x35, 0x07, 0x32, 0x6d, 0x7c, 0xdb);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RecognizedPhraseDuplicateNameError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RecognizedPhraseDuplicateNameError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region RecognizedPhraseCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of RecognizedPhraseCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasDuplicateNameError.DuplicateNameError
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<RecognizedPhrase> RecognizedPhraseCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<RecognizedPhrase>, RecognizedPhrase>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasDuplicateNameError.DuplicateNameErrorDomainRoleId);
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass FunctionDuplicateNameError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionDuplicateNameError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionDuplicateNameError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("b642b6c4-9c15-44c3-92ec-1b39b91619e4")]
	public partial class FunctionDuplicateNameError : DuplicateNameError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// FunctionDuplicateNameError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb642b6c4, 0x9c15, 0x44c3, 0x92, 0xec, 0x1b, 0x39, 0xb9, 0x16, 0x19, 0xe4);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FunctionDuplicateNameError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FunctionDuplicateNameError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region FunctionCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of FunctionCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionHasDuplicateNameError.DuplicateNameError
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Function> FunctionCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Function>, Function>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionHasDuplicateNameError.DuplicateNameErrorDomainRoleId);
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass DuplicateReadingSignatureError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DuplicateReadingSignatureError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DuplicateReadingSignatureError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("7495d7f0-16a5-403e-85d6-082cf1ad7df9")]
	public partial class DuplicateReadingSignatureError : DuplicateNameError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DuplicateReadingSignatureError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7495d7f0, 0x16a5, 0x403e, 0x85, 0xd6, 0x08, 0x2c, 0xf1, 0xad, 0x7d, 0xf9);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DuplicateReadingSignatureError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DuplicateReadingSignatureError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ReadingCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ReadingCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasDuplicateSignatureError.DuplicateSignatureError
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Reading> ReadingCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Reading>, Reading>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasDuplicateSignatureError.DuplicateSignatureErrorDomainRoleId);
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass PopulationUniquenessError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PopulationUniquenessError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PopulationUniquenessError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("ba0a8f9e-91e1-4d56-8a44-9f49432c63c5")]
	public partial class PopulationUniquenessError : ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// PopulationUniquenessError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xba0a8f9e, 0x91e1, 0x4d56, 0x8a, 0x44, 0x9f, 0x49, 0x43, 0x2c, 0x63, 0xc5);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PopulationUniquenessError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PopulationUniquenessError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region RoleInstanceCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of RoleInstanceCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstanceHasPopulationUniquenessError.PopulationUniquenessError
		/// </summary>
		public virtual DslModeling::ReadOnlyLinkedElementCollection<RoleInstance> RoleInstanceCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::ReadOnlyLinkedElementCollection<RoleInstance>, RoleInstance>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstanceHasPopulationUniquenessError.PopulationUniquenessErrorDomainRoleId);
			}
		}
		#endregion
		#region EntityTypeRoleInstanceCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of EntityTypeRoleInstanceCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError.PopulationUniquenessError
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<EntityTypeRoleInstance> EntityTypeRoleInstanceCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<EntityTypeRoleInstance>, EntityTypeRoleInstance>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRoleInstanceHasPopulationUniquenessError.PopulationUniquenessErrorDomainRoleId);
			}
		}
		#endregion
		#region FactTypeRoleInstanceCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of FactTypeRoleInstanceCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError.PopulationUniquenessError
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<FactTypeRoleInstance> FactTypeRoleInstanceCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<FactTypeRoleInstance>, FactTypeRoleInstance>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRoleInstanceHasPopulationUniquenessError.PopulationUniquenessErrorDomainRoleId);
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass ContradictionError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ContradictionError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ContradictionError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("b42b88e4-ca87-4dfa-90be-00606e4be23b")]
	public abstract partial class ContradictionError : ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ContradictionError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb42b88e4, 0xca87, 0x4dfa, 0x90, 0xbe, 0x00, 0x60, 0x6e, 0x4b, 0xe2, 0x3b);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ContradictionError(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region SetComparisonConstraintCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SetComparisonConstraintCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasContradictionError.ContradictionError
		/// </summary>
		public virtual DslModeling::ReadOnlyLinkedElementCollection<SetComparisonConstraint> SetComparisonConstraintCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::ReadOnlyLinkedElementCollection<SetComparisonConstraint>, SetComparisonConstraint>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasContradictionError.ContradictionErrorDomainRoleId);
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass ExclusionContradictsMandatoryError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionContradictsMandatoryError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionContradictsMandatoryError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("5a57ea68-918d-4ae3-af7f-d9f7cdb5ab34")]
	public partial class ExclusionContradictsMandatoryError : ContradictionError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ExclusionContradictsMandatoryError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5a57ea68, 0x918d, 0x4ae3, 0xaf, 0x7f, 0xd9, 0xf7, 0xcd, 0xb5, 0xab, 0x34);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ExclusionContradictsMandatoryError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ExclusionContradictsMandatoryError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ExclusionConstraint opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ExclusionConstraint.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError.ExclusionContradictsMandatoryError
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ExclusionConstraint> ExclusionConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ExclusionConstraint>, ExclusionConstraint>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionConstraintHasExclusionContradictsMandatoryError.ExclusionContradictsMandatoryErrorDomainRoleId);
			}
		}
		#endregion
		#region MandatoryConstraint opposite domain role accessor
		
		/// <summary>
		/// Gets a list of MandatoryConstraint.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError.ExclusionContradictsMandatoryError
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<MandatoryConstraint> MandatoryConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<MandatoryConstraint>, MandatoryConstraint>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasExclusionContradictsMandatoryError.ExclusionContradictsMandatoryErrorDomainRoleId);
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass ExclusionContradictsEqualityError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionContradictsEqualityError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionContradictsEqualityError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("d8714f74-60b7-48f5-bf7d-88d8736cb22a")]
	public partial class ExclusionContradictsEqualityError : ContradictionError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ExclusionContradictsEqualityError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd8714f74, 0x60b7, 0x48f5, 0xbf, 0x7d, 0x88, 0xd8, 0x73, 0x6c, 0xb2, 0x2a);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ExclusionContradictsEqualityError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ExclusionContradictsEqualityError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region SetComparisonConstraintCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SetComparisonConstraintCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError.ExclusionContradictsEqualityError
		/// </summary>
		public virtual new DslModeling::LinkedElementCollection<SetComparisonConstraint> SetComparisonConstraintCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<SetComparisonConstraint>, SetComparisonConstraint>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsEqualityError.ExclusionContradictsEqualityErrorDomainRoleId);
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass ExclusionContradictsSubsetError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionContradictsSubsetError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ExclusionContradictsSubsetError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("f671fe6d-ba8a-4bf2-afb6-be5827996c50")]
	public partial class ExclusionContradictsSubsetError : ContradictionError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ExclusionContradictsSubsetError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf671fe6d, 0xba8a, 0x4bf2, 0xaf, 0xb6, 0xbe, 0x58, 0x27, 0x99, 0x6c, 0x50);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ExclusionContradictsSubsetError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ExclusionContradictsSubsetError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region SetComparisonConstraintCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SetComparisonConstraintCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError.ExclusionContradictsSubsetError
		/// </summary>
		public virtual new DslModeling::LinkedElementCollection<SetComparisonConstraint> SetComparisonConstraintCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<SetComparisonConstraint>, SetComparisonConstraint>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExclusionContradictsSubsetError.ExclusionContradictsSubsetErrorDomainRoleId);
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass NotWellModeledSubsetAndMandatoryError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NotWellModeledSubsetAndMandatoryError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NotWellModeledSubsetAndMandatoryError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("2decdc39-e109-4d59-8bf3-046e2cd8584c")]
	public partial class NotWellModeledSubsetAndMandatoryError : ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// NotWellModeledSubsetAndMandatoryError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2decdc39, 0xe109, 0x4d59, 0x8b, 0xf3, 0x04, 0x6e, 0x2c, 0xd8, 0x58, 0x4c);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public NotWellModeledSubsetAndMandatoryError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public NotWellModeledSubsetAndMandatoryError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region SubsetConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets SubsetConstraint.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError.NotWellModeledSubsetAndMandatoryError
		/// </summary>
		public virtual SubsetConstraint SubsetConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError.NotWellModeledSubsetAndMandatoryErrorDomainRoleId) as SubsetConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError.SubsetConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError.SubsetConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError.NotWellModeledSubsetAndMandatoryErrorDomainRoleId, value);
				}
			}
		}
		#endregion
		#region MandatoryConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets MandatoryConstraint.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError.NotWellModeledSubsetAndMandatoryError
		/// </summary>
		public virtual MandatoryConstraint MandatoryConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError.NotWellModeledSubsetAndMandatoryErrorDomainRoleId) as MandatoryConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError.MandatoryConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError.MandatoryConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError.NotWellModeledSubsetAndMandatoryErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass PopulationMandatoryError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PopulationMandatoryError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PopulationMandatoryError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("5b76cb18-90b2-4656-bb0d-0788460fdb70")]
	public partial class PopulationMandatoryError : ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// PopulationMandatoryError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5b76cb18, 0x90b2, 0x4656, 0xbb, 0x0d, 0x07, 0x88, 0x46, 0x0f, 0xdb, 0x70);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PopulationMandatoryError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PopulationMandatoryError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region MandatoryConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets MandatoryConstraint.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasPopulationMandatoryError.PopulationMandatoryError
		/// </summary>
		public virtual MandatoryConstraint MandatoryConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasPopulationMandatoryError.PopulationMandatoryErrorDomainRoleId) as MandatoryConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasPopulationMandatoryError.PopulationMandatoryErrorDomainRoleId, value);
			}
		}
		#endregion
		#region ObjectTypeInstance opposite domain role accessor
		/// <summary>
		/// Gets or sets ObjectTypeInstance.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError.PopulationMandatoryError
		/// </summary>
		public virtual ObjectTypeInstance ObjectTypeInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError.PopulationMandatoryErrorDomainRoleId) as ObjectTypeInstance;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError.PopulationMandatoryErrorDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass ObjectifiedInstanceRequiredError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedInstanceRequiredError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedInstanceRequiredError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("0b96d8aa-7eb3-4b6e-b45e-f94e8c63064a")]
	public partial class ObjectifiedInstanceRequiredError : ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ObjectifiedInstanceRequiredError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0b96d8aa, 0x7eb3, 0x4b6e, 0xb4, 0x5e, 0xf9, 0x4e, 0x8c, 0x63, 0x06, 0x4a);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ObjectifiedInstanceRequiredError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ObjectifiedInstanceRequiredError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ObjectTypeInstance opposite domain role accessor
		/// <summary>
		/// Gets or sets ObjectTypeInstance.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifyingInstanceHasObjectifiedInstanceRequiredError.ObjectifiedInstanceRequiredError
		/// </summary>
		public virtual ObjectTypeInstance ObjectTypeInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifyingInstanceHasObjectifiedInstanceRequiredError.ObjectifiedInstanceRequiredErrorDomainRoleId) as ObjectTypeInstance;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifyingInstanceHasObjectifiedInstanceRequiredError.ObjectTypeInstanceDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifyingInstanceHasObjectifiedInstanceRequiredError.ObjectTypeInstanceDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifyingInstanceHasObjectifiedInstanceRequiredError.ObjectifiedInstanceRequiredErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass ObjectifyingInstanceRequiredError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifyingInstanceRequiredError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifyingInstanceRequiredError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("23808265-c2be-4e03-b555-a4db84cf053c")]
	public partial class ObjectifyingInstanceRequiredError : ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ObjectifyingInstanceRequiredError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x23808265, 0xc2be, 0x4e03, 0xb5, 0x55, 0xa4, 0xdb, 0x84, 0xcf, 0x05, 0x3c);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ObjectifyingInstanceRequiredError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ObjectifyingInstanceRequiredError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region FactTypeInstance opposite domain role accessor
		/// <summary>
		/// Gets or sets FactTypeInstance.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedInstanceHasObjectifyingInstanceRequiredError.ObjectifyingInstanceRequiredError
		/// </summary>
		public virtual FactTypeInstance FactTypeInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedInstanceHasObjectifyingInstanceRequiredError.ObjectifyingInstanceRequiredErrorDomainRoleId) as FactTypeInstance;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedInstanceHasObjectifyingInstanceRequiredError.FactTypeInstanceDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedInstanceHasObjectifyingInstanceRequiredError.FactTypeInstanceDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedInstanceHasObjectifyingInstanceRequiredError.ObjectifyingInstanceRequiredErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass ConstraintDuplicateNameError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintDuplicateNameError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintDuplicateNameError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("aa63e81b-6978-49a2-a4ac-86022a172edd")]
	public partial class ConstraintDuplicateNameError : DuplicateNameError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ConstraintDuplicateNameError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xaa63e81b, 0x6978, 0x49a2, 0xa4, 0xac, 0x86, 0x02, 0x2a, 0x17, 0x2e, 0xdd);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ConstraintDuplicateNameError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ConstraintDuplicateNameError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region SetConstraintCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SetConstraintCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDuplicateNameError.DuplicateNameError
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<SetConstraint> SetConstraintCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<SetConstraint>, SetConstraint>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDuplicateNameError.DuplicateNameErrorDomainRoleId);
			}
		}
		#endregion
		#region SetComparisonConstraintCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SetComparisonConstraintCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDuplicateNameError.DuplicateNameError
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<SetComparisonConstraint> SetComparisonConstraintCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<SetComparisonConstraint>, SetComparisonConstraint>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDuplicateNameError.DuplicateNameErrorDomainRoleId);
			}
		}
		#endregion
		#region ValueConstraintCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ValueConstraintCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDuplicateNameError.DuplicateNameError
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ValueConstraint> ValueConstraintCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ValueConstraint>, ValueConstraint>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDuplicateNameError.DuplicateNameErrorDomainRoleId);
			}
		}
		#endregion
		#region CardinalityConstraintCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of CardinalityConstraintCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDuplicateNameError.DuplicateNameError
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<CardinalityConstraint> CardinalityConstraintCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<CardinalityConstraint>, CardinalityConstraint>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDuplicateNameError.DuplicateNameErrorDomainRoleId);
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass DuplicateNameError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DuplicateNameError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DuplicateNameError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("9e29c624-4559-4020-9163-7b5846c94c0c")]
	public abstract partial class DuplicateNameError : ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DuplicateNameError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9e29c624, 0x4559, 0x4020, 0x91, 0x63, 0x7b, 0x58, 0x46, 0xc9, 0x4c, 0x0c);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected DuplicateNameError(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass TooFewReadingRolesError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.TooFewReadingRolesError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.TooFewReadingRolesError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("1d2b23ef-456e-4e80-91d8-fb384f779a54")]
	public partial class TooFewReadingRolesError : ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// TooFewReadingRolesError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1d2b23ef, 0x456e, 0x4e80, 0x91, 0xd8, 0xfb, 0x38, 0x4f, 0x77, 0x9a, 0x54);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TooFewReadingRolesError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TooFewReadingRolesError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Reading opposite domain role accessor
		/// <summary>
		/// Gets or sets Reading.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooFewRolesError.TooFewRolesError
		/// </summary>
		public virtual Reading Reading
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooFewRolesError.TooFewRolesErrorDomainRoleId) as Reading;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooFewRolesError.ReadingDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooFewRolesError.ReadingDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooFewRolesError.TooFewRolesErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass TooManyReadingRolesError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.TooManyReadingRolesError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.TooManyReadingRolesError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("50c98172-412c-40c0-add3-82809c3d82f7")]
	public partial class TooManyReadingRolesError : ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// TooManyReadingRolesError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x50c98172, 0x412c, 0x40c0, 0xad, 0xd3, 0x82, 0x80, 0x9c, 0x3d, 0x82, 0xf7);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TooManyReadingRolesError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TooManyReadingRolesError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Reading opposite domain role accessor
		/// <summary>
		/// Gets or sets Reading.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooManyRolesError.TooManyRolesError
		/// </summary>
		public virtual Reading Reading
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooManyRolesError.TooManyRolesErrorDomainRoleId) as Reading;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooManyRolesError.ReadingDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooManyRolesError.ReadingDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooManyRolesError.TooManyRolesErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass ExternalConstraintRoleSequenceArityMismatchError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ExternalConstraintRoleSequenceArityMismatchError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ExternalConstraintRoleSequenceArityMismatchError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("3da5385a-d9de-4f3d-9d2e-ca79f10ab542")]
	public partial class ExternalConstraintRoleSequenceArityMismatchError : ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ExternalConstraintRoleSequenceArityMismatchError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3da5385a, 0xd9de, 0x4f3d, 0x9d, 0x2e, 0xca, 0x79, 0xf1, 0x0a, 0xb5, 0x42);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ExternalConstraintRoleSequenceArityMismatchError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ExternalConstraintRoleSequenceArityMismatchError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Constraint opposite domain role accessor
		/// <summary>
		/// Gets or sets Constraint.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ArityMismatchError
		/// </summary>
		public virtual SetComparisonConstraint Constraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ArityMismatchErrorDomainRoleId) as SetComparisonConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ArityMismatchErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass FactTypeRequiresReadingError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRequiresReadingError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRequiresReadingError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("3eca7e92-45b2-45bd-bad3-6af0c4b40e70")]
	public partial class FactTypeRequiresReadingError : ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// FactTypeRequiresReadingError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3eca7e92, 0x45b2, 0x45bd, 0xba, 0xd3, 0x6a, 0xf0, 0xc4, 0xb4, 0x0e, 0x70);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FactTypeRequiresReadingError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FactTypeRequiresReadingError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region FactType opposite domain role accessor
		/// <summary>
		/// Gets or sets FactType.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresReadingError.ReadingRequiredError
		/// </summary>
		public virtual FactType FactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresReadingError.ReadingRequiredErrorDomainRoleId) as FactType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresReadingError.FactTypeDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresReadingError.FactTypeDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresReadingError.ReadingRequiredErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass FactTypeRequiresInternalUniquenessConstraintError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRequiresInternalUniquenessConstraintError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeRequiresInternalUniquenessConstraintError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("295d4b3d-1351-431d-b72f-28661d744b58")]
	public partial class FactTypeRequiresInternalUniquenessConstraintError : ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// FactTypeRequiresInternalUniquenessConstraintError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x295d4b3d, 0x1351, 0x431d, 0xb7, 0x2f, 0x28, 0x66, 0x1d, 0x74, 0x4b, 0x58);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FactTypeRequiresInternalUniquenessConstraintError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FactTypeRequiresInternalUniquenessConstraintError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region FactType opposite domain role accessor
		/// <summary>
		/// Gets or sets FactType.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.InternalUniquenessConstraintRequiredError
		/// </summary>
		public virtual FactType FactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.InternalUniquenessConstraintRequiredErrorDomainRoleId) as FactType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.FactTypeDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.FactTypeDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.InternalUniquenessConstraintRequiredErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass DataTypeNotSpecifiedError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DataTypeNotSpecifiedError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DataTypeNotSpecifiedError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("8afa102f-529c-4896-aeb3-9d714e28fc61")]
	public partial class DataTypeNotSpecifiedError : ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DataTypeNotSpecifiedError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8afa102f, 0x529c, 0x4896, 0xae, 0xb3, 0x9d, 0x71, 0x4e, 0x28, 0xfc, 0x61);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DataTypeNotSpecifiedError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DataTypeNotSpecifiedError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ValueTypeHasDataType opposite domain role accessor
		/// <summary>
		/// Gets or sets ValueTypeHasDataType.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.DataTypeNotSpecifiedError
		/// </summary>
		public virtual ValueTypeHasDataType ValueTypeHasDataType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.DataTypeNotSpecifiedErrorDomainRoleId) as ValueTypeHasDataType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.ValueTypeHasDataTypeDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.ValueTypeHasDataTypeDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.DataTypeNotSpecifiedErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass NMinusOneError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NMinusOneError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NMinusOneError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("497754b3-5176-4712-bc46-2e4377354c8b")]
	public partial class NMinusOneError : ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// NMinusOneError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x497754b3, 0x5176, 0x4712, 0xbc, 0x46, 0x2e, 0x43, 0x77, 0x35, 0x4c, 0x8b);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public NMinusOneError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public NMinusOneError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Constraint opposite domain role accessor
		/// <summary>
		/// Gets or sets Constraint.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraintHasNMinusOneError.NMinusOneError
		/// </summary>
		public virtual UniquenessConstraint Constraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraintHasNMinusOneError.NMinusOneErrorDomainRoleId) as UniquenessConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraintHasNMinusOneError.ConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraintHasNMinusOneError.ConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraintHasNMinusOneError.NMinusOneErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass CompatibleRolePlayerTypeError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CompatibleRolePlayerTypeError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CompatibleRolePlayerTypeError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("5c8d3150-2604-44fc-a468-b678f9b4206e")]
	public partial class CompatibleRolePlayerTypeError : ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// CompatibleRolePlayerTypeError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5c8d3150, 0x2604, 0x44fc, 0xa4, 0x68, 0xb6, 0x78, 0xf9, 0xb4, 0x20, 0x6e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CompatibleRolePlayerTypeError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CompatibleRolePlayerTypeError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Column domain property code
		
		/// <summary>
		/// Column domain property Id.
		/// </summary>
		public static readonly global::System.Guid ColumnDomainPropertyId = new global::System.Guid(0x222dcf1c, 0x83fb, 0x43f1, 0xa8, 0xbe, 0x3d, 0x05, 0xb8, 0xcf, 0x16, 0x93);
		
		/// <summary>
		/// Storage for Column
		/// </summary>
		private global::System.Int32 columnPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Column domain property.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.CompatibleRolePlayerTypeError.Column
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CompatibleRolePlayerTypeError/Column.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CompatibleRolePlayerTypeError/Column.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("222dcf1c-83fb-43f1-a8be-3d05b8cf1693")]
		public global::System.Int32 Column
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return columnPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ColumnPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CompatibleRolePlayerTypeError.Column domain property.
		/// </summary>
		internal sealed partial class ColumnPropertyHandler : DslModeling::DomainPropertyValueHandler<CompatibleRolePlayerTypeError, global::System.Int32>
		{
			private ColumnPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CompatibleRolePlayerTypeError.Column domain property value handler.
			/// </summary>
			public static readonly ColumnPropertyHandler Instance = new ColumnPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CompatibleRolePlayerTypeError.Column domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ColumnDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(CompatibleRolePlayerTypeError element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.columnPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CompatibleRolePlayerTypeError element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.columnPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SetComparisonConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets SetComparisonConstraint.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeError
		/// </summary>
		public virtual SetComparisonConstraint SetComparisonConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorDomainRoleId) as SetComparisonConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorDomainRoleId, value);
			}
		}
		#endregion
		#region SetConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets SetConstraint.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeError
		/// </summary>
		public virtual SetConstraint SetConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorDomainRoleId) as SetConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.SetConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.SetConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass SupersetRoleOfSubtypeSubsetConstraintNotSubtypeError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SupersetRoleOfSubtypeSubsetConstraintNotSubtypeError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SupersetRoleOfSubtypeSubsetConstraintNotSubtypeError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("1649968f-396d-484e-ab69-0fcd0453ef19")]
	public partial class SupersetRoleOfSubtypeSubsetConstraintNotSubtypeError : ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SupersetRoleOfSubtypeSubsetConstraintNotSubtypeError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1649968f, 0x396d, 0x484e, 0xab, 0x69, 0x0f, 0xcd, 0x04, 0x53, 0xef, 0x19);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SupersetRoleOfSubtypeSubsetConstraintNotSubtypeError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SupersetRoleOfSubtypeSubsetConstraintNotSubtypeError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region SubsetConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets SubsetConstraint.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError.SupersetRoleOfSubtypeSubsetConstraintNotSubtypeError
		/// </summary>
		public virtual SubsetConstraint SubsetConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError.SupersetRoleOfSubtypeSubsetConstraintNotSubtypeErrorDomainRoleId) as SubsetConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError.SubsetConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError.SubsetConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError.SupersetRoleOfSubtypeSubsetConstraintNotSubtypeErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass JoinPathRequiredError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.JoinPathRequiredError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.JoinPathRequiredError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("153c3ff6-a7f9-4d82-8b6b-8a61d3f40889")]
	public partial class JoinPathRequiredError : ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// JoinPathRequiredError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x153c3ff6, 0xa7f9, 0x4d82, 0x8b, 0x6b, 0x8a, 0x61, 0xd3, 0xf4, 0x08, 0x89);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public JoinPathRequiredError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public JoinPathRequiredError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region RoleSequence opposite domain role accessor
		/// <summary>
		/// Gets or sets RoleSequence.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPathRequiredError.JoinPathRequiredError
		/// </summary>
		public virtual ConstraintRoleSequence RoleSequence
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPathRequiredError.JoinPathRequiredErrorDomainRoleId) as ConstraintRoleSequence;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPathRequiredError.RoleSequenceDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPathRequiredError.RoleSequenceDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPathRequiredError.JoinPathRequiredErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass RolePlayerRequiredError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePlayerRequiredError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RolePlayerRequiredError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("59a21fde-d979-4b18-9088-707b79fce19e")]
	public partial class RolePlayerRequiredError : ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// RolePlayerRequiredError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x59a21fde, 0xd979, 0x4b18, 0x90, 0x88, 0x70, 0x7b, 0x79, 0xfc, 0xe1, 0x9e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RolePlayerRequiredError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RolePlayerRequiredError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Role opposite domain role accessor
		/// <summary>
		/// Gets or sets Role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasRolePlayerRequiredError.RolePlayerRequiredError
		/// </summary>
		public virtual Role Role
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasRolePlayerRequiredError.RolePlayerRequiredErrorDomainRoleId) as Role;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasRolePlayerRequiredError.RoleDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasRolePlayerRequiredError.RoleDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasRolePlayerRequiredError.RolePlayerRequiredErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass EntityTypeRequiresReferenceSchemeError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRequiresReferenceSchemeError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeRequiresReferenceSchemeError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("a9177733-169b-418a-a843-3e3777dc9982")]
	public partial class EntityTypeRequiresReferenceSchemeError : ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// EntityTypeRequiresReferenceSchemeError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa9177733, 0x169b, 0x418a, 0xa8, 0x43, 0x3e, 0x37, 0x77, 0xdc, 0x99, 0x82);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EntityTypeRequiresReferenceSchemeError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EntityTypeRequiresReferenceSchemeError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ObjectType opposite domain role accessor
		/// <summary>
		/// Gets or sets ObjectType.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ReferenceSchemeError
		/// </summary>
		public virtual ObjectType ObjectType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ReferenceSchemeErrorDomainRoleId) as ObjectType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ObjectTypeDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ObjectTypeDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ReferenceSchemeErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass FrequencyConstraintMinMaxError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintMinMaxError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintMinMaxError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("5586c408-1a46-4ca7-8b0d-0462cd904009")]
	public partial class FrequencyConstraintMinMaxError : ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// FrequencyConstraintMinMaxError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5586c408, 0x1a46, 0x4ca7, 0x8b, 0x0d, 0x04, 0x62, 0xcd, 0x90, 0x40, 0x09);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FrequencyConstraintMinMaxError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FrequencyConstraintMinMaxError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region FrequencyConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets FrequencyConstraint.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintMinMaxError
		/// </summary>
		public virtual FrequencyConstraint FrequencyConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintMinMaxErrorDomainRoleId) as FrequencyConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintMinMaxErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass FrequencyConstraintExactlyOneError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintExactlyOneError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintExactlyOneError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("9bbff3c2-329b-4956-8ffa-1c6f305cf601")]
	public partial class FrequencyConstraintExactlyOneError : ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// FrequencyConstraintExactlyOneError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9bbff3c2, 0x329b, 0x4956, 0x8f, 0xfa, 0x1c, 0x6f, 0x30, 0x5c, 0xf6, 0x01);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FrequencyConstraintExactlyOneError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FrequencyConstraintExactlyOneError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region FrequencyConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets FrequencyConstraint.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintExactlyOneError.FrequencyConstraintExactlyOneError
		/// </summary>
		public virtual FrequencyConstraint FrequencyConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintExactlyOneError.FrequencyConstraintExactlyOneErrorDomainRoleId) as FrequencyConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintExactlyOneError.FrequencyConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintExactlyOneError.FrequencyConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintExactlyOneError.FrequencyConstraintExactlyOneErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass FrequencyConstraintNonRestrictiveRangeError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintNonRestrictiveRangeError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintNonRestrictiveRangeError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("0f5d1cdc-dd98-41cf-9fa8-5328b6f7b8a6")]
	public partial class FrequencyConstraintNonRestrictiveRangeError : ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// FrequencyConstraintNonRestrictiveRangeError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0f5d1cdc, 0xdd98, 0x41cf, 0x9f, 0xa8, 0x53, 0x28, 0xb6, 0xf7, 0xb8, 0xa6);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FrequencyConstraintNonRestrictiveRangeError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FrequencyConstraintNonRestrictiveRangeError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region FrequencyConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets FrequencyConstraint.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError.FrequencyConstraintNonRestrictiveRangeError
		/// </summary>
		public virtual FrequencyConstraint FrequencyConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError.FrequencyConstraintNonRestrictiveRangeErrorDomainRoleId) as FrequencyConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError.FrequencyConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError.FrequencyConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError.FrequencyConstraintNonRestrictiveRangeErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass ReadingRequiresUserModificationError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingRequiresUserModificationError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingRequiresUserModificationError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("56d0b016-eaf3-4e4f-b17a-7f7987ebc0cb")]
	public partial class ReadingRequiresUserModificationError : ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ReadingRequiresUserModificationError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x56d0b016, 0xeaf3, 0x4e4f, 0xb1, 0x7a, 0x7f, 0x79, 0x87, 0xeb, 0xc0, 0xcb);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ReadingRequiresUserModificationError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ReadingRequiresUserModificationError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Reading opposite domain role accessor
		/// <summary>
		/// Gets or sets Reading.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasReadingRequiresUserModificationError.RequiresUserModificationError
		/// </summary>
		public virtual Reading Reading
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasReadingRequiresUserModificationError.RequiresUserModificationErrorDomainRoleId) as Reading;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasReadingRequiresUserModificationError.ReadingDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasReadingRequiresUserModificationError.ReadingDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasReadingRequiresUserModificationError.RequiresUserModificationErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass ModelError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (ErrorText = {errorTextPropertyStorage})")]
	[DslModeling::DomainObjectId("16df5c5e-83ef-4edc-b54a-56d58d62d982")]
	public abstract partial class ModelError : ORMModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ModelError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x16df5c5e, 0x83ef, 0x4edc, 0xb5, 0x4a, 0x56, 0xd5, 0x8d, 0x62, 0xd9, 0x82);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ModelError(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ErrorText domain property code
		
		/// <summary>
		/// ErrorText domain property Id.
		/// </summary>
		public static readonly global::System.Guid ErrorTextDomainPropertyId = new global::System.Guid(0x6a6023e7, 0xac27, 0x4d86, 0xaf, 0xe4, 0x64, 0x28, 0x65, 0x9a, 0x04, 0x8e);
		
		/// <summary>
		/// Storage for ErrorText
		/// </summary>
		private global::System.String errorTextPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ErrorText domain property.
		/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.ModelError.ErrorText
		/// </summary>
		[global::System.ComponentModel.MergableProperty(false)]
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelError/ErrorText.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelError/ErrorText.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("6a6023e7-ac27-4d86-afe4-6428659a048e")]
		public global::System.String ErrorText
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return errorTextPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ErrorTextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelError.ErrorText domain property.
		/// </summary>
		internal sealed partial class ErrorTextPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelError, global::System.String>
		{
			private ErrorTextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelError.ErrorText domain property value handler.
			/// </summary>
			public static readonly ErrorTextPropertyHandler Instance = new ErrorTextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelError.ErrorText domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ErrorTextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelError element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.errorTextPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelError element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.errorTextPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ErrorState domain property code
		
		/// <summary>
		/// ErrorState domain property Id.
		/// </summary>
		public static readonly global::System.Guid ErrorStateDomainPropertyId = new global::System.Guid(0xbcf4414e, 0x89a0, 0x4ec0, 0x9b, 0x3a, 0x11, 0x8a, 0xbe, 0xfa, 0xdf, 0xe2);
		
		/// <summary>
		/// Storage for ErrorState
		/// </summary>
		private ModelErrorState errorStatePropertyStorage = ModelErrorState.Error;
		
		/// <summary>
		/// Gets or sets the value of ErrorState domain property.
		/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.ModelError.ErrorState
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelError/ErrorState.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelError/ErrorState.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue(ModelErrorState.Error)]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("bcf4414e-89a0-4ec0-9b3a-118abefadfe2")]
		public ModelErrorState ErrorState
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return errorStatePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ErrorStatePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelError.ErrorState domain property.
		/// </summary>
		internal sealed partial class ErrorStatePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelError, ModelErrorState>
		{
			private ErrorStatePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelError.ErrorState domain property value handler.
			/// </summary>
			public static readonly ErrorStatePropertyHandler Instance = new ErrorStatePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelError.ErrorState domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ErrorStateDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed ModelErrorState GetValue(ModelError element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.errorStatePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelError element, ModelErrorState newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				ModelErrorState oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.errorStatePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasError.Error
		/// </summary>
		public virtual ORMModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasError.ErrorDomainRoleId) as ORMModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasError.ErrorDomainRoleId, value);
			}
		}
		#endregion
		#region AssociatedElementCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of AssociatedElementCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelError
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<global::Microsoft.VisualStudio.Modeling.ModelElement> AssociatedElementCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<global::Microsoft.VisualStudio.Modeling.ModelElement>, global::Microsoft.VisualStudio.Modeling.ModelElement>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementAssociatedWithModelError.ModelErrorDomainRoleId);
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass ReferenceModeKind
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeKind.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeKind.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("7ec5e835-5eeb-4fb1-aa09-9bd6aba531e1")]
	public partial class ReferenceModeKind : ORMModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ReferenceModeKind domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7ec5e835, 0x5eeb, 0x4fb1, 0xaa, 0x09, 0x9b, 0xd6, 0xab, 0xa5, 0x31, 0xe1);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ReferenceModeKind(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ReferenceModeKind(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region FormatString domain property code
		
		/// <summary>
		/// FormatString domain property Id.
		/// </summary>
		public static readonly global::System.Guid FormatStringDomainPropertyId = new global::System.Guid(0x3d1b9c67, 0xff56, 0x4345, 0xb4, 0x45, 0x30, 0xf1, 0xf3, 0x36, 0x76, 0x13);
		
		/// <summary>
		/// Storage for FormatString
		/// </summary>
		private global::System.String formatStringPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of FormatString domain property.
		/// Default format string for reference mode patterns with this ReferenceModeKind.
		/// Replacement field {0}=EntityTypeName, {1}=ReferenceModeName
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeKind/FormatString.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeKind/FormatString.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("3d1b9c67-ff56-4345-b445-30f1f3367613")]
		public global::System.String FormatString
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return formatStringPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				FormatStringPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ReferenceModeKind.FormatString domain property.
		/// </summary>
		internal sealed partial class FormatStringPropertyHandler : DslModeling::DomainPropertyValueHandler<ReferenceModeKind, global::System.String>
		{
			private FormatStringPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ReferenceModeKind.FormatString domain property value handler.
			/// </summary>
			public static readonly FormatStringPropertyHandler Instance = new FormatStringPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ReferenceModeKind.FormatString domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return FormatStringDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ReferenceModeKind element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.formatStringPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ReferenceModeKind element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.formatStringPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ReferenceModeType domain property code
		
		/// <summary>
		/// ReferenceModeType domain property Id.
		/// </summary>
		public static readonly global::System.Guid ReferenceModeTypeDomainPropertyId = new global::System.Guid(0x3543e2cb, 0x037d, 0x4d6e, 0xa7, 0x6a, 0x10, 0xcb, 0xdf, 0xb0, 0x51, 0x46);
		
		/// <summary>
		/// Storage for ReferenceModeType
		/// </summary>
		private ReferenceModeType referenceModeTypePropertyStorage = ReferenceModeType.General;
		
		/// <summary>
		/// Gets or sets the value of ReferenceModeType domain property.
		/// One of Popular, UnitBased, or General.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeKind/ReferenceModeType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeKind/ReferenceModeType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue(ReferenceModeType.General)]
		[DslModeling::DomainObjectId("3543e2cb-037d-4d6e-a76a-10cbdfb05146")]
		public ReferenceModeType ReferenceModeType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return referenceModeTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ReferenceModeTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ReferenceModeKind.ReferenceModeType domain property.
		/// </summary>
		internal sealed partial class ReferenceModeTypePropertyHandler : DslModeling::DomainPropertyValueHandler<ReferenceModeKind, ReferenceModeType>
		{
			private ReferenceModeTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ReferenceModeKind.ReferenceModeType domain property value handler.
			/// </summary>
			public static readonly ReferenceModeTypePropertyHandler Instance = new ReferenceModeTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ReferenceModeKind.ReferenceModeType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ReferenceModeTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed ReferenceModeType GetValue(ReferenceModeKind element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.referenceModeTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ReferenceModeKind element, ReferenceModeType newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				ReferenceModeType oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.referenceModeTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceModeKind.ReferenceModeKind
		/// </summary>
		public virtual ORMModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceModeKind.ReferenceModeKindDomainRoleId) as ORMModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceModeKind.ReferenceModeKindDomainRoleId, value);
			}
		}
		#endregion
		#region ReferenceModeCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ReferenceModeCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeHasReferenceModeKind.Kind
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ReferenceMode> ReferenceModeCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ReferenceMode>, ReferenceMode>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeHasReferenceModeKind.KindDomainRoleId);
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass IntrinsicReferenceMode
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.IntrinsicReferenceMode.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.IntrinsicReferenceMode.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("f34a46fd-d7ea-4423-b40f-90a6662cadb9")]
	public partial class IntrinsicReferenceMode : ReferenceMode
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// IntrinsicReferenceMode domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf34a46fd, 0xd7ea, 0x4423, 0xb4, 0x0f, 0x90, 0xa6, 0x66, 0x2c, 0xad, 0xb9);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public IntrinsicReferenceMode(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public IntrinsicReferenceMode(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass CustomReferenceMode
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CustomReferenceMode.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CustomReferenceMode.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("bb33470d-3c98-4b2e-9134-9347c8008861")]
	public partial class CustomReferenceMode : ReferenceMode
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// CustomReferenceMode domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbb33470d, 0x3c98, 0x4b2e, 0x91, 0x34, 0x93, 0x47, 0xc8, 0x00, 0x88, 0x61);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CustomReferenceMode(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CustomReferenceMode(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region CustomFormatString domain property code
		
		/// <summary>
		/// CustomFormatString domain property Id.
		/// </summary>
		public static readonly global::System.Guid CustomFormatStringDomainPropertyId = new global::System.Guid(0x4a7202ff, 0x1d4f, 0x4770, 0x95, 0x3a, 0xd6, 0x3a, 0xda, 0x84, 0x9c, 0xb3);
		
		/// <summary>
		/// Storage for CustomFormatString
		/// </summary>
		private global::System.String customFormatStringPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of CustomFormatString domain property.
		/// Custom format string for this reference mode pattern. Replacement field
		/// {0}=EntityTypeName, {1}=ReferenceModeName
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CustomReferenceMode/CustomFormatString.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CustomReferenceMode/CustomFormatString.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("4a7202ff-1d4f-4770-953a-d63ada849cb3")]
		public global::System.String CustomFormatString
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return customFormatStringPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CustomFormatStringPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CustomReferenceMode.CustomFormatString domain property.
		/// </summary>
		internal sealed partial class CustomFormatStringPropertyHandler : DslModeling::DomainPropertyValueHandler<CustomReferenceMode, global::System.String>
		{
			private CustomFormatStringPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CustomReferenceMode.CustomFormatString domain property value handler.
			/// </summary>
			public static readonly CustomFormatStringPropertyHandler Instance = new CustomFormatStringPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CustomReferenceMode.CustomFormatString domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CustomFormatStringDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(CustomReferenceMode element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.customFormatStringPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CustomReferenceMode element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.customFormatStringPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass ReferenceMode
	/// </summary>
	[global::System.ComponentModel.TypeDescriptionProvider(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.ElementTypeDescriptionProvider<ReferenceMode, Design.ReferenceModeTypeDescriptor>))]
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceMode.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceMode.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("5123d945-262c-42b7-838d-1b7f4e5a911c")]
	public abstract partial class ReferenceMode : ORMNamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ReferenceMode domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5123d945, 0x262c, 0x42b7, 0x83, 0x8d, 0x1b, 0x7f, 0x4e, 0x5a, 0x91, 0x1c);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ReferenceMode(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceMode.ReferenceMode
		/// </summary>
		public virtual ORMModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceMode.ReferenceModeDomainRoleId) as ORMModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceMode.ReferenceModeDomainRoleId, value);
			}
		}
		#endregion
		#region Kind opposite domain role accessor
		/// <summary>
		/// Gets or sets Kind.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeHasReferenceModeKind.ReferenceMode
		/// </summary>
		public virtual ReferenceModeKind Kind
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeHasReferenceModeKind.ReferenceModeDomainRoleId) as ReferenceModeKind;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeHasReferenceModeKind.ReferenceModeDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass UnspecifiedDataType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.UnspecifiedDataType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.UnspecifiedDataType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("b7dda0a4-c18a-4e85-8259-f529fc45f72e")]
	public partial class UnspecifiedDataType : DataType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// UnspecifiedDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb7dda0a4, 0xc18a, 0x4e85, 0x82, 0x59, 0xf5, 0x29, 0xfc, 0x45, 0xf7, 0x2e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public UnspecifiedDataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public UnspecifiedDataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass FixedLengthTextDataType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FixedLengthTextDataType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FixedLengthTextDataType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("2b525c4c-9b55-4c8d-98bb-63739e9d7c3d")]
	public partial class FixedLengthTextDataType : TextDataType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// FixedLengthTextDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2b525c4c, 0x9b55, 0x4c8d, 0x98, 0xbb, 0x63, 0x73, 0x9e, 0x9d, 0x7c, 0x3d);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FixedLengthTextDataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FixedLengthTextDataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass VariableLengthTextDataType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.VariableLengthTextDataType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.VariableLengthTextDataType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("6f30de79-85be-4194-b362-a39023a0e200")]
	public partial class VariableLengthTextDataType : TextDataType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// VariableLengthTextDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6f30de79, 0x85be, 0x4194, 0xb3, 0x62, 0xa3, 0x90, 0x23, 0xa0, 0xe2, 0x00);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public VariableLengthTextDataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public VariableLengthTextDataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass LargeLengthTextDataType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.LargeLengthTextDataType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.LargeLengthTextDataType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("27cbcb76-fac5-436a-950a-cc428fec9eed")]
	public partial class LargeLengthTextDataType : TextDataType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// LargeLengthTextDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x27cbcb76, 0xfac5, 0x436a, 0x95, 0x0a, 0xcc, 0x42, 0x8f, 0xec, 0x9e, 0xed);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public LargeLengthTextDataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public LargeLengthTextDataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass TextDataType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.TextDataType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.TextDataType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("e1be56bd-6663-4f5c-af6a-39e03dfb2bfa")]
	public abstract partial class TextDataType : DataType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// TextDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe1be56bd, 0x6663, 0x4f5c, 0xaf, 0x6a, 0x39, 0xe0, 0x3d, 0xfb, 0x2b, 0xfa);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected TextDataType(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass SignedIntegerNumericDataType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SignedIntegerNumericDataType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SignedIntegerNumericDataType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("f4962b12-8c72-4fef-9c24-d23a5872a403")]
	public partial class SignedIntegerNumericDataType : NumericDataType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SignedIntegerNumericDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf4962b12, 0x8c72, 0x4fef, 0x9c, 0x24, 0xd2, 0x3a, 0x58, 0x72, 0xa4, 0x03);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SignedIntegerNumericDataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SignedIntegerNumericDataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass SignedSmallIntegerNumericDataType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SignedSmallIntegerNumericDataType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SignedSmallIntegerNumericDataType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("67825482-e490-4a16-b47d-53e72f4ebee3")]
	public partial class SignedSmallIntegerNumericDataType : NumericDataType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SignedSmallIntegerNumericDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x67825482, 0xe490, 0x4a16, 0xb4, 0x7d, 0x53, 0xe7, 0x2f, 0x4e, 0xbe, 0xe3);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SignedSmallIntegerNumericDataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SignedSmallIntegerNumericDataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass SignedLargeIntegerNumericDataType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SignedLargeIntegerNumericDataType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SignedLargeIntegerNumericDataType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("af56003a-52f1-4c02-b203-ef15b4cb2ae1")]
	public partial class SignedLargeIntegerNumericDataType : NumericDataType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SignedLargeIntegerNumericDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xaf56003a, 0x52f1, 0x4c02, 0xb2, 0x03, 0xef, 0x15, 0xb4, 0xcb, 0x2a, 0xe1);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SignedLargeIntegerNumericDataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SignedLargeIntegerNumericDataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass UnsignedIntegerNumericDataType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.UnsignedIntegerNumericDataType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.UnsignedIntegerNumericDataType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("9d76d09d-10f6-4db0-8890-1077a95fb364")]
	public partial class UnsignedIntegerNumericDataType : NumericDataType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// UnsignedIntegerNumericDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9d76d09d, 0x10f6, 0x4db0, 0x88, 0x90, 0x10, 0x77, 0xa9, 0x5f, 0xb3, 0x64);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public UnsignedIntegerNumericDataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public UnsignedIntegerNumericDataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass UnsignedTinyIntegerNumericDataType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.UnsignedTinyIntegerNumericDataType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.UnsignedTinyIntegerNumericDataType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("a14599a2-2b27-4e76-894f-a1814723efe9")]
	public partial class UnsignedTinyIntegerNumericDataType : NumericDataType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// UnsignedTinyIntegerNumericDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa14599a2, 0x2b27, 0x4e76, 0x89, 0x4f, 0xa1, 0x81, 0x47, 0x23, 0xef, 0xe9);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public UnsignedTinyIntegerNumericDataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public UnsignedTinyIntegerNumericDataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass UnsignedSmallIntegerNumericDataType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.UnsignedSmallIntegerNumericDataType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.UnsignedSmallIntegerNumericDataType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("0edc60e7-0548-48c3-bc6b-219af6e50a31")]
	public partial class UnsignedSmallIntegerNumericDataType : NumericDataType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// UnsignedSmallIntegerNumericDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0edc60e7, 0x0548, 0x48c3, 0xbc, 0x6b, 0x21, 0x9a, 0xf6, 0xe5, 0x0a, 0x31);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public UnsignedSmallIntegerNumericDataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public UnsignedSmallIntegerNumericDataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass UnsignedLargeIntegerNumericDataType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.UnsignedLargeIntegerNumericDataType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.UnsignedLargeIntegerNumericDataType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("0ed930f6-73c7-4e04-8898-e5f30ef3a641")]
	public partial class UnsignedLargeIntegerNumericDataType : NumericDataType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// UnsignedLargeIntegerNumericDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0ed930f6, 0x73c7, 0x4e04, 0x88, 0x98, 0xe5, 0xf3, 0x0e, 0xf3, 0xa6, 0x41);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public UnsignedLargeIntegerNumericDataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public UnsignedLargeIntegerNumericDataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass AutoCounterNumericDataType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.AutoCounterNumericDataType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.AutoCounterNumericDataType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("e2f2cd9b-5c9d-439d-aeac-a2f093ed04fe")]
	public partial class AutoCounterNumericDataType : NumericDataType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// AutoCounterNumericDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe2f2cd9b, 0x5c9d, 0x439d, 0xae, 0xac, 0xa2, 0xf0, 0x93, 0xed, 0x04, 0xfe);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public AutoCounterNumericDataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public AutoCounterNumericDataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass FloatingPointNumericDataType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FloatingPointNumericDataType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FloatingPointNumericDataType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("c82cd420-bb13-4f63-9ea7-850512e5b7dd")]
	public partial class FloatingPointNumericDataType : NumericDataType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// FloatingPointNumericDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc82cd420, 0xbb13, 0x4f63, 0x9e, 0xa7, 0x85, 0x05, 0x12, 0xe5, 0xb7, 0xdd);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FloatingPointNumericDataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FloatingPointNumericDataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass SinglePrecisionFloatingPointNumericDataType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SinglePrecisionFloatingPointNumericDataType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SinglePrecisionFloatingPointNumericDataType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("53399895-20e9-49e0-bc73-e00461387680")]
	public partial class SinglePrecisionFloatingPointNumericDataType : NumericDataType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SinglePrecisionFloatingPointNumericDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x53399895, 0x20e9, 0x49e0, 0xbc, 0x73, 0xe0, 0x04, 0x61, 0x38, 0x76, 0x80);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SinglePrecisionFloatingPointNumericDataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SinglePrecisionFloatingPointNumericDataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass DoublePrecisionFloatingPointNumericDataType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DoublePrecisionFloatingPointNumericDataType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DoublePrecisionFloatingPointNumericDataType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("f5a7b8a3-2ef5-4143-bdee-1aa762cb6e02")]
	public partial class DoublePrecisionFloatingPointNumericDataType : NumericDataType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DoublePrecisionFloatingPointNumericDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf5a7b8a3, 0x2ef5, 0x4143, 0xbd, 0xee, 0x1a, 0xa7, 0x62, 0xcb, 0x6e, 0x02);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DoublePrecisionFloatingPointNumericDataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DoublePrecisionFloatingPointNumericDataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass DecimalNumericDataType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DecimalNumericDataType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DecimalNumericDataType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("b86faadd-e5cf-4745-a796-fabd0310a4a8")]
	public partial class DecimalNumericDataType : NumericDataType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DecimalNumericDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb86faadd, 0xe5cf, 0x4745, 0xa7, 0x96, 0xfa, 0xbd, 0x03, 0x10, 0xa4, 0xa8);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DecimalNumericDataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DecimalNumericDataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass MoneyNumericDataType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.MoneyNumericDataType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.MoneyNumericDataType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("520a70da-acc3-47b2-b8ef-00af2ff6d170")]
	public partial class MoneyNumericDataType : NumericDataType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// MoneyNumericDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x520a70da, 0xacc3, 0x47b2, 0xb8, 0xef, 0x00, 0xaf, 0x2f, 0xf6, 0xd1, 0x70);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MoneyNumericDataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MoneyNumericDataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass NumericDataType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NumericDataType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NumericDataType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("cccfb38b-956f-4e71-8cdc-7a9cd7d6052c")]
	public abstract partial class NumericDataType : DataType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// NumericDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xcccfb38b, 0x956f, 0x4e71, 0x8c, 0xdc, 0x7a, 0x9c, 0xd7, 0xd6, 0x05, 0x2c);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected NumericDataType(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass FixedLengthRawDataDataType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FixedLengthRawDataDataType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FixedLengthRawDataDataType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("1aa62e47-0eb5-45b7-b1fa-ac17ef24e009")]
	public partial class FixedLengthRawDataDataType : RawDataDataType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// FixedLengthRawDataDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1aa62e47, 0x0eb5, 0x45b7, 0xb1, 0xfa, 0xac, 0x17, 0xef, 0x24, 0xe0, 0x09);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FixedLengthRawDataDataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FixedLengthRawDataDataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass VariableLengthRawDataDataType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.VariableLengthRawDataDataType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.VariableLengthRawDataDataType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("01a2ea3b-bc60-4e62-8819-26e81b8d871f")]
	public partial class VariableLengthRawDataDataType : RawDataDataType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// VariableLengthRawDataDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x01a2ea3b, 0xbc60, 0x4e62, 0x88, 0x19, 0x26, 0xe8, 0x1b, 0x8d, 0x87, 0x1f);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public VariableLengthRawDataDataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public VariableLengthRawDataDataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass LargeLengthRawDataDataType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.LargeLengthRawDataDataType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.LargeLengthRawDataDataType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("ff35ce6d-2bb6-4df4-a98c-d303a5698ad2")]
	public partial class LargeLengthRawDataDataType : RawDataDataType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// LargeLengthRawDataDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xff35ce6d, 0x2bb6, 0x4df4, 0xa9, 0x8c, 0xd3, 0x03, 0xa5, 0x69, 0x8a, 0xd2);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public LargeLengthRawDataDataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public LargeLengthRawDataDataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass PictureRawDataDataType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PictureRawDataDataType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PictureRawDataDataType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("d33dace5-3d70-4678-9325-058c1ccfd81f")]
	public partial class PictureRawDataDataType : RawDataDataType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// PictureRawDataDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd33dace5, 0x3d70, 0x4678, 0x93, 0x25, 0x05, 0x8c, 0x1c, 0xcf, 0xd8, 0x1f);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PictureRawDataDataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PictureRawDataDataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass OleObjectRawDataDataType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.OleObjectRawDataDataType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.OleObjectRawDataDataType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("0b79f4f9-09b6-408a-88a2-f8b1051c2b05")]
	public partial class OleObjectRawDataDataType : RawDataDataType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// OleObjectRawDataDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0b79f4f9, 0x09b6, 0x408a, 0x88, 0xa2, 0xf8, 0xb1, 0x05, 0x1c, 0x2b, 0x05);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public OleObjectRawDataDataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public OleObjectRawDataDataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass RawDataDataType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RawDataDataType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RawDataDataType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("c5683946-df1b-42af-947a-006dd6875ccf")]
	public abstract partial class RawDataDataType : DataType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// RawDataDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc5683946, 0xdf1b, 0x42af, 0x94, 0x7a, 0x00, 0x6d, 0xd6, 0x87, 0x5c, 0xcf);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected RawDataDataType(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass AutoTimestampTemporalDataType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.AutoTimestampTemporalDataType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.AutoTimestampTemporalDataType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("5553662c-93b7-4c7b-8723-ff56963ae644")]
	public partial class AutoTimestampTemporalDataType : TemporalDataType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// AutoTimestampTemporalDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5553662c, 0x93b7, 0x4c7b, 0x87, 0x23, 0xff, 0x56, 0x96, 0x3a, 0xe6, 0x44);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public AutoTimestampTemporalDataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public AutoTimestampTemporalDataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass TimeTemporalDataType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.TimeTemporalDataType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.TimeTemporalDataType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("13138b79-3cb9-479e-ac5b-569a755085c4")]
	public partial class TimeTemporalDataType : TemporalDataType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// TimeTemporalDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x13138b79, 0x3cb9, 0x479e, 0xac, 0x5b, 0x56, 0x9a, 0x75, 0x50, 0x85, 0xc4);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TimeTemporalDataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TimeTemporalDataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass DateTemporalDataType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DateTemporalDataType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DateTemporalDataType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("abc122e6-894b-446e-8cd4-ead7d61fcc46")]
	public partial class DateTemporalDataType : TemporalDataType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DateTemporalDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xabc122e6, 0x894b, 0x446e, 0x8c, 0xd4, 0xea, 0xd7, 0xd6, 0x1f, 0xcc, 0x46);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DateTemporalDataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DateTemporalDataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass DateAndTimeTemporalDataType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DateAndTimeTemporalDataType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DateAndTimeTemporalDataType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("a5b3a699-dfb5-4522-b024-f55bde90ac6a")]
	public partial class DateAndTimeTemporalDataType : TemporalDataType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DateAndTimeTemporalDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa5b3a699, 0xdfb5, 0x4522, 0xb0, 0x24, 0xf5, 0x5b, 0xde, 0x90, 0xac, 0x6a);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DateAndTimeTemporalDataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DateAndTimeTemporalDataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass TemporalDataType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.TemporalDataType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.TemporalDataType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("bfbef833-dd04-4db3-a167-d1314273b2c6")]
	public abstract partial class TemporalDataType : DataType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// TemporalDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbfbef833, 0xdd04, 0x4db3, 0xa1, 0x67, 0xd1, 0x31, 0x42, 0x73, 0xb2, 0xc6);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected TemporalDataType(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass TrueOrFalseLogicalDataType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.TrueOrFalseLogicalDataType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.TrueOrFalseLogicalDataType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("689ea7b7-31a8-4800-a98e-99ccd21e112c")]
	public partial class TrueOrFalseLogicalDataType : LogicalDataType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// TrueOrFalseLogicalDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x689ea7b7, 0x31a8, 0x4800, 0xa9, 0x8e, 0x99, 0xcc, 0xd2, 0x1e, 0x11, 0x2c);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TrueOrFalseLogicalDataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TrueOrFalseLogicalDataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass YesOrNoLogicalDataType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.YesOrNoLogicalDataType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.YesOrNoLogicalDataType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("7e694d96-8444-4007-bfeb-c1b0bd3f96de")]
	public partial class YesOrNoLogicalDataType : LogicalDataType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// YesOrNoLogicalDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7e694d96, 0x8444, 0x4007, 0xbf, 0xeb, 0xc1, 0xb0, 0xbd, 0x3f, 0x96, 0xde);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public YesOrNoLogicalDataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public YesOrNoLogicalDataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass LogicalDataType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.LogicalDataType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.LogicalDataType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("a7d4d492-2702-4b87-bd9e-0d7d7d85943a")]
	public abstract partial class LogicalDataType : DataType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// LogicalDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa7d4d492, 0x2702, 0x4b87, 0xbd, 0x9e, 0x0d, 0x7d, 0x7d, 0x85, 0x94, 0x3a);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected LogicalDataType(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass RowIdOtherDataType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RowIdOtherDataType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RowIdOtherDataType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("42a558f7-1a61-49a6-a207-a706faf94dd8")]
	public partial class RowIdOtherDataType : OtherDataType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// RowIdOtherDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x42a558f7, 0x1a61, 0x49a6, 0xa2, 0x07, 0xa7, 0x06, 0xfa, 0xf9, 0x4d, 0xd8);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RowIdOtherDataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RowIdOtherDataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass ObjectIdOtherDataType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectIdOtherDataType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectIdOtherDataType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("48b82dab-a7e2-4dab-8d53-9840cf7a15dd")]
	public partial class ObjectIdOtherDataType : OtherDataType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ObjectIdOtherDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x48b82dab, 0xa7e2, 0x4dab, 0x8d, 0x53, 0x98, 0x40, 0xcf, 0x7a, 0x15, 0xdd);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ObjectIdOtherDataType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ObjectIdOtherDataType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass OtherDataType
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.OtherDataType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.OtherDataType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("0b801e67-9d48-49f7-aa13-9c7bd8153624")]
	public abstract partial class OtherDataType : DataType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// OtherDataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0b801e67, 0x9d48, 0x49f7, 0xaa, 0x13, 0x9c, 0x7b, 0xd8, 0x15, 0x36, 0x24);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected OtherDataType(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass DataType
	/// </summary>
	[global::System.ComponentModel.TypeDescriptionProvider(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.ElementTypeDescriptionProvider<DataType, Design.DataTypeTypeDescriptor<DataType>>))]
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DataType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DataType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("9d0c6367-617f-4a8c-a0e5-5da23828ed61")]
	public abstract partial class DataType : ORMModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9d0c6367, 0x617f, 0x4a8c, 0xa0, 0xe5, 0x5d, 0xa2, 0x38, 0x28, 0xed, 0x61);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected DataType(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ValueTypeCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ValueTypeCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasDataType.DataType
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ObjectType> ValueTypeCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ObjectType>, ObjectType>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasDataType.DataTypeDomainRoleId);
			}
		}
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDataType.DataType
		/// </summary>
		public virtual ORMModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDataType.DataTypeDomainRoleId) as ORMModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDataType.DataTypeDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass Reading
	/// </summary>
	[global::System.ComponentModel.TypeDescriptionProvider(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.ElementTypeDescriptionProvider<Reading, Design.ReadingTypeDescriptor<Reading>>))]
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Reading.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Reading.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Signature = {signaturePropertyStorage})")]
	[DslModeling::DomainObjectId("7544854f-a4a7-4429-8859-f1d3b0e52b03")]
	public partial class Reading : ORMModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Reading domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7544854f, 0xa4a7, 0x4429, 0x88, 0x59, 0xf1, 0xd3, 0xb0, 0xe5, 0x2b, 0x03);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Reading(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Reading(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Text domain property code
		
		/// <summary>
		/// Text domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextDomainPropertyId = new global::System.Guid(0xa6239359, 0x0ac5, 0x4934, 0xb3, 0x8a, 0x01, 0x1a, 0xa1, 0xf9, 0x35, 0xa6);
		
		/// <summary>
		/// Storage for Text
		/// </summary>
		private global::System.String textPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Text domain property.
		/// The text of this reading. Includes ordered replacement fields corresponding to
		/// the parent ReadingOrder.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Reading/Text.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Reading/Text.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("a6239359-0ac5-4934-b38a-011aa1f935a6")]
		public global::System.String Text
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Reading.Text domain property.
		/// </summary>
		internal sealed partial class TextPropertyHandler : DslModeling::DomainPropertyValueHandler<Reading, global::System.String>
		{
			private TextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Reading.Text domain property value handler.
			/// </summary>
			public static readonly TextPropertyHandler Instance = new TextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Reading.Text domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Reading element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Reading element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Signature domain property code
		
		/// <summary>
		/// Signature domain property Id.
		/// </summary>
		public static readonly global::System.Guid SignatureDomainPropertyId = new global::System.Guid(0x18252981, 0xa5b1, 0x4db9, 0xba, 0x7a, 0xc7, 0xf3, 0xdd, 0xbd, 0xf6, 0x09);
		
		/// <summary>
		/// Storage for Signature
		/// </summary>
		private global::System.String signaturePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Signature domain property.
		/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.Reading.Signature
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Reading/Signature.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Reading/Signature.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("18252981-a5b1-4db9-ba7a-c7f3ddbdf609")]
		public global::System.String Signature
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return signaturePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SignaturePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Reading.Signature domain property.
		/// </summary>
		internal sealed partial class SignaturePropertyHandler : DslModeling::DomainPropertyValueHandler<Reading, global::System.String>
		{
			private SignaturePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Reading.Signature domain property value handler.
			/// </summary>
			public static readonly SignaturePropertyHandler Instance = new SignaturePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Reading.Signature domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SignatureDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Reading element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.signaturePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Reading element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.signaturePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsPrimaryForReadingOrder domain property code
		
		/// <summary>
		/// IsPrimaryForReadingOrder domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsPrimaryForReadingOrderDomainPropertyId = new global::System.Guid(0x1a989428, 0xc41c, 0x498a, 0xbd, 0x90, 0x1b, 0x92, 0xa7, 0x03, 0xaa, 0x27);
		
		/// <summary>
		/// Gets or sets the value of IsPrimaryForReadingOrder domain property.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.Reading.IsPrimaryForReadingOrder
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Reading/IsPrimaryForReadingOrder.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Reading/IsPrimaryForReadingOrder.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("1a989428-c41c-498a-bd90-1b92a703aa27")]
		public global::System.Boolean IsPrimaryForReadingOrder
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return IsPrimaryForReadingOrderPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsPrimaryForReadingOrderPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Reading.IsPrimaryForReadingOrder domain property.
		/// </summary>
		internal sealed partial class IsPrimaryForReadingOrderPropertyHandler : DslModeling::DomainPropertyValueHandler<Reading, global::System.Boolean>
		{
			private IsPrimaryForReadingOrderPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Reading.IsPrimaryForReadingOrder domain property value handler.
			/// </summary>
			public static readonly IsPrimaryForReadingOrderPropertyHandler Instance = new IsPrimaryForReadingOrderPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Reading.IsPrimaryForReadingOrder domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsPrimaryForReadingOrderDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(Reading element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for IsPrimaryForReadingOrder because its Kind is
				// set to CustomStorage. Please provide the GetIsPrimaryForReadingOrderValue()
				// method on the domain class.
				return element.GetIsPrimaryForReadingOrderValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Reading element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for IsPrimaryForReadingOrder because its Kind is
					// set to CustomStorage. Please provide the SetIsPrimaryForReadingOrderValue()
					// method on the domain class.
					element.SetIsPrimaryForReadingOrderValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Language domain property code
		
		/// <summary>
		/// Language domain property Id.
		/// </summary>
		public static readonly global::System.Guid LanguageDomainPropertyId = new global::System.Guid(0x34c42f00, 0x5d21, 0x4731, 0x8e, 0x38, 0x9a, 0x03, 0x27, 0x1f, 0x04, 0x5a);
		
		/// <summary>
		/// Storage for Language
		/// </summary>
		private global::System.String languagePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Language domain property.
		/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.Reading.Language
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Reading/Language.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Reading/Language.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("34c42f00-5d21-4731-8e38-9a03271f045a")]
		public global::System.String Language
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return languagePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				LanguagePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Reading.Language domain property.
		/// </summary>
		internal sealed partial class LanguagePropertyHandler : DslModeling::DomainPropertyValueHandler<Reading, global::System.String>
		{
			private LanguagePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Reading.Language domain property value handler.
			/// </summary>
			public static readonly LanguagePropertyHandler Instance = new LanguagePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Reading.Language domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return LanguageDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Reading element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.languagePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Reading element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.languagePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsPrimaryForFactType domain property code
		
		/// <summary>
		/// IsPrimaryForFactType domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsPrimaryForFactTypeDomainPropertyId = new global::System.Guid(0x1c5a6551, 0x972d, 0x42a6, 0xb4, 0x3d, 0xae, 0xc6, 0xd7, 0x30, 0x19, 0x77);
		
		/// <summary>
		/// Gets or sets the value of IsPrimaryForFactType domain property.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.Reading.IsPrimaryForFactType
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Reading/IsPrimaryForFactType.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Reading/IsPrimaryForFactType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("1c5a6551-972d-42a6-b43d-aec6d7301977")]
		public global::System.Boolean IsPrimaryForFactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return IsPrimaryForFactTypePropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsPrimaryForFactTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Reading.IsPrimaryForFactType domain property.
		/// </summary>
		internal sealed partial class IsPrimaryForFactTypePropertyHandler : DslModeling::DomainPropertyValueHandler<Reading, global::System.Boolean>
		{
			private IsPrimaryForFactTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Reading.IsPrimaryForFactType domain property value handler.
			/// </summary>
			public static readonly IsPrimaryForFactTypePropertyHandler Instance = new IsPrimaryForFactTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Reading.IsPrimaryForFactType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsPrimaryForFactTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(Reading element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for IsPrimaryForFactType because its Kind is
				// set to CustomStorage. Please provide the GetIsPrimaryForFactTypeValue()
				// method on the domain class.
				return element.GetIsPrimaryForFactTypeValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Reading element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for IsPrimaryForFactType because its Kind is
					// set to CustomStorage. Please provide the SetIsPrimaryForFactTypeValue()
					// method on the domain class.
					element.SetIsPrimaryForFactTypeValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DuplicateSignatureError opposite domain role accessor
		/// <summary>
		/// Gets or sets DuplicateSignatureError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasDuplicateSignatureError.Reading
		/// </summary>
		public virtual DuplicateReadingSignatureError DuplicateSignatureError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasDuplicateSignatureError.ReadingDomainRoleId) as DuplicateReadingSignatureError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasDuplicateSignatureError.ReadingDomainRoleId, value);
			}
		}
		#endregion
		#region ReadingOrder opposite domain role accessor
		/// <summary>
		/// Gets or sets ReadingOrder.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasReading.Reading
		/// </summary>
		public virtual ReadingOrder ReadingOrder
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasReading.ReadingDomainRoleId) as ReadingOrder;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasReading.ReadingDomainRoleId, value);
			}
		}
		#endregion
		#region TooManyRolesError opposite domain role accessor
		/// <summary>
		/// Gets or sets TooManyRolesError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooManyRolesError.Reading
		/// </summary>
		public virtual TooManyReadingRolesError TooManyRolesError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooManyRolesError.ReadingDomainRoleId) as TooManyReadingRolesError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooManyRolesError.TooManyRolesErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooManyRolesError.TooManyRolesErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooManyRolesError.ReadingDomainRoleId, value);
				}
			}
		}
		#endregion
		#region TooFewRolesError opposite domain role accessor
		/// <summary>
		/// Gets or sets TooFewRolesError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooFewRolesError.Reading
		/// </summary>
		public virtual TooFewReadingRolesError TooFewRolesError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooFewRolesError.ReadingDomainRoleId) as TooFewReadingRolesError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooFewRolesError.TooFewRolesErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooFewRolesError.TooFewRolesErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooFewRolesError.ReadingDomainRoleId, value);
				}
			}
		}
		#endregion
		#region RequiresUserModificationError opposite domain role accessor
		/// <summary>
		/// Gets or sets RequiresUserModificationError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasReadingRequiresUserModificationError.Reading
		/// </summary>
		public virtual ReadingRequiresUserModificationError RequiresUserModificationError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasReadingRequiresUserModificationError.ReadingDomainRoleId) as ReadingRequiresUserModificationError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasReadingRequiresUserModificationError.RequiresUserModificationErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasReadingRequiresUserModificationError.RequiresUserModificationErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasReadingRequiresUserModificationError.ReadingDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass ReadingOrder
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrder.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrder.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("7cb4a39b-d11f-48fc-bfed-b80f5d3fc54e")]
	public partial class ReadingOrder : ORMModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ReadingOrder domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7cb4a39b, 0xd11f, 0x48fc, 0xbf, 0xed, 0xb8, 0x0f, 0x5d, 0x3f, 0xc5, 0x4e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ReadingOrder(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ReadingOrder(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ReadingText domain property code
		
		/// <summary>
		/// ReadingText domain property Id.
		/// </summary>
		public static readonly global::System.Guid ReadingTextDomainPropertyId = new global::System.Guid(0x4e75ad63, 0xa42b, 0x4571, 0x85, 0xce, 0x81, 0xa4, 0xc5, 0xe0, 0x2c, 0x23);
		
		/// <summary>
		/// Gets or sets the value of ReadingText domain property.
		/// The text for the default Reading of this ReadingOrder. Includes ordered
		/// replacement fields corresponding to this ReadingOrder.
		/// </summary>
		[global::System.ComponentModel.Editor(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.Design.ReadingTextEditor), typeof(global::System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrder/ReadingText.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrder/ReadingText.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("4e75ad63-a42b-4571-85ce-81a4c5e02c23")]
		public global::System.String ReadingText
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return ReadingTextPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ReadingTextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ReadingOrder.ReadingText domain property.
		/// </summary>
		internal sealed partial class ReadingTextPropertyHandler : DslModeling::DomainPropertyValueHandler<ReadingOrder, global::System.String>
		{
			private ReadingTextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ReadingOrder.ReadingText domain property value handler.
			/// </summary>
			public static readonly ReadingTextPropertyHandler Instance = new ReadingTextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ReadingOrder.ReadingText domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ReadingTextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ReadingOrder element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for ReadingText because its Kind is
				// set to CustomStorage. Please provide the GetReadingTextValue()
				// method on the domain class.
				return element.GetReadingTextValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ReadingOrder element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for ReadingText because its Kind is
					// set to CustomStorage. Please provide the SetReadingTextValue()
					// method on the domain class.
					element.SetReadingTextValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ReadingCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ReadingCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasReading.ReadingOrder
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Reading> ReadingCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Reading>, Reading>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasReading.ReadingOrderDomainRoleId);
			}
		}
		#endregion
		#region FactType opposite domain role accessor
		/// <summary>
		/// Gets or sets FactType.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasReadingOrder.ReadingOrder
		/// </summary>
		public virtual FactType FactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasReadingOrder.ReadingOrderDomainRoleId) as FactType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasReadingOrder.ReadingOrderDomainRoleId, value);
			}
		}
		#endregion
		#region RoleCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of RoleCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasRole.ReadingOrder
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<RoleBase> RoleCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<RoleBase>, RoleBase>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasRole.ReadingOrderDomainRoleId);
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass CardinalityConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("d4ab0c22-784a-4a59-b2b9-0ea8a38db563")]
	public abstract partial class CardinalityConstraint : ORMNamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// CardinalityConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd4ab0c22, 0x784a, 0x4a59, 0xb2, 0xb9, 0x0e, 0xa8, 0xa3, 0x8d, 0xb5, 0x63);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected CardinalityConstraint(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Modality domain property code
		
		/// <summary>
		/// Modality domain property Id.
		/// </summary>
		public static readonly global::System.Guid ModalityDomainPropertyId = new global::System.Guid(0x24519d57, 0x5891, 0x4d87, 0x92, 0x87, 0xfb, 0x28, 0xfd, 0x1d, 0x57, 0xaf);
		
		/// <summary>
		/// Storage for Modality
		/// </summary>
		private ConstraintModality modalityPropertyStorage = ConstraintModality.Alethic;
		
		/// <summary>
		/// Gets or sets the value of Modality domain property.
		/// The constraint Modality.
		///     Alethic modality means the constraint is structurally enforced and data
		/// violating the constraint cannot be entered in the system;
		///     Deontic modality means that data violating the constraint can be recorded.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraint/Modality.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraint/Modality.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue(ConstraintModality.Alethic)]
		[DslModeling::DomainObjectId("24519d57-5891-4d87-9287-fb28fd1d57af")]
		public ConstraintModality Modality
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return modalityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ModalityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CardinalityConstraint.Modality domain property.
		/// </summary>
		internal sealed partial class ModalityPropertyHandler : DslModeling::DomainPropertyValueHandler<CardinalityConstraint, ConstraintModality>
		{
			private ModalityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CardinalityConstraint.Modality domain property value handler.
			/// </summary>
			public static readonly ModalityPropertyHandler Instance = new ModalityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CardinalityConstraint.Modality domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ModalityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed ConstraintModality GetValue(CardinalityConstraint element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.modalityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CardinalityConstraint element, ConstraintModality newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				ConstraintModality oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.modalityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DefinitionText domain property code
		
		/// <summary>
		/// DefinitionText domain property Id.
		/// </summary>
		public static readonly global::System.Guid DefinitionTextDomainPropertyId = new global::System.Guid(0xafee7ae8, 0x88d7, 0x4bd4, 0xaf, 0xe8, 0xea, 0xd8, 0x8f, 0x72, 0xf7, 0xc5);
		
		/// <summary>
		/// Gets or sets the value of DefinitionText domain property.
		/// An informal description of this constraint.
		///     To insert new lines, use Control-Enter in the dropdown editor, or open the
		/// 'ORM Informal Description Editor' tool window.
		/// </summary>
		[global::System.ComponentModel.Editor(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.MultilineTextEditor<global::ORMSolutions.ORMArchitect.Core.ObjectModel.Definition>), typeof(global::System.Drawing.Design.UITypeEditor))]
		[global::System.ComponentModel.MergableProperty(false)]
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraint/DefinitionText.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraint/DefinitionText.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("afee7ae8-88d7-4bd4-afe8-ead88f72f7c5")]
		public global::System.String DefinitionText
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DefinitionTextPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DefinitionTextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CardinalityConstraint.DefinitionText domain property.
		/// </summary>
		internal sealed partial class DefinitionTextPropertyHandler : DslModeling::DomainPropertyValueHandler<CardinalityConstraint, global::System.String>
		{
			private DefinitionTextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CardinalityConstraint.DefinitionText domain property value handler.
			/// </summary>
			public static readonly DefinitionTextPropertyHandler Instance = new DefinitionTextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CardinalityConstraint.DefinitionText domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DefinitionTextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(CardinalityConstraint element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for DefinitionText because its Kind is
				// set to CustomStorage. Please provide the GetDefinitionTextValue()
				// method on the domain class.
				return element.GetDefinitionTextValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CardinalityConstraint element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for DefinitionText because its Kind is
					// set to CustomStorage. Please provide the SetDefinitionTextValue()
					// method on the domain class.
					element.SetDefinitionTextValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region NoteText domain property code
		
		/// <summary>
		/// NoteText domain property Id.
		/// </summary>
		public static readonly global::System.Guid NoteTextDomainPropertyId = new global::System.Guid(0x2842701e, 0x6d94, 0x4270, 0xa0, 0x6b, 0x11, 0xf7, 0x22, 0x51, 0x1e, 0x09);
		
		/// <summary>
		/// Gets or sets the value of NoteText domain property.
		/// A note to associate with this constraint.
		///     To insert new lines, use Control-Enter in the dropdown editor, or open the
		/// 'ORM Notes Editor' tool window.
		/// </summary>
		[global::System.ComponentModel.Editor(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.MultilineTextEditor<global::ORMSolutions.ORMArchitect.Core.ObjectModel.Note>), typeof(global::System.Drawing.Design.UITypeEditor))]
		[global::System.ComponentModel.MergableProperty(false)]
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraint/NoteText.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraint/NoteText.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("2842701e-6d94-4270-a06b-11f722511e09")]
		public global::System.String NoteText
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return NoteTextPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NoteTextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CardinalityConstraint.NoteText domain property.
		/// </summary>
		internal sealed partial class NoteTextPropertyHandler : DslModeling::DomainPropertyValueHandler<CardinalityConstraint, global::System.String>
		{
			private NoteTextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CardinalityConstraint.NoteText domain property value handler.
			/// </summary>
			public static readonly NoteTextPropertyHandler Instance = new NoteTextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CardinalityConstraint.NoteText domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NoteTextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(CardinalityConstraint element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for NoteText because its Kind is
				// set to CustomStorage. Please provide the GetNoteTextValue()
				// method on the domain class.
				return element.GetNoteTextValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CardinalityConstraint element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for NoteText because its Kind is
					// set to CustomStorage. Please provide the SetNoteTextValue()
					// method on the domain class.
					element.SetNoteTextValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Text domain property code
		
		/// <summary>
		/// Text domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextDomainPropertyId = new global::System.Guid(0x6c4938a5, 0x3226, 0x4630, 0xac, 0xf5, 0x6a, 0x07, 0xe2, 0xea, 0xd6, 0xc9);
		
		/// <summary>
		/// Gets or sets the value of Text domain property.
		/// Set the ranges for this cardinality constraint. The following patterns are
		/// recognized:
		/// 
		/// Range with a zero lower bound: 0..n, ..n, &lt;n, &lt;=n
		/// Range with no upper bound: &gt;n, &gt;=n, n..
		/// Fixed range: n..m
		/// 
		/// Cardinality supports multiple non-overlapping ranges and single values. A range
		/// of 0 indicates that an empty population is allowed. For example, 0,4.. will
		/// allow either an empty population or a population with four or more instances.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraint/Text.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraint/Text.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("6c4938a5-3226-4630-acf5-6a07e2ead6c9")]
		public global::System.String Text
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return TextPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CardinalityConstraint.Text domain property.
		/// </summary>
		internal sealed partial class TextPropertyHandler : DslModeling::DomainPropertyValueHandler<CardinalityConstraint, global::System.String>
		{
			private TextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CardinalityConstraint.Text domain property value handler.
			/// </summary>
			public static readonly TextPropertyHandler Instance = new TextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CardinalityConstraint.Text domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(CardinalityConstraint element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for Text because its Kind is
				// set to CustomStorage. Please provide the GetTextValue()
				// method on the domain class.
				return element.GetTextValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CardinalityConstraint element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for Text because its Kind is
					// set to CustomStorage. Please provide the SetTextValue()
					// method on the domain class.
					element.SetTextValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TextChanged domain property code
		
		/// <summary>
		/// TextChanged domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextChangedDomainPropertyId = new global::System.Guid(0xc7b8b9ca, 0x5783, 0x485f, 0x9e, 0x47, 0x44, 0xc3, 0xaf, 0xb9, 0x5d, 0xe4);
		
		/// <summary>
		/// Gets or sets the value of TextChanged domain property.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraint.TextChanged
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraint/TextChanged.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraint/TextChanged.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("c7b8b9ca-5783-485f-9e47-44c3afb95de4")]
		public global::System.Int64 TextChanged
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return TextChangedPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextChangedPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CardinalityConstraint.TextChanged domain property.
		/// </summary>
		internal sealed partial class TextChangedPropertyHandler : DslModeling::DomainPropertyValueHandler<CardinalityConstraint, global::System.Int64>
		{
			private TextChangedPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CardinalityConstraint.TextChanged domain property value handler.
			/// </summary>
			public static readonly TextChangedPropertyHandler Instance = new TextChangedPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CardinalityConstraint.TextChanged domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextChangedDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int64 GetValue(CardinalityConstraint element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for TextChanged because its Kind is
				// set to CustomStorage. Please provide the GetTextChangedValue()
				// method on the domain class.
				return element.GetTextChangedValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CardinalityConstraint element, global::System.Int64 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int64 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for TextChanged because its Kind is
					// set to CustomStorage. Please provide the SetTextChangedValue()
					// method on the domain class.
					element.SetTextChangedValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region RangeCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of RangeCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRange.Constraint
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<CardinalityRange> RangeCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<CardinalityRange>, CardinalityRange>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRange.ConstraintDomainRoleId);
			}
		}
		#endregion
		#region CardinalityRangeOverlapError opposite domain role accessor
		/// <summary>
		/// Gets or sets CardinalityRangeOverlapError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRangeOverlapError.CardinalityConstraint
		/// </summary>
		public virtual CardinalityRangeOverlapError CardinalityRangeOverlapError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRangeOverlapError.CardinalityConstraintDomainRoleId) as CardinalityRangeOverlapError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRangeOverlapError.CardinalityRangeOverlapErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRangeOverlapError.CardinalityRangeOverlapErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRangeOverlapError.CardinalityConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
		#region DuplicateNameError opposite domain role accessor
		/// <summary>
		/// Gets or sets DuplicateNameError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDuplicateNameError.CardinalityConstraint
		/// </summary>
		public virtual ConstraintDuplicateNameError DuplicateNameError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDuplicateNameError.CardinalityConstraintDomainRoleId) as ConstraintDuplicateNameError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDuplicateNameError.CardinalityConstraintDomainRoleId, value);
			}
		}
		#endregion
		#region Definition opposite domain role accessor
		/// <summary>
		/// Gets or sets Definition.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDefinition.CardinalityConstraint
		/// </summary>
		public virtual Definition Definition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDefinition.CardinalityConstraintDomainRoleId) as Definition;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDefinition.DefinitionDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDefinition.DefinitionDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDefinition.CardinalityConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
		#region Note opposite domain role accessor
		/// <summary>
		/// Gets or sets Note.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasNote.CardinalityConstraint
		/// </summary>
		public virtual Note Note
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasNote.CardinalityConstraintDomainRoleId) as Note;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasNote.NoteDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasNote.NoteDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasNote.CardinalityConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass ObjectTypeCardinalityConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeCardinalityConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeCardinalityConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("6c1367af-7138-4fef-b3fa-db59c5eb3dcf")]
	public partial class ObjectTypeCardinalityConstraint : CardinalityConstraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ObjectTypeCardinalityConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6c1367af, 0x7138, 0x4fef, 0xb3, 0xfa, 0xdb, 0x59, 0xc5, 0xeb, 0x3d, 0xcf);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ObjectTypeCardinalityConstraint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ObjectTypeCardinalityConstraint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ObjectType opposite domain role accessor
		/// <summary>
		/// Gets or sets ObjectType.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCardinalityConstraint.CardinalityConstraint
		/// </summary>
		public virtual ObjectType ObjectType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCardinalityConstraint.CardinalityConstraintDomainRoleId) as ObjectType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCardinalityConstraint.ObjectTypeDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCardinalityConstraint.ObjectTypeDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCardinalityConstraint.CardinalityConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass UnaryRoleCardinalityConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.UnaryRoleCardinalityConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.UnaryRoleCardinalityConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("11946987-5a91-4927-96dc-348751f31d8a")]
	public partial class UnaryRoleCardinalityConstraint : CardinalityConstraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// UnaryRoleCardinalityConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x11946987, 0x5a91, 0x4927, 0x96, 0xdc, 0x34, 0x87, 0x51, 0xf3, 0x1d, 0x8a);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public UnaryRoleCardinalityConstraint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public UnaryRoleCardinalityConstraint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region UnaryRole opposite domain role accessor
		/// <summary>
		/// Gets or sets UnaryRole.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.UnaryRoleHasCardinalityConstraint.CardinalityConstraint
		/// </summary>
		public virtual Role UnaryRole
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.UnaryRoleHasCardinalityConstraint.CardinalityConstraintDomainRoleId) as Role;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.UnaryRoleHasCardinalityConstraint.UnaryRoleDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.UnaryRoleHasCardinalityConstraint.UnaryRoleDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.UnaryRoleHasCardinalityConstraint.CardinalityConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass CardinalityRange
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityRange.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityRange.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("e17143e4-62f4-4fa6-ac21-ed84af3be74e")]
	public partial class CardinalityRange : ORMModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// CardinalityRange domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe17143e4, 0x62f4, 0x4fa6, 0xac, 0x21, 0xed, 0x84, 0xaf, 0x3b, 0xe7, 0x4e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CardinalityRange(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CardinalityRange(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region LowerBound domain property code
		
		/// <summary>
		/// LowerBound domain property Id.
		/// </summary>
		public static readonly global::System.Guid LowerBoundDomainPropertyId = new global::System.Guid(0x4fe8fbf4, 0xc653, 0x4526, 0xae, 0x54, 0x02, 0xe0, 0x22, 0x5e, 0x14, 0xa9);
		
		/// <summary>
		/// Storage for LowerBound
		/// </summary>
		private global::System.Int32 lowerBoundPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of LowerBound domain property.
		/// The lower bound for the cardinality range. An equivalent upper bound indicates a
		/// discrete value. This has a minimum number of 0.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityRange/LowerBound.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityRange/LowerBound.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("4fe8fbf4-c653-4526-ae54-02e0225e14a9")]
		public global::System.Int32 LowerBound
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return lowerBoundPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				LowerBoundPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CardinalityRange.LowerBound domain property.
		/// </summary>
		internal sealed partial class LowerBoundPropertyHandler : DslModeling::DomainPropertyValueHandler<CardinalityRange, global::System.Int32>
		{
			private LowerBoundPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CardinalityRange.LowerBound domain property value handler.
			/// </summary>
			public static readonly LowerBoundPropertyHandler Instance = new LowerBoundPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CardinalityRange.LowerBound domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return LowerBoundDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(CardinalityRange element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.lowerBoundPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CardinalityRange element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.lowerBoundPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region UpperBound domain property code
		
		/// <summary>
		/// UpperBound domain property Id.
		/// </summary>
		public static readonly global::System.Guid UpperBoundDomainPropertyId = new global::System.Guid(0x4f68924a, 0x3472, 0x4916, 0x82, 0xbe, 0xe0, 0xeb, 0x46, 0xf7, 0x6a, 0x08);
		
		/// <summary>
		/// Storage for UpperBound
		/// </summary>
		private global::System.Int32 upperBoundPropertyStorage = -1;
		
		/// <summary>
		/// Gets or sets the value of UpperBound domain property.
		/// The upper bound of the range, or -1 if the range is unbounded.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityRange/UpperBound.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityRange/UpperBound.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue(-1)]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("4f68924a-3472-4916-82be-e0eb46f76a08")]
		public global::System.Int32 UpperBound
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return upperBoundPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				UpperBoundPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CardinalityRange.UpperBound domain property.
		/// </summary>
		internal sealed partial class UpperBoundPropertyHandler : DslModeling::DomainPropertyValueHandler<CardinalityRange, global::System.Int32>
		{
			private UpperBoundPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CardinalityRange.UpperBound domain property value handler.
			/// </summary>
			public static readonly UpperBoundPropertyHandler Instance = new UpperBoundPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CardinalityRange.UpperBound domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return UpperBoundDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(CardinalityRange element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.upperBoundPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CardinalityRange element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.upperBoundPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region CardinalityConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets CardinalityConstraint.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRange.Range
		/// </summary>
		public virtual CardinalityConstraint CardinalityConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRange.RangeDomainRoleId) as CardinalityConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRange.RangeDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass ValueRange
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRange.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRange.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("8987ecea-6c2a-4825-8c9f-465005272ce8")]
	public partial class ValueRange : ORMModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ValueRange domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8987ecea, 0x6c2a, 0x4825, 0x8c, 0x9f, 0x46, 0x50, 0x05, 0x27, 0x2c, 0xe8);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ValueRange(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ValueRange(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region MinValue domain property code
		
		/// <summary>
		/// MinValue domain property Id.
		/// </summary>
		public static readonly global::System.Guid MinValueDomainPropertyId = new global::System.Guid(0x59b141fd, 0x47ed, 0x43ff, 0x83, 0x7e, 0x85, 0x8f, 0x14, 0x0f, 0xad, 0x57);
		
		/// <summary>
		/// Storage for MinValue
		/// </summary>
		private global::System.String minValuePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of MinValue domain property.
		/// The lower bound for the range. An equivalent MaxValue indicates that the range
		/// represents a single value.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRange/MinValue.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRange/MinValue.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("59b141fd-47ed-43ff-837e-858f140fad57")]
		public global::System.String MinValue
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return minValuePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MinValuePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ValueRange.MinValue domain property.
		/// </summary>
		internal sealed partial class MinValuePropertyHandler : DslModeling::DomainPropertyValueHandler<ValueRange, global::System.String>
		{
			private MinValuePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ValueRange.MinValue domain property value handler.
			/// </summary>
			public static readonly MinValuePropertyHandler Instance = new MinValuePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ValueRange.MinValue domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MinValueDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ValueRange element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.minValuePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ValueRange element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.minValuePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region InvariantMinValue domain property code
		
		/// <summary>
		/// InvariantMinValue domain property Id.
		/// </summary>
		public static readonly global::System.Guid InvariantMinValueDomainPropertyId = new global::System.Guid(0xf758a122, 0xe610, 0x4611, 0x92, 0x0d, 0x46, 0x3c, 0x58, 0xbb, 0x04, 0x07);
		
		/// <summary>
		/// Storage for InvariantMinValue
		/// </summary>
		private global::System.String invariantMinValuePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of InvariantMinValue domain property.
		/// The culture-invariant form of the MinValue property.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRange/InvariantMinValue.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRange/InvariantMinValue.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("f758a122-e610-4611-920d-463c58bb0407")]
		public global::System.String InvariantMinValue
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return invariantMinValuePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				InvariantMinValuePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ValueRange.InvariantMinValue domain property.
		/// </summary>
		internal sealed partial class InvariantMinValuePropertyHandler : DslModeling::DomainPropertyValueHandler<ValueRange, global::System.String>
		{
			private InvariantMinValuePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ValueRange.InvariantMinValue domain property value handler.
			/// </summary>
			public static readonly InvariantMinValuePropertyHandler Instance = new InvariantMinValuePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ValueRange.InvariantMinValue domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return InvariantMinValueDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ValueRange element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.invariantMinValuePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ValueRange element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.invariantMinValuePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region MaxValue domain property code
		
		/// <summary>
		/// MaxValue domain property Id.
		/// </summary>
		public static readonly global::System.Guid MaxValueDomainPropertyId = new global::System.Guid(0x08199824, 0x9ddc, 0x4878, 0x8e, 0x04, 0xe0, 0xf4, 0x32, 0x06, 0x97, 0x26);
		
		/// <summary>
		/// Storage for MaxValue
		/// </summary>
		private global::System.String maxValuePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of MaxValue domain property.
		/// The upper bound for the range. An equivalent MinValue indicates that the range
		/// represents a single value.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRange/MaxValue.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRange/MaxValue.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("08199824-9ddc-4878-8e04-e0f432069726")]
		public global::System.String MaxValue
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return maxValuePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MaxValuePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ValueRange.MaxValue domain property.
		/// </summary>
		internal sealed partial class MaxValuePropertyHandler : DslModeling::DomainPropertyValueHandler<ValueRange, global::System.String>
		{
			private MaxValuePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ValueRange.MaxValue domain property value handler.
			/// </summary>
			public static readonly MaxValuePropertyHandler Instance = new MaxValuePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ValueRange.MaxValue domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MaxValueDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ValueRange element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.maxValuePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ValueRange element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.maxValuePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region InvariantMaxValue domain property code
		
		/// <summary>
		/// InvariantMaxValue domain property Id.
		/// </summary>
		public static readonly global::System.Guid InvariantMaxValueDomainPropertyId = new global::System.Guid(0xa2615c61, 0x231a, 0x4e80, 0x80, 0x16, 0x40, 0xe6, 0xf2, 0xf6, 0x8e, 0xcd);
		
		/// <summary>
		/// Storage for InvariantMaxValue
		/// </summary>
		private global::System.String invariantMaxValuePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of InvariantMaxValue domain property.
		/// The culture-invariant form of the MaxValue property.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRange/InvariantMaxValue.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRange/InvariantMaxValue.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("a2615c61-231a-4e80-8016-40e6f2f68ecd")]
		public global::System.String InvariantMaxValue
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return invariantMaxValuePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				InvariantMaxValuePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ValueRange.InvariantMaxValue domain property.
		/// </summary>
		internal sealed partial class InvariantMaxValuePropertyHandler : DslModeling::DomainPropertyValueHandler<ValueRange, global::System.String>
		{
			private InvariantMaxValuePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ValueRange.InvariantMaxValue domain property value handler.
			/// </summary>
			public static readonly InvariantMaxValuePropertyHandler Instance = new InvariantMaxValuePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ValueRange.InvariantMaxValue domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return InvariantMaxValueDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ValueRange element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.invariantMaxValuePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ValueRange element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.invariantMaxValuePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region MinInclusion domain property code
		
		/// <summary>
		/// MinInclusion domain property Id.
		/// </summary>
		public static readonly global::System.Guid MinInclusionDomainPropertyId = new global::System.Guid(0xcde9fc53, 0xbe51, 0x4c27, 0x9e, 0x6c, 0x67, 0x5c, 0xdb, 0x58, 0x0f, 0x3a);
		
		/// <summary>
		/// Storage for MinInclusion
		/// </summary>
		private RangeInclusion minInclusionPropertyStorage = RangeInclusion.NotSet;
		
		/// <summary>
		/// Gets or sets the value of MinInclusion domain property.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRange.MinInclusion
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRange/MinInclusion.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRange/MinInclusion.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue(RangeInclusion.NotSet)]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("cde9fc53-be51-4c27-9e6c-675cdb580f3a")]
		public RangeInclusion MinInclusion
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return minInclusionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MinInclusionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ValueRange.MinInclusion domain property.
		/// </summary>
		internal sealed partial class MinInclusionPropertyHandler : DslModeling::DomainPropertyValueHandler<ValueRange, RangeInclusion>
		{
			private MinInclusionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ValueRange.MinInclusion domain property value handler.
			/// </summary>
			public static readonly MinInclusionPropertyHandler Instance = new MinInclusionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ValueRange.MinInclusion domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MinInclusionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed RangeInclusion GetValue(ValueRange element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.minInclusionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ValueRange element, RangeInclusion newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				RangeInclusion oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.minInclusionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region MaxInclusion domain property code
		
		/// <summary>
		/// MaxInclusion domain property Id.
		/// </summary>
		public static readonly global::System.Guid MaxInclusionDomainPropertyId = new global::System.Guid(0xeb018230, 0x2726, 0x4206, 0xae, 0x2e, 0x1c, 0x91, 0x1b, 0x60, 0x6f, 0xc1);
		
		/// <summary>
		/// Storage for MaxInclusion
		/// </summary>
		private RangeInclusion maxInclusionPropertyStorage = RangeInclusion.NotSet;
		
		/// <summary>
		/// Gets or sets the value of MaxInclusion domain property.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRange.MaxInclusion
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRange/MaxInclusion.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRange/MaxInclusion.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue(RangeInclusion.NotSet)]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("eb018230-2726-4206-ae2e-1c911b606fc1")]
		public RangeInclusion MaxInclusion
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return maxInclusionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MaxInclusionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ValueRange.MaxInclusion domain property.
		/// </summary>
		internal sealed partial class MaxInclusionPropertyHandler : DslModeling::DomainPropertyValueHandler<ValueRange, RangeInclusion>
		{
			private MaxInclusionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ValueRange.MaxInclusion domain property value handler.
			/// </summary>
			public static readonly MaxInclusionPropertyHandler Instance = new MaxInclusionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ValueRange.MaxInclusion domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MaxInclusionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed RangeInclusion GetValue(ValueRange element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.maxInclusionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ValueRange element, RangeInclusion newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				RangeInclusion oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.maxInclusionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ValueConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets ValueConstraint.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRange.ValueRange
		/// </summary>
		public virtual ValueConstraint ValueConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRange.ValueRangeDomainRoleId) as ValueConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRange.ValueRangeDomainRoleId, value);
			}
		}
		#endregion
		#region MaxValueMismatchError opposite domain role accessor
		/// <summary>
		/// Gets or sets MaxValueMismatchError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMaxValueMismatchError.ValueRange
		/// </summary>
		public virtual MaxValueMismatchError MaxValueMismatchError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMaxValueMismatchError.ValueRangeDomainRoleId) as MaxValueMismatchError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMaxValueMismatchError.MaxValueMismatchErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMaxValueMismatchError.MaxValueMismatchErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMaxValueMismatchError.ValueRangeDomainRoleId, value);
				}
			}
		}
		#endregion
		#region MinValueMismatchError opposite domain role accessor
		/// <summary>
		/// Gets or sets MinValueMismatchError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMinValueMismatchError.ValueRange
		/// </summary>
		public virtual MinValueMismatchError MinValueMismatchError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMinValueMismatchError.ValueRangeDomainRoleId) as MinValueMismatchError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMinValueMismatchError.MinValueMismatchErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMinValueMismatchError.MinValueMismatchErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMinValueMismatchError.ValueRangeDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass ValueTypeValueConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeValueConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeValueConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("e46b0a2e-460e-4ff7-b447-c9c09597b500")]
	public partial class ValueTypeValueConstraint : ValueConstraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ValueTypeValueConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe46b0a2e, 0x460e, 0x4ff7, 0xb4, 0x47, 0xc9, 0xc0, 0x95, 0x97, 0xb5, 0x00);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ValueTypeValueConstraint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ValueTypeValueConstraint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ValueType opposite domain role accessor
		/// <summary>
		/// Gets or sets ValueType.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueConstraint.ValueConstraint
		/// </summary>
		public virtual ObjectType ValueType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueConstraint.ValueConstraintDomainRoleId) as ObjectType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueConstraint.ValueTypeDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueConstraint.ValueTypeDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueConstraint.ValueConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass RoleValueConstraint
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleValueConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleValueConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("6c223b62-6239-4514-81c5-aad6a10d3a2d")]
	public partial class RoleValueConstraint : ValueConstraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// RoleValueConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6c223b62, 0x6239, 0x4514, 0x81, 0xc5, 0xaa, 0xd6, 0xa1, 0x0d, 0x3a, 0x2d);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RoleValueConstraint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RoleValueConstraint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Role opposite domain role accessor
		/// <summary>
		/// Gets or sets Role.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasValueConstraint.ValueConstraint
		/// </summary>
		public virtual Role Role
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasValueConstraint.ValueConstraintDomainRoleId) as Role;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasValueConstraint.RoleDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasValueConstraint.RoleDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasValueConstraint.ValueConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass PathConditionRoleValueConstraint
	/// Value constraint applied to a pathed role in a role path.
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathConditionRoleValueConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathConditionRoleValueConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("9b47edfc-4267-446d-b3f1-6c79982ad89d")]
	public partial class PathConditionRoleValueConstraint : ValueConstraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// PathConditionRoleValueConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9b47edfc, 0x4267, 0x446d, 0xb3, 0xf1, 0x6c, 0x79, 0x98, 0x2a, 0xd8, 0x9d);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PathConditionRoleValueConstraint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PathConditionRoleValueConstraint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region PathedRole opposite domain role accessor
		/// <summary>
		/// Gets or sets PathedRole.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasValueConstraint.ValueConstraint
		/// </summary>
		public virtual PathedRole PathedRole
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasValueConstraint.ValueConstraintDomainRoleId) as PathedRole;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasValueConstraint.PathedRoleDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasValueConstraint.PathedRoleDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasValueConstraint.ValueConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass PathConditionRootValueConstraint
	/// Value constraint applied to a path root in a role path.
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathConditionRootValueConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathConditionRootValueConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("da5a020f-2cc4-4e80-b9a8-b80dcf7d0a10")]
	public partial class PathConditionRootValueConstraint : ValueConstraint
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// PathConditionRootValueConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xda5a020f, 0x2cc4, 0x4e80, 0xb9, 0xa8, 0xb8, 0x0d, 0xcf, 0x7d, 0x0a, 0x10);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PathConditionRootValueConstraint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PathConditionRootValueConstraint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region PathRoot opposite domain role accessor
		/// <summary>
		/// Gets or sets PathRoot.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathRootHasValueConstraint.ValueConstraint
		/// </summary>
		public virtual RolePathObjectTypeRoot PathRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathRootHasValueConstraint.ValueConstraintDomainRoleId) as RolePathObjectTypeRoot;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathRootHasValueConstraint.PathRootDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathRootHasValueConstraint.PathRootDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathRootHasValueConstraint.ValueConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass ValueConstraint
	/// </summary>
	[global::System.ComponentModel.TypeDescriptionProvider(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.ElementTypeDescriptionProvider<ValueConstraint, Design.ValueConstraintTypeDescriptor<ValueConstraint>>))]
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraint.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraint.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("ef2efead-a124-413c-8f86-c95e2b47160c")]
	public abstract partial class ValueConstraint : ORMNamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ValueConstraint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xef2efead, 0xa124, 0x413c, 0x8f, 0x86, 0xc9, 0x5e, 0x2b, 0x47, 0x16, 0x0c);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ValueConstraint(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region DefinitionText domain property code
		
		/// <summary>
		/// DefinitionText domain property Id.
		/// </summary>
		public static readonly global::System.Guid DefinitionTextDomainPropertyId = new global::System.Guid(0x728c6254, 0xdc03, 0x4ff3, 0xb3, 0xf2, 0x9b, 0xa8, 0xb3, 0x4f, 0x60, 0xc1);
		
		/// <summary>
		/// Gets or sets the value of DefinitionText domain property.
		/// An informal description of this constraint.
		///     To insert new lines, use Control-Enter in the dropdown editor, or open the
		/// 'ORM Informal Description Editor' tool window.
		/// </summary>
		[global::System.ComponentModel.Editor(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.MultilineTextEditor<global::ORMSolutions.ORMArchitect.Core.ObjectModel.Definition>), typeof(global::System.Drawing.Design.UITypeEditor))]
		[global::System.ComponentModel.MergableProperty(false)]
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraint/DefinitionText.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraint/DefinitionText.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("728c6254-dc03-4ff3-b3f2-9ba8b34f60c1")]
		public global::System.String DefinitionText
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DefinitionTextPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DefinitionTextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ValueConstraint.DefinitionText domain property.
		/// </summary>
		internal sealed partial class DefinitionTextPropertyHandler : DslModeling::DomainPropertyValueHandler<ValueConstraint, global::System.String>
		{
			private DefinitionTextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ValueConstraint.DefinitionText domain property value handler.
			/// </summary>
			public static readonly DefinitionTextPropertyHandler Instance = new DefinitionTextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ValueConstraint.DefinitionText domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DefinitionTextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ValueConstraint element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for DefinitionText because its Kind is
				// set to CustomStorage. Please provide the GetDefinitionTextValue()
				// method on the domain class.
				return element.GetDefinitionTextValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ValueConstraint element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for DefinitionText because its Kind is
					// set to CustomStorage. Please provide the SetDefinitionTextValue()
					// method on the domain class.
					element.SetDefinitionTextValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region NoteText domain property code
		
		/// <summary>
		/// NoteText domain property Id.
		/// </summary>
		public static readonly global::System.Guid NoteTextDomainPropertyId = new global::System.Guid(0x49306d45, 0x6a55, 0x4d4f, 0x9c, 0x83, 0xfc, 0x95, 0xd3, 0x37, 0x97, 0xd0);
		
		/// <summary>
		/// Gets or sets the value of NoteText domain property.
		/// A note to associate with this constraint.
		///     To insert new lines, use Control-Enter in the dropdown editor, or open the
		/// 'ORM Notes Editor' tool window.
		/// </summary>
		[global::System.ComponentModel.Editor(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.MultilineTextEditor<global::ORMSolutions.ORMArchitect.Core.ObjectModel.Note>), typeof(global::System.Drawing.Design.UITypeEditor))]
		[global::System.ComponentModel.MergableProperty(false)]
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraint/NoteText.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraint/NoteText.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("49306d45-6a55-4d4f-9c83-fc95d33797d0")]
		public global::System.String NoteText
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return NoteTextPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NoteTextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ValueConstraint.NoteText domain property.
		/// </summary>
		internal sealed partial class NoteTextPropertyHandler : DslModeling::DomainPropertyValueHandler<ValueConstraint, global::System.String>
		{
			private NoteTextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ValueConstraint.NoteText domain property value handler.
			/// </summary>
			public static readonly NoteTextPropertyHandler Instance = new NoteTextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ValueConstraint.NoteText domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NoteTextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ValueConstraint element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for NoteText because its Kind is
				// set to CustomStorage. Please provide the GetNoteTextValue()
				// method on the domain class.
				return element.GetNoteTextValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ValueConstraint element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for NoteText because its Kind is
					// set to CustomStorage. Please provide the SetNoteTextValue()
					// method on the domain class.
					element.SetNoteTextValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Text domain property code
		
		/// <summary>
		/// Text domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextDomainPropertyId = new global::System.Guid(0x410fce34, 0xdacb, 0x4f59, 0x94, 0xa6, 0xff, 0x7e, 0x42, 0x10, 0x8e, 0x74);
		
		/// <summary>
		/// Gets or sets the value of Text domain property.
		/// The range of possible values.
		///     To specify a range, use '..' between the range endpoints, square brackets to
		/// specify a closed endpoint, and parentheses to specify an open endpoint. Commas
		/// are used to entered multiple ranges or discrete values.
		///     Example: {[10..20), 30} specifies all values between 10 and 20 (but not
		/// including 20) and the value 30.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraint/Text.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraint/Text.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("410fce34-dacb-4f59-94a6-ff7e42108e74")]
		public global::System.String Text
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return TextPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ValueConstraint.Text domain property.
		/// </summary>
		internal sealed partial class TextPropertyHandler : DslModeling::DomainPropertyValueHandler<ValueConstraint, global::System.String>
		{
			private TextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ValueConstraint.Text domain property value handler.
			/// </summary>
			public static readonly TextPropertyHandler Instance = new TextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ValueConstraint.Text domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ValueConstraint element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for Text because its Kind is
				// set to CustomStorage. Please provide the GetTextValue()
				// method on the domain class.
				return element.GetTextValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ValueConstraint element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for Text because its Kind is
					// set to CustomStorage. Please provide the SetTextValue()
					// method on the domain class.
					element.SetTextValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TextChanged domain property code
		
		/// <summary>
		/// TextChanged domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextChangedDomainPropertyId = new global::System.Guid(0xacb49806, 0xa830, 0x431d, 0x95, 0x9f, 0x20, 0xc7, 0xdd, 0x9c, 0x1d, 0x4d);
		
		/// <summary>
		/// Gets or sets the value of TextChanged domain property.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraint.TextChanged
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraint/TextChanged.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraint/TextChanged.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("acb49806-a830-431d-959f-20c7dd9c1d4d")]
		public global::System.Int64 TextChanged
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return TextChangedPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextChangedPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ValueConstraint.TextChanged domain property.
		/// </summary>
		internal sealed partial class TextChangedPropertyHandler : DslModeling::DomainPropertyValueHandler<ValueConstraint, global::System.Int64>
		{
			private TextChangedPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ValueConstraint.TextChanged domain property value handler.
			/// </summary>
			public static readonly TextChangedPropertyHandler Instance = new TextChangedPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ValueConstraint.TextChanged domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextChangedDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int64 GetValue(ValueConstraint element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for TextChanged because its Kind is
				// set to CustomStorage. Please provide the GetTextChangedValue()
				// method on the domain class.
				return element.GetTextChangedValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ValueConstraint element, global::System.Int64 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int64 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for TextChanged because its Kind is
					// set to CustomStorage. Please provide the SetTextChangedValue()
					// method on the domain class.
					element.SetTextChangedValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ValueRangeCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ValueRangeCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRange.ValueConstraint
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ValueRange> ValueRangeCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ValueRange>, ValueRange>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRange.ValueConstraintDomainRoleId);
			}
		}
		#endregion
		#region DuplicateNameError opposite domain role accessor
		/// <summary>
		/// Gets or sets DuplicateNameError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDuplicateNameError.ValueConstraint
		/// </summary>
		public virtual ConstraintDuplicateNameError DuplicateNameError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDuplicateNameError.ValueConstraintDomainRoleId) as ConstraintDuplicateNameError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDuplicateNameError.ValueConstraintDomainRoleId, value);
			}
		}
		#endregion
		#region Definition opposite domain role accessor
		/// <summary>
		/// Gets or sets Definition.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDefinition.ValueConstraint
		/// </summary>
		public virtual Definition Definition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDefinition.ValueConstraintDomainRoleId) as Definition;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDefinition.DefinitionDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDefinition.DefinitionDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDefinition.ValueConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
		#region Note opposite domain role accessor
		/// <summary>
		/// Gets or sets Note.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasNote.ValueConstraint
		/// </summary>
		public virtual Note Note
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasNote.ValueConstraintDomainRoleId) as Note;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasNote.NoteDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasNote.NoteDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasNote.ValueConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
		#region ValueRangeOverlapError opposite domain role accessor
		/// <summary>
		/// Gets or sets ValueRangeOverlapError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueConstraint
		/// </summary>
		public virtual ValueRangeOverlapError ValueRangeOverlapError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueConstraintDomainRoleId) as ValueRangeOverlapError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueRangeOverlapErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueRangeOverlapErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
		#region ValueTypeDetachedError opposite domain role accessor
		/// <summary>
		/// Gets or sets ValueTypeDetachedError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueTypeDetachedError.ValueConstraint
		/// </summary>
		public virtual ValueConstraintValueTypeDetachedError ValueTypeDetachedError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueTypeDetachedError.ValueConstraintDomainRoleId) as ValueConstraintValueTypeDetachedError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueTypeDetachedError.ValueTypeDetachedErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueTypeDetachedError.ValueTypeDetachedErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueTypeDetachedError.ValueConstraintDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass ValueConstraintError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("a18fa855-e7ca-4716-8e8d-1606c09b090a")]
	public abstract partial class ValueConstraintError : ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ValueConstraintError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa18fa855, 0xe7ca, 0x4716, 0x8e, 0x8d, 0x16, 0x06, 0xc0, 0x9b, 0x09, 0x0a);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ValueConstraintError(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass MinValueMismatchError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.MinValueMismatchError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.MinValueMismatchError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("7e0d53cf-d374-4eda-b6a6-04d381aa0dc5")]
	public partial class MinValueMismatchError : ValueConstraintError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// MinValueMismatchError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7e0d53cf, 0xd374, 0x4eda, 0xb6, 0xa6, 0x04, 0xd3, 0x81, 0xaa, 0x0d, 0xc5);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MinValueMismatchError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MinValueMismatchError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ValueRange opposite domain role accessor
		/// <summary>
		/// Gets or sets ValueRange.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMinValueMismatchError.MinValueMismatchError
		/// </summary>
		public virtual ValueRange ValueRange
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMinValueMismatchError.MinValueMismatchErrorDomainRoleId) as ValueRange;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMinValueMismatchError.ValueRangeDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMinValueMismatchError.ValueRangeDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMinValueMismatchError.MinValueMismatchErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass MaxValueMismatchError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.MaxValueMismatchError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.MaxValueMismatchError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("cce42465-23a0-4726-8881-3adb48e2cc67")]
	public partial class MaxValueMismatchError : ValueConstraintError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// MaxValueMismatchError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xcce42465, 0x23a0, 0x4726, 0x88, 0x81, 0x3a, 0xdb, 0x48, 0xe2, 0xcc, 0x67);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MaxValueMismatchError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MaxValueMismatchError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ValueRange opposite domain role accessor
		/// <summary>
		/// Gets or sets ValueRange.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMaxValueMismatchError.MaxValueMismatchError
		/// </summary>
		public virtual ValueRange ValueRange
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMaxValueMismatchError.MaxValueMismatchErrorDomainRoleId) as ValueRange;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMaxValueMismatchError.ValueRangeDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMaxValueMismatchError.ValueRangeDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMaxValueMismatchError.MaxValueMismatchErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass ImpliedInternalUniquenessConstraintError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ImpliedInternalUniquenessConstraintError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ImpliedInternalUniquenessConstraintError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("b7381f8b-c95e-408d-9747-4b6bb35c1171")]
	public partial class ImpliedInternalUniquenessConstraintError : ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ImpliedInternalUniquenessConstraintError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb7381f8b, 0xc95e, 0x408d, 0x97, 0x47, 0x4b, 0x6b, 0xb3, 0x5c, 0x11, 0x71);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ImpliedInternalUniquenessConstraintError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ImpliedInternalUniquenessConstraintError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region FactType opposite domain role accessor
		/// <summary>
		/// Gets or sets FactType.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.ImpliedInternalUniquenessConstraintError
		/// </summary>
		public virtual FactType FactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.ImpliedInternalUniquenessConstraintErrorDomainRoleId) as FactType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.FactTypeDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.FactTypeDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.ImpliedInternalUniquenessConstraintErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass FrequencyConstraintViolatedByUniquenessConstraintError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintViolatedByUniquenessConstraintError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintViolatedByUniquenessConstraintError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("4a239f5f-2ff9-4e5a-aaa8-50d313ed0193")]
	public partial class FrequencyConstraintViolatedByUniquenessConstraintError : ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// FrequencyConstraintViolatedByUniquenessConstraintError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4a239f5f, 0x2ff9, 0x4e5a, 0xaa, 0xa8, 0x50, 0xd3, 0x13, 0xed, 0x01, 0x93);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FrequencyConstraintViolatedByUniquenessConstraintError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FrequencyConstraintViolatedByUniquenessConstraintError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region FrequencyConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets FrequencyConstraint.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError.FrequencyConstraintViolatedByUniquenessConstraintError
		/// </summary>
		public virtual FrequencyConstraint FrequencyConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError.FrequencyConstraintViolatedByUniquenessConstraintErrorDomainRoleId) as FrequencyConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError.FrequencyConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError.FrequencyConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError.FrequencyConstraintViolatedByUniquenessConstraintErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass RingConstraintTypeNotSpecifiedError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintTypeNotSpecifiedError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintTypeNotSpecifiedError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("15026270-dfd6-470d-a997-233173e644dc")]
	public partial class RingConstraintTypeNotSpecifiedError : ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// RingConstraintTypeNotSpecifiedError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x15026270, 0xdfd6, 0x470d, 0xa9, 0x97, 0x23, 0x31, 0x73, 0xe6, 0x44, 0xdc);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RingConstraintTypeNotSpecifiedError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RingConstraintTypeNotSpecifiedError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region RingConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets RingConstraint.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintTypeNotSpecifiedError
		/// </summary>
		public virtual RingConstraint RingConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintTypeNotSpecifiedErrorDomainRoleId) as RingConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintTypeNotSpecifiedErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass ValueComparisonConstraintOperatorNotSpecifiedError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintOperatorNotSpecifiedError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintOperatorNotSpecifiedError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("7d7d1a71-6b49-4ebe-a649-ab25c5863e84")]
	public partial class ValueComparisonConstraintOperatorNotSpecifiedError : ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ValueComparisonConstraintOperatorNotSpecifiedError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7d7d1a71, 0x6b49, 0x4ebe, 0xa6, 0x49, 0xab, 0x25, 0xc5, 0x86, 0x3e, 0x84);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ValueComparisonConstraintOperatorNotSpecifiedError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ValueComparisonConstraintOperatorNotSpecifiedError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ValueComparisonConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets ValueComparisonConstraint.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasOperatorNotSpecifiedError.OperatorNotSpecifiedError
		/// </summary>
		public virtual ValueComparisonConstraint ValueComparisonConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasOperatorNotSpecifiedError.OperatorNotSpecifiedErrorDomainRoleId) as ValueComparisonConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasOperatorNotSpecifiedError.ValueComparisonConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasOperatorNotSpecifiedError.ValueComparisonConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasOperatorNotSpecifiedError.OperatorNotSpecifiedErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass ValueComparisonRolesNotComparableError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonRolesNotComparableError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonRolesNotComparableError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("0a851db7-569f-4ad8-990e-416e2e9a0adb")]
	public partial class ValueComparisonRolesNotComparableError : ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ValueComparisonRolesNotComparableError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0a851db7, 0x569f, 0x4ad8, 0x99, 0x0e, 0x41, 0x6e, 0x2e, 0x9a, 0x0a, 0xdb);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ValueComparisonRolesNotComparableError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ValueComparisonRolesNotComparableError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ValueComparisonConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets ValueComparisonConstraint.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasRolesNotComparableError.RolesNotComparableError
		/// </summary>
		public virtual ValueComparisonConstraint ValueComparisonConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasRolesNotComparableError.RolesNotComparableErrorDomainRoleId) as ValueComparisonConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasRolesNotComparableError.ValueComparisonConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasRolesNotComparableError.ValueComparisonConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasRolesNotComparableError.RolesNotComparableErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass SubtypeMetaRole
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeMetaRole.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeMetaRole.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("4ad109e1-3ab4-4f8a-a862-1694aee06289")]
	public partial class SubtypeMetaRole : Role
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SubtypeMetaRole domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4ad109e1, 0x3ab4, 0x4f8a, 0xa8, 0x62, 0x16, 0x94, 0xae, 0xe0, 0x62, 0x89);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SubtypeMetaRole(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SubtypeMetaRole(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass SupertypeMetaRole
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SupertypeMetaRole.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SupertypeMetaRole.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("e559a725-bba4-4068-b247-dc8c4b1628d7")]
	public partial class SupertypeMetaRole : Role
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SupertypeMetaRole domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe559a725, 0xbba4, 0x4068, 0xb2, 0x47, 0xdc, 0x8c, 0x4b, 0x16, 0x28, 0xd7);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SupertypeMetaRole(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SupertypeMetaRole(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass Definition
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Definition.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Definition.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("25d3235c-76e2-4095-8efd-847057937a00")]
	public partial class Definition : ORMModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Definition domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x25d3235c, 0x76e2, 0x4095, 0x8e, 0xfd, 0x84, 0x70, 0x57, 0x93, 0x7a, 0x00);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Definition(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Definition(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Text domain property code
		
		/// <summary>
		/// Text domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextDomainPropertyId = new global::System.Guid(0xb68867a8, 0x4b52, 0x4de1, 0x8b, 0x39, 0x7e, 0xee, 0x5e, 0xcb, 0x60, 0xa4);
		
		/// <summary>
		/// Storage for Text
		/// </summary>
		private global::System.String textPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Text domain property.
		/// The description contents.
		///     To insert new lines, use Control-Enter in the dropdown editor, or open the
		/// 'ORM Notes Editor' tool window.
		/// </summary>
		[global::System.ComponentModel.Editor(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.MultilineTextEditor<global::ORMSolutions.ORMArchitect.Core.ObjectModel.Definition>), typeof(global::System.Drawing.Design.UITypeEditor))]
		[global::System.ComponentModel.MergableProperty(false)]
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Definition/Text.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Definition/Text.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("b68867a8-4b52-4de1-8b39-7eee5ecb60a4")]
		public global::System.String Text
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Definition.Text domain property.
		/// </summary>
		internal sealed partial class TextPropertyHandler : DslModeling::DomainPropertyValueHandler<Definition, global::System.String>
		{
			private TextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Definition.Text domain property value handler.
			/// </summary>
			public static readonly TextPropertyHandler Instance = new TextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Definition.Text domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Definition element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Definition element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDefinition.Definition
		/// </summary>
		public virtual ORMModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDefinition.DefinitionDomainRoleId) as ORMModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDefinition.ModelDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDefinition.ModelDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDefinition.DefinitionDomainRoleId, value);
				}
			}
		}
		#endregion
		#region ObjectType opposite domain role accessor
		/// <summary>
		/// Gets or sets ObjectType.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDefinition.Definition
		/// </summary>
		public virtual ObjectType ObjectType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDefinition.DefinitionDomainRoleId) as ObjectType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDefinition.ObjectTypeDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDefinition.ObjectTypeDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDefinition.DefinitionDomainRoleId, value);
				}
			}
		}
		#endregion
		#region FactType opposite domain role accessor
		/// <summary>
		/// Gets or sets FactType.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDefinition.Definition
		/// </summary>
		public virtual FactType FactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDefinition.DefinitionDomainRoleId) as FactType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDefinition.FactTypeDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDefinition.FactTypeDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDefinition.DefinitionDomainRoleId, value);
				}
			}
		}
		#endregion
		#region SetConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets SetConstraint.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDefinition.Definition
		/// </summary>
		public virtual SetConstraint SetConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDefinition.DefinitionDomainRoleId) as SetConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDefinition.SetConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDefinition.SetConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDefinition.DefinitionDomainRoleId, value);
				}
			}
		}
		#endregion
		#region SetComparisonConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets SetComparisonConstraint.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDefinition.Definition
		/// </summary>
		public virtual SetComparisonConstraint SetComparisonConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDefinition.DefinitionDomainRoleId) as SetComparisonConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDefinition.SetComparisonConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDefinition.SetComparisonConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDefinition.DefinitionDomainRoleId, value);
				}
			}
		}
		#endregion
		#region ValueConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets ValueConstraint.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDefinition.Definition
		/// </summary>
		public virtual ValueConstraint ValueConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDefinition.DefinitionDomainRoleId) as ValueConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDefinition.ValueConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDefinition.ValueConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDefinition.DefinitionDomainRoleId, value);
				}
			}
		}
		#endregion
		#region CardinalityConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets CardinalityConstraint.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDefinition.Definition
		/// </summary>
		public virtual CardinalityConstraint CardinalityConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDefinition.DefinitionDomainRoleId) as CardinalityConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDefinition.CardinalityConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDefinition.CardinalityConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDefinition.DefinitionDomainRoleId, value);
				}
			}
		}
		#endregion
		#region Grouping opposite domain role accessor
		/// <summary>
		/// Gets or sets Grouping.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDefinition.Definition
		/// </summary>
		public virtual ElementGrouping Grouping
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDefinition.DefinitionDomainRoleId) as ElementGrouping;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDefinition.GroupingDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDefinition.GroupingDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDefinition.DefinitionDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass Note
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Note.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Note.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("c3de6c8c-2215-49b0-bd70-70d2c3630c33")]
	public partial class Note : ORMModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Note domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc3de6c8c, 0x2215, 0x49b0, 0xbd, 0x70, 0x70, 0xd2, 0xc3, 0x63, 0x0c, 0x33);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Note(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Note(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Text domain property code
		
		/// <summary>
		/// Text domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextDomainPropertyId = new global::System.Guid(0x0ef3bc12, 0x45ff, 0x46a8, 0xb3, 0x25, 0xcd, 0xfc, 0xc1, 0x05, 0xa1, 0xe1);
		
		/// <summary>
		/// Storage for Text
		/// </summary>
		private global::System.String textPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Text domain property.
		/// The note contents.
		///     To insert new lines, use Control-Enter in the dropdown editor, or open the
		/// 'ORM Notes Editor' tool window.
		/// </summary>
		[global::System.ComponentModel.Editor(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.MultilineTextEditor<global::ORMSolutions.ORMArchitect.Core.ObjectModel.Note>), typeof(global::System.Drawing.Design.UITypeEditor))]
		[global::System.ComponentModel.MergableProperty(false)]
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Note/Text.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.Note/Text.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("0ef3bc12-45ff-46a8-b325-cdfcc105a1e1")]
		public global::System.String Text
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Note.Text domain property.
		/// </summary>
		internal sealed partial class TextPropertyHandler : DslModeling::DomainPropertyValueHandler<Note, global::System.String>
		{
			private TextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Note.Text domain property value handler.
			/// </summary>
			public static readonly TextPropertyHandler Instance = new TextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Note.Text domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Note element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Note element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region FactType opposite domain role accessor
		/// <summary>
		/// Gets or sets FactType.
		/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasNote.Note
		/// </summary>
		public virtual FactType FactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasNote.NoteDomainRoleId) as FactType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasNote.FactTypeDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasNote.FactTypeDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasNote.NoteDomainRoleId, value);
				}
			}
		}
		#endregion
		#region ObjectType opposite domain role accessor
		/// <summary>
		/// Gets or sets ObjectType.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasNote.Note
		/// </summary>
		public virtual ObjectType ObjectType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasNote.NoteDomainRoleId) as ObjectType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasNote.ObjectTypeDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasNote.ObjectTypeDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasNote.NoteDomainRoleId, value);
				}
			}
		}
		#endregion
		#region SetConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets SetConstraint.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasNote.Note
		/// </summary>
		public virtual SetConstraint SetConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasNote.NoteDomainRoleId) as SetConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasNote.SetConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasNote.SetConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasNote.NoteDomainRoleId, value);
				}
			}
		}
		#endregion
		#region SetComparisonConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets SetComparisonConstraint.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasNote.Note
		/// </summary>
		public virtual SetComparisonConstraint SetComparisonConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasNote.NoteDomainRoleId) as SetComparisonConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasNote.SetComparisonConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasNote.SetComparisonConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasNote.NoteDomainRoleId, value);
				}
			}
		}
		#endregion
		#region ValueConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets ValueConstraint.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasNote.Note
		/// </summary>
		public virtual ValueConstraint ValueConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasNote.NoteDomainRoleId) as ValueConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasNote.ValueConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasNote.ValueConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasNote.NoteDomainRoleId, value);
				}
			}
		}
		#endregion
		#region CardinalityConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets CardinalityConstraint.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasNote.Note
		/// </summary>
		public virtual CardinalityConstraint CardinalityConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasNote.NoteDomainRoleId) as CardinalityConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasNote.CardinalityConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasNote.CardinalityConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasNote.NoteDomainRoleId, value);
				}
			}
		}
		#endregion
		#region Grouping opposite domain role accessor
		/// <summary>
		/// Gets or sets Grouping.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasNote.Note
		/// </summary>
		public virtual ElementGrouping Grouping
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasNote.NoteDomainRoleId) as ElementGrouping;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasNote.GroupingDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasNote.GroupingDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasNote.NoteDomainRoleId, value);
				}
			}
		}
		#endregion
		#region PrimaryForModel opposite domain role accessor
		/// <summary>
		/// Gets or sets PrimaryForModel.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasPrimaryNote.Note
		/// </summary>
		public virtual ORMModel PrimaryForModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasPrimaryNote.NoteDomainRoleId) as ORMModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasPrimaryNote.ModelDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasPrimaryNote.ModelDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasPrimaryNote.NoteDomainRoleId, value);
				}
			}
		}
		#endregion
		#region RolePath opposite domain role accessor
		/// <summary>
		/// Gets or sets RolePath.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasNote.Note
		/// </summary>
		public virtual LeadRolePath RolePath
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasNote.NoteDomainRoleId) as LeadRolePath;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasNote.LeadRolePathDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasNote.LeadRolePathDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasNote.NoteDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass ModelNote
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNote.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNote.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("41d610c9-bacc-473d-bfe6-7034e6ff0b11")]
	public partial class ModelNote : Note
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ModelNote domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x41d610c9, 0xbacc, 0x473d, 0xbf, 0xe6, 0x70, 0x34, 0xe6, 0xff, 0x0b, 0x11);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelNote(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelNote(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelNote.Note
		/// </summary>
		public virtual ORMModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelNote.NoteDomainRoleId) as ORMModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelNote.NoteDomainRoleId, value);
			}
		}
		#endregion
		#region ElementCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ElementCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesModelElement.Note
		/// </summary>
		public virtual DslModeling::ReadOnlyLinkedElementCollection<global::Microsoft.VisualStudio.Modeling.ModelElement> ElementCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::ReadOnlyLinkedElementCollection<global::Microsoft.VisualStudio.Modeling.ModelElement>, global::Microsoft.VisualStudio.Modeling.ModelElement>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesModelElement.NoteDomainRoleId);
			}
		}
		#endregion
		#region FactTypeCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of FactTypeCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesFactType.Note
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<FactType> FactTypeCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<FactType>, FactType>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesFactType.NoteDomainRoleId);
			}
		}
		#endregion
		#region ObjectTypeCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ObjectTypeCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesObjectType.Note
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ObjectType> ObjectTypeCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ObjectType>, ObjectType>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesObjectType.NoteDomainRoleId);
			}
		}
		#endregion
		#region SetConstraintCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SetConstraintCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetConstraint.Note
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<SetConstraint> SetConstraintCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<SetConstraint>, SetConstraint>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetConstraint.NoteDomainRoleId);
			}
		}
		#endregion
		#region SetComparisonConstraintCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SetComparisonConstraintCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetComparisonConstraint.Note
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<SetComparisonConstraint> SetComparisonConstraintCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<SetComparisonConstraint>, SetComparisonConstraint>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelNoteReferencesSetComparisonConstraint.NoteDomainRoleId);
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass CompatibleSupertypesError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CompatibleSupertypesError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CompatibleSupertypesError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("70a9ed25-7a0e-4dec-b39d-83bb1a6294b8")]
	public partial class CompatibleSupertypesError : ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// CompatibleSupertypesError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x70a9ed25, 0x7a0e, 0x4dec, 0xb3, 0x9d, 0x83, 0xbb, 0x1a, 0x62, 0x94, 0xb8);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CompatibleSupertypesError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CompatibleSupertypesError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ObjectType opposite domain role accessor
		/// <summary>
		/// Gets or sets ObjectType.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCompatibleSupertypesError.CompatibleSupertypesError
		/// </summary>
		public virtual ObjectType ObjectType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCompatibleSupertypesError.CompatibleSupertypesErrorDomainRoleId) as ObjectType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCompatibleSupertypesError.ObjectTypeDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCompatibleSupertypesError.ObjectTypeDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCompatibleSupertypesError.CompatibleSupertypesErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass ImplicationError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ImplicationError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ImplicationError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("78026aea-19eb-497a-a596-25c929f67aa8")]
	public partial class ImplicationError : ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ImplicationError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x78026aea, 0x19eb, 0x497a, 0xa5, 0x96, 0x25, 0xc9, 0x29, 0xf6, 0x7a, 0xa8);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ImplicationError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ImplicationError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region SetConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets SetConstraint.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasImplicationError.ImplicationError
		/// </summary>
		public virtual SetConstraint SetConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasImplicationError.ImplicationErrorDomainRoleId) as SetConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasImplicationError.SetConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasImplicationError.SetConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasImplicationError.ImplicationErrorDomainRoleId, value);
				}
			}
		}
		#endregion
		#region SetComparisonConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets SetComparisonConstraint.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasImplicationError.ImplicationError
		/// </summary>
		public virtual SetComparisonConstraint SetComparisonConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasImplicationError.ImplicationErrorDomainRoleId) as SetComparisonConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasImplicationError.SetComparisonConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasImplicationError.SetComparisonConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasImplicationError.ImplicationErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass EqualityOrSubsetImpliedByMandatoryError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EqualityOrSubsetImpliedByMandatoryError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EqualityOrSubsetImpliedByMandatoryError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("80b1f784-858e-483b-91a5-e55cfeba44b9")]
	public partial class EqualityOrSubsetImpliedByMandatoryError : ImplicationError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// EqualityOrSubsetImpliedByMandatoryError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x80b1f784, 0x858e, 0x483b, 0x91, 0xa5, 0xe5, 0x5c, 0xfe, 0xba, 0x44, 0xb9);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EqualityOrSubsetImpliedByMandatoryError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EqualityOrSubsetImpliedByMandatoryError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region EqualityOrSubsetConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets EqualityOrSubsetConstraint.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError.EqualityOrSubsetImpliedByMandatoryError
		/// </summary>
		private SetComparisonConstraint EqualityOrSubsetConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError.EqualityOrSubsetImpliedByMandatoryErrorDomainRoleId) as SetComparisonConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError.SetComparisonConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError.SetComparisonConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError.EqualityOrSubsetImpliedByMandatoryErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass PreferredIdentifierRequiresMandatoryError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PreferredIdentifierRequiresMandatoryError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PreferredIdentifierRequiresMandatoryError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("129cce68-7ce9-4a97-bad3-c36b4d372a77")]
	public partial class PreferredIdentifierRequiresMandatoryError : ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// PreferredIdentifierRequiresMandatoryError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x129cce68, 0x7ce9, 0x4a97, 0xba, 0xd3, 0xc3, 0x6b, 0x4d, 0x37, 0x2a, 0x77);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PreferredIdentifierRequiresMandatoryError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PreferredIdentifierRequiresMandatoryError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ObjectType opposite domain role accessor
		/// <summary>
		/// Gets or sets ObjectType.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.PreferredIdentifierRequiresMandatoryError
		/// </summary>
		public virtual ObjectType ObjectType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.PreferredIdentifierRequiresMandatoryErrorDomainRoleId) as ObjectType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.ObjectTypeDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.ObjectTypeDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.PreferredIdentifierRequiresMandatoryErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass ValueRangeOverlapError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeOverlapError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeOverlapError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("2cf1ee1a-1737-4868-9b5c-95b2c0f9488b")]
	public partial class ValueRangeOverlapError : ValueConstraintError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ValueRangeOverlapError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2cf1ee1a, 0x1737, 0x4868, 0x9b, 0x5c, 0x95, 0xb2, 0xc0, 0xf9, 0x48, 0x8b);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ValueRangeOverlapError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ValueRangeOverlapError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ValueConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets ValueConstraint.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueRangeOverlapError
		/// </summary>
		public virtual ValueConstraint ValueConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueRangeOverlapErrorDomainRoleId) as ValueConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueRangeOverlapErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass ValueConstraintValueTypeDetachedError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintValueTypeDetachedError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintValueTypeDetachedError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("92c7060e-a912-4986-984e-e9915b1321ad")]
	public partial class ValueConstraintValueTypeDetachedError : ValueConstraintError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ValueConstraintValueTypeDetachedError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x92c7060e, 0xa912, 0x4986, 0x98, 0x4e, 0xe9, 0x91, 0x5b, 0x13, 0x21, 0xad);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ValueConstraintValueTypeDetachedError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ValueConstraintValueTypeDetachedError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ValueConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets ValueConstraint.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueTypeDetachedError.ValueTypeDetachedError
		/// </summary>
		public virtual ValueConstraint ValueConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueTypeDetachedError.ValueTypeDetachedErrorDomainRoleId) as ValueConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueTypeDetachedError.ValueConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueTypeDetachedError.ValueConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueTypeDetachedError.ValueTypeDetachedErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass CardinalityRangeOverlapError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityRangeOverlapError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityRangeOverlapError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("7e66b362-342c-4d59-9eed-1226c0768add")]
	public partial class CardinalityRangeOverlapError : ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// CardinalityRangeOverlapError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7e66b362, 0x342c, 0x4d59, 0x9e, 0xed, 0x12, 0x26, 0xc0, 0x76, 0x8a, 0xdd);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CardinalityRangeOverlapError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CardinalityRangeOverlapError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region CardinalityConstraint opposite domain role accessor
		/// <summary>
		/// Gets or sets CardinalityConstraint.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRangeOverlapError.CardinalityRangeOverlapError
		/// </summary>
		public virtual CardinalityConstraint CardinalityConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRangeOverlapError.CardinalityRangeOverlapErrorDomainRoleId) as CardinalityConstraint;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRangeOverlapError.CardinalityConstraintDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRangeOverlapError.CardinalityConstraintDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRangeOverlapError.CardinalityRangeOverlapErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass DerivationNote
	/// An informal note describing the purpose of a derivation rule.
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DerivationNote.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DerivationNote.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("a27abbaf-9b26-4ebd-8451-eaa0223cd9f5")]
	public partial class DerivationNote : Expression
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DerivationNote domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa27abbaf, 0x9b26, 0x4ebd, 0x84, 0x51, 0xea, 0xa0, 0x22, 0x3c, 0xd9, 0xf5);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DerivationNote(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DerivationNote(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region FactTypeDerivationRule opposite domain role accessor
		/// <summary>
		/// Gets or sets FactTypeDerivationRule.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRuleHasDerivationNote.DerivationNote
		/// </summary>
		public virtual FactTypeDerivationRule FactTypeDerivationRule
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRuleHasDerivationNote.DerivationNoteDomainRoleId) as FactTypeDerivationRule;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRuleHasDerivationNote.DerivationRuleDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRuleHasDerivationNote.DerivationRuleDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRuleHasDerivationNote.DerivationNoteDomainRoleId, value);
				}
			}
		}
		#endregion
		#region SubtypeDerivationRule opposite domain role accessor
		/// <summary>
		/// Gets or sets SubtypeDerivationRule.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRuleHasDerivationNote.DerivationNote
		/// </summary>
		public virtual SubtypeDerivationRule SubtypeDerivationRule
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRuleHasDerivationNote.DerivationNoteDomainRoleId) as SubtypeDerivationRule;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRuleHasDerivationNote.DerivationRuleDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRuleHasDerivationNote.DerivationRuleDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRuleHasDerivationNote.DerivationNoteDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass FactTypeDerivationExpression
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationExpression.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationExpression.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("2a29f892-b69b-4eeb-bf50-a0e59b6e64c2")]
	public partial class FactTypeDerivationExpression : Expression
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// FactTypeDerivationExpression domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2a29f892, 0xb69b, 0x4eeb, 0xbf, 0x50, 0xa0, 0xe5, 0x9b, 0x6e, 0x64, 0xc2);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FactTypeDerivationExpression(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FactTypeDerivationExpression(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region DerivationStorage domain property code
		
		/// <summary>
		/// DerivationStorage domain property Id.
		/// </summary>
		public static readonly global::System.Guid DerivationStorageDomainPropertyId = new global::System.Guid(0x6b011b44, 0x9854, 0x436a, 0xad, 0xed, 0x7b, 0xbc, 0x63, 0x5a, 0x7c, 0x1f);
		
		/// <summary>
		/// Storage for DerivationStorage
		/// </summary>
		private DerivationExpressionStorageType derivationStoragePropertyStorage = DerivationExpressionStorageType.Derived;
		
		/// <summary>
		/// Gets or sets the value of DerivationStorage domain property.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationExpression.DerivationStorage
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationExpression/DerivationStorage.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationExpression/DerivationStorage.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue(DerivationExpressionStorageType.Derived)]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("6b011b44-9854-436a-aded-7bbc635a7c1f")]
		public DerivationExpressionStorageType DerivationStorage
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return derivationStoragePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DerivationStoragePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FactTypeDerivationExpression.DerivationStorage domain property.
		/// </summary>
		internal sealed partial class DerivationStoragePropertyHandler : DslModeling::DomainPropertyValueHandler<FactTypeDerivationExpression, DerivationExpressionStorageType>
		{
			private DerivationStoragePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FactTypeDerivationExpression.DerivationStorage domain property value handler.
			/// </summary>
			public static readonly DerivationStoragePropertyHandler Instance = new DerivationStoragePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FactTypeDerivationExpression.DerivationStorage domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DerivationStorageDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed DerivationExpressionStorageType GetValue(FactTypeDerivationExpression element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.derivationStoragePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FactTypeDerivationExpression element, DerivationExpressionStorageType newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				DerivationExpressionStorageType oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.derivationStoragePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region FactType opposite domain role accessor
		/// <summary>
		/// Gets or sets FactType.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationExpression.DerivationRule
		/// </summary>
		public virtual FactType FactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationExpression.DerivationRuleDomainRoleId) as FactType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationExpression.FactTypeDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationExpression.FactTypeDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationExpression.DerivationRuleDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass SubtypeDerivationExpression
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationExpression.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationExpression.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("cce39440-4c8d-45e2-acfe-1642989d1107")]
	public partial class SubtypeDerivationExpression : Expression
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SubtypeDerivationExpression domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xcce39440, 0x4c8d, 0x45e2, 0xac, 0xfe, 0x16, 0x42, 0x98, 0x9d, 0x11, 0x07);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SubtypeDerivationExpression(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SubtypeDerivationExpression(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Subtype opposite domain role accessor
		/// <summary>
		/// Gets or sets Subtype.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationExpression.DerivationRule
		/// </summary>
		public virtual ObjectType Subtype
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationExpression.DerivationRuleDomainRoleId) as ObjectType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationExpression.SubtypeDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationExpression.SubtypeDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationExpression.DerivationRuleDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass ObjectTypeInstance
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstance.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstance.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {Name})")]
	[DslModeling::DomainObjectId("870f5ee8-0859-4710-a526-66635f4efd14")]
	public abstract partial class ObjectTypeInstance : ORMModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ObjectTypeInstance domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x870f5ee8, 0x0859, 0x4710, 0xa5, 0x26, 0x66, 0x63, 0x5f, 0x4e, 0xfd, 0x14);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ObjectTypeInstance(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x553deb12, 0x8fe0, 0x4fe4, 0xb9, 0x4e, 0x52, 0xf1, 0xcd, 0x5d, 0xcf, 0x0a);
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// An ordered tuple of values for this instance. If the parent &lt;see
		/// cref="ObjectType"/&gt; objectifies a &lt;see cref="FactType"/&gt;, then Name returns the
		/// FactType population prepended by an external identifier reference.
		/// </summary>
		[global::System.ComponentModel.MergableProperty(false)]
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstance/Name.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstance/Name.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::ElementName]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("553deb12-8fe0-4fe4-b94e-52f1cd5dcf0a")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return NamePropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			private set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ObjectTypeInstance.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<ObjectTypeInstance, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ObjectTypeInstance.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ObjectTypeInstance.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ObjectTypeInstance element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for Name because its Kind is
				// set to CustomStorage. Please provide the GetNameValue()
				// method on the domain class.
				return element.GetNameValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ObjectTypeInstance element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for Name because its Kind is
					// set to CustomStorage. Please provide the SetNameValue()
					// method on the domain class.
					element.SetNameValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IdentifierName domain property code
		
		/// <summary>
		/// IdentifierName domain property Id.
		/// </summary>
		public static readonly global::System.Guid IdentifierNameDomainPropertyId = new global::System.Guid(0xac967572, 0xb11e, 0x41c9, 0xa2, 0x06, 0xcc, 0x24, 0x24, 0xe5, 0xe1, 0x7e);
		
		/// <summary>
		/// Gets or sets the value of IdentifierName domain property.
		/// An ordered tuple of values for this instance, ignores objectification of the
		/// associated &lt;see cref="ObjectType"/&gt;.
		/// </summary>
		[global::System.ComponentModel.MergableProperty(false)]
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstance/IdentifierName.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstance/IdentifierName.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("ac967572-b11e-41c9-a206-cc2424e5e17e")]
		public global::System.String IdentifierName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return IdentifierNamePropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			private set
			{
				IdentifierNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ObjectTypeInstance.IdentifierName domain property.
		/// </summary>
		internal sealed partial class IdentifierNamePropertyHandler : DslModeling::DomainPropertyValueHandler<ObjectTypeInstance, global::System.String>
		{
			private IdentifierNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ObjectTypeInstance.IdentifierName domain property value handler.
			/// </summary>
			public static readonly IdentifierNamePropertyHandler Instance = new IdentifierNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ObjectTypeInstance.IdentifierName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IdentifierNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ObjectTypeInstance element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for IdentifierName because its Kind is
				// set to CustomStorage. Please provide the GetIdentifierNameValue()
				// method on the domain class.
				return element.GetIdentifierNameValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ObjectTypeInstance element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for IdentifierName because its Kind is
					// set to CustomStorage. Please provide the SetIdentifierNameValue()
					// method on the domain class.
					element.SetIdentifierNameValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region NameChanged domain property code
		
		/// <summary>
		/// NameChanged domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameChangedDomainPropertyId = new global::System.Guid(0xf1e0bb68, 0xf047, 0x464b, 0xb1, 0x7b, 0x6b, 0xa8, 0x65, 0x14, 0x4b, 0xb4);
		
		/// <summary>
		/// Gets or sets the value of NameChanged domain property.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstance.NameChanged
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstance/NameChanged.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstance/NameChanged.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("f1e0bb68-f047-464b-b17b-6ba865144bb4")]
		public global::System.Int64 NameChanged
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return NameChangedPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NameChangedPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ObjectTypeInstance.NameChanged domain property.
		/// </summary>
		internal sealed partial class NameChangedPropertyHandler : DslModeling::DomainPropertyValueHandler<ObjectTypeInstance, global::System.Int64>
		{
			private NameChangedPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ObjectTypeInstance.NameChanged domain property value handler.
			/// </summary>
			public static readonly NameChangedPropertyHandler Instance = new NameChangedPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ObjectTypeInstance.NameChanged domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameChangedDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int64 GetValue(ObjectTypeInstance element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for NameChanged because its Kind is
				// set to CustomStorage. Please provide the GetNameChangedValue()
				// method on the domain class.
				return element.GetNameChangedValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ObjectTypeInstance element, global::System.Int64 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int64 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for NameChanged because its Kind is
					// set to CustomStorage. Please provide the SetNameChangedValue()
					// method on the domain class.
					element.SetNameChangedValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region PopulationMandatoryErrorCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of PopulationMandatoryErrorCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError.ObjectTypeInstance
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<PopulationMandatoryError> PopulationMandatoryErrorCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<PopulationMandatoryError>, PopulationMandatoryError>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError.ObjectTypeInstanceDomainRoleId);
			}
		}
		#endregion
		#region ObjectType opposite domain role accessor
		/// <summary>
		/// Gets or sets ObjectType.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasObjectTypeInstance.ObjectTypeInstance
		/// </summary>
		public virtual ObjectType ObjectType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasObjectTypeInstance.ObjectTypeInstanceDomainRoleId) as ObjectType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasObjectTypeInstance.ObjectTypeInstanceDomainRoleId, value);
			}
		}
		#endregion
		#region RoleCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of RoleCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstance.ObjectTypeInstance
		/// </summary>
		public virtual DslModeling::ReadOnlyLinkedElementCollection<Role> RoleCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::ReadOnlyLinkedElementCollection<Role>, Role>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleInstance.ObjectTypeInstanceDomainRoleId);
			}
		}
		#endregion
		#region ObjectifiedInstance opposite domain role accessor
		/// <summary>
		/// Gets or sets ObjectifiedInstance.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationInstance.ObjectifyingInstance
		/// </summary>
		public virtual FactTypeInstance ObjectifiedInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationInstance.ObjectifyingInstanceDomainRoleId) as FactTypeInstance;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationInstance.ObjectifiedInstanceDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationInstance.ObjectifiedInstanceDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationInstance.ObjectifyingInstanceDomainRoleId, value);
				}
			}
		}
		#endregion
		#region ObjectifiedInstanceRequiredError opposite domain role accessor
		/// <summary>
		/// Gets or sets ObjectifiedInstanceRequiredError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifyingInstanceHasObjectifiedInstanceRequiredError.ObjectTypeInstance
		/// </summary>
		public virtual ObjectifiedInstanceRequiredError ObjectifiedInstanceRequiredError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifyingInstanceHasObjectifiedInstanceRequiredError.ObjectTypeInstanceDomainRoleId) as ObjectifiedInstanceRequiredError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifyingInstanceHasObjectifiedInstanceRequiredError.ObjectifiedInstanceRequiredErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifyingInstanceHasObjectifiedInstanceRequiredError.ObjectifiedInstanceRequiredErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifyingInstanceHasObjectifiedInstanceRequiredError.ObjectTypeInstanceDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass EntityTypeInstance
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstance.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstance.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("5f8b6a1c-3020-41c9-97b4-e54a3e98b368")]
	public partial class EntityTypeInstance : ObjectTypeInstance
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// EntityTypeInstance domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5f8b6a1c, 0x3020, 0x41c9, 0x97, 0xb4, 0xe5, 0x4a, 0x3e, 0x98, 0xb3, 0x68);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EntityTypeInstance(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EntityTypeInstance(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region EntityType opposite domain role accessor
		/// <summary>
		/// Gets or sets EntityType.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasEntityTypeInstance.EntityTypeInstance
		/// </summary>
		public virtual ObjectType EntityType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasEntityTypeInstance.EntityTypeInstanceDomainRoleId) as ObjectType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasEntityTypeInstance.EntityTypeInstanceDomainRoleId, value);
			}
		}
		#endregion
		#region RoleInstanceCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of RoleInstanceCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasRoleInstance.EntityTypeInstance
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<EntityTypeRoleInstance> RoleInstanceCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<EntityTypeRoleInstance>, EntityTypeRoleInstance>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasRoleInstance.EntityTypeInstanceDomainRoleId);
			}
		}
		#endregion
		#region EntityTypeSubtypeInstanceCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of EntityTypeSubtypeInstanceCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeInstanceHasSupertypeInstance.SupertypeInstance
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<EntityTypeSubtypeInstance> EntityTypeSubtypeInstanceCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<EntityTypeSubtypeInstance>, EntityTypeSubtypeInstance>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeInstanceHasSupertypeInstance.SupertypeInstanceDomainRoleId);
			}
		}
		#endregion
		#region TooFewEntityTypeRoleInstancesError opposite domain role accessor
		/// <summary>
		/// Gets or sets TooFewEntityTypeRoleInstancesError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError.EntityTypeInstance
		/// </summary>
		public virtual TooFewEntityTypeRoleInstancesError TooFewEntityTypeRoleInstancesError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError.EntityTypeInstanceDomainRoleId) as TooFewEntityTypeRoleInstancesError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError.TooFewEntityTypeRoleInstancesErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError.TooFewEntityTypeRoleInstancesErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError.EntityTypeInstanceDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass EntityTypeSubtypeInstance
	/// An instance of an EntityType Subtype that uses the preferred identification
	/// scheme of a parent.
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeInstance.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeInstance.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("19f9a457-d2c6-4d0a-b767-542df80feff3")]
	public partial class EntityTypeSubtypeInstance : ObjectTypeInstance
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// EntityTypeSubtypeInstance domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x19f9a457, 0xd2c6, 0x4d0a, 0xb7, 0x67, 0x54, 0x2d, 0xf8, 0x0f, 0xef, 0xf3);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EntityTypeSubtypeInstance(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EntityTypeSubtypeInstance(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region EntityTypeSubtype opposite domain role accessor
		/// <summary>
		/// Gets or sets EntityTypeSubtype.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeHasEntityTypeSubtypeInstance.EntityTypeSubtypeInstance
		/// </summary>
		public virtual ObjectType EntityTypeSubtype
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeHasEntityTypeSubtypeInstance.EntityTypeSubtypeInstanceDomainRoleId) as ObjectType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeHasEntityTypeSubtypeInstance.EntityTypeSubtypeInstanceDomainRoleId, value);
			}
		}
		#endregion
		#region SupertypeInstance opposite domain role accessor
		/// <summary>
		/// Gets or sets SupertypeInstance.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeInstanceHasSupertypeInstance.EntityTypeSubtypeInstance
		/// </summary>
		public virtual EntityTypeInstance SupertypeInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeInstanceHasSupertypeInstance.EntityTypeSubtypeInstanceDomainRoleId) as EntityTypeInstance;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeInstanceHasSupertypeInstance.EntityTypeSubtypeInstanceDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass ValueTypeInstance
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeInstance.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeInstance.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("bcc1483d-cbb8-4e4f-903b-16224768f6f5")]
	public partial class ValueTypeInstance : ObjectTypeInstance
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ValueTypeInstance domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbcc1483d, 0xcbb8, 0x4e4f, 0x90, 0x3b, 0x16, 0x22, 0x47, 0x68, 0xf6, 0xf5);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ValueTypeInstance(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ValueTypeInstance(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Value domain property code
		
		/// <summary>
		/// Value domain property Id.
		/// </summary>
		public static readonly global::System.Guid ValueDomainPropertyId = new global::System.Guid(0x1d0232ba, 0xa92f, 0x4b81, 0x99, 0xbf, 0x2a, 0x2a, 0x44, 0x82, 0x10, 0x30);
		
		/// <summary>
		/// Storage for Value
		/// </summary>
		private global::System.String valuePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Value domain property.
		/// The instance value.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeInstance/Value.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeInstance/Value.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("1d0232ba-a92f-4b81-99bf-2a2a44821030")]
		public global::System.String Value
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return valuePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ValuePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ValueTypeInstance.Value domain property.
		/// </summary>
		internal sealed partial class ValuePropertyHandler : DslModeling::DomainPropertyValueHandler<ValueTypeInstance, global::System.String>
		{
			private ValuePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ValueTypeInstance.Value domain property value handler.
			/// </summary>
			public static readonly ValuePropertyHandler Instance = new ValuePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ValueTypeInstance.Value domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ValueDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ValueTypeInstance element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.valuePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ValueTypeInstance element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.valuePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region InvariantValue domain property code
		
		/// <summary>
		/// InvariantValue domain property Id.
		/// </summary>
		public static readonly global::System.Guid InvariantValueDomainPropertyId = new global::System.Guid(0x724b068b, 0x5dfe, 0x4c0c, 0xb2, 0x1c, 0xb4, 0x8f, 0xdc, 0x7a, 0x17, 0x52);
		
		/// <summary>
		/// Storage for InvariantValue
		/// </summary>
		private global::System.String invariantValuePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of InvariantValue domain property.
		/// The culture-invariant form of the value property.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeInstance/InvariantValue.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeInstance/InvariantValue.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("724b068b-5dfe-4c0c-b21c-b48fdc7a1752")]
		public global::System.String InvariantValue
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return invariantValuePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				InvariantValuePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ValueTypeInstance.InvariantValue domain property.
		/// </summary>
		internal sealed partial class InvariantValuePropertyHandler : DslModeling::DomainPropertyValueHandler<ValueTypeInstance, global::System.String>
		{
			private InvariantValuePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ValueTypeInstance.InvariantValue domain property value handler.
			/// </summary>
			public static readonly InvariantValuePropertyHandler Instance = new InvariantValuePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ValueTypeInstance.InvariantValue domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return InvariantValueDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ValueTypeInstance element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.invariantValuePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ValueTypeInstance element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.invariantValuePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ValueType opposite domain role accessor
		/// <summary>
		/// Gets or sets ValueType.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueTypeInstance.ValueTypeInstance
		/// </summary>
		public virtual ObjectType ValueType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueTypeInstance.ValueTypeInstanceDomainRoleId) as ObjectType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueTypeInstance.ValueTypeInstanceDomainRoleId, value);
			}
		}
		#endregion
		#region CompatibleValueTypeInstanceValueError opposite domain role accessor
		/// <summary>
		/// Gets or sets CompatibleValueTypeInstanceValueError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError.ValueTypeInstance
		/// </summary>
		public virtual CompatibleValueTypeInstanceValueError CompatibleValueTypeInstanceValueError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError.ValueTypeInstanceDomainRoleId) as CompatibleValueTypeInstanceValueError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError.CompatibleValueTypeInstanceValueErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError.CompatibleValueTypeInstanceValueErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError.ValueTypeInstanceDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass FactTypeInstance
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstance.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstance.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {Name})")]
	[DslModeling::DomainObjectId("78458a27-fdb1-4b6e-9d0a-d42dd8d5aead")]
	public partial class FactTypeInstance : ORMModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// FactTypeInstance domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x78458a27, 0xfdb1, 0x4b6e, 0x9d, 0x0a, 0xd4, 0x2d, 0xd8, 0xd5, 0xae, 0xad);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FactTypeInstance(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FactTypeInstance(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xaa6cfb60, 0x9f6a, 0x48ab, 0xab, 0x0f, 0x44, 0x5b, 0xf7, 0x11, 0x2f, 0xb9);
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstance.Name
		/// </summary>
		[global::System.ComponentModel.MergableProperty(false)]
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstance/Name.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstance/Name.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::ElementName]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("aa6cfb60-9f6a-48ab-ab0f-445bf7112fb9")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return NamePropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			private set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FactTypeInstance.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<FactTypeInstance, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FactTypeInstance.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FactTypeInstance.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FactTypeInstance element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for Name because its Kind is
				// set to CustomStorage. Please provide the GetNameValue()
				// method on the domain class.
				return element.GetNameValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FactTypeInstance element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for Name because its Kind is
					// set to CustomStorage. Please provide the SetNameValue()
					// method on the domain class.
					element.SetNameValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region NameChanged domain property code
		
		/// <summary>
		/// NameChanged domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameChangedDomainPropertyId = new global::System.Guid(0xf510e9db, 0x71bf, 0x4d70, 0xb3, 0x6a, 0x4c, 0x6b, 0xf1, 0x7d, 0x09, 0x17);
		
		/// <summary>
		/// Gets or sets the value of NameChanged domain property.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstance.NameChanged
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstance/NameChanged.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstance/NameChanged.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("f510e9db-71bf-4d70-b36a-4c6bf17d0917")]
		public global::System.Int64 NameChanged
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return NameChangedPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NameChangedPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FactTypeInstance.NameChanged domain property.
		/// </summary>
		internal sealed partial class NameChangedPropertyHandler : DslModeling::DomainPropertyValueHandler<FactTypeInstance, global::System.Int64>
		{
			private NameChangedPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FactTypeInstance.NameChanged domain property value handler.
			/// </summary>
			public static readonly NameChangedPropertyHandler Instance = new NameChangedPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FactTypeInstance.NameChanged domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameChangedDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int64 GetValue(FactTypeInstance element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for NameChanged because its Kind is
				// set to CustomStorage. Please provide the GetNameChangedValue()
				// method on the domain class.
				return element.GetNameChangedValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FactTypeInstance element, global::System.Int64 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int64 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for NameChanged because its Kind is
					// set to CustomStorage. Please provide the SetNameChangedValue()
					// method on the domain class.
					element.SetNameChangedValue(newValue);
					//ValueChanged(element, oldValue, GetValue(element));
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region FactType opposite domain role accessor
		/// <summary>
		/// Gets or sets FactType.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeInstance.FactTypeInstance
		/// </summary>
		public virtual FactType FactType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeInstance.FactTypeInstanceDomainRoleId) as FactType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeInstance.FactTypeInstanceDomainRoleId, value);
			}
		}
		#endregion
		#region RoleInstanceCollection opposite domain role accessor
		
		/// <summary>
		/// Gets a list of RoleInstanceCollection.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasRoleInstance.FactTypeInstance
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<FactTypeRoleInstance> RoleInstanceCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<FactTypeRoleInstance>, FactTypeRoleInstance>(global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasRoleInstance.FactTypeInstanceDomainRoleId);
			}
		}
		#endregion
		#region ObjectifyingInstance opposite domain role accessor
		/// <summary>
		/// Gets or sets ObjectifyingInstance.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationInstance.ObjectifiedInstance
		/// </summary>
		public virtual ObjectTypeInstance ObjectifyingInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationInstance.ObjectifiedInstanceDomainRoleId) as ObjectTypeInstance;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationInstance.ObjectifyingInstanceDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationInstance.ObjectifyingInstanceDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationInstance.ObjectifiedInstanceDomainRoleId, value);
				}
			}
		}
		#endregion
		#region ObjectifyingInstanceRequiredError opposite domain role accessor
		/// <summary>
		/// Gets or sets ObjectifyingInstanceRequiredError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedInstanceHasObjectifyingInstanceRequiredError.FactTypeInstance
		/// </summary>
		public virtual ObjectifyingInstanceRequiredError ObjectifyingInstanceRequiredError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedInstanceHasObjectifyingInstanceRequiredError.FactTypeInstanceDomainRoleId) as ObjectifyingInstanceRequiredError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedInstanceHasObjectifyingInstanceRequiredError.ObjectifyingInstanceRequiredErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedInstanceHasObjectifyingInstanceRequiredError.ObjectifyingInstanceRequiredErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedInstanceHasObjectifyingInstanceRequiredError.FactTypeInstanceDomainRoleId, value);
				}
			}
		}
		#endregion
		#region TooFewFactTypeRoleInstancesError opposite domain role accessor
		/// <summary>
		/// Gets or sets TooFewFactTypeRoleInstancesError.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError.FactTypeInstance
		/// </summary>
		public virtual TooFewFactTypeRoleInstancesError TooFewFactTypeRoleInstancesError
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError.FactTypeInstanceDomainRoleId) as TooFewFactTypeRoleInstancesError;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError.TooFewFactTypeRoleInstancesErrorDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError.TooFewFactTypeRoleInstancesErrorDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError.FactTypeInstanceDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass TooFewEntityTypeRoleInstancesError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.TooFewEntityTypeRoleInstancesError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.TooFewEntityTypeRoleInstancesError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("39f447ea-8ea4-483d-b791-848ad27544e2")]
	public partial class TooFewEntityTypeRoleInstancesError : ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// TooFewEntityTypeRoleInstancesError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x39f447ea, 0x8ea4, 0x483d, 0xb7, 0x91, 0x84, 0x8a, 0xd2, 0x75, 0x44, 0xe2);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TooFewEntityTypeRoleInstancesError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TooFewEntityTypeRoleInstancesError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region EntityTypeInstance opposite domain role accessor
		/// <summary>
		/// Gets or sets EntityTypeInstance.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError.TooFewEntityTypeRoleInstancesError
		/// </summary>
		public virtual EntityTypeInstance EntityTypeInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError.TooFewEntityTypeRoleInstancesErrorDomainRoleId) as EntityTypeInstance;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError.EntityTypeInstanceDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError.EntityTypeInstanceDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError.TooFewEntityTypeRoleInstancesErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass TooFewFactTypeRoleInstancesError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.TooFewFactTypeRoleInstancesError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.TooFewFactTypeRoleInstancesError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("be44dd74-2569-421e-8e1b-abcdc7810c92")]
	public partial class TooFewFactTypeRoleInstancesError : ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// TooFewFactTypeRoleInstancesError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbe44dd74, 0x2569, 0x421e, 0x8e, 0x1b, 0xab, 0xcd, 0xc7, 0x81, 0x0c, 0x92);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TooFewFactTypeRoleInstancesError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TooFewFactTypeRoleInstancesError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region FactTypeInstance opposite domain role accessor
		/// <summary>
		/// Gets or sets FactTypeInstance.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError.TooFewFactTypeRoleInstancesError
		/// </summary>
		public virtual FactTypeInstance FactTypeInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError.TooFewFactTypeRoleInstancesErrorDomainRoleId) as FactTypeInstance;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError.FactTypeInstanceDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError.FactTypeInstanceDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError.TooFewFactTypeRoleInstancesErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass CompatibleValueTypeInstanceValueError
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CompatibleValueTypeInstanceValueError.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.CompatibleValueTypeInstanceValueError.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("d5b21137-31e8-444d-bcd2-58bbf442b4c0")]
	public partial class CompatibleValueTypeInstanceValueError : ModelError
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// CompatibleValueTypeInstanceValueError domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd5b21137, 0x31e8, 0x444d, 0xbc, 0xd2, 0x58, 0xbb, 0xf4, 0x42, 0xb4, 0xc0);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CompatibleValueTypeInstanceValueError(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CompatibleValueTypeInstanceValueError(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ValueTypeInstance opposite domain role accessor
		/// <summary>
		/// Gets or sets ValueTypeInstance.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError.CompatibleValueTypeInstanceValueError
		/// </summary>
		public virtual ValueTypeInstance ValueTypeInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError.CompatibleValueTypeInstanceValueErrorDomainRoleId) as ValueTypeInstance;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::ModelElement existingSource;
				if (null != value &&
					null != (existingSource = DslModeling::DomainRoleInfo.GetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError.ValueTypeInstanceDomainRoleId)))
				{
					if (existingSource != value)
					{
						DslModeling::DomainRoleInfo.SetLinkedElement(value, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError.ValueTypeInstanceDomainRoleId, this);
					}
				}
				else
				{
					DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError.CompatibleValueTypeInstanceValueErrorDomainRoleId, value);
				}
			}
		}
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass ReferenceModeNaming
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeNaming.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeNaming.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("b49ae46d-1551-4477-a2eb-c56415059912")]
	public abstract partial class ReferenceModeNaming : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ReferenceModeNaming domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb49ae46d, 0x1551, 0x4477, 0xa2, 0xeb, 0xc5, 0x64, 0x15, 0x05, 0x99, 0x12);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ReferenceModeNaming(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region NamingChoice domain property code
		
		/// <summary>
		/// NamingChoice domain property Id.
		/// </summary>
		public static readonly global::System.Guid NamingChoiceDomainPropertyId = new global::System.Guid(0x3e60bebc, 0x05e3, 0x4d6e, 0x86, 0x62, 0x66, 0xc0, 0x4f, 0xf2, 0x7b, 0x8f);
		
		/// <summary>
		/// Storage for NamingChoice
		/// </summary>
		private ReferenceModeNamingChoice namingChoicePropertyStorage = ReferenceModeNamingChoice.ModelDefault;
		
		/// <summary>
		/// Gets or sets the value of NamingChoice domain property.
		/// The naming pattern used for references to this EntityType.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeNaming/NamingChoice.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeNaming/NamingChoice.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue(ReferenceModeNamingChoice.ModelDefault)]
		[DslModeling::DomainObjectId("3e60bebc-05e3-4d6e-8662-66c04ff27b8f")]
		public ReferenceModeNamingChoice NamingChoice
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namingChoicePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamingChoicePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ReferenceModeNaming.NamingChoice domain property.
		/// </summary>
		internal sealed partial class NamingChoicePropertyHandler : DslModeling::DomainPropertyValueHandler<ReferenceModeNaming, ReferenceModeNamingChoice>
		{
			private NamingChoicePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ReferenceModeNaming.NamingChoice domain property value handler.
			/// </summary>
			public static readonly NamingChoicePropertyHandler Instance = new NamingChoicePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ReferenceModeNaming.NamingChoice domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NamingChoiceDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed ReferenceModeNamingChoice GetValue(ReferenceModeNaming element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namingChoicePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ReferenceModeNaming element, ReferenceModeNamingChoice newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				ReferenceModeNamingChoice oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namingChoicePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region CustomFormat domain property code
		
		/// <summary>
		/// CustomFormat domain property Id.
		/// </summary>
		public static readonly global::System.Guid CustomFormatDomainPropertyId = new global::System.Guid(0x24265c6b, 0x8058, 0x43ae, 0x91, 0xa3, 0xd0, 0x49, 0x68, 0xca, 0x7c, 0x32);
		
		/// <summary>
		/// Storage for CustomFormat
		/// </summary>
		private global::System.String customFormatPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of CustomFormat domain property.
		/// The custom naming format used for references to this EntityType.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeNaming/CustomFormat.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeNaming/CustomFormat.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("24265c6b-8058-43ae-91a3-d04968ca7c32")]
		public global::System.String CustomFormat
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return customFormatPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CustomFormatPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ReferenceModeNaming.CustomFormat domain property.
		/// </summary>
		internal sealed partial class CustomFormatPropertyHandler : DslModeling::DomainPropertyValueHandler<ReferenceModeNaming, global::System.String>
		{
			private CustomFormatPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ReferenceModeNaming.CustomFormat domain property value handler.
			/// </summary>
			public static readonly CustomFormatPropertyHandler Instance = new CustomFormatPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ReferenceModeNaming.CustomFormat domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CustomFormatDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ReferenceModeNaming element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.customFormatPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ReferenceModeNaming element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.customFormatPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region PrimaryIdentifierNamingChoice domain property code
		
		/// <summary>
		/// PrimaryIdentifierNamingChoice domain property Id.
		/// </summary>
		public static readonly global::System.Guid PrimaryIdentifierNamingChoiceDomainPropertyId = new global::System.Guid(0xbad8149a, 0xdb92, 0x4c8e, 0xb6, 0x46, 0x4d, 0x6d, 0x7b, 0xdb, 0xc3, 0xbc);
		
		/// <summary>
		/// Storage for PrimaryIdentifierNamingChoice
		/// </summary>
		private ReferenceModeNamingChoice primaryIdentifierNamingChoicePropertyStorage = ReferenceModeNamingChoice.ModelDefault;
		
		/// <summary>
		/// Gets or sets the value of PrimaryIdentifierNamingChoice domain property.
		/// The naming pattern used for simple primary identification of this EntityType.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeNaming/PrimaryIdentifierNamingChoice.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeNaming/PrimaryIdentifierNamingChoice.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue(ReferenceModeNamingChoice.ModelDefault)]
		[DslModeling::DomainObjectId("bad8149a-db92-4c8e-b646-4d6d7bdbc3bc")]
		public ReferenceModeNamingChoice PrimaryIdentifierNamingChoice
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return primaryIdentifierNamingChoicePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				PrimaryIdentifierNamingChoicePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ReferenceModeNaming.PrimaryIdentifierNamingChoice domain property.
		/// </summary>
		internal sealed partial class PrimaryIdentifierNamingChoicePropertyHandler : DslModeling::DomainPropertyValueHandler<ReferenceModeNaming, ReferenceModeNamingChoice>
		{
			private PrimaryIdentifierNamingChoicePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ReferenceModeNaming.PrimaryIdentifierNamingChoice domain property value handler.
			/// </summary>
			public static readonly PrimaryIdentifierNamingChoicePropertyHandler Instance = new PrimaryIdentifierNamingChoicePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ReferenceModeNaming.PrimaryIdentifierNamingChoice domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PrimaryIdentifierNamingChoiceDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed ReferenceModeNamingChoice GetValue(ReferenceModeNaming element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.primaryIdentifierNamingChoicePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ReferenceModeNaming element, ReferenceModeNamingChoice newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				ReferenceModeNamingChoice oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.primaryIdentifierNamingChoicePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region PrimaryIdentifierCustomFormat domain property code
		
		/// <summary>
		/// PrimaryIdentifierCustomFormat domain property Id.
		/// </summary>
		public static readonly global::System.Guid PrimaryIdentifierCustomFormatDomainPropertyId = new global::System.Guid(0xe7c711bd, 0x9687, 0x4fc8, 0x96, 0xc9, 0xfe, 0x31, 0x4c, 0x47, 0x09, 0x9d);
		
		/// <summary>
		/// Storage for PrimaryIdentifierCustomFormat
		/// </summary>
		private global::System.String primaryIdentifierCustomFormatPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of PrimaryIdentifierCustomFormat domain property.
		/// The custom naming format used for simple primary identification of this
		/// EntityType.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeNaming/PrimaryIdentifierCustomFormat.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeNaming/PrimaryIdentifierCustomFormat.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("e7c711bd-9687-4fc8-96c9-fe314c47099d")]
		public global::System.String PrimaryIdentifierCustomFormat
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return primaryIdentifierCustomFormatPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				PrimaryIdentifierCustomFormatPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ReferenceModeNaming.PrimaryIdentifierCustomFormat domain property.
		/// </summary>
		internal sealed partial class PrimaryIdentifierCustomFormatPropertyHandler : DslModeling::DomainPropertyValueHandler<ReferenceModeNaming, global::System.String>
		{
			private PrimaryIdentifierCustomFormatPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ReferenceModeNaming.PrimaryIdentifierCustomFormat domain property value handler.
			/// </summary>
			public static readonly PrimaryIdentifierCustomFormatPropertyHandler Instance = new PrimaryIdentifierCustomFormatPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ReferenceModeNaming.PrimaryIdentifierCustomFormat domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PrimaryIdentifierCustomFormatDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ReferenceModeNaming element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.primaryIdentifierCustomFormatPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ReferenceModeNaming element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.primaryIdentifierCustomFormatPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainClass DefaultReferenceModeNaming
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DefaultReferenceModeNaming.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DefaultReferenceModeNaming.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("443f27d8-44d6-4d4d-a918-2b9e7f613157")]
	public abstract partial class DefaultReferenceModeNaming : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DefaultReferenceModeNaming domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x443f27d8, 0x44d6, 0x4d4d, 0xa9, 0x18, 0x2b, 0x9e, 0x7f, 0x61, 0x31, 0x57);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected DefaultReferenceModeNaming(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region NamingChoice domain property code
		
		/// <summary>
		/// NamingChoice domain property Id.
		/// </summary>
		public static readonly global::System.Guid NamingChoiceDomainPropertyId = new global::System.Guid(0x178450ce, 0xa301, 0x4022, 0x9c, 0xa7, 0xad, 0xc2, 0x8f, 0x59, 0xd7, 0xc9);
		
		/// <summary>
		/// Storage for NamingChoice
		/// </summary>
		private EffectiveReferenceModeNamingChoice namingChoicePropertyStorage = EffectiveReferenceModeNamingChoice.ValueTypeName;
		
		/// <summary>
		/// Gets or sets the value of NamingChoice domain property.
		/// The default naming pattern used for references to EntityTypes with this kind of
		/// reference mode.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DefaultReferenceModeNaming/NamingChoice.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DefaultReferenceModeNaming/NamingChoice.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue(EffectiveReferenceModeNamingChoice.ValueTypeName)]
		[DslModeling::DomainObjectId("178450ce-a301-4022-9ca7-adc28f59d7c9")]
		public EffectiveReferenceModeNamingChoice NamingChoice
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namingChoicePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamingChoicePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DefaultReferenceModeNaming.NamingChoice domain property.
		/// </summary>
		internal sealed partial class NamingChoicePropertyHandler : DslModeling::DomainPropertyValueHandler<DefaultReferenceModeNaming, EffectiveReferenceModeNamingChoice>
		{
			private NamingChoicePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DefaultReferenceModeNaming.NamingChoice domain property value handler.
			/// </summary>
			public static readonly NamingChoicePropertyHandler Instance = new NamingChoicePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DefaultReferenceModeNaming.NamingChoice domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NamingChoiceDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed EffectiveReferenceModeNamingChoice GetValue(DefaultReferenceModeNaming element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namingChoicePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DefaultReferenceModeNaming element, EffectiveReferenceModeNamingChoice newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				EffectiveReferenceModeNamingChoice oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namingChoicePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region CustomFormat domain property code
		
		/// <summary>
		/// CustomFormat domain property Id.
		/// </summary>
		public static readonly global::System.Guid CustomFormatDomainPropertyId = new global::System.Guid(0xd0266c9e, 0xc95e, 0x43a6, 0xa8, 0x74, 0xa0, 0xeb, 0xe0, 0x8f, 0x5e, 0x28);
		
		/// <summary>
		/// Storage for CustomFormat
		/// </summary>
		private global::System.String customFormatPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of CustomFormat domain property.
		/// The default custom naming format used for references to EntityTypes with custom
		/// naming formats.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DefaultReferenceModeNaming/CustomFormat.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DefaultReferenceModeNaming/CustomFormat.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("d0266c9e-c95e-43a6-a874-a0ebe08f5e28")]
		public global::System.String CustomFormat
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return customFormatPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CustomFormatPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DefaultReferenceModeNaming.CustomFormat domain property.
		/// </summary>
		internal sealed partial class CustomFormatPropertyHandler : DslModeling::DomainPropertyValueHandler<DefaultReferenceModeNaming, global::System.String>
		{
			private CustomFormatPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DefaultReferenceModeNaming.CustomFormat domain property value handler.
			/// </summary>
			public static readonly CustomFormatPropertyHandler Instance = new CustomFormatPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DefaultReferenceModeNaming.CustomFormat domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CustomFormatDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DefaultReferenceModeNaming element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.customFormatPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DefaultReferenceModeNaming element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.customFormatPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region PrimaryIdentifierNamingChoice domain property code
		
		/// <summary>
		/// PrimaryIdentifierNamingChoice domain property Id.
		/// </summary>
		public static readonly global::System.Guid PrimaryIdentifierNamingChoiceDomainPropertyId = new global::System.Guid(0x63ddcaa0, 0x330f, 0x4bb6, 0x8f, 0xca, 0x82, 0x73, 0xfa, 0x3a, 0xaa, 0xe4);
		
		/// <summary>
		/// Storage for PrimaryIdentifierNamingChoice
		/// </summary>
		private EffectiveReferenceModeNamingChoice primaryIdentifierNamingChoicePropertyStorage = EffectiveReferenceModeNamingChoice.ValueTypeName;
		
		/// <summary>
		/// Gets or sets the value of PrimaryIdentifierNamingChoice domain property.
		/// The default naming pattern used for simple primary identification of EntityTypes
		/// with this kind of reference mode.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DefaultReferenceModeNaming/PrimaryIdentifierNamingChoice.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DefaultReferenceModeNaming/PrimaryIdentifierNamingChoice.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue(EffectiveReferenceModeNamingChoice.ValueTypeName)]
		[DslModeling::DomainObjectId("63ddcaa0-330f-4bb6-8fca-8273fa3aaae4")]
		public EffectiveReferenceModeNamingChoice PrimaryIdentifierNamingChoice
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return primaryIdentifierNamingChoicePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				PrimaryIdentifierNamingChoicePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DefaultReferenceModeNaming.PrimaryIdentifierNamingChoice domain property.
		/// </summary>
		internal sealed partial class PrimaryIdentifierNamingChoicePropertyHandler : DslModeling::DomainPropertyValueHandler<DefaultReferenceModeNaming, EffectiveReferenceModeNamingChoice>
		{
			private PrimaryIdentifierNamingChoicePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DefaultReferenceModeNaming.PrimaryIdentifierNamingChoice domain property value handler.
			/// </summary>
			public static readonly PrimaryIdentifierNamingChoicePropertyHandler Instance = new PrimaryIdentifierNamingChoicePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DefaultReferenceModeNaming.PrimaryIdentifierNamingChoice domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PrimaryIdentifierNamingChoiceDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed EffectiveReferenceModeNamingChoice GetValue(DefaultReferenceModeNaming element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.primaryIdentifierNamingChoicePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DefaultReferenceModeNaming element, EffectiveReferenceModeNamingChoice newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				EffectiveReferenceModeNamingChoice oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.primaryIdentifierNamingChoicePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region PrimaryIdentifierCustomFormat domain property code
		
		/// <summary>
		/// PrimaryIdentifierCustomFormat domain property Id.
		/// </summary>
		public static readonly global::System.Guid PrimaryIdentifierCustomFormatDomainPropertyId = new global::System.Guid(0xb393f62e, 0xe784, 0x488c, 0xbd, 0x72, 0x3a, 0x4c, 0x69, 0xa7, 0xfe, 0x97);
		
		/// <summary>
		/// Storage for PrimaryIdentifierCustomFormat
		/// </summary>
		private global::System.String primaryIdentifierCustomFormatPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of PrimaryIdentifierCustomFormat domain property.
		/// The default custom naming format used for simple primary identification of
		/// EntityTypes with custom naming formats.
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DefaultReferenceModeNaming/PrimaryIdentifierCustomFormat.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DefaultReferenceModeNaming/PrimaryIdentifierCustomFormat.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("b393f62e-e784-488c-bd72-3a4c69a7fe97")]
		public global::System.String PrimaryIdentifierCustomFormat
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return primaryIdentifierCustomFormatPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				PrimaryIdentifierCustomFormatPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DefaultReferenceModeNaming.PrimaryIdentifierCustomFormat domain property.
		/// </summary>
		internal sealed partial class PrimaryIdentifierCustomFormatPropertyHandler : DslModeling::DomainPropertyValueHandler<DefaultReferenceModeNaming, global::System.String>
		{
			private PrimaryIdentifierCustomFormatPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DefaultReferenceModeNaming.PrimaryIdentifierCustomFormat domain property value handler.
			/// </summary>
			public static readonly PrimaryIdentifierCustomFormatPropertyHandler Instance = new PrimaryIdentifierCustomFormatPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DefaultReferenceModeNaming.PrimaryIdentifierCustomFormat domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PrimaryIdentifierCustomFormatDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DefaultReferenceModeNaming element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.primaryIdentifierCustomFormatPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DefaultReferenceModeNaming element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.primaryIdentifierCustomFormatPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ReferenceModeTargetKind domain property code
		
		/// <summary>
		/// ReferenceModeTargetKind domain property Id.
		/// </summary>
		public static readonly global::System.Guid ReferenceModeTargetKindDomainPropertyId = new global::System.Guid(0x1699fa2a, 0xd247, 0x4d5b, 0x9b, 0x4c, 0x7e, 0x14, 0x7b, 0x24, 0x59, 0xaf);
		
		/// <summary>
		/// Storage for ReferenceModeTargetKind
		/// </summary>
		private ReferenceModeType referenceModeTargetKindPropertyStorage = ReferenceModeType.Popular;
		
		/// <summary>
		/// Gets or sets the value of ReferenceModeTargetKind domain property.
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.DefaultReferenceModeNaming.ReferenceModeTargetKind
		/// </summary>
		[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DefaultReferenceModeNaming/ReferenceModeTargetKind.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DefaultReferenceModeNaming/ReferenceModeTargetKind.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		[global::System.ComponentModel.DefaultValue(ReferenceModeType.Popular)]
		[DslModeling::DomainObjectId("1699fa2a-d247-4d5b-9b4c-7e147b2459af")]
		public ReferenceModeType ReferenceModeTargetKind
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return referenceModeTargetKindPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ReferenceModeTargetKindPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DefaultReferenceModeNaming.ReferenceModeTargetKind domain property.
		/// </summary>
		internal sealed partial class ReferenceModeTargetKindPropertyHandler : DslModeling::DomainPropertyValueHandler<DefaultReferenceModeNaming, ReferenceModeType>
		{
			private ReferenceModeTargetKindPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DefaultReferenceModeNaming.ReferenceModeTargetKind domain property value handler.
			/// </summary>
			public static readonly ReferenceModeTargetKindPropertyHandler Instance = new ReferenceModeTargetKindPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DefaultReferenceModeNaming.ReferenceModeTargetKind domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ReferenceModeTargetKindDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed ReferenceModeType GetValue(DefaultReferenceModeNaming element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.referenceModeTargetKindPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DefaultReferenceModeNaming element, ReferenceModeType newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				ReferenceModeType oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.referenceModeTargetKindPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
