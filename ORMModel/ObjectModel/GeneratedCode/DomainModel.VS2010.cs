#region Common Public License Copyright Notice
/**************************************************************************\
* Natural Object-Role Modeling Architect for Visual Studio                 *
*                                                                          *
* Copyright © Neumont University. All rights reserved.                     *
* Copyright © ORM Solutions, LLC. All rights reserved.                     *
*                                                                          *
* The use and distribution terms for this software are covered by the      *
* Common Public License 1.0 (http://opensource.org/licenses/cpl) which     *
* can be found in the file CPL.txt at the root of this distribution.       *
* By using this software in any fashion, you are agreeing to be bound by   *
* the terms of this license.                                               *
*                                                                          *
* You must not remove this notice, or any other, from this software.       *
\**************************************************************************/
#endregion
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainModel ORMCoreDomainModel
	/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCore
	/// </summary>
	[DslDesign::DisplayNameResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel.DisplayName", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DependsOnDomainModel(typeof(global::Microsoft.VisualStudio.Modeling.CoreDomainModel))]
	[DslModeling::DependsOnDomainModel(typeof(global::ORMSolutions.ORMArchitect.Framework.FrameworkDomainModel))]
	[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]
	[DslModeling::DomainObjectId("3eae649f-e654-4d04-8289-c25d2c0322d8")]
	public partial class ORMCoreDomainModel : DslModeling::DomainModel
	{
		#region Constructor, domain model Id
	
		/// <summary>
		/// ORMCoreDomainModel domain model Id.
		/// </summary>
		public static readonly global::System.Guid DomainModelId = new global::System.Guid(0x3eae649f, 0xe654, 0x4d04, 0x82, 0x89, 0xc2, 0x5d, 0x2c, 0x03, 0x22, 0xd8);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="store">Store containing the domain model.</param>
		public ORMCoreDomainModel(DslModeling::Store store)
			: base(store, DomainModelId)
		{
			// Call the partial method to allow any required serialization setup to be done.
			this.InitializeSerialization(store);		
		}
		
	
		///<Summary>
		/// Defines a partial method that will be called from the constructor to
		/// allow any necessary serialization setup to be done.
		///</Summary>
		///<remarks>
		/// For a DSL created with the DSL Designer wizard, an implementation of this 
		/// method will be generated in the GeneratedCode\SerializationHelper.cs class.
		///</remarks>
		partial void InitializeSerialization(DslModeling::Store store);
	
	
		#endregion
		#region Domain model reflection
			
		/// <summary>
		/// Gets the list of generated domain model types (classes, rules, relationships).
		/// </summary>
		/// <returns>List of types.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		protected sealed override global::System.Type[] GetGeneratedDomainModelTypes()
		{
			return new global::System.Type[]
			{
				typeof(NameConsumer),
				typeof(RecognizedPhrase),
				typeof(NameGenerator),
				typeof(NameUsage),
				typeof(GenerationState),
				typeof(GenerationSetting),
				typeof(ModelErrorCategory),
				typeof(ModelErrorDisplayFilter),
				typeof(PopulationErrorCategory),
				typeof(DataTypeAndValueErrorCategory),
				typeof(ConstraintImplicationAndContradictionErrorCategory),
				typeof(ConstraintStructureErrorCategory),
				typeof(FactTypeDefinitionErrorCategory),
				typeof(ReferenceSchemeErrorCategory),
				typeof(NameErrorCategory),
				typeof(RolePathErrorCategory),
				typeof(ElementGroupingSet),
				typeof(ElementGrouping),
				typeof(ElementGroupingType),
				typeof(ElementGroupingErrorCategory),
				typeof(ElementGroupingDuplicateNameError),
				typeof(ElementGroupingMembershipContradictionError),
				typeof(ORMModelElement),
				typeof(ORMNamedElement),
				typeof(ORMModel),
				typeof(ObjectType),
				typeof(FactType),
				typeof(SubtypeFact),
				typeof(RoleBase),
				typeof(RoleProxy),
				typeof(Role),
				typeof(ObjectifiedUnaryRole),
				typeof(NameAlias),
				typeof(EqualityConstraint),
				typeof(ExclusionConstraint),
				typeof(SubsetConstraint),
				typeof(SetComparisonConstraint),
				typeof(Expression),
				typeof(SetComparisonConstraintRoleSequence),
				typeof(RingConstraint),
				typeof(FrequencyConstraint),
				typeof(UniquenessConstraint),
				typeof(MandatoryConstraint),
				typeof(ValueComparisonConstraint),
				typeof(SetConstraint),
				typeof(ConstraintRoleSequence),
				typeof(RolePathOwner),
				typeof(RolePath),
				typeof(LeadRolePath),
				typeof(RoleSubPath),
				typeof(PathObjectUnifier),
				typeof(CalculatedPathValue),
				typeof(PathConstant),
				typeof(Function),
				typeof(FunctionParameter),
				typeof(CalculatedPathValueInput),
				typeof(QueryBase),
				typeof(QueryParameter),
				typeof(Subquery),
				typeof(RoleProjectedDerivationRule),
				typeof(FactTypeDerivationRule),
				typeof(QueryDerivationRule),
				typeof(SubtypeDerivationRule),
				typeof(ConstraintRoleSequenceJoinPath),
				typeof(PathRequiresRootObjectTypeError),
				typeof(PathSameFactTypeRoleFollowsJoinError),
				typeof(JoinedPathRoleRequiresCompatibleRolePlayerError),
				typeof(PathObjectUnifierRequiresCompatibleObjectTypesError),
				typeof(PathOuterJoinRequiresOptionalRoleError),
				typeof(CalculatedPathValueRequiresFunctionError),
				typeof(CalculatedPathValueRequiresAggregationContextError),
				typeof(CalculatedPathValueParameterBindingError),
				typeof(CalculatedPathValueMustBeConsumedError),
				typeof(RoleProjectedDerivationRequiresProjectionError),
				typeof(PartialRoleSetDerivationProjectionError),
				typeof(DerivedRoleRequiresCompatibleProjectionError),
				typeof(ConstraintRoleSequenceJoinPathRequiresProjectionError),
				typeof(PartialConstraintRoleSequenceJoinPathProjectionError),
				typeof(ConstraintRoleRequiresCompatibleJoinPathProjectionError),
				typeof(TooFewRoleSequencesError),
				typeof(TooManyRoleSequencesError),
				typeof(ObjectTypeDuplicateNameError),
				typeof(RecognizedPhraseDuplicateNameError),
				typeof(FunctionDuplicateNameError),
				typeof(DuplicateReadingSignatureError),
				typeof(PopulationUniquenessError),
				typeof(ContradictionError),
				typeof(ExclusionContradictsMandatoryError),
				typeof(ExclusionContradictsEqualityError),
				typeof(ExclusionContradictsSubsetError),
				typeof(NotWellModeledSubsetAndMandatoryError),
				typeof(PopulationMandatoryError),
				typeof(ObjectifiedInstanceRequiredError),
				typeof(ObjectifyingInstanceRequiredError),
				typeof(ConstraintDuplicateNameError),
				typeof(DuplicateNameError),
				typeof(TooFewReadingRolesError),
				typeof(TooManyReadingRolesError),
				typeof(ExternalConstraintRoleSequenceArityMismatchError),
				typeof(FactTypeRequiresReadingError),
				typeof(FactTypeRequiresInternalUniquenessConstraintError),
				typeof(DataTypeNotSpecifiedError),
				typeof(NMinusOneError),
				typeof(CompatibleRolePlayerTypeError),
				typeof(SupersetRoleOfSubtypeSubsetConstraintNotSubtypeError),
				typeof(JoinPathRequiredError),
				typeof(RolePlayerRequiredError),
				typeof(EntityTypeRequiresReferenceSchemeError),
				typeof(FrequencyConstraintMinMaxError),
				typeof(FrequencyConstraintExactlyOneError),
				typeof(FrequencyConstraintNonRestrictiveRangeError),
				typeof(ReadingRequiresUserModificationError),
				typeof(ModelError),
				typeof(ReferenceModeKind),
				typeof(IntrinsicReferenceMode),
				typeof(CustomReferenceMode),
				typeof(ReferenceMode),
				typeof(UnspecifiedDataType),
				typeof(FixedLengthTextDataType),
				typeof(VariableLengthTextDataType),
				typeof(LargeLengthTextDataType),
				typeof(TextDataType),
				typeof(SignedIntegerNumericDataType),
				typeof(SignedSmallIntegerNumericDataType),
				typeof(SignedLargeIntegerNumericDataType),
				typeof(UnsignedIntegerNumericDataType),
				typeof(UnsignedTinyIntegerNumericDataType),
				typeof(UnsignedSmallIntegerNumericDataType),
				typeof(UnsignedLargeIntegerNumericDataType),
				typeof(AutoCounterNumericDataType),
				typeof(FloatingPointNumericDataType),
				typeof(SinglePrecisionFloatingPointNumericDataType),
				typeof(DoublePrecisionFloatingPointNumericDataType),
				typeof(DecimalNumericDataType),
				typeof(MoneyNumericDataType),
				typeof(NumericDataType),
				typeof(FixedLengthRawDataDataType),
				typeof(VariableLengthRawDataDataType),
				typeof(LargeLengthRawDataDataType),
				typeof(PictureRawDataDataType),
				typeof(OleObjectRawDataDataType),
				typeof(RawDataDataType),
				typeof(AutoTimestampTemporalDataType),
				typeof(TimeTemporalDataType),
				typeof(DateTemporalDataType),
				typeof(DateAndTimeTemporalDataType),
				typeof(TemporalDataType),
				typeof(TrueOrFalseLogicalDataType),
				typeof(YesOrNoLogicalDataType),
				typeof(LogicalDataType),
				typeof(RowIdOtherDataType),
				typeof(ObjectIdOtherDataType),
				typeof(OtherDataType),
				typeof(DataType),
				typeof(Reading),
				typeof(ReadingOrder),
				typeof(CardinalityConstraint),
				typeof(ObjectTypeCardinalityConstraint),
				typeof(UnaryRoleCardinalityConstraint),
				typeof(CardinalityRange),
				typeof(ValueRange),
				typeof(ValueTypeValueConstraint),
				typeof(RoleValueConstraint),
				typeof(PathConditionRoleValueConstraint),
				typeof(PathConditionRootValueConstraint),
				typeof(ValueConstraint),
				typeof(ValueConstraintError),
				typeof(MinValueMismatchError),
				typeof(MaxValueMismatchError),
				typeof(ImpliedInternalUniquenessConstraintError),
				typeof(FrequencyConstraintViolatedByUniquenessConstraintError),
				typeof(RingConstraintTypeNotSpecifiedError),
				typeof(ValueComparisonConstraintOperatorNotSpecifiedError),
				typeof(ValueComparisonRolesNotComparableError),
				typeof(SubtypeMetaRole),
				typeof(SupertypeMetaRole),
				typeof(Definition),
				typeof(Note),
				typeof(ModelNote),
				typeof(CompatibleSupertypesError),
				typeof(ImplicationError),
				typeof(EqualityOrSubsetImpliedByMandatoryError),
				typeof(PreferredIdentifierRequiresMandatoryError),
				typeof(ValueRangeOverlapError),
				typeof(ValueConstraintValueTypeDetachedError),
				typeof(CardinalityRangeOverlapError),
				typeof(DerivationNote),
				typeof(FactTypeDerivationExpression),
				typeof(SubtypeDerivationExpression),
				typeof(ObjectTypeInstance),
				typeof(EntityTypeInstance),
				typeof(EntityTypeSubtypeInstance),
				typeof(ValueTypeInstance),
				typeof(FactTypeInstance),
				typeof(TooFewEntityTypeRoleInstancesError),
				typeof(TooFewFactTypeRoleInstancesError),
				typeof(CompatibleValueTypeInstanceValueError),
				typeof(ReferenceModeNaming),
				typeof(DefaultReferenceModeNaming),
				typeof(FactConstraint),
				typeof(FactSetComparisonConstraint),
				typeof(FactSetConstraint),
				typeof(ORMModelElementHasExtensionElement),
				typeof(ORMModelElementHasExtensionModelError),
				typeof(ValueTypeHasDataType),
				typeof(Objectification),
				typeof(ObjectTypePlaysRole),
				typeof(ModelHasObjectType),
				typeof(ModelHasFactType),
				typeof(ModelHasError),
				typeof(ModelHasReferenceModeKind),
				typeof(ModelHasReferenceMode),
				typeof(ModelHasSetConstraint),
				typeof(ObjectTypeImpliesMandatoryConstraint),
				typeof(MandatoryConstraintIsInherentForObjectType),
				typeof(ModelHasSetComparisonConstraint),
				typeof(ModelHasDataType),
				typeof(GenerationStateHasGenerationSetting),
				typeof(NameGeneratorRefinesNameGenerator),
				typeof(ElementHasAlias),
				typeof(NameAliasRefinesInstance),
				typeof(NameGeneratorRefinesInstance),
				typeof(RecognizedPhraseHasAbbreviation),
				typeof(ObjectTypeHasAbbreviation),
				typeof(ModelContainsRecognizedPhrase),
				typeof(RecognizedPhraseHasDuplicateNameError),
				typeof(FunctionHasDuplicateNameError),
				typeof(ReadingHasDuplicateSignatureError),
				typeof(ExternalRoleConstraint),
				typeof(ExclusiveOrConstraintCoupler),
				typeof(SetComparisonConstraintHasRoleSequence),
				typeof(ConstraintRoleSequenceHasRole),
				typeof(SetComparisonConstraintHasTooFewRoleSequencesError),
				typeof(SetComparisonConstraintHasTooManyRoleSequencesError),
				typeof(ObjectTypeHasDuplicateNameError),
				typeof(RoleInstanceHasPopulationUniquenessError),
				typeof(EntityTypeRoleInstanceHasPopulationUniquenessError),
				typeof(FactTypeRoleInstanceHasPopulationUniquenessError),
				typeof(SetComparisonConstraintHasContradictionError),
				typeof(SetComparisonConstraintHasExclusionContradictsEqualityError),
				typeof(SetComparisonConstraintHasExclusionContradictsSubsetError),
				typeof(ExclusionConstraintHasExclusionContradictsMandatoryError),
				typeof(MandatoryConstraintHasExclusionContradictsMandatoryError),
				typeof(SubsetConstraintHasNotWellModeledSubsetAndMandatoryError),
				typeof(MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError),
				typeof(MandatoryConstraintHasPopulationMandatoryError),
				typeof(ObjectTypeInstanceHasPopulationMandatoryError),
				typeof(ReadingOrderHasReading),
				typeof(FactTypeHasReadingOrder),
				typeof(ReferenceModeHasReferenceModeKind),
				typeof(SetConstraintHasDuplicateNameError),
				typeof(SetComparisonConstraintHasDuplicateNameError),
				typeof(EntityTypeHasPreferredIdentifier),
				typeof(ReadingHasTooManyRolesError),
				typeof(ReadingHasTooFewRolesError),
				typeof(ReadingHasReadingRequiresUserModificationError),
				typeof(SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError),
				typeof(ElementAssociatedWithModelError),
				typeof(FactTypeHasFactTypeRequiresReadingError),
				typeof(FactTypeHasFactTypeRequiresInternalUniquenessConstraintError),
				typeof(ValueTypeHasValueConstraint),
				typeof(ObjectTypeHasCardinalityConstraint),
				typeof(UnaryRoleHasCardinalityConstraint),
				typeof(RoleHasValueConstraint),
				typeof(PathedRoleHasValueConstraint),
				typeof(RolePathRootHasValueConstraint),
				typeof(ValueConstraintHasValueRange),
				typeof(CardinalityConstraintHasRange),
				typeof(CardinalityConstraintHasRangeOverlapError),
				typeof(ValueTypeHasUnspecifiedDataTypeError),
				typeof(SetComparisonConstraintHasCompatibleRolePlayerTypeError),
				typeof(SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError),
				typeof(SetConstraintHasCompatibleRolePlayerTypeError),
				typeof(ConstraintRoleSequenceHasJoinPathRequiredError),
				typeof(UniquenessConstraintHasNMinusOneError),
				typeof(RoleHasRolePlayerRequiredError),
				typeof(ObjectTypeHasEntityTypeRequiresReferenceSchemeError),
				typeof(FrequencyConstraintHasFrequencyConstraintMinMaxError),
				typeof(FrequencyConstraintHasFrequencyConstraintExactlyOneError),
				typeof(FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError),
				typeof(ObjectificationImpliesFactType),
				typeof(ValueRangeHasMaxValueMismatchError),
				typeof(ValueRangeHasMinValueMismatchError),
				typeof(FactTypeHasImpliedInternalUniquenessConstraintError),
				typeof(SetConstraintHasTooFewRoleSequencesError),
				typeof(SetConstraintHasTooManyRoleSequencesError),
				typeof(FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError),
				typeof(RingConstraintHasRingConstraintTypeNotSpecifiedError),
				typeof(ValueComparisonConstraintHasOperatorNotSpecifiedError),
				typeof(ValueComparisonConstraintHasRolesNotComparableError),
				typeof(ValueConstraintHasDuplicateNameError),
				typeof(CardinalityConstraintHasDuplicateNameError),
				typeof(ModelHasDefinition),
				typeof(ObjectTypeHasDefinition),
				typeof(FactTypeHasDefinition),
				typeof(SetConstraintHasDefinition),
				typeof(SetComparisonConstraintHasDefinition),
				typeof(ValueConstraintHasDefinition),
				typeof(CardinalityConstraintHasDefinition),
				typeof(ElementGroupingHasDefinition),
				typeof(FactTypeHasNote),
				typeof(ObjectTypeHasNote),
				typeof(SetConstraintHasNote),
				typeof(SetComparisonConstraintHasNote),
				typeof(ValueConstraintHasNote),
				typeof(CardinalityConstraintHasNote),
				typeof(ElementGroupingHasNote),
				typeof(ModelHasPrimaryNote),
				typeof(LeadRolePathHasNote),
				typeof(ModelHasModelNote),
				typeof(ModelNoteReferencesModelElement),
				typeof(ModelNoteReferencesFactType),
				typeof(ModelNoteReferencesObjectType),
				typeof(ModelNoteReferencesSetConstraint),
				typeof(ModelNoteReferencesSetComparisonConstraint),
				typeof(ObjectTypeHasCompatibleSupertypesError),
				typeof(SetConstraintHasImplicationError),
				typeof(SetComparisonConstraintHasImplicationError),
				typeof(SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError),
				typeof(ObjectTypeHasPreferredIdentifierRequiresMandatoryError),
				typeof(ValueConstraintHasValueRangeOverlapError),
				typeof(ValueConstraintHasValueTypeDetachedError),
				typeof(FactTypeHasRole),
				typeof(ReadingOrderHasRole),
				typeof(RoleProxyHasRole),
				typeof(ObjectifiedUnaryRoleHasRole),
				typeof(FactTypeHasDerivationExpression),
				typeof(SubtypeHasDerivationExpression),
				typeof(ObjectTypeHasObjectTypeInstance),
				typeof(EntityTypeHasEntityTypeInstance),
				typeof(EntityTypeSubtypeHasEntityTypeSubtypeInstance),
				typeof(ValueTypeHasValueTypeInstance),
				typeof(RoleInstance),
				typeof(EntityTypeRoleInstance),
				typeof(FactTypeRoleInstance),
				typeof(EntityTypeInstanceHasRoleInstance),
				typeof(EntityTypeSubtypeInstanceHasSupertypeInstance),
				typeof(FactTypeHasFactTypeInstance),
				typeof(FactTypeInstanceHasRoleInstance),
				typeof(ObjectificationInstance),
				typeof(ObjectifiedInstanceHasObjectifyingInstanceRequiredError),
				typeof(ObjectifyingInstanceHasObjectifiedInstanceRequiredError),
				typeof(EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError),
				typeof(FactTypeInstanceHasTooFewFactTypeRoleInstancesError),
				typeof(ValueTypeInstanceHasCompatibleValueTypeInstanceValueError),
				typeof(ConstraintRoleSequenceHasJoinPath),
				typeof(ConstraintRoleSequenceJoinPathProjection),
				typeof(ConstraintRoleProjection),
				typeof(ConstraintRoleProjectedFromRolePathRoot),
				typeof(ConstraintRoleProjectedFromPathedRole),
				typeof(ConstraintRoleProjectedFromCalculatedPathValue),
				typeof(ConstraintRoleProjectedFromPathConstant),
				typeof(ConstraintRoleProjectedFromPathedRole_Deprecated),
				typeof(ConstraintRoleProjectedFromCalculatedPathValue_Deprecated),
				typeof(ConstraintRoleProjectedFromPathConstant_Deprecated),
				typeof(ModelHasModelErrorDisplayFilter),
				typeof(ElementGroupingSetRelatesToORMModel),
				typeof(ElementGroupingSetContainsElementGrouping),
				typeof(ElementGroupingIsOfElementGroupingType),
				typeof(GroupingElementRelationship),
				typeof(GroupingElementInclusion),
				typeof(GroupingElementExclusion),
				typeof(ElementGroupingContainsElementGrouping),
				typeof(ElementGroupingIncludesElementGrouping),
				typeof(ElementGroupingExcludesElementGrouping),
				typeof(ElementGroupingHasDuplicateNameError),
				typeof(ElementGroupingHasMembershipContradictionError),
				typeof(GroupingMembershipContradictionErrorIsForElement),
				typeof(RolePathOwnerHasPathComponent_Deprecated),
				typeof(RolePathOwnerHasLeadRolePath),
				typeof(RolePathOwnerOwnsLeadRolePath),
				typeof(RolePathOwnerUsesSharedLeadRolePath),
				typeof(RolePathOwnerHasSingleLeadRolePath),
				typeof(RolePathOwnerHasSingleOwnedLeadRolePath),
				typeof(RolePathOwnerHasSubquery),
				typeof(RolePathOwnerOwnsSubquery),
				typeof(RolePathOwnerUsesSharedSubquery),
				typeof(RolePathObjectTypeRoot),
				typeof(PathedRole),
				typeof(PathedRoleIsRemotelyCorrelatedWithPathedRole_Deprecated),
				typeof(LeadRolePathHasObjectUnifier),
				typeof(PathObjectUnifierUnifiesPathedRole),
				typeof(PathObjectUnifierUnifiesRolePathRoot),
				typeof(RoleSubPathIsContinuationOfRolePath),
				typeof(ModelDefinesFunction),
				typeof(FunctionOperatesOnParameter),
				typeof(RolePathOwnerCalculatesCalculatedPathValue_Deprecated),
				typeof(LeadRolePathCalculatesCalculatedPathValue),
				typeof(LeadRolePathSatisfiesCalculatedCondition),
				typeof(CalculatedPathValueHasInput),
				typeof(CalculatedPathValueScopedWithPathedRole_Deprecated),
				typeof(CalculatedPathValueAggregationContextIncludesPathedRole),
				typeof(CalculatedPathValueAggregationContextIncludesRolePathRoot),
				typeof(CalculatedPathValueIsCalculatedWithFunction),
				typeof(CalculatedPathValueInputCorrespondsToFunctionParameter),
				typeof(CalculatedPathValueInputBindsToRolePathRoot),
				typeof(CalculatedPathValueInputBindsToPathedRole),
				typeof(CalculatedPathValueInputBindsToCalculatedPathValue),
				typeof(CalculatedPathValueInputBindsToPathConstant),
				typeof(QueryDefinesParameter),
				typeof(QueryParameterHasParameterType),
				typeof(QueryParameterBinding),
				typeof(QueryParameterBoundToRolePathRoot),
				typeof(QueryParameterBoundToPathedRole),
				typeof(SubqueryParameterInputs),
				typeof(SubqueryParameterInput),
				typeof(SubqueryParameterInputFromRolePathRoot),
				typeof(SubqueryParameterInputFromPathedRole),
				typeof(SubqueryParameterInputFromCalculatedPathValue),
				typeof(SubqueryParameterInputFromPathConstant),
				typeof(FactTypeHasDerivationRule),
				typeof(FactTypeDerivationRuleHasDerivationNote),
				typeof(RoleSetDerivationProjection),
				typeof(DerivedRoleProjection),
				typeof(DerivedRoleProjectedFromRolePathRoot),
				typeof(DerivedRoleProjectedFromPathedRole),
				typeof(DerivedRoleProjectedFromCalculatedPathValue),
				typeof(DerivedRoleProjectedFromPathConstant),
				typeof(RoleDerivesFromPathedRole_Deprecated),
				typeof(RoleDerivesFromCalculatedPathValue_Deprecated),
				typeof(RoleDerivesFromPathConstant_Deprecated),
				typeof(SubtypeHasDerivationRule),
				typeof(SubtypeDerivationRuleHasDerivationNote),
				typeof(RolePathHasRootObjectTypeError),
				typeof(PathedRoleHasCompatibleJoinRolePlayerError),
				typeof(PathObjectUnifierHasCompatibleObjectTypesError),
				typeof(PathedRoleHasSameFactTypeFollowsJoinError),
				typeof(PathedRoleHasMandatoryOuterJoinError),
				typeof(CalculatedPathValueHasFunctionRequiredError),
				typeof(CalculatedPathValueHasUnboundParameterError),
				typeof(CalculatedPathValueParameterBindingErrorTargetsFunctionParameter),
				typeof(CalculatedPathValueHasConsumptionRequiredError),
				typeof(CalculatedPathValueHasAggregationContextRequiredError),
				typeof(RoleProjectedDerivationRuleHasProjectionRequiredError),
				typeof(RoleSetDerivationProjectionHasPartialProjectionError),
				typeof(DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError),
				typeof(ConstraintRoleSequenceJoinPathHasProjectionRequiredError),
				typeof(ConstraintRoleSequenceProjectionHasPartialProjectionError),
				typeof(ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError),
			};
		}
		/// <summary>
		/// Gets the list of generated domain properties.
		/// </summary>
		/// <returns>List of property data.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		protected sealed override DomainMemberInfo[] GetGeneratedDomainProperties()
		{
			return new DomainMemberInfo[]
			{
				new DomainMemberInfo(typeof(NameGenerator), "NameUsage", NameGenerator.NameUsageDomainPropertyId, typeof(NameGenerator.NameUsagePropertyHandler)),
				new DomainMemberInfo(typeof(NameGenerator), "CasingOption", NameGenerator.CasingOptionDomainPropertyId, typeof(NameGenerator.CasingOptionPropertyHandler)),
				new DomainMemberInfo(typeof(NameGenerator), "SpacingFormat", NameGenerator.SpacingFormatDomainPropertyId, typeof(NameGenerator.SpacingFormatPropertyHandler)),
				new DomainMemberInfo(typeof(NameGenerator), "SpacingReplacement", NameGenerator.SpacingReplacementDomainPropertyId, typeof(NameGenerator.SpacingReplacementPropertyHandler)),
				new DomainMemberInfo(typeof(NameGenerator), "AutomaticallyShortenNames", NameGenerator.AutomaticallyShortenNamesDomainPropertyId, typeof(NameGenerator.AutomaticallyShortenNamesPropertyHandler)),
				new DomainMemberInfo(typeof(NameGenerator), "UseTargetDefaultMaximum", NameGenerator.UseTargetDefaultMaximumDomainPropertyId, typeof(NameGenerator.UseTargetDefaultMaximumPropertyHandler)),
				new DomainMemberInfo(typeof(NameGenerator), "UserDefinedMaximum", NameGenerator.UserDefinedMaximumDomainPropertyId, typeof(NameGenerator.UserDefinedMaximumPropertyHandler)),
				new DomainMemberInfo(typeof(ModelErrorDisplayFilter), "ExcludedCategories", ModelErrorDisplayFilter.ExcludedCategoriesDomainPropertyId, typeof(ModelErrorDisplayFilter.ExcludedCategoriesPropertyHandler)),
				new DomainMemberInfo(typeof(ModelErrorDisplayFilter), "IncludedErrors", ModelErrorDisplayFilter.IncludedErrorsDomainPropertyId, typeof(ModelErrorDisplayFilter.IncludedErrorsPropertyHandler)),
				new DomainMemberInfo(typeof(ModelErrorDisplayFilter), "ExcludedErrors", ModelErrorDisplayFilter.ExcludedErrorsDomainPropertyId, typeof(ModelErrorDisplayFilter.ExcludedErrorsPropertyHandler)),
				new DomainMemberInfo(typeof(ElementGrouping), "DefinitionText", ElementGrouping.DefinitionTextDomainPropertyId, typeof(ElementGrouping.DefinitionTextPropertyHandler)),
				new DomainMemberInfo(typeof(ElementGrouping), "NoteText", ElementGrouping.NoteTextDomainPropertyId, typeof(ElementGrouping.NoteTextPropertyHandler)),
				new DomainMemberInfo(typeof(ElementGrouping), "TypeCompliance", ElementGrouping.TypeComplianceDomainPropertyId, typeof(ElementGrouping.TypeCompliancePropertyHandler)),
				new DomainMemberInfo(typeof(ElementGrouping), "Priority", ElementGrouping.PriorityDomainPropertyId, typeof(ElementGrouping.PriorityPropertyHandler)),
				new DomainMemberInfo(typeof(ORMNamedElement), "Name", ORMNamedElement.NameDomainPropertyId, typeof(ORMNamedElement.NamePropertyHandler)),
				new DomainMemberInfo(typeof(ORMModel), "DefinitionText", ORMModel.DefinitionTextDomainPropertyId, typeof(ORMModel.DefinitionTextPropertyHandler)),
				new DomainMemberInfo(typeof(ORMModel), "NoteText", ORMModel.NoteTextDomainPropertyId, typeof(ORMModel.NoteTextPropertyHandler)),
				new DomainMemberInfo(typeof(ObjectType), "IsExternal", ObjectType.IsExternalDomainPropertyId, typeof(ObjectType.IsExternalPropertyHandler)),
				new DomainMemberInfo(typeof(ObjectType), "DefinitionText", ObjectType.DefinitionTextDomainPropertyId, typeof(ObjectType.DefinitionTextPropertyHandler)),
				new DomainMemberInfo(typeof(ObjectType), "NoteText", ObjectType.NoteTextDomainPropertyId, typeof(ObjectType.NoteTextPropertyHandler)),
				new DomainMemberInfo(typeof(ObjectType), "IsIndependent", ObjectType.IsIndependentDomainPropertyId, typeof(ObjectType.IsIndependentPropertyHandler)),
				new DomainMemberInfo(typeof(ObjectType), "IsValueType", ObjectType.IsValueTypeDomainPropertyId, typeof(ObjectType.IsValueTypePropertyHandler)),
				new DomainMemberInfo(typeof(ObjectType), "DataTypeScale", ObjectType.DataTypeScaleDomainPropertyId, typeof(ObjectType.DataTypeScalePropertyHandler)),
				new DomainMemberInfo(typeof(ObjectType), "DataTypeLength", ObjectType.DataTypeLengthDomainPropertyId, typeof(ObjectType.DataTypeLengthPropertyHandler)),
				new DomainMemberInfo(typeof(ObjectType), "ReferenceModeDisplay", ObjectType.ReferenceModeDisplayDomainPropertyId, typeof(ObjectType.ReferenceModeDisplayPropertyHandler)),
				new DomainMemberInfo(typeof(ObjectType), "ReferenceModeString", ObjectType.ReferenceModeStringDomainPropertyId, typeof(ObjectType.ReferenceModeStringPropertyHandler)),
				new DomainMemberInfo(typeof(ObjectType), "ReferenceModeDecoratedString", ObjectType.ReferenceModeDecoratedStringDomainPropertyId, typeof(ObjectType.ReferenceModeDecoratedStringPropertyHandler)),
				new DomainMemberInfo(typeof(ObjectType), "ValueRangeText", ObjectType.ValueRangeTextDomainPropertyId, typeof(ObjectType.ValueRangeTextPropertyHandler)),
				new DomainMemberInfo(typeof(ObjectType), "ValueTypeValueRangeText", ObjectType.ValueTypeValueRangeTextDomainPropertyId, typeof(ObjectType.ValueTypeValueRangeTextPropertyHandler)),
				new DomainMemberInfo(typeof(ObjectType), "IsPersonal", ObjectType.IsPersonalDomainPropertyId, typeof(ObjectType.IsPersonalPropertyHandler)),
				new DomainMemberInfo(typeof(ObjectType), "IsSupertypePersonal", ObjectType.IsSupertypePersonalDomainPropertyId, typeof(ObjectType.IsSupertypePersonalPropertyHandler)),
				new DomainMemberInfo(typeof(ObjectType), "TreatAsPersonal", ObjectType.TreatAsPersonalDomainPropertyId, typeof(ObjectType.TreatAsPersonalPropertyHandler)),
				new DomainMemberInfo(typeof(ObjectType), "IsImplicitBooleanValue", ObjectType.IsImplicitBooleanValueDomainPropertyId, typeof(ObjectType.IsImplicitBooleanValuePropertyHandler)),
				new DomainMemberInfo(typeof(ObjectType), "DerivationNoteDisplay", ObjectType.DerivationNoteDisplayDomainPropertyId, typeof(ObjectType.DerivationNoteDisplayPropertyHandler)),
				new DomainMemberInfo(typeof(ObjectType), "DerivationStorageDisplay", ObjectType.DerivationStorageDisplayDomainPropertyId, typeof(ObjectType.DerivationStorageDisplayPropertyHandler)),
				new DomainMemberInfo(typeof(FactType), "IsExternal", FactType.IsExternalDomainPropertyId, typeof(FactType.IsExternalPropertyHandler)),
				new DomainMemberInfo(typeof(FactType), "DefinitionText", FactType.DefinitionTextDomainPropertyId, typeof(FactType.DefinitionTextPropertyHandler)),
				new DomainMemberInfo(typeof(FactType), "NoteText", FactType.NoteTextDomainPropertyId, typeof(FactType.NoteTextPropertyHandler)),
				new DomainMemberInfo(typeof(FactType), "Name", FactType.NameDomainPropertyId, typeof(FactType.NamePropertyHandler)),
				new DomainMemberInfo(typeof(FactType), "GeneratedName", FactType.GeneratedNameDomainPropertyId, typeof(FactType.GeneratedNamePropertyHandler)),
				new DomainMemberInfo(typeof(FactType), "NameChanged", FactType.NameChangedDomainPropertyId, typeof(FactType.NameChangedPropertyHandler)),
				new DomainMemberInfo(typeof(FactType), "DerivationNoteDisplay", FactType.DerivationNoteDisplayDomainPropertyId, typeof(FactType.DerivationNoteDisplayPropertyHandler)),
				new DomainMemberInfo(typeof(FactType), "DerivationStorageDisplay", FactType.DerivationStorageDisplayDomainPropertyId, typeof(FactType.DerivationStorageDisplayPropertyHandler)),
				new DomainMemberInfo(typeof(SubtypeFact), "IsPrimary", SubtypeFact.IsPrimaryDomainPropertyId, typeof(SubtypeFact.IsPrimaryPropertyHandler)),
				new DomainMemberInfo(typeof(SubtypeFact), "ProvidesPreferredIdentifier", SubtypeFact.ProvidesPreferredIdentifierDomainPropertyId, typeof(SubtypeFact.ProvidesPreferredIdentifierPropertyHandler)),
				new DomainMemberInfo(typeof(Role), "IsMandatory", Role.IsMandatoryDomainPropertyId, typeof(Role.IsMandatoryPropertyHandler)),
				new DomainMemberInfo(typeof(Role), "Multiplicity", Role.MultiplicityDomainPropertyId, typeof(Role.MultiplicityPropertyHandler)),
				new DomainMemberInfo(typeof(Role), "ValueRangeText", Role.ValueRangeTextDomainPropertyId, typeof(Role.ValueRangeTextPropertyHandler)),
				new DomainMemberInfo(typeof(Role), "MandatoryConstraintName", Role.MandatoryConstraintNameDomainPropertyId, typeof(Role.MandatoryConstraintNamePropertyHandler)),
				new DomainMemberInfo(typeof(Role), "MandatoryConstraintModality", Role.MandatoryConstraintModalityDomainPropertyId, typeof(Role.MandatoryConstraintModalityPropertyHandler)),
				new DomainMemberInfo(typeof(Role), "Name", Role.NameDomainPropertyId, typeof(Role.NamePropertyHandler)),
				new DomainMemberInfo(typeof(Role), "ObjectificationOppositeRoleName", Role.ObjectificationOppositeRoleNameDomainPropertyId, typeof(Role.ObjectificationOppositeRoleNamePropertyHandler)),
				new DomainMemberInfo(typeof(NameAlias), "NameConsumer", NameAlias.NameConsumerDomainPropertyId, typeof(NameAlias.NameConsumerPropertyHandler)),
				new DomainMemberInfo(typeof(NameAlias), "NameUsage", NameAlias.NameUsageDomainPropertyId, typeof(NameAlias.NameUsagePropertyHandler)),
				new DomainMemberInfo(typeof(SetComparisonConstraint), "Modality", SetComparisonConstraint.ModalityDomainPropertyId, typeof(SetComparisonConstraint.ModalityPropertyHandler)),
				new DomainMemberInfo(typeof(SetComparisonConstraint), "DefinitionText", SetComparisonConstraint.DefinitionTextDomainPropertyId, typeof(SetComparisonConstraint.DefinitionTextPropertyHandler)),
				new DomainMemberInfo(typeof(SetComparisonConstraint), "NoteText", SetComparisonConstraint.NoteTextDomainPropertyId, typeof(SetComparisonConstraint.NoteTextPropertyHandler)),
				new DomainMemberInfo(typeof(Expression), "Body", Expression.BodyDomainPropertyId, typeof(Expression.BodyPropertyHandler)),
				new DomainMemberInfo(typeof(Expression), "Language", Expression.LanguageDomainPropertyId, typeof(Expression.LanguagePropertyHandler)),
				new DomainMemberInfo(typeof(RingConstraint), "RingType", RingConstraint.RingTypeDomainPropertyId, typeof(RingConstraint.RingTypePropertyHandler)),
				new DomainMemberInfo(typeof(FrequencyConstraint), "MinFrequency", FrequencyConstraint.MinFrequencyDomainPropertyId, typeof(FrequencyConstraint.MinFrequencyPropertyHandler)),
				new DomainMemberInfo(typeof(FrequencyConstraint), "MaxFrequency", FrequencyConstraint.MaxFrequencyDomainPropertyId, typeof(FrequencyConstraint.MaxFrequencyPropertyHandler)),
				new DomainMemberInfo(typeof(UniquenessConstraint), "IsPreferred", UniquenessConstraint.IsPreferredDomainPropertyId, typeof(UniquenessConstraint.IsPreferredPropertyHandler)),
				new DomainMemberInfo(typeof(UniquenessConstraint), "IsInternal", UniquenessConstraint.IsInternalDomainPropertyId, typeof(UniquenessConstraint.IsInternalPropertyHandler)),
				new DomainMemberInfo(typeof(MandatoryConstraint), "IsSimple", MandatoryConstraint.IsSimpleDomainPropertyId, typeof(MandatoryConstraint.IsSimplePropertyHandler)),
				new DomainMemberInfo(typeof(MandatoryConstraint), "IsImplied", MandatoryConstraint.IsImpliedDomainPropertyId, typeof(MandatoryConstraint.IsImpliedPropertyHandler)),
				new DomainMemberInfo(typeof(ValueComparisonConstraint), "Operator", ValueComparisonConstraint.OperatorDomainPropertyId, typeof(ValueComparisonConstraint.OperatorPropertyHandler)),
				new DomainMemberInfo(typeof(SetConstraint), "Modality", SetConstraint.ModalityDomainPropertyId, typeof(SetConstraint.ModalityPropertyHandler)),
				new DomainMemberInfo(typeof(SetConstraint), "DefinitionText", SetConstraint.DefinitionTextDomainPropertyId, typeof(SetConstraint.DefinitionTextPropertyHandler)),
				new DomainMemberInfo(typeof(SetConstraint), "NoteText", SetConstraint.NoteTextDomainPropertyId, typeof(SetConstraint.NoteTextPropertyHandler)),
				new DomainMemberInfo(typeof(RolePath), "SplitIsNegated", RolePath.SplitIsNegatedDomainPropertyId, typeof(RolePath.SplitIsNegatedPropertyHandler)),
				new DomainMemberInfo(typeof(RolePath), "SplitCombinationOperator", RolePath.SplitCombinationOperatorDomainPropertyId, typeof(RolePath.SplitCombinationOperatorPropertyHandler)),
				new DomainMemberInfo(typeof(LeadRolePath), "NoteText", LeadRolePath.NoteTextDomainPropertyId, typeof(LeadRolePath.NoteTextPropertyHandler)),
				new DomainMemberInfo(typeof(CalculatedPathValue), "UniversalAggregationContext", CalculatedPathValue.UniversalAggregationContextDomainPropertyId, typeof(CalculatedPathValue.UniversalAggregationContextPropertyHandler)),
				new DomainMemberInfo(typeof(PathConstant), "LexicalValue", PathConstant.LexicalValueDomainPropertyId, typeof(PathConstant.LexicalValuePropertyHandler)),
				new DomainMemberInfo(typeof(Function), "IsBoolean", Function.IsBooleanDomainPropertyId, typeof(Function.IsBooleanPropertyHandler)),
				new DomainMemberInfo(typeof(Function), "IsAggregate", Function.IsAggregateDomainPropertyId, typeof(Function.IsAggregatePropertyHandler)),
				new DomainMemberInfo(typeof(Function), "OperatorSymbol", Function.OperatorSymbolDomainPropertyId, typeof(Function.OperatorSymbolPropertyHandler)),
				new DomainMemberInfo(typeof(FunctionParameter), "BagInput", FunctionParameter.BagInputDomainPropertyId, typeof(FunctionParameter.BagInputPropertyHandler)),
				new DomainMemberInfo(typeof(CalculatedPathValueInput), "DistinctValues", CalculatedPathValueInput.DistinctValuesDomainPropertyId, typeof(CalculatedPathValueInput.DistinctValuesPropertyHandler)),
				new DomainMemberInfo(typeof(QueryParameter), "Name", QueryParameter.NameDomainPropertyId, typeof(QueryParameter.NamePropertyHandler)),
				new DomainMemberInfo(typeof(FactTypeDerivationRule), "DerivationCompleteness", FactTypeDerivationRule.DerivationCompletenessDomainPropertyId, typeof(FactTypeDerivationRule.DerivationCompletenessPropertyHandler)),
				new DomainMemberInfo(typeof(FactTypeDerivationRule), "DerivationStorage", FactTypeDerivationRule.DerivationStorageDomainPropertyId, typeof(FactTypeDerivationRule.DerivationStoragePropertyHandler)),
				new DomainMemberInfo(typeof(FactTypeDerivationRule), "SetProjection", FactTypeDerivationRule.SetProjectionDomainPropertyId, typeof(FactTypeDerivationRule.SetProjectionPropertyHandler)),
				new DomainMemberInfo(typeof(FactTypeDerivationRule), "Name", FactTypeDerivationRule.NameDomainPropertyId, typeof(FactTypeDerivationRule.NamePropertyHandler)),
				new DomainMemberInfo(typeof(FactTypeDerivationRule), "ExternalDerivation", FactTypeDerivationRule.ExternalDerivationDomainPropertyId, typeof(FactTypeDerivationRule.ExternalDerivationPropertyHandler)),
				new DomainMemberInfo(typeof(SubtypeDerivationRule), "DerivationCompleteness", SubtypeDerivationRule.DerivationCompletenessDomainPropertyId, typeof(SubtypeDerivationRule.DerivationCompletenessPropertyHandler)),
				new DomainMemberInfo(typeof(SubtypeDerivationRule), "DerivationStorage", SubtypeDerivationRule.DerivationStorageDomainPropertyId, typeof(SubtypeDerivationRule.DerivationStoragePropertyHandler)),
				new DomainMemberInfo(typeof(SubtypeDerivationRule), "ExternalDerivation", SubtypeDerivationRule.ExternalDerivationDomainPropertyId, typeof(SubtypeDerivationRule.ExternalDerivationPropertyHandler)),
				new DomainMemberInfo(typeof(ConstraintRoleSequenceJoinPath), "IsAutomatic", ConstraintRoleSequenceJoinPath.IsAutomaticDomainPropertyId, typeof(ConstraintRoleSequenceJoinPath.IsAutomaticPropertyHandler)),
				new DomainMemberInfo(typeof(CompatibleRolePlayerTypeError), "Column", CompatibleRolePlayerTypeError.ColumnDomainPropertyId, typeof(CompatibleRolePlayerTypeError.ColumnPropertyHandler)),
				new DomainMemberInfo(typeof(ModelError), "ErrorText", ModelError.ErrorTextDomainPropertyId, typeof(ModelError.ErrorTextPropertyHandler)),
				new DomainMemberInfo(typeof(ModelError), "ErrorState", ModelError.ErrorStateDomainPropertyId, typeof(ModelError.ErrorStatePropertyHandler)),
				new DomainMemberInfo(typeof(ReferenceModeKind), "FormatString", ReferenceModeKind.FormatStringDomainPropertyId, typeof(ReferenceModeKind.FormatStringPropertyHandler)),
				new DomainMemberInfo(typeof(ReferenceModeKind), "ReferenceModeType", ReferenceModeKind.ReferenceModeTypeDomainPropertyId, typeof(ReferenceModeKind.ReferenceModeTypePropertyHandler)),
				new DomainMemberInfo(typeof(CustomReferenceMode), "CustomFormatString", CustomReferenceMode.CustomFormatStringDomainPropertyId, typeof(CustomReferenceMode.CustomFormatStringPropertyHandler)),
				new DomainMemberInfo(typeof(Reading), "Text", Reading.TextDomainPropertyId, typeof(Reading.TextPropertyHandler)),
				new DomainMemberInfo(typeof(Reading), "Signature", Reading.SignatureDomainPropertyId, typeof(Reading.SignaturePropertyHandler)),
				new DomainMemberInfo(typeof(Reading), "IsPrimaryForReadingOrder", Reading.IsPrimaryForReadingOrderDomainPropertyId, typeof(Reading.IsPrimaryForReadingOrderPropertyHandler)),
				new DomainMemberInfo(typeof(Reading), "Language", Reading.LanguageDomainPropertyId, typeof(Reading.LanguagePropertyHandler)),
				new DomainMemberInfo(typeof(Reading), "IsPrimaryForFactType", Reading.IsPrimaryForFactTypeDomainPropertyId, typeof(Reading.IsPrimaryForFactTypePropertyHandler)),
				new DomainMemberInfo(typeof(ReadingOrder), "ReadingText", ReadingOrder.ReadingTextDomainPropertyId, typeof(ReadingOrder.ReadingTextPropertyHandler)),
				new DomainMemberInfo(typeof(CardinalityConstraint), "Modality", CardinalityConstraint.ModalityDomainPropertyId, typeof(CardinalityConstraint.ModalityPropertyHandler)),
				new DomainMemberInfo(typeof(CardinalityConstraint), "DefinitionText", CardinalityConstraint.DefinitionTextDomainPropertyId, typeof(CardinalityConstraint.DefinitionTextPropertyHandler)),
				new DomainMemberInfo(typeof(CardinalityConstraint), "NoteText", CardinalityConstraint.NoteTextDomainPropertyId, typeof(CardinalityConstraint.NoteTextPropertyHandler)),
				new DomainMemberInfo(typeof(CardinalityConstraint), "Text", CardinalityConstraint.TextDomainPropertyId, typeof(CardinalityConstraint.TextPropertyHandler)),
				new DomainMemberInfo(typeof(CardinalityConstraint), "TextChanged", CardinalityConstraint.TextChangedDomainPropertyId, typeof(CardinalityConstraint.TextChangedPropertyHandler)),
				new DomainMemberInfo(typeof(CardinalityRange), "LowerBound", CardinalityRange.LowerBoundDomainPropertyId, typeof(CardinalityRange.LowerBoundPropertyHandler)),
				new DomainMemberInfo(typeof(CardinalityRange), "UpperBound", CardinalityRange.UpperBoundDomainPropertyId, typeof(CardinalityRange.UpperBoundPropertyHandler)),
				new DomainMemberInfo(typeof(ValueRange), "MinValue", ValueRange.MinValueDomainPropertyId, typeof(ValueRange.MinValuePropertyHandler)),
				new DomainMemberInfo(typeof(ValueRange), "InvariantMinValue", ValueRange.InvariantMinValueDomainPropertyId, typeof(ValueRange.InvariantMinValuePropertyHandler)),
				new DomainMemberInfo(typeof(ValueRange), "MaxValue", ValueRange.MaxValueDomainPropertyId, typeof(ValueRange.MaxValuePropertyHandler)),
				new DomainMemberInfo(typeof(ValueRange), "InvariantMaxValue", ValueRange.InvariantMaxValueDomainPropertyId, typeof(ValueRange.InvariantMaxValuePropertyHandler)),
				new DomainMemberInfo(typeof(ValueRange), "MinInclusion", ValueRange.MinInclusionDomainPropertyId, typeof(ValueRange.MinInclusionPropertyHandler)),
				new DomainMemberInfo(typeof(ValueRange), "MaxInclusion", ValueRange.MaxInclusionDomainPropertyId, typeof(ValueRange.MaxInclusionPropertyHandler)),
				new DomainMemberInfo(typeof(ValueConstraint), "DefinitionText", ValueConstraint.DefinitionTextDomainPropertyId, typeof(ValueConstraint.DefinitionTextPropertyHandler)),
				new DomainMemberInfo(typeof(ValueConstraint), "NoteText", ValueConstraint.NoteTextDomainPropertyId, typeof(ValueConstraint.NoteTextPropertyHandler)),
				new DomainMemberInfo(typeof(ValueConstraint), "Text", ValueConstraint.TextDomainPropertyId, typeof(ValueConstraint.TextPropertyHandler)),
				new DomainMemberInfo(typeof(ValueConstraint), "TextChanged", ValueConstraint.TextChangedDomainPropertyId, typeof(ValueConstraint.TextChangedPropertyHandler)),
				new DomainMemberInfo(typeof(Definition), "Text", Definition.TextDomainPropertyId, typeof(Definition.TextPropertyHandler)),
				new DomainMemberInfo(typeof(Note), "Text", Note.TextDomainPropertyId, typeof(Note.TextPropertyHandler)),
				new DomainMemberInfo(typeof(FactTypeDerivationExpression), "DerivationStorage", FactTypeDerivationExpression.DerivationStorageDomainPropertyId, typeof(FactTypeDerivationExpression.DerivationStoragePropertyHandler)),
				new DomainMemberInfo(typeof(ObjectTypeInstance), "Name", ObjectTypeInstance.NameDomainPropertyId, typeof(ObjectTypeInstance.NamePropertyHandler)),
				new DomainMemberInfo(typeof(ObjectTypeInstance), "IdentifierName", ObjectTypeInstance.IdentifierNameDomainPropertyId, typeof(ObjectTypeInstance.IdentifierNamePropertyHandler)),
				new DomainMemberInfo(typeof(ObjectTypeInstance), "NameChanged", ObjectTypeInstance.NameChangedDomainPropertyId, typeof(ObjectTypeInstance.NameChangedPropertyHandler)),
				new DomainMemberInfo(typeof(ValueTypeInstance), "Value", ValueTypeInstance.ValueDomainPropertyId, typeof(ValueTypeInstance.ValuePropertyHandler)),
				new DomainMemberInfo(typeof(ValueTypeInstance), "InvariantValue", ValueTypeInstance.InvariantValueDomainPropertyId, typeof(ValueTypeInstance.InvariantValuePropertyHandler)),
				new DomainMemberInfo(typeof(FactTypeInstance), "Name", FactTypeInstance.NameDomainPropertyId, typeof(FactTypeInstance.NamePropertyHandler)),
				new DomainMemberInfo(typeof(FactTypeInstance), "NameChanged", FactTypeInstance.NameChangedDomainPropertyId, typeof(FactTypeInstance.NameChangedPropertyHandler)),
				new DomainMemberInfo(typeof(ReferenceModeNaming), "NamingChoice", ReferenceModeNaming.NamingChoiceDomainPropertyId, typeof(ReferenceModeNaming.NamingChoicePropertyHandler)),
				new DomainMemberInfo(typeof(ReferenceModeNaming), "CustomFormat", ReferenceModeNaming.CustomFormatDomainPropertyId, typeof(ReferenceModeNaming.CustomFormatPropertyHandler)),
				new DomainMemberInfo(typeof(ReferenceModeNaming), "PrimaryIdentifierNamingChoice", ReferenceModeNaming.PrimaryIdentifierNamingChoiceDomainPropertyId, typeof(ReferenceModeNaming.PrimaryIdentifierNamingChoicePropertyHandler)),
				new DomainMemberInfo(typeof(ReferenceModeNaming), "PrimaryIdentifierCustomFormat", ReferenceModeNaming.PrimaryIdentifierCustomFormatDomainPropertyId, typeof(ReferenceModeNaming.PrimaryIdentifierCustomFormatPropertyHandler)),
				new DomainMemberInfo(typeof(DefaultReferenceModeNaming), "NamingChoice", DefaultReferenceModeNaming.NamingChoiceDomainPropertyId, typeof(DefaultReferenceModeNaming.NamingChoicePropertyHandler)),
				new DomainMemberInfo(typeof(DefaultReferenceModeNaming), "CustomFormat", DefaultReferenceModeNaming.CustomFormatDomainPropertyId, typeof(DefaultReferenceModeNaming.CustomFormatPropertyHandler)),
				new DomainMemberInfo(typeof(DefaultReferenceModeNaming), "PrimaryIdentifierNamingChoice", DefaultReferenceModeNaming.PrimaryIdentifierNamingChoiceDomainPropertyId, typeof(DefaultReferenceModeNaming.PrimaryIdentifierNamingChoicePropertyHandler)),
				new DomainMemberInfo(typeof(DefaultReferenceModeNaming), "PrimaryIdentifierCustomFormat", DefaultReferenceModeNaming.PrimaryIdentifierCustomFormatDomainPropertyId, typeof(DefaultReferenceModeNaming.PrimaryIdentifierCustomFormatPropertyHandler)),
				new DomainMemberInfo(typeof(DefaultReferenceModeNaming), "ReferenceModeTargetKind", DefaultReferenceModeNaming.ReferenceModeTargetKindDomainPropertyId, typeof(DefaultReferenceModeNaming.ReferenceModeTargetKindPropertyHandler)),
				new DomainMemberInfo(typeof(ValueTypeHasDataType), "Scale", ValueTypeHasDataType.ScaleDomainPropertyId, typeof(ValueTypeHasDataType.ScalePropertyHandler)),
				new DomainMemberInfo(typeof(ValueTypeHasDataType), "Length", ValueTypeHasDataType.LengthDomainPropertyId, typeof(ValueTypeHasDataType.LengthPropertyHandler)),
				new DomainMemberInfo(typeof(ValueTypeHasDataType), "CurrentScale", ValueTypeHasDataType.CurrentScaleDomainPropertyId, typeof(ValueTypeHasDataType.CurrentScalePropertyHandler)),
				new DomainMemberInfo(typeof(ValueTypeHasDataType), "CurrentLength", ValueTypeHasDataType.CurrentLengthDomainPropertyId, typeof(ValueTypeHasDataType.CurrentLengthPropertyHandler)),
				new DomainMemberInfo(typeof(Objectification), "IsImplied", Objectification.IsImpliedDomainPropertyId, typeof(Objectification.IsImpliedPropertyHandler)),
				new DomainMemberInfo(typeof(ConstraintRoleProjection), "IsAutomatic", ConstraintRoleProjection.IsAutomaticDomainPropertyId, typeof(ConstraintRoleProjection.IsAutomaticPropertyHandler)),
				new DomainMemberInfo(typeof(RolePathObjectTypeRoot), "IsNegated", RolePathObjectTypeRoot.IsNegatedDomainPropertyId, typeof(RolePathObjectTypeRoot.IsNegatedPropertyHandler)),
				new DomainMemberInfo(typeof(PathedRole), "IsNegated", PathedRole.IsNegatedDomainPropertyId, typeof(PathedRole.IsNegatedPropertyHandler)),
				new DomainMemberInfo(typeof(PathedRole), "PathedRolePurpose", PathedRole.PathedRolePurposeDomainPropertyId, typeof(PathedRole.PathedRolePurposePropertyHandler)),
				new DomainMemberInfo(typeof(DerivedRoleProjection), "IsAutomatic", DerivedRoleProjection.IsAutomaticDomainPropertyId, typeof(DerivedRoleProjection.IsAutomaticPropertyHandler)),
			};
		}
		/// <summary>
		/// Gets the list of generated domain roles.
		/// </summary>
		/// <returns>List of role data.</returns>
		protected sealed override DomainRolePlayerInfo[] GetGeneratedDomainRoles()
		{
			return new DomainRolePlayerInfo[]
			{
				new DomainRolePlayerInfo(typeof(FactConstraint), "Constraint", FactConstraint.ConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactConstraint), "FactType", FactConstraint.FactTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactSetComparisonConstraint), "SetComparisonConstraint", FactSetComparisonConstraint.SetComparisonConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactSetComparisonConstraint), "FactType", FactSetComparisonConstraint.FactTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactSetConstraint), "SetConstraint", FactSetConstraint.SetConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactSetConstraint), "FactType", FactSetConstraint.FactTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(ORMModelElementHasExtensionElement), "ExtendedElement", ORMModelElementHasExtensionElement.ExtendedElementDomainRoleId),
				new DomainRolePlayerInfo(typeof(ORMModelElementHasExtensionElement), "Extension", ORMModelElementHasExtensionElement.ExtensionDomainRoleId),
				new DomainRolePlayerInfo(typeof(ORMModelElementHasExtensionModelError), "ExtendedElement", ORMModelElementHasExtensionModelError.ExtendedElementDomainRoleId),
				new DomainRolePlayerInfo(typeof(ORMModelElementHasExtensionModelError), "ExtensionModelError", ORMModelElementHasExtensionModelError.ExtensionModelErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(ValueTypeHasDataType), "ValueType", ValueTypeHasDataType.ValueTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(ValueTypeHasDataType), "DataType", ValueTypeHasDataType.DataTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(Objectification), "NestingType", Objectification.NestingTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(Objectification), "NestedFactType", Objectification.NestedFactTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectTypePlaysRole), "PlayedRole", ObjectTypePlaysRole.PlayedRoleDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectTypePlaysRole), "RolePlayer", ObjectTypePlaysRole.RolePlayerDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasObjectType), "Model", ModelHasObjectType.ModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasObjectType), "ObjectType", ModelHasObjectType.ObjectTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasFactType), "Model", ModelHasFactType.ModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasFactType), "FactType", ModelHasFactType.FactTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasError), "Model", ModelHasError.ModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasError), "Error", ModelHasError.ErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasReferenceModeKind), "Model", ModelHasReferenceModeKind.ModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasReferenceModeKind), "ReferenceModeKind", ModelHasReferenceModeKind.ReferenceModeKindDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasReferenceMode), "Model", ModelHasReferenceMode.ModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasReferenceMode), "ReferenceMode", ModelHasReferenceMode.ReferenceModeDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasSetConstraint), "Model", ModelHasSetConstraint.ModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasSetConstraint), "SetConstraint", ModelHasSetConstraint.SetConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectTypeImpliesMandatoryConstraint), "ObjectType", ObjectTypeImpliesMandatoryConstraint.ObjectTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectTypeImpliesMandatoryConstraint), "MandatoryConstraint", ObjectTypeImpliesMandatoryConstraint.MandatoryConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(MandatoryConstraintIsInherentForObjectType), "ObjectType", MandatoryConstraintIsInherentForObjectType.ObjectTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(MandatoryConstraintIsInherentForObjectType), "MandatoryConstraint", MandatoryConstraintIsInherentForObjectType.MandatoryConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasSetComparisonConstraint), "Model", ModelHasSetComparisonConstraint.ModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasSetComparisonConstraint), "SetComparisonConstraint", ModelHasSetComparisonConstraint.SetComparisonConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasDataType), "Model", ModelHasDataType.ModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasDataType), "DataType", ModelHasDataType.DataTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(GenerationStateHasGenerationSetting), "GenerationState", GenerationStateHasGenerationSetting.GenerationStateDomainRoleId),
				new DomainRolePlayerInfo(typeof(GenerationStateHasGenerationSetting), "GenerationSetting", GenerationStateHasGenerationSetting.GenerationSettingDomainRoleId),
				new DomainRolePlayerInfo(typeof(NameGeneratorRefinesNameGenerator), "Parent", NameGeneratorRefinesNameGenerator.ParentDomainRoleId),
				new DomainRolePlayerInfo(typeof(NameGeneratorRefinesNameGenerator), "Refinement", NameGeneratorRefinesNameGenerator.RefinementDomainRoleId),
				new DomainRolePlayerInfo(typeof(ElementHasAlias), "Element", ElementHasAlias.ElementDomainRoleId),
				new DomainRolePlayerInfo(typeof(ElementHasAlias), "Alias", ElementHasAlias.AliasDomainRoleId),
				new DomainRolePlayerInfo(typeof(NameAliasRefinesInstance), "Alias", NameAliasRefinesInstance.AliasDomainRoleId),
				new DomainRolePlayerInfo(typeof(NameAliasRefinesInstance), "RefinedInstance", NameAliasRefinesInstance.RefinedInstanceDomainRoleId),
				new DomainRolePlayerInfo(typeof(NameGeneratorRefinesInstance), "NameGenerator", NameGeneratorRefinesInstance.NameGeneratorDomainRoleId),
				new DomainRolePlayerInfo(typeof(NameGeneratorRefinesInstance), "Instance", NameGeneratorRefinesInstance.InstanceDomainRoleId),
				new DomainRolePlayerInfo(typeof(RecognizedPhraseHasAbbreviation), "RecognizedPhrase", RecognizedPhraseHasAbbreviation.RecognizedPhraseDomainRoleId),
				new DomainRolePlayerInfo(typeof(RecognizedPhraseHasAbbreviation), "Abbreviation", RecognizedPhraseHasAbbreviation.AbbreviationDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectTypeHasAbbreviation), "ObjectType", ObjectTypeHasAbbreviation.ObjectTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectTypeHasAbbreviation), "Abbreviation", ObjectTypeHasAbbreviation.AbbreviationDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelContainsRecognizedPhrase), "Model", ModelContainsRecognizedPhrase.ModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelContainsRecognizedPhrase), "RecognizedPhrase", ModelContainsRecognizedPhrase.RecognizedPhraseDomainRoleId),
				new DomainRolePlayerInfo(typeof(RecognizedPhraseHasDuplicateNameError), "RecognizedPhrase", RecognizedPhraseHasDuplicateNameError.RecognizedPhraseDomainRoleId),
				new DomainRolePlayerInfo(typeof(RecognizedPhraseHasDuplicateNameError), "DuplicateNameError", RecognizedPhraseHasDuplicateNameError.DuplicateNameErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(FunctionHasDuplicateNameError), "Function", FunctionHasDuplicateNameError.FunctionDomainRoleId),
				new DomainRolePlayerInfo(typeof(FunctionHasDuplicateNameError), "DuplicateNameError", FunctionHasDuplicateNameError.DuplicateNameErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(ReadingHasDuplicateSignatureError), "Reading", ReadingHasDuplicateSignatureError.ReadingDomainRoleId),
				new DomainRolePlayerInfo(typeof(ReadingHasDuplicateSignatureError), "DuplicateSignatureError", ReadingHasDuplicateSignatureError.DuplicateSignatureErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(ExternalRoleConstraint), "ConstrainedRole", ExternalRoleConstraint.ConstrainedRoleDomainRoleId),
				new DomainRolePlayerInfo(typeof(ExternalRoleConstraint), "FactConstraint", ExternalRoleConstraint.FactConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(ExclusiveOrConstraintCoupler), "MandatoryConstraint", ExclusiveOrConstraintCoupler.MandatoryConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(ExclusiveOrConstraintCoupler), "ExclusionConstraint", ExclusiveOrConstraintCoupler.ExclusionConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetComparisonConstraintHasRoleSequence), "ExternalConstraint", SetComparisonConstraintHasRoleSequence.ExternalConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetComparisonConstraintHasRoleSequence), "RoleSequence", SetComparisonConstraintHasRoleSequence.RoleSequenceDomainRoleId),
				new DomainRolePlayerInfo(typeof(ConstraintRoleSequenceHasRole), "ConstraintRoleSequence", ConstraintRoleSequenceHasRole.ConstraintRoleSequenceDomainRoleId),
				new DomainRolePlayerInfo(typeof(ConstraintRoleSequenceHasRole), "Role", ConstraintRoleSequenceHasRole.RoleDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetComparisonConstraintHasTooFewRoleSequencesError), "SetComparisonConstraint", SetComparisonConstraintHasTooFewRoleSequencesError.SetComparisonConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetComparisonConstraintHasTooFewRoleSequencesError), "TooFewRoleSequencesError", SetComparisonConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetComparisonConstraintHasTooManyRoleSequencesError), "SetComparisonConstraint", SetComparisonConstraintHasTooManyRoleSequencesError.SetComparisonConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetComparisonConstraintHasTooManyRoleSequencesError), "TooManyRoleSequencesError", SetComparisonConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectTypeHasDuplicateNameError), "ObjectType", ObjectTypeHasDuplicateNameError.ObjectTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectTypeHasDuplicateNameError), "DuplicateNameError", ObjectTypeHasDuplicateNameError.DuplicateNameErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(RoleInstanceHasPopulationUniquenessError), "RoleInstance", RoleInstanceHasPopulationUniquenessError.RoleInstanceDomainRoleId),
				new DomainRolePlayerInfo(typeof(RoleInstanceHasPopulationUniquenessError), "PopulationUniquenessError", RoleInstanceHasPopulationUniquenessError.PopulationUniquenessErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(EntityTypeRoleInstanceHasPopulationUniquenessError), "RoleInstance", EntityTypeRoleInstanceHasPopulationUniquenessError.RoleInstanceDomainRoleId),
				new DomainRolePlayerInfo(typeof(EntityTypeRoleInstanceHasPopulationUniquenessError), "PopulationUniquenessError", EntityTypeRoleInstanceHasPopulationUniquenessError.PopulationUniquenessErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeRoleInstanceHasPopulationUniquenessError), "RoleInstance", FactTypeRoleInstanceHasPopulationUniquenessError.RoleInstanceDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeRoleInstanceHasPopulationUniquenessError), "PopulationUniquenessError", FactTypeRoleInstanceHasPopulationUniquenessError.PopulationUniquenessErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetComparisonConstraintHasContradictionError), "SetComparisonConstraint", SetComparisonConstraintHasContradictionError.SetComparisonConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetComparisonConstraintHasContradictionError), "ContradictionError", SetComparisonConstraintHasContradictionError.ContradictionErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetComparisonConstraintHasExclusionContradictsEqualityError), "SetComparisonConstraint", SetComparisonConstraintHasExclusionContradictsEqualityError.SetComparisonConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetComparisonConstraintHasExclusionContradictsEqualityError), "ExclusionContradictsEqualityError", SetComparisonConstraintHasExclusionContradictsEqualityError.ExclusionContradictsEqualityErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetComparisonConstraintHasExclusionContradictsSubsetError), "SetComparisonConstraint", SetComparisonConstraintHasExclusionContradictsSubsetError.SetComparisonConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetComparisonConstraintHasExclusionContradictsSubsetError), "ExclusionContradictsSubsetError", SetComparisonConstraintHasExclusionContradictsSubsetError.ExclusionContradictsSubsetErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(ExclusionConstraintHasExclusionContradictsMandatoryError), "ExclusionConstraint", ExclusionConstraintHasExclusionContradictsMandatoryError.ExclusionConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(ExclusionConstraintHasExclusionContradictsMandatoryError), "ExclusionContradictsMandatoryError", ExclusionConstraintHasExclusionContradictsMandatoryError.ExclusionContradictsMandatoryErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(MandatoryConstraintHasExclusionContradictsMandatoryError), "MandatoryConstraint", MandatoryConstraintHasExclusionContradictsMandatoryError.MandatoryConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(MandatoryConstraintHasExclusionContradictsMandatoryError), "ExclusionContradictsMandatoryError", MandatoryConstraintHasExclusionContradictsMandatoryError.ExclusionContradictsMandatoryErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(SubsetConstraintHasNotWellModeledSubsetAndMandatoryError), "SubsetConstraint", SubsetConstraintHasNotWellModeledSubsetAndMandatoryError.SubsetConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(SubsetConstraintHasNotWellModeledSubsetAndMandatoryError), "NotWellModeledSubsetAndMandatoryError", SubsetConstraintHasNotWellModeledSubsetAndMandatoryError.NotWellModeledSubsetAndMandatoryErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError), "MandatoryConstraint", MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError.MandatoryConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError), "NotWellModeledSubsetAndMandatoryError", MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError.NotWellModeledSubsetAndMandatoryErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(MandatoryConstraintHasPopulationMandatoryError), "MandatoryConstraint", MandatoryConstraintHasPopulationMandatoryError.MandatoryConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(MandatoryConstraintHasPopulationMandatoryError), "PopulationMandatoryError", MandatoryConstraintHasPopulationMandatoryError.PopulationMandatoryErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectTypeInstanceHasPopulationMandatoryError), "ObjectTypeInstance", ObjectTypeInstanceHasPopulationMandatoryError.ObjectTypeInstanceDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectTypeInstanceHasPopulationMandatoryError), "PopulationMandatoryError", ObjectTypeInstanceHasPopulationMandatoryError.PopulationMandatoryErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(ReadingOrderHasReading), "ReadingOrder", ReadingOrderHasReading.ReadingOrderDomainRoleId),
				new DomainRolePlayerInfo(typeof(ReadingOrderHasReading), "Reading", ReadingOrderHasReading.ReadingDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeHasReadingOrder), "FactType", FactTypeHasReadingOrder.FactTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeHasReadingOrder), "ReadingOrder", FactTypeHasReadingOrder.ReadingOrderDomainRoleId),
				new DomainRolePlayerInfo(typeof(ReferenceModeHasReferenceModeKind), "ReferenceMode", ReferenceModeHasReferenceModeKind.ReferenceModeDomainRoleId),
				new DomainRolePlayerInfo(typeof(ReferenceModeHasReferenceModeKind), "Kind", ReferenceModeHasReferenceModeKind.KindDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetConstraintHasDuplicateNameError), "SetConstraint", SetConstraintHasDuplicateNameError.SetConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetConstraintHasDuplicateNameError), "DuplicateNameError", SetConstraintHasDuplicateNameError.DuplicateNameErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetComparisonConstraintHasDuplicateNameError), "SetComparisonConstraint", SetComparisonConstraintHasDuplicateNameError.SetComparisonConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetComparisonConstraintHasDuplicateNameError), "DuplicateNameError", SetComparisonConstraintHasDuplicateNameError.DuplicateNameErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(EntityTypeHasPreferredIdentifier), "PreferredIdentifierFor", EntityTypeHasPreferredIdentifier.PreferredIdentifierForDomainRoleId),
				new DomainRolePlayerInfo(typeof(EntityTypeHasPreferredIdentifier), "PreferredIdentifier", EntityTypeHasPreferredIdentifier.PreferredIdentifierDomainRoleId),
				new DomainRolePlayerInfo(typeof(ReadingHasTooManyRolesError), "Reading", ReadingHasTooManyRolesError.ReadingDomainRoleId),
				new DomainRolePlayerInfo(typeof(ReadingHasTooManyRolesError), "TooManyRolesError", ReadingHasTooManyRolesError.TooManyRolesErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(ReadingHasTooFewRolesError), "Reading", ReadingHasTooFewRolesError.ReadingDomainRoleId),
				new DomainRolePlayerInfo(typeof(ReadingHasTooFewRolesError), "TooFewRolesError", ReadingHasTooFewRolesError.TooFewRolesErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(ReadingHasReadingRequiresUserModificationError), "Reading", ReadingHasReadingRequiresUserModificationError.ReadingDomainRoleId),
				new DomainRolePlayerInfo(typeof(ReadingHasReadingRequiresUserModificationError), "RequiresUserModificationError", ReadingHasReadingRequiresUserModificationError.RequiresUserModificationErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError), "Constraint", SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError), "ArityMismatchError", SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ArityMismatchErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(ElementAssociatedWithModelError), "AssociatedElement", ElementAssociatedWithModelError.AssociatedElementDomainRoleId),
				new DomainRolePlayerInfo(typeof(ElementAssociatedWithModelError), "ModelError", ElementAssociatedWithModelError.ModelErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeHasFactTypeRequiresReadingError), "FactType", FactTypeHasFactTypeRequiresReadingError.FactTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeHasFactTypeRequiresReadingError), "ReadingRequiredError", FactTypeHasFactTypeRequiresReadingError.ReadingRequiredErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeHasFactTypeRequiresInternalUniquenessConstraintError), "FactType", FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.FactTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeHasFactTypeRequiresInternalUniquenessConstraintError), "InternalUniquenessConstraintRequiredError", FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.InternalUniquenessConstraintRequiredErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(ValueTypeHasValueConstraint), "ValueType", ValueTypeHasValueConstraint.ValueTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(ValueTypeHasValueConstraint), "ValueConstraint", ValueTypeHasValueConstraint.ValueConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectTypeHasCardinalityConstraint), "ObjectType", ObjectTypeHasCardinalityConstraint.ObjectTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectTypeHasCardinalityConstraint), "CardinalityConstraint", ObjectTypeHasCardinalityConstraint.CardinalityConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(UnaryRoleHasCardinalityConstraint), "UnaryRole", UnaryRoleHasCardinalityConstraint.UnaryRoleDomainRoleId),
				new DomainRolePlayerInfo(typeof(UnaryRoleHasCardinalityConstraint), "CardinalityConstraint", UnaryRoleHasCardinalityConstraint.CardinalityConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(RoleHasValueConstraint), "Role", RoleHasValueConstraint.RoleDomainRoleId),
				new DomainRolePlayerInfo(typeof(RoleHasValueConstraint), "ValueConstraint", RoleHasValueConstraint.ValueConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(PathedRoleHasValueConstraint), "PathedRole", PathedRoleHasValueConstraint.PathedRoleDomainRoleId),
				new DomainRolePlayerInfo(typeof(PathedRoleHasValueConstraint), "ValueConstraint", PathedRoleHasValueConstraint.ValueConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(RolePathRootHasValueConstraint), "PathRoot", RolePathRootHasValueConstraint.PathRootDomainRoleId),
				new DomainRolePlayerInfo(typeof(RolePathRootHasValueConstraint), "ValueConstraint", RolePathRootHasValueConstraint.ValueConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(ValueConstraintHasValueRange), "ValueConstraint", ValueConstraintHasValueRange.ValueConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(ValueConstraintHasValueRange), "ValueRange", ValueConstraintHasValueRange.ValueRangeDomainRoleId),
				new DomainRolePlayerInfo(typeof(CardinalityConstraintHasRange), "Constraint", CardinalityConstraintHasRange.ConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(CardinalityConstraintHasRange), "Range", CardinalityConstraintHasRange.RangeDomainRoleId),
				new DomainRolePlayerInfo(typeof(CardinalityConstraintHasRangeOverlapError), "CardinalityConstraint", CardinalityConstraintHasRangeOverlapError.CardinalityConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(CardinalityConstraintHasRangeOverlapError), "CardinalityRangeOverlapError", CardinalityConstraintHasRangeOverlapError.CardinalityRangeOverlapErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(ValueTypeHasUnspecifiedDataTypeError), "ValueTypeHasDataType", ValueTypeHasUnspecifiedDataTypeError.ValueTypeHasDataTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(ValueTypeHasUnspecifiedDataTypeError), "DataTypeNotSpecifiedError", ValueTypeHasUnspecifiedDataTypeError.DataTypeNotSpecifiedErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetComparisonConstraintHasCompatibleRolePlayerTypeError), "SetComparisonConstraint", SetComparisonConstraintHasCompatibleRolePlayerTypeError.SetComparisonConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetComparisonConstraintHasCompatibleRolePlayerTypeError), "CompatibleRolePlayerTypeError", SetComparisonConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError), "SubsetConstraint", SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError.SubsetConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError), "SupersetRoleOfSubtypeSubsetConstraintNotSubtypeError", SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError.SupersetRoleOfSubtypeSubsetConstraintNotSubtypeErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetConstraintHasCompatibleRolePlayerTypeError), "SetConstraint", SetConstraintHasCompatibleRolePlayerTypeError.SetConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetConstraintHasCompatibleRolePlayerTypeError), "CompatibleRolePlayerTypeError", SetConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(ConstraintRoleSequenceHasJoinPathRequiredError), "RoleSequence", ConstraintRoleSequenceHasJoinPathRequiredError.RoleSequenceDomainRoleId),
				new DomainRolePlayerInfo(typeof(ConstraintRoleSequenceHasJoinPathRequiredError), "JoinPathRequiredError", ConstraintRoleSequenceHasJoinPathRequiredError.JoinPathRequiredErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(UniquenessConstraintHasNMinusOneError), "Constraint", UniquenessConstraintHasNMinusOneError.ConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(UniquenessConstraintHasNMinusOneError), "NMinusOneError", UniquenessConstraintHasNMinusOneError.NMinusOneErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(RoleHasRolePlayerRequiredError), "Role", RoleHasRolePlayerRequiredError.RoleDomainRoleId),
				new DomainRolePlayerInfo(typeof(RoleHasRolePlayerRequiredError), "RolePlayerRequiredError", RoleHasRolePlayerRequiredError.RolePlayerRequiredErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectTypeHasEntityTypeRequiresReferenceSchemeError), "ObjectType", ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ObjectTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectTypeHasEntityTypeRequiresReferenceSchemeError), "ReferenceSchemeError", ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ReferenceSchemeErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(FrequencyConstraintHasFrequencyConstraintMinMaxError), "FrequencyConstraint", FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(FrequencyConstraintHasFrequencyConstraintMinMaxError), "FrequencyConstraintMinMaxError", FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintMinMaxErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(FrequencyConstraintHasFrequencyConstraintExactlyOneError), "FrequencyConstraint", FrequencyConstraintHasFrequencyConstraintExactlyOneError.FrequencyConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(FrequencyConstraintHasFrequencyConstraintExactlyOneError), "FrequencyConstraintExactlyOneError", FrequencyConstraintHasFrequencyConstraintExactlyOneError.FrequencyConstraintExactlyOneErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError), "FrequencyConstraint", FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError.FrequencyConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError), "FrequencyConstraintNonRestrictiveRangeError", FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError.FrequencyConstraintNonRestrictiveRangeErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectificationImpliesFactType), "ImpliedByObjectification", ObjectificationImpliesFactType.ImpliedByObjectificationDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectificationImpliesFactType), "ImpliedFactType", ObjectificationImpliesFactType.ImpliedFactTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(ValueRangeHasMaxValueMismatchError), "ValueRange", ValueRangeHasMaxValueMismatchError.ValueRangeDomainRoleId),
				new DomainRolePlayerInfo(typeof(ValueRangeHasMaxValueMismatchError), "MaxValueMismatchError", ValueRangeHasMaxValueMismatchError.MaxValueMismatchErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(ValueRangeHasMinValueMismatchError), "ValueRange", ValueRangeHasMinValueMismatchError.ValueRangeDomainRoleId),
				new DomainRolePlayerInfo(typeof(ValueRangeHasMinValueMismatchError), "MinValueMismatchError", ValueRangeHasMinValueMismatchError.MinValueMismatchErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeHasImpliedInternalUniquenessConstraintError), "FactType", FactTypeHasImpliedInternalUniquenessConstraintError.FactTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeHasImpliedInternalUniquenessConstraintError), "ImpliedInternalUniquenessConstraintError", FactTypeHasImpliedInternalUniquenessConstraintError.ImpliedInternalUniquenessConstraintErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetConstraintHasTooFewRoleSequencesError), "SetConstraint", SetConstraintHasTooFewRoleSequencesError.SetConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetConstraintHasTooFewRoleSequencesError), "TooFewRoleSequencesError", SetConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetConstraintHasTooManyRoleSequencesError), "SetConstraint", SetConstraintHasTooManyRoleSequencesError.SetConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetConstraintHasTooManyRoleSequencesError), "TooManyRoleSequencesError", SetConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError), "FrequencyConstraint", FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError.FrequencyConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError), "FrequencyConstraintViolatedByUniquenessConstraintError", FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError.FrequencyConstraintViolatedByUniquenessConstraintErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(RingConstraintHasRingConstraintTypeNotSpecifiedError), "RingConstraint", RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(RingConstraintHasRingConstraintTypeNotSpecifiedError), "RingConstraintTypeNotSpecifiedError", RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintTypeNotSpecifiedErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(ValueComparisonConstraintHasOperatorNotSpecifiedError), "ValueComparisonConstraint", ValueComparisonConstraintHasOperatorNotSpecifiedError.ValueComparisonConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(ValueComparisonConstraintHasOperatorNotSpecifiedError), "OperatorNotSpecifiedError", ValueComparisonConstraintHasOperatorNotSpecifiedError.OperatorNotSpecifiedErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(ValueComparisonConstraintHasRolesNotComparableError), "ValueComparisonConstraint", ValueComparisonConstraintHasRolesNotComparableError.ValueComparisonConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(ValueComparisonConstraintHasRolesNotComparableError), "RolesNotComparableError", ValueComparisonConstraintHasRolesNotComparableError.RolesNotComparableErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(ValueConstraintHasDuplicateNameError), "ValueConstraint", ValueConstraintHasDuplicateNameError.ValueConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(ValueConstraintHasDuplicateNameError), "DuplicateNameError", ValueConstraintHasDuplicateNameError.DuplicateNameErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(CardinalityConstraintHasDuplicateNameError), "CardinalityConstraint", CardinalityConstraintHasDuplicateNameError.CardinalityConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(CardinalityConstraintHasDuplicateNameError), "DuplicateNameError", CardinalityConstraintHasDuplicateNameError.DuplicateNameErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasDefinition), "Model", ModelHasDefinition.ModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasDefinition), "Definition", ModelHasDefinition.DefinitionDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectTypeHasDefinition), "ObjectType", ObjectTypeHasDefinition.ObjectTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectTypeHasDefinition), "Definition", ObjectTypeHasDefinition.DefinitionDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeHasDefinition), "FactType", FactTypeHasDefinition.FactTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeHasDefinition), "Definition", FactTypeHasDefinition.DefinitionDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetConstraintHasDefinition), "SetConstraint", SetConstraintHasDefinition.SetConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetConstraintHasDefinition), "Definition", SetConstraintHasDefinition.DefinitionDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetComparisonConstraintHasDefinition), "SetComparisonConstraint", SetComparisonConstraintHasDefinition.SetComparisonConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetComparisonConstraintHasDefinition), "Definition", SetComparisonConstraintHasDefinition.DefinitionDomainRoleId),
				new DomainRolePlayerInfo(typeof(ValueConstraintHasDefinition), "ValueConstraint", ValueConstraintHasDefinition.ValueConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(ValueConstraintHasDefinition), "Definition", ValueConstraintHasDefinition.DefinitionDomainRoleId),
				new DomainRolePlayerInfo(typeof(CardinalityConstraintHasDefinition), "CardinalityConstraint", CardinalityConstraintHasDefinition.CardinalityConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(CardinalityConstraintHasDefinition), "Definition", CardinalityConstraintHasDefinition.DefinitionDomainRoleId),
				new DomainRolePlayerInfo(typeof(ElementGroupingHasDefinition), "Grouping", ElementGroupingHasDefinition.GroupingDomainRoleId),
				new DomainRolePlayerInfo(typeof(ElementGroupingHasDefinition), "Definition", ElementGroupingHasDefinition.DefinitionDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeHasNote), "FactType", FactTypeHasNote.FactTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeHasNote), "Note", FactTypeHasNote.NoteDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectTypeHasNote), "ObjectType", ObjectTypeHasNote.ObjectTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectTypeHasNote), "Note", ObjectTypeHasNote.NoteDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetConstraintHasNote), "SetConstraint", SetConstraintHasNote.SetConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetConstraintHasNote), "Note", SetConstraintHasNote.NoteDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetComparisonConstraintHasNote), "SetComparisonConstraint", SetComparisonConstraintHasNote.SetComparisonConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetComparisonConstraintHasNote), "Note", SetComparisonConstraintHasNote.NoteDomainRoleId),
				new DomainRolePlayerInfo(typeof(ValueConstraintHasNote), "ValueConstraint", ValueConstraintHasNote.ValueConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(ValueConstraintHasNote), "Note", ValueConstraintHasNote.NoteDomainRoleId),
				new DomainRolePlayerInfo(typeof(CardinalityConstraintHasNote), "CardinalityConstraint", CardinalityConstraintHasNote.CardinalityConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(CardinalityConstraintHasNote), "Note", CardinalityConstraintHasNote.NoteDomainRoleId),
				new DomainRolePlayerInfo(typeof(ElementGroupingHasNote), "Grouping", ElementGroupingHasNote.GroupingDomainRoleId),
				new DomainRolePlayerInfo(typeof(ElementGroupingHasNote), "Note", ElementGroupingHasNote.NoteDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasPrimaryNote), "Model", ModelHasPrimaryNote.ModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasPrimaryNote), "Note", ModelHasPrimaryNote.NoteDomainRoleId),
				new DomainRolePlayerInfo(typeof(LeadRolePathHasNote), "LeadRolePath", LeadRolePathHasNote.LeadRolePathDomainRoleId),
				new DomainRolePlayerInfo(typeof(LeadRolePathHasNote), "Note", LeadRolePathHasNote.NoteDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasModelNote), "Model", ModelHasModelNote.ModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasModelNote), "Note", ModelHasModelNote.NoteDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelNoteReferencesModelElement), "Note", ModelNoteReferencesModelElement.NoteDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelNoteReferencesModelElement), "Element", ModelNoteReferencesModelElement.ElementDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelNoteReferencesFactType), "Note", ModelNoteReferencesFactType.NoteDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelNoteReferencesFactType), "Element", ModelNoteReferencesFactType.ElementDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelNoteReferencesObjectType), "Note", ModelNoteReferencesObjectType.NoteDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelNoteReferencesObjectType), "Element", ModelNoteReferencesObjectType.ElementDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelNoteReferencesSetConstraint), "Note", ModelNoteReferencesSetConstraint.NoteDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelNoteReferencesSetConstraint), "Element", ModelNoteReferencesSetConstraint.ElementDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelNoteReferencesSetComparisonConstraint), "Note", ModelNoteReferencesSetComparisonConstraint.NoteDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelNoteReferencesSetComparisonConstraint), "Element", ModelNoteReferencesSetComparisonConstraint.ElementDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectTypeHasCompatibleSupertypesError), "ObjectType", ObjectTypeHasCompatibleSupertypesError.ObjectTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectTypeHasCompatibleSupertypesError), "CompatibleSupertypesError", ObjectTypeHasCompatibleSupertypesError.CompatibleSupertypesErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetConstraintHasImplicationError), "SetConstraint", SetConstraintHasImplicationError.SetConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetConstraintHasImplicationError), "ImplicationError", SetConstraintHasImplicationError.ImplicationErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetComparisonConstraintHasImplicationError), "SetComparisonConstraint", SetComparisonConstraintHasImplicationError.SetComparisonConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetComparisonConstraintHasImplicationError), "ImplicationError", SetComparisonConstraintHasImplicationError.ImplicationErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError), "SetComparisonConstraint", SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError.SetComparisonConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError), "EqualityOrSubsetImpliedByMandatoryError", SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError.EqualityOrSubsetImpliedByMandatoryErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectTypeHasPreferredIdentifierRequiresMandatoryError), "ObjectType", ObjectTypeHasPreferredIdentifierRequiresMandatoryError.ObjectTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectTypeHasPreferredIdentifierRequiresMandatoryError), "PreferredIdentifierRequiresMandatoryError", ObjectTypeHasPreferredIdentifierRequiresMandatoryError.PreferredIdentifierRequiresMandatoryErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(ValueConstraintHasValueRangeOverlapError), "ValueConstraint", ValueConstraintHasValueRangeOverlapError.ValueConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(ValueConstraintHasValueRangeOverlapError), "ValueRangeOverlapError", ValueConstraintHasValueRangeOverlapError.ValueRangeOverlapErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(ValueConstraintHasValueTypeDetachedError), "ValueConstraint", ValueConstraintHasValueTypeDetachedError.ValueConstraintDomainRoleId),
				new DomainRolePlayerInfo(typeof(ValueConstraintHasValueTypeDetachedError), "ValueTypeDetachedError", ValueConstraintHasValueTypeDetachedError.ValueTypeDetachedErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeHasRole), "FactType", FactTypeHasRole.FactTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeHasRole), "Role", FactTypeHasRole.RoleDomainRoleId),
				new DomainRolePlayerInfo(typeof(ReadingOrderHasRole), "ReadingOrder", ReadingOrderHasRole.ReadingOrderDomainRoleId),
				new DomainRolePlayerInfo(typeof(ReadingOrderHasRole), "Role", ReadingOrderHasRole.RoleDomainRoleId),
				new DomainRolePlayerInfo(typeof(RoleProxyHasRole), "Proxy", RoleProxyHasRole.ProxyDomainRoleId),
				new DomainRolePlayerInfo(typeof(RoleProxyHasRole), "TargetRole", RoleProxyHasRole.TargetRoleDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectifiedUnaryRoleHasRole), "ObjectifiedUnaryRole", ObjectifiedUnaryRoleHasRole.ObjectifiedUnaryRoleDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectifiedUnaryRoleHasRole), "TargetRole", ObjectifiedUnaryRoleHasRole.TargetRoleDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeHasDerivationExpression), "FactType", FactTypeHasDerivationExpression.FactTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeHasDerivationExpression), "DerivationRule", FactTypeHasDerivationExpression.DerivationRuleDomainRoleId),
				new DomainRolePlayerInfo(typeof(SubtypeHasDerivationExpression), "Subtype", SubtypeHasDerivationExpression.SubtypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(SubtypeHasDerivationExpression), "DerivationRule", SubtypeHasDerivationExpression.DerivationRuleDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectTypeHasObjectTypeInstance), "ObjectType", ObjectTypeHasObjectTypeInstance.ObjectTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectTypeHasObjectTypeInstance), "ObjectTypeInstance", ObjectTypeHasObjectTypeInstance.ObjectTypeInstanceDomainRoleId),
				new DomainRolePlayerInfo(typeof(EntityTypeHasEntityTypeInstance), "EntityType", EntityTypeHasEntityTypeInstance.EntityTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(EntityTypeHasEntityTypeInstance), "EntityTypeInstance", EntityTypeHasEntityTypeInstance.EntityTypeInstanceDomainRoleId),
				new DomainRolePlayerInfo(typeof(EntityTypeSubtypeHasEntityTypeSubtypeInstance), "EntityTypeSubtype", EntityTypeSubtypeHasEntityTypeSubtypeInstance.EntityTypeSubtypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(EntityTypeSubtypeHasEntityTypeSubtypeInstance), "EntityTypeSubtypeInstance", EntityTypeSubtypeHasEntityTypeSubtypeInstance.EntityTypeSubtypeInstanceDomainRoleId),
				new DomainRolePlayerInfo(typeof(ValueTypeHasValueTypeInstance), "ValueType", ValueTypeHasValueTypeInstance.ValueTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(ValueTypeHasValueTypeInstance), "ValueTypeInstance", ValueTypeHasValueTypeInstance.ValueTypeInstanceDomainRoleId),
				new DomainRolePlayerInfo(typeof(RoleInstance), "Role", RoleInstance.RoleDomainRoleId),
				new DomainRolePlayerInfo(typeof(RoleInstance), "ObjectTypeInstance", RoleInstance.ObjectTypeInstanceDomainRoleId),
				new DomainRolePlayerInfo(typeof(EntityTypeRoleInstance), "Role", EntityTypeRoleInstance.RoleDomainRoleId),
				new DomainRolePlayerInfo(typeof(EntityTypeRoleInstance), "ObjectTypeInstance", EntityTypeRoleInstance.ObjectTypeInstanceDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeRoleInstance), "Role", FactTypeRoleInstance.RoleDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeRoleInstance), "ObjectTypeInstance", FactTypeRoleInstance.ObjectTypeInstanceDomainRoleId),
				new DomainRolePlayerInfo(typeof(EntityTypeInstanceHasRoleInstance), "EntityTypeInstance", EntityTypeInstanceHasRoleInstance.EntityTypeInstanceDomainRoleId),
				new DomainRolePlayerInfo(typeof(EntityTypeInstanceHasRoleInstance), "RoleInstance", EntityTypeInstanceHasRoleInstance.RoleInstanceDomainRoleId),
				new DomainRolePlayerInfo(typeof(EntityTypeSubtypeInstanceHasSupertypeInstance), "EntityTypeSubtypeInstance", EntityTypeSubtypeInstanceHasSupertypeInstance.EntityTypeSubtypeInstanceDomainRoleId),
				new DomainRolePlayerInfo(typeof(EntityTypeSubtypeInstanceHasSupertypeInstance), "SupertypeInstance", EntityTypeSubtypeInstanceHasSupertypeInstance.SupertypeInstanceDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeHasFactTypeInstance), "FactType", FactTypeHasFactTypeInstance.FactTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeHasFactTypeInstance), "FactTypeInstance", FactTypeHasFactTypeInstance.FactTypeInstanceDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeInstanceHasRoleInstance), "FactTypeInstance", FactTypeInstanceHasRoleInstance.FactTypeInstanceDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeInstanceHasRoleInstance), "RoleInstance", FactTypeInstanceHasRoleInstance.RoleInstanceDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectificationInstance), "ObjectifiedInstance", ObjectificationInstance.ObjectifiedInstanceDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectificationInstance), "ObjectifyingInstance", ObjectificationInstance.ObjectifyingInstanceDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectifiedInstanceHasObjectifyingInstanceRequiredError), "FactTypeInstance", ObjectifiedInstanceHasObjectifyingInstanceRequiredError.FactTypeInstanceDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectifiedInstanceHasObjectifyingInstanceRequiredError), "ObjectifyingInstanceRequiredError", ObjectifiedInstanceHasObjectifyingInstanceRequiredError.ObjectifyingInstanceRequiredErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectifyingInstanceHasObjectifiedInstanceRequiredError), "ObjectTypeInstance", ObjectifyingInstanceHasObjectifiedInstanceRequiredError.ObjectTypeInstanceDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectifyingInstanceHasObjectifiedInstanceRequiredError), "ObjectifiedInstanceRequiredError", ObjectifyingInstanceHasObjectifiedInstanceRequiredError.ObjectifiedInstanceRequiredErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError), "EntityTypeInstance", EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError.EntityTypeInstanceDomainRoleId),
				new DomainRolePlayerInfo(typeof(EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError), "TooFewEntityTypeRoleInstancesError", EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError.TooFewEntityTypeRoleInstancesErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeInstanceHasTooFewFactTypeRoleInstancesError), "FactTypeInstance", FactTypeInstanceHasTooFewFactTypeRoleInstancesError.FactTypeInstanceDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeInstanceHasTooFewFactTypeRoleInstancesError), "TooFewFactTypeRoleInstancesError", FactTypeInstanceHasTooFewFactTypeRoleInstancesError.TooFewFactTypeRoleInstancesErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(ValueTypeInstanceHasCompatibleValueTypeInstanceValueError), "ValueTypeInstance", ValueTypeInstanceHasCompatibleValueTypeInstanceValueError.ValueTypeInstanceDomainRoleId),
				new DomainRolePlayerInfo(typeof(ValueTypeInstanceHasCompatibleValueTypeInstanceValueError), "CompatibleValueTypeInstanceValueError", ValueTypeInstanceHasCompatibleValueTypeInstanceValueError.CompatibleValueTypeInstanceValueErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(ConstraintRoleSequenceHasJoinPath), "RoleSequence", ConstraintRoleSequenceHasJoinPath.RoleSequenceDomainRoleId),
				new DomainRolePlayerInfo(typeof(ConstraintRoleSequenceHasJoinPath), "JoinPath", ConstraintRoleSequenceHasJoinPath.JoinPathDomainRoleId),
				new DomainRolePlayerInfo(typeof(ConstraintRoleSequenceJoinPathProjection), "JoinPath", ConstraintRoleSequenceJoinPathProjection.JoinPathDomainRoleId),
				new DomainRolePlayerInfo(typeof(ConstraintRoleSequenceJoinPathProjection), "RolePath", ConstraintRoleSequenceJoinPathProjection.RolePathDomainRoleId),
				new DomainRolePlayerInfo(typeof(ConstraintRoleProjection), "JoinPathProjection", ConstraintRoleProjection.JoinPathProjectionDomainRoleId),
				new DomainRolePlayerInfo(typeof(ConstraintRoleProjection), "ProjectedConstraintRole", ConstraintRoleProjection.ProjectedConstraintRoleDomainRoleId),
				new DomainRolePlayerInfo(typeof(ConstraintRoleProjectedFromRolePathRoot), "ConstraintRoleProjection", ConstraintRoleProjectedFromRolePathRoot.ConstraintRoleProjectionDomainRoleId),
				new DomainRolePlayerInfo(typeof(ConstraintRoleProjectedFromRolePathRoot), "Source", ConstraintRoleProjectedFromRolePathRoot.SourceDomainRoleId),
				new DomainRolePlayerInfo(typeof(ConstraintRoleProjectedFromPathedRole), "ConstraintRoleProjection", ConstraintRoleProjectedFromPathedRole.ConstraintRoleProjectionDomainRoleId),
				new DomainRolePlayerInfo(typeof(ConstraintRoleProjectedFromPathedRole), "Source", ConstraintRoleProjectedFromPathedRole.SourceDomainRoleId),
				new DomainRolePlayerInfo(typeof(ConstraintRoleProjectedFromCalculatedPathValue), "ConstraintRoleProjection", ConstraintRoleProjectedFromCalculatedPathValue.ConstraintRoleProjectionDomainRoleId),
				new DomainRolePlayerInfo(typeof(ConstraintRoleProjectedFromCalculatedPathValue), "Source", ConstraintRoleProjectedFromCalculatedPathValue.SourceDomainRoleId),
				new DomainRolePlayerInfo(typeof(ConstraintRoleProjectedFromPathConstant), "ConstraintRoleProjection", ConstraintRoleProjectedFromPathConstant.ConstraintRoleProjectionDomainRoleId),
				new DomainRolePlayerInfo(typeof(ConstraintRoleProjectedFromPathConstant), "Source", ConstraintRoleProjectedFromPathConstant.SourceDomainRoleId),
				new DomainRolePlayerInfo(typeof(ConstraintRoleProjectedFromPathedRole_Deprecated), "ConstraintRole", ConstraintRoleProjectedFromPathedRole_Deprecated.ConstraintRoleDomainRoleId),
				new DomainRolePlayerInfo(typeof(ConstraintRoleProjectedFromPathedRole_Deprecated), "Source", ConstraintRoleProjectedFromPathedRole_Deprecated.SourceDomainRoleId),
				new DomainRolePlayerInfo(typeof(ConstraintRoleProjectedFromCalculatedPathValue_Deprecated), "ConstraintRole", ConstraintRoleProjectedFromCalculatedPathValue_Deprecated.ConstraintRoleDomainRoleId),
				new DomainRolePlayerInfo(typeof(ConstraintRoleProjectedFromCalculatedPathValue_Deprecated), "Source", ConstraintRoleProjectedFromCalculatedPathValue_Deprecated.SourceDomainRoleId),
				new DomainRolePlayerInfo(typeof(ConstraintRoleProjectedFromPathConstant_Deprecated), "ConstraintRole", ConstraintRoleProjectedFromPathConstant_Deprecated.ConstraintRoleDomainRoleId),
				new DomainRolePlayerInfo(typeof(ConstraintRoleProjectedFromPathConstant_Deprecated), "Source", ConstraintRoleProjectedFromPathConstant_Deprecated.SourceDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasModelErrorDisplayFilter), "Model", ModelHasModelErrorDisplayFilter.ModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasModelErrorDisplayFilter), "ModelErrorDisplayFilter", ModelHasModelErrorDisplayFilter.ModelErrorDisplayFilterDomainRoleId),
				new DomainRolePlayerInfo(typeof(ElementGroupingSetRelatesToORMModel), "GroupingSet", ElementGroupingSetRelatesToORMModel.GroupingSetDomainRoleId),
				new DomainRolePlayerInfo(typeof(ElementGroupingSetRelatesToORMModel), "Model", ElementGroupingSetRelatesToORMModel.ModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(ElementGroupingSetContainsElementGrouping), "GroupingSet", ElementGroupingSetContainsElementGrouping.GroupingSetDomainRoleId),
				new DomainRolePlayerInfo(typeof(ElementGroupingSetContainsElementGrouping), "Grouping", ElementGroupingSetContainsElementGrouping.GroupingDomainRoleId),
				new DomainRolePlayerInfo(typeof(ElementGroupingIsOfElementGroupingType), "Grouping", ElementGroupingIsOfElementGroupingType.GroupingDomainRoleId),
				new DomainRolePlayerInfo(typeof(ElementGroupingIsOfElementGroupingType), "GroupingType", ElementGroupingIsOfElementGroupingType.GroupingTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(GroupingElementRelationship), "Grouping", GroupingElementRelationship.GroupingDomainRoleId),
				new DomainRolePlayerInfo(typeof(GroupingElementRelationship), "Element", GroupingElementRelationship.ElementDomainRoleId),
				new DomainRolePlayerInfo(typeof(GroupingElementInclusion), "Grouping", GroupingElementInclusion.GroupingDomainRoleId),
				new DomainRolePlayerInfo(typeof(GroupingElementInclusion), "IncludedElement", GroupingElementInclusion.IncludedElementDomainRoleId),
				new DomainRolePlayerInfo(typeof(GroupingElementExclusion), "Grouping", GroupingElementExclusion.GroupingDomainRoleId),
				new DomainRolePlayerInfo(typeof(GroupingElementExclusion), "ExcludedElement", GroupingElementExclusion.ExcludedElementDomainRoleId),
				new DomainRolePlayerInfo(typeof(ElementGroupingContainsElementGrouping), "ParentGrouping", ElementGroupingContainsElementGrouping.ParentGroupingDomainRoleId),
				new DomainRolePlayerInfo(typeof(ElementGroupingContainsElementGrouping), "ChildGrouping", ElementGroupingContainsElementGrouping.ChildGroupingDomainRoleId),
				new DomainRolePlayerInfo(typeof(ElementGroupingIncludesElementGrouping), "ParentGrouping", ElementGroupingIncludesElementGrouping.ParentGroupingDomainRoleId),
				new DomainRolePlayerInfo(typeof(ElementGroupingIncludesElementGrouping), "IncludedChildGrouping", ElementGroupingIncludesElementGrouping.IncludedChildGroupingDomainRoleId),
				new DomainRolePlayerInfo(typeof(ElementGroupingExcludesElementGrouping), "ParentGrouping", ElementGroupingExcludesElementGrouping.ParentGroupingDomainRoleId),
				new DomainRolePlayerInfo(typeof(ElementGroupingExcludesElementGrouping), "ExcludedChildGrouping", ElementGroupingExcludesElementGrouping.ExcludedChildGroupingDomainRoleId),
				new DomainRolePlayerInfo(typeof(ElementGroupingHasDuplicateNameError), "Grouping", ElementGroupingHasDuplicateNameError.GroupingDomainRoleId),
				new DomainRolePlayerInfo(typeof(ElementGroupingHasDuplicateNameError), "DuplicateNameError", ElementGroupingHasDuplicateNameError.DuplicateNameErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(ElementGroupingHasMembershipContradictionError), "Grouping", ElementGroupingHasMembershipContradictionError.GroupingDomainRoleId),
				new DomainRolePlayerInfo(typeof(ElementGroupingHasMembershipContradictionError), "MembershipContradictionError", ElementGroupingHasMembershipContradictionError.MembershipContradictionErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(GroupingMembershipContradictionErrorIsForElement), "GroupingMembershipContradictionErrorRelationship", GroupingMembershipContradictionErrorIsForElement.GroupingMembershipContradictionErrorRelationshipDomainRoleId),
				new DomainRolePlayerInfo(typeof(GroupingMembershipContradictionErrorIsForElement), "Element", GroupingMembershipContradictionErrorIsForElement.ElementDomainRoleId),
				new DomainRolePlayerInfo(typeof(RolePathOwnerHasPathComponent_Deprecated), "PathOwner", RolePathOwnerHasPathComponent_Deprecated.PathOwnerDomainRoleId),
				new DomainRolePlayerInfo(typeof(RolePathOwnerHasPathComponent_Deprecated), "RolePath", RolePathOwnerHasPathComponent_Deprecated.RolePathDomainRoleId),
				new DomainRolePlayerInfo(typeof(RolePathOwnerHasLeadRolePath), "PathOwner", RolePathOwnerHasLeadRolePath.PathOwnerDomainRoleId),
				new DomainRolePlayerInfo(typeof(RolePathOwnerHasLeadRolePath), "RolePath", RolePathOwnerHasLeadRolePath.RolePathDomainRoleId),
				new DomainRolePlayerInfo(typeof(RolePathOwnerOwnsLeadRolePath), "PathOwner", RolePathOwnerOwnsLeadRolePath.PathOwnerDomainRoleId),
				new DomainRolePlayerInfo(typeof(RolePathOwnerOwnsLeadRolePath), "RolePath", RolePathOwnerOwnsLeadRolePath.RolePathDomainRoleId),
				new DomainRolePlayerInfo(typeof(RolePathOwnerUsesSharedLeadRolePath), "PathOwner", RolePathOwnerUsesSharedLeadRolePath.PathOwnerDomainRoleId),
				new DomainRolePlayerInfo(typeof(RolePathOwnerUsesSharedLeadRolePath), "RolePath", RolePathOwnerUsesSharedLeadRolePath.RolePathDomainRoleId),
				new DomainRolePlayerInfo(typeof(RolePathOwnerHasSingleLeadRolePath), "PathOwner", RolePathOwnerHasSingleLeadRolePath.PathOwnerDomainRoleId),
				new DomainRolePlayerInfo(typeof(RolePathOwnerHasSingleLeadRolePath), "RolePath", RolePathOwnerHasSingleLeadRolePath.RolePathDomainRoleId),
				new DomainRolePlayerInfo(typeof(RolePathOwnerHasSingleOwnedLeadRolePath), "PathOwner", RolePathOwnerHasSingleOwnedLeadRolePath.PathOwnerDomainRoleId),
				new DomainRolePlayerInfo(typeof(RolePathOwnerHasSingleOwnedLeadRolePath), "RolePath", RolePathOwnerHasSingleOwnedLeadRolePath.RolePathDomainRoleId),
				new DomainRolePlayerInfo(typeof(RolePathOwnerHasSubquery), "PathOwner", RolePathOwnerHasSubquery.PathOwnerDomainRoleId),
				new DomainRolePlayerInfo(typeof(RolePathOwnerHasSubquery), "Subquery", RolePathOwnerHasSubquery.SubqueryDomainRoleId),
				new DomainRolePlayerInfo(typeof(RolePathOwnerOwnsSubquery), "PathOwner", RolePathOwnerOwnsSubquery.PathOwnerDomainRoleId),
				new DomainRolePlayerInfo(typeof(RolePathOwnerOwnsSubquery), "Subquery", RolePathOwnerOwnsSubquery.SubqueryDomainRoleId),
				new DomainRolePlayerInfo(typeof(RolePathOwnerUsesSharedSubquery), "PathOwner", RolePathOwnerUsesSharedSubquery.PathOwnerDomainRoleId),
				new DomainRolePlayerInfo(typeof(RolePathOwnerUsesSharedSubquery), "Subquery", RolePathOwnerUsesSharedSubquery.SubqueryDomainRoleId),
				new DomainRolePlayerInfo(typeof(RolePathObjectTypeRoot), "RolePath", RolePathObjectTypeRoot.RolePathDomainRoleId),
				new DomainRolePlayerInfo(typeof(RolePathObjectTypeRoot), "RootObjectType", RolePathObjectTypeRoot.RootObjectTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(PathedRole), "RolePath", PathedRole.RolePathDomainRoleId),
				new DomainRolePlayerInfo(typeof(PathedRole), "Role", PathedRole.RoleDomainRoleId),
				new DomainRolePlayerInfo(typeof(PathedRoleIsRemotelyCorrelatedWithPathedRole_Deprecated), "CorrelatedChild", PathedRoleIsRemotelyCorrelatedWithPathedRole_Deprecated.CorrelatedChildDomainRoleId),
				new DomainRolePlayerInfo(typeof(PathedRoleIsRemotelyCorrelatedWithPathedRole_Deprecated), "CorrelatingParent", PathedRoleIsRemotelyCorrelatedWithPathedRole_Deprecated.CorrelatingParentDomainRoleId),
				new DomainRolePlayerInfo(typeof(LeadRolePathHasObjectUnifier), "LeadRolePath", LeadRolePathHasObjectUnifier.LeadRolePathDomainRoleId),
				new DomainRolePlayerInfo(typeof(LeadRolePathHasObjectUnifier), "ObjectUnifier", LeadRolePathHasObjectUnifier.ObjectUnifierDomainRoleId),
				new DomainRolePlayerInfo(typeof(PathObjectUnifierUnifiesPathedRole), "ObjectUnifier", PathObjectUnifierUnifiesPathedRole.ObjectUnifierDomainRoleId),
				new DomainRolePlayerInfo(typeof(PathObjectUnifierUnifiesPathedRole), "PathedRole", PathObjectUnifierUnifiesPathedRole.PathedRoleDomainRoleId),
				new DomainRolePlayerInfo(typeof(PathObjectUnifierUnifiesRolePathRoot), "ObjectUnifier", PathObjectUnifierUnifiesRolePathRoot.ObjectUnifierDomainRoleId),
				new DomainRolePlayerInfo(typeof(PathObjectUnifierUnifiesRolePathRoot), "PathRoot", PathObjectUnifierUnifiesRolePathRoot.PathRootDomainRoleId),
				new DomainRolePlayerInfo(typeof(RoleSubPathIsContinuationOfRolePath), "ParentRolePath", RoleSubPathIsContinuationOfRolePath.ParentRolePathDomainRoleId),
				new DomainRolePlayerInfo(typeof(RoleSubPathIsContinuationOfRolePath), "SubPath", RoleSubPathIsContinuationOfRolePath.SubPathDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelDefinesFunction), "Model", ModelDefinesFunction.ModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelDefinesFunction), "Function", ModelDefinesFunction.FunctionDomainRoleId),
				new DomainRolePlayerInfo(typeof(FunctionOperatesOnParameter), "Function", FunctionOperatesOnParameter.FunctionDomainRoleId),
				new DomainRolePlayerInfo(typeof(FunctionOperatesOnParameter), "Parameter", FunctionOperatesOnParameter.ParameterDomainRoleId),
				new DomainRolePlayerInfo(typeof(RolePathOwnerCalculatesCalculatedPathValue_Deprecated), "PathOwner", RolePathOwnerCalculatesCalculatedPathValue_Deprecated.PathOwnerDomainRoleId),
				new DomainRolePlayerInfo(typeof(RolePathOwnerCalculatesCalculatedPathValue_Deprecated), "CalculatedValue", RolePathOwnerCalculatesCalculatedPathValue_Deprecated.CalculatedValueDomainRoleId),
				new DomainRolePlayerInfo(typeof(LeadRolePathCalculatesCalculatedPathValue), "LeadRolePath", LeadRolePathCalculatesCalculatedPathValue.LeadRolePathDomainRoleId),
				new DomainRolePlayerInfo(typeof(LeadRolePathCalculatesCalculatedPathValue), "CalculatedValue", LeadRolePathCalculatesCalculatedPathValue.CalculatedValueDomainRoleId),
				new DomainRolePlayerInfo(typeof(LeadRolePathSatisfiesCalculatedCondition), "LeadRolePath", LeadRolePathSatisfiesCalculatedCondition.LeadRolePathDomainRoleId),
				new DomainRolePlayerInfo(typeof(LeadRolePathSatisfiesCalculatedCondition), "CalculatedCondition", LeadRolePathSatisfiesCalculatedCondition.CalculatedConditionDomainRoleId),
				new DomainRolePlayerInfo(typeof(CalculatedPathValueHasInput), "CalculatedValue", CalculatedPathValueHasInput.CalculatedValueDomainRoleId),
				new DomainRolePlayerInfo(typeof(CalculatedPathValueHasInput), "Input", CalculatedPathValueHasInput.InputDomainRoleId),
				new DomainRolePlayerInfo(typeof(CalculatedPathValueScopedWithPathedRole_Deprecated), "CalculatedValue", CalculatedPathValueScopedWithPathedRole_Deprecated.CalculatedValueDomainRoleId),
				new DomainRolePlayerInfo(typeof(CalculatedPathValueScopedWithPathedRole_Deprecated), "Scope", CalculatedPathValueScopedWithPathedRole_Deprecated.ScopeDomainRoleId),
				new DomainRolePlayerInfo(typeof(CalculatedPathValueAggregationContextIncludesPathedRole), "CalculatedValue", CalculatedPathValueAggregationContextIncludesPathedRole.CalculatedValueDomainRoleId),
				new DomainRolePlayerInfo(typeof(CalculatedPathValueAggregationContextIncludesPathedRole), "PathedRole", CalculatedPathValueAggregationContextIncludesPathedRole.PathedRoleDomainRoleId),
				new DomainRolePlayerInfo(typeof(CalculatedPathValueAggregationContextIncludesRolePathRoot), "CalculatedValue", CalculatedPathValueAggregationContextIncludesRolePathRoot.CalculatedValueDomainRoleId),
				new DomainRolePlayerInfo(typeof(CalculatedPathValueAggregationContextIncludesRolePathRoot), "PathRoot", CalculatedPathValueAggregationContextIncludesRolePathRoot.PathRootDomainRoleId),
				new DomainRolePlayerInfo(typeof(CalculatedPathValueIsCalculatedWithFunction), "CalculatedValue", CalculatedPathValueIsCalculatedWithFunction.CalculatedValueDomainRoleId),
				new DomainRolePlayerInfo(typeof(CalculatedPathValueIsCalculatedWithFunction), "Function", CalculatedPathValueIsCalculatedWithFunction.FunctionDomainRoleId),
				new DomainRolePlayerInfo(typeof(CalculatedPathValueInputCorrespondsToFunctionParameter), "Input", CalculatedPathValueInputCorrespondsToFunctionParameter.InputDomainRoleId),
				new DomainRolePlayerInfo(typeof(CalculatedPathValueInputCorrespondsToFunctionParameter), "Parameter", CalculatedPathValueInputCorrespondsToFunctionParameter.ParameterDomainRoleId),
				new DomainRolePlayerInfo(typeof(CalculatedPathValueInputBindsToRolePathRoot), "Input", CalculatedPathValueInputBindsToRolePathRoot.InputDomainRoleId),
				new DomainRolePlayerInfo(typeof(CalculatedPathValueInputBindsToRolePathRoot), "Source", CalculatedPathValueInputBindsToRolePathRoot.SourceDomainRoleId),
				new DomainRolePlayerInfo(typeof(CalculatedPathValueInputBindsToPathedRole), "Input", CalculatedPathValueInputBindsToPathedRole.InputDomainRoleId),
				new DomainRolePlayerInfo(typeof(CalculatedPathValueInputBindsToPathedRole), "Source", CalculatedPathValueInputBindsToPathedRole.SourceDomainRoleId),
				new DomainRolePlayerInfo(typeof(CalculatedPathValueInputBindsToCalculatedPathValue), "Input", CalculatedPathValueInputBindsToCalculatedPathValue.InputDomainRoleId),
				new DomainRolePlayerInfo(typeof(CalculatedPathValueInputBindsToCalculatedPathValue), "Source", CalculatedPathValueInputBindsToCalculatedPathValue.SourceDomainRoleId),
				new DomainRolePlayerInfo(typeof(CalculatedPathValueInputBindsToPathConstant), "Input", CalculatedPathValueInputBindsToPathConstant.InputDomainRoleId),
				new DomainRolePlayerInfo(typeof(CalculatedPathValueInputBindsToPathConstant), "Source", CalculatedPathValueInputBindsToPathConstant.SourceDomainRoleId),
				new DomainRolePlayerInfo(typeof(QueryDefinesParameter), "Query", QueryDefinesParameter.QueryDomainRoleId),
				new DomainRolePlayerInfo(typeof(QueryDefinesParameter), "Parameter", QueryDefinesParameter.ParameterDomainRoleId),
				new DomainRolePlayerInfo(typeof(QueryParameterHasParameterType), "Parameter", QueryParameterHasParameterType.ParameterDomainRoleId),
				new DomainRolePlayerInfo(typeof(QueryParameterHasParameterType), "ParameterType", QueryParameterHasParameterType.ParameterTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(QueryParameterBinding), "QueryParameter", QueryParameterBinding.QueryParameterDomainRoleId),
				new DomainRolePlayerInfo(typeof(QueryParameterBinding), "RolePath", QueryParameterBinding.RolePathDomainRoleId),
				new DomainRolePlayerInfo(typeof(QueryParameterBoundToRolePathRoot), "ParameterBinding", QueryParameterBoundToRolePathRoot.ParameterBindingDomainRoleId),
				new DomainRolePlayerInfo(typeof(QueryParameterBoundToRolePathRoot), "Source", QueryParameterBoundToRolePathRoot.SourceDomainRoleId),
				new DomainRolePlayerInfo(typeof(QueryParameterBoundToPathedRole), "ParameterBinding", QueryParameterBoundToPathedRole.ParameterBindingDomainRoleId),
				new DomainRolePlayerInfo(typeof(QueryParameterBoundToPathedRole), "Source", QueryParameterBoundToPathedRole.SourceDomainRoleId),
				new DomainRolePlayerInfo(typeof(SubqueryParameterInputs), "RolePath", SubqueryParameterInputs.RolePathDomainRoleId),
				new DomainRolePlayerInfo(typeof(SubqueryParameterInputs), "PathedEntryRole", SubqueryParameterInputs.PathedEntryRoleDomainRoleId),
				new DomainRolePlayerInfo(typeof(SubqueryParameterInput), "Inputs", SubqueryParameterInput.InputsDomainRoleId),
				new DomainRolePlayerInfo(typeof(SubqueryParameterInput), "Parameter", SubqueryParameterInput.ParameterDomainRoleId),
				new DomainRolePlayerInfo(typeof(SubqueryParameterInputFromRolePathRoot), "ParameterInput", SubqueryParameterInputFromRolePathRoot.ParameterInputDomainRoleId),
				new DomainRolePlayerInfo(typeof(SubqueryParameterInputFromRolePathRoot), "Source", SubqueryParameterInputFromRolePathRoot.SourceDomainRoleId),
				new DomainRolePlayerInfo(typeof(SubqueryParameterInputFromPathedRole), "ParameterInput", SubqueryParameterInputFromPathedRole.ParameterInputDomainRoleId),
				new DomainRolePlayerInfo(typeof(SubqueryParameterInputFromPathedRole), "Source", SubqueryParameterInputFromPathedRole.SourceDomainRoleId),
				new DomainRolePlayerInfo(typeof(SubqueryParameterInputFromCalculatedPathValue), "ParameterInput", SubqueryParameterInputFromCalculatedPathValue.ParameterInputDomainRoleId),
				new DomainRolePlayerInfo(typeof(SubqueryParameterInputFromCalculatedPathValue), "Source", SubqueryParameterInputFromCalculatedPathValue.SourceDomainRoleId),
				new DomainRolePlayerInfo(typeof(SubqueryParameterInputFromPathConstant), "ParameterInput", SubqueryParameterInputFromPathConstant.ParameterInputDomainRoleId),
				new DomainRolePlayerInfo(typeof(SubqueryParameterInputFromPathConstant), "Source", SubqueryParameterInputFromPathConstant.SourceDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeHasDerivationRule), "FactType", FactTypeHasDerivationRule.FactTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeHasDerivationRule), "DerivationRule", FactTypeHasDerivationRule.DerivationRuleDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeDerivationRuleHasDerivationNote), "DerivationRule", FactTypeDerivationRuleHasDerivationNote.DerivationRuleDomainRoleId),
				new DomainRolePlayerInfo(typeof(FactTypeDerivationRuleHasDerivationNote), "DerivationNote", FactTypeDerivationRuleHasDerivationNote.DerivationNoteDomainRoleId),
				new DomainRolePlayerInfo(typeof(RoleSetDerivationProjection), "DerivationRule", RoleSetDerivationProjection.DerivationRuleDomainRoleId),
				new DomainRolePlayerInfo(typeof(RoleSetDerivationProjection), "RolePath", RoleSetDerivationProjection.RolePathDomainRoleId),
				new DomainRolePlayerInfo(typeof(DerivedRoleProjection), "DerivationProjection", DerivedRoleProjection.DerivationProjectionDomainRoleId),
				new DomainRolePlayerInfo(typeof(DerivedRoleProjection), "ProjectedRole", DerivedRoleProjection.ProjectedRoleDomainRoleId),
				new DomainRolePlayerInfo(typeof(DerivedRoleProjectedFromRolePathRoot), "RoleProjection", DerivedRoleProjectedFromRolePathRoot.RoleProjectionDomainRoleId),
				new DomainRolePlayerInfo(typeof(DerivedRoleProjectedFromRolePathRoot), "Source", DerivedRoleProjectedFromRolePathRoot.SourceDomainRoleId),
				new DomainRolePlayerInfo(typeof(DerivedRoleProjectedFromPathedRole), "RoleProjection", DerivedRoleProjectedFromPathedRole.RoleProjectionDomainRoleId),
				new DomainRolePlayerInfo(typeof(DerivedRoleProjectedFromPathedRole), "Source", DerivedRoleProjectedFromPathedRole.SourceDomainRoleId),
				new DomainRolePlayerInfo(typeof(DerivedRoleProjectedFromCalculatedPathValue), "RoleProjection", DerivedRoleProjectedFromCalculatedPathValue.RoleProjectionDomainRoleId),
				new DomainRolePlayerInfo(typeof(DerivedRoleProjectedFromCalculatedPathValue), "Source", DerivedRoleProjectedFromCalculatedPathValue.SourceDomainRoleId),
				new DomainRolePlayerInfo(typeof(DerivedRoleProjectedFromPathConstant), "RoleProjection", DerivedRoleProjectedFromPathConstant.RoleProjectionDomainRoleId),
				new DomainRolePlayerInfo(typeof(DerivedRoleProjectedFromPathConstant), "Source", DerivedRoleProjectedFromPathConstant.SourceDomainRoleId),
				new DomainRolePlayerInfo(typeof(RoleDerivesFromPathedRole_Deprecated), "Role", RoleDerivesFromPathedRole_Deprecated.RoleDomainRoleId),
				new DomainRolePlayerInfo(typeof(RoleDerivesFromPathedRole_Deprecated), "Source", RoleDerivesFromPathedRole_Deprecated.SourceDomainRoleId),
				new DomainRolePlayerInfo(typeof(RoleDerivesFromCalculatedPathValue_Deprecated), "Role", RoleDerivesFromCalculatedPathValue_Deprecated.RoleDomainRoleId),
				new DomainRolePlayerInfo(typeof(RoleDerivesFromCalculatedPathValue_Deprecated), "Source", RoleDerivesFromCalculatedPathValue_Deprecated.SourceDomainRoleId),
				new DomainRolePlayerInfo(typeof(RoleDerivesFromPathConstant_Deprecated), "Role", RoleDerivesFromPathConstant_Deprecated.RoleDomainRoleId),
				new DomainRolePlayerInfo(typeof(RoleDerivesFromPathConstant_Deprecated), "Source", RoleDerivesFromPathConstant_Deprecated.SourceDomainRoleId),
				new DomainRolePlayerInfo(typeof(SubtypeHasDerivationRule), "Subtype", SubtypeHasDerivationRule.SubtypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(SubtypeHasDerivationRule), "DerivationRule", SubtypeHasDerivationRule.DerivationRuleDomainRoleId),
				new DomainRolePlayerInfo(typeof(SubtypeDerivationRuleHasDerivationNote), "DerivationRule", SubtypeDerivationRuleHasDerivationNote.DerivationRuleDomainRoleId),
				new DomainRolePlayerInfo(typeof(SubtypeDerivationRuleHasDerivationNote), "DerivationNote", SubtypeDerivationRuleHasDerivationNote.DerivationNoteDomainRoleId),
				new DomainRolePlayerInfo(typeof(RolePathHasRootObjectTypeError), "RolePath", RolePathHasRootObjectTypeError.RolePathDomainRoleId),
				new DomainRolePlayerInfo(typeof(RolePathHasRootObjectTypeError), "RootObjectTypeRequiredError", RolePathHasRootObjectTypeError.RootObjectTypeRequiredErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(PathedRoleHasCompatibleJoinRolePlayerError), "PathedRole", PathedRoleHasCompatibleJoinRolePlayerError.PathedRoleDomainRoleId),
				new DomainRolePlayerInfo(typeof(PathedRoleHasCompatibleJoinRolePlayerError), "JoinCompatibilityError", PathedRoleHasCompatibleJoinRolePlayerError.JoinCompatibilityErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(PathObjectUnifierHasCompatibleObjectTypesError), "ObjectUnifier", PathObjectUnifierHasCompatibleObjectTypesError.ObjectUnifierDomainRoleId),
				new DomainRolePlayerInfo(typeof(PathObjectUnifierHasCompatibleObjectTypesError), "CompatibilityError", PathObjectUnifierHasCompatibleObjectTypesError.CompatibilityErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(PathedRoleHasSameFactTypeFollowsJoinError), "PathedRole", PathedRoleHasSameFactTypeFollowsJoinError.PathedRoleDomainRoleId),
				new DomainRolePlayerInfo(typeof(PathedRoleHasSameFactTypeFollowsJoinError), "SameFactTypeRoleFollowsJoinError", PathedRoleHasSameFactTypeFollowsJoinError.SameFactTypeRoleFollowsJoinErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(PathedRoleHasMandatoryOuterJoinError), "PathedRole", PathedRoleHasMandatoryOuterJoinError.PathedRoleDomainRoleId),
				new DomainRolePlayerInfo(typeof(PathedRoleHasMandatoryOuterJoinError), "MandatoryOuterJoinError", PathedRoleHasMandatoryOuterJoinError.MandatoryOuterJoinErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(CalculatedPathValueHasFunctionRequiredError), "CalculatedPathValue", CalculatedPathValueHasFunctionRequiredError.CalculatedPathValueDomainRoleId),
				new DomainRolePlayerInfo(typeof(CalculatedPathValueHasFunctionRequiredError), "FunctionRequiredError", CalculatedPathValueHasFunctionRequiredError.FunctionRequiredErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(CalculatedPathValueHasUnboundParameterError), "CalculatedPathValue", CalculatedPathValueHasUnboundParameterError.CalculatedPathValueDomainRoleId),
				new DomainRolePlayerInfo(typeof(CalculatedPathValueHasUnboundParameterError), "ParameterBindingError", CalculatedPathValueHasUnboundParameterError.ParameterBindingErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(CalculatedPathValueParameterBindingErrorTargetsFunctionParameter), "ParameterBindingError", CalculatedPathValueParameterBindingErrorTargetsFunctionParameter.ParameterBindingErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(CalculatedPathValueParameterBindingErrorTargetsFunctionParameter), "Parameter", CalculatedPathValueParameterBindingErrorTargetsFunctionParameter.ParameterDomainRoleId),
				new DomainRolePlayerInfo(typeof(CalculatedPathValueHasConsumptionRequiredError), "CalculatedPathValue", CalculatedPathValueHasConsumptionRequiredError.CalculatedPathValueDomainRoleId),
				new DomainRolePlayerInfo(typeof(CalculatedPathValueHasConsumptionRequiredError), "ConsumptionRequiredError", CalculatedPathValueHasConsumptionRequiredError.ConsumptionRequiredErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(CalculatedPathValueHasAggregationContextRequiredError), "CalculatedPathValue", CalculatedPathValueHasAggregationContextRequiredError.CalculatedPathValueDomainRoleId),
				new DomainRolePlayerInfo(typeof(CalculatedPathValueHasAggregationContextRequiredError), "AggregationContextRequiredError", CalculatedPathValueHasAggregationContextRequiredError.AggregationContextRequiredErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(RoleProjectedDerivationRuleHasProjectionRequiredError), "DerivationRule", RoleProjectedDerivationRuleHasProjectionRequiredError.DerivationRuleDomainRoleId),
				new DomainRolePlayerInfo(typeof(RoleProjectedDerivationRuleHasProjectionRequiredError), "ProjectionRequiredError", RoleProjectedDerivationRuleHasProjectionRequiredError.ProjectionRequiredErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(RoleSetDerivationProjectionHasPartialProjectionError), "DerivationProjection", RoleSetDerivationProjectionHasPartialProjectionError.DerivationProjectionDomainRoleId),
				new DomainRolePlayerInfo(typeof(RoleSetDerivationProjectionHasPartialProjectionError), "PartialProjectionError", RoleSetDerivationProjectionHasPartialProjectionError.PartialProjectionErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError), "Projection", DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError.ProjectionDomainRoleId),
				new DomainRolePlayerInfo(typeof(DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError), "IncompatibleProjectionError", DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError.IncompatibleProjectionErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(ConstraintRoleSequenceJoinPathHasProjectionRequiredError), "JoinPath", ConstraintRoleSequenceJoinPathHasProjectionRequiredError.JoinPathDomainRoleId),
				new DomainRolePlayerInfo(typeof(ConstraintRoleSequenceJoinPathHasProjectionRequiredError), "ProjectionRequiredError", ConstraintRoleSequenceJoinPathHasProjectionRequiredError.ProjectionRequiredErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(ConstraintRoleSequenceProjectionHasPartialProjectionError), "JoinPathProjection", ConstraintRoleSequenceProjectionHasPartialProjectionError.JoinPathProjectionDomainRoleId),
				new DomainRolePlayerInfo(typeof(ConstraintRoleSequenceProjectionHasPartialProjectionError), "PartialProjectionError", ConstraintRoleSequenceProjectionHasPartialProjectionError.PartialProjectionErrorDomainRoleId),
				new DomainRolePlayerInfo(typeof(ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError), "Projection", ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError.ProjectionDomainRoleId),
				new DomainRolePlayerInfo(typeof(ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError), "IncompatibleProjectionError", ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError.IncompatibleProjectionErrorDomainRoleId),
			};
		}
		#endregion
		#region Factory methods
		private static global::System.Collections.Generic.Dictionary<global::System.Type, int> createElementMap;
	
		/// <summary>
		/// Creates an element of specified type.
		/// </summary>
		/// <param name="partition">Partition where element is to be created.</param>
		/// <param name="elementType">Element type which belongs to this domain model.</param>
		/// <param name="propertyAssignments">New element property assignments.</param>
		/// <returns>Created element.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		public sealed override DslModeling::ModelElement CreateElement(DslModeling::Partition partition, global::System.Type elementType, DslModeling::PropertyAssignment[] propertyAssignments)
		{
			if (elementType == null) throw new global::System.ArgumentNullException("elementType");
	
			if (createElementMap == null)
			{
				createElementMap = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(199);
				createElementMap.Add(typeof(NameConsumer), 0);
				createElementMap.Add(typeof(RecognizedPhrase), 1);
				createElementMap.Add(typeof(NameGenerator), 2);
				createElementMap.Add(typeof(GenerationState), 3);
				createElementMap.Add(typeof(ModelErrorDisplayFilter), 4);
				createElementMap.Add(typeof(ElementGroupingSet), 5);
				createElementMap.Add(typeof(ElementGrouping), 6);
				createElementMap.Add(typeof(ElementGroupingDuplicateNameError), 7);
				createElementMap.Add(typeof(ElementGroupingMembershipContradictionError), 8);
				createElementMap.Add(typeof(ORMModel), 9);
				createElementMap.Add(typeof(ObjectType), 10);
				createElementMap.Add(typeof(FactType), 11);
				createElementMap.Add(typeof(SubtypeFact), 12);
				createElementMap.Add(typeof(RoleProxy), 13);
				createElementMap.Add(typeof(Role), 14);
				createElementMap.Add(typeof(ObjectifiedUnaryRole), 15);
				createElementMap.Add(typeof(NameAlias), 16);
				createElementMap.Add(typeof(EqualityConstraint), 17);
				createElementMap.Add(typeof(ExclusionConstraint), 18);
				createElementMap.Add(typeof(SubsetConstraint), 19);
				createElementMap.Add(typeof(SetComparisonConstraintRoleSequence), 20);
				createElementMap.Add(typeof(RingConstraint), 21);
				createElementMap.Add(typeof(FrequencyConstraint), 22);
				createElementMap.Add(typeof(UniquenessConstraint), 23);
				createElementMap.Add(typeof(MandatoryConstraint), 24);
				createElementMap.Add(typeof(ValueComparisonConstraint), 25);
				createElementMap.Add(typeof(LeadRolePath), 26);
				createElementMap.Add(typeof(RoleSubPath), 27);
				createElementMap.Add(typeof(PathObjectUnifier), 28);
				createElementMap.Add(typeof(CalculatedPathValue), 29);
				createElementMap.Add(typeof(PathConstant), 30);
				createElementMap.Add(typeof(Function), 31);
				createElementMap.Add(typeof(FunctionParameter), 32);
				createElementMap.Add(typeof(CalculatedPathValueInput), 33);
				createElementMap.Add(typeof(QueryParameter), 34);
				createElementMap.Add(typeof(Subquery), 35);
				createElementMap.Add(typeof(FactTypeDerivationRule), 36);
				createElementMap.Add(typeof(QueryDerivationRule), 37);
				createElementMap.Add(typeof(SubtypeDerivationRule), 38);
				createElementMap.Add(typeof(ConstraintRoleSequenceJoinPath), 39);
				createElementMap.Add(typeof(PathRequiresRootObjectTypeError), 40);
				createElementMap.Add(typeof(PathSameFactTypeRoleFollowsJoinError), 41);
				createElementMap.Add(typeof(JoinedPathRoleRequiresCompatibleRolePlayerError), 42);
				createElementMap.Add(typeof(PathObjectUnifierRequiresCompatibleObjectTypesError), 43);
				createElementMap.Add(typeof(PathOuterJoinRequiresOptionalRoleError), 44);
				createElementMap.Add(typeof(CalculatedPathValueRequiresFunctionError), 45);
				createElementMap.Add(typeof(CalculatedPathValueRequiresAggregationContextError), 46);
				createElementMap.Add(typeof(CalculatedPathValueParameterBindingError), 47);
				createElementMap.Add(typeof(CalculatedPathValueMustBeConsumedError), 48);
				createElementMap.Add(typeof(RoleProjectedDerivationRequiresProjectionError), 49);
				createElementMap.Add(typeof(PartialRoleSetDerivationProjectionError), 50);
				createElementMap.Add(typeof(DerivedRoleRequiresCompatibleProjectionError), 51);
				createElementMap.Add(typeof(ConstraintRoleSequenceJoinPathRequiresProjectionError), 52);
				createElementMap.Add(typeof(PartialConstraintRoleSequenceJoinPathProjectionError), 53);
				createElementMap.Add(typeof(ConstraintRoleRequiresCompatibleJoinPathProjectionError), 54);
				createElementMap.Add(typeof(TooFewRoleSequencesError), 55);
				createElementMap.Add(typeof(TooManyRoleSequencesError), 56);
				createElementMap.Add(typeof(ObjectTypeDuplicateNameError), 57);
				createElementMap.Add(typeof(RecognizedPhraseDuplicateNameError), 58);
				createElementMap.Add(typeof(FunctionDuplicateNameError), 59);
				createElementMap.Add(typeof(DuplicateReadingSignatureError), 60);
				createElementMap.Add(typeof(PopulationUniquenessError), 61);
				createElementMap.Add(typeof(ExclusionContradictsMandatoryError), 62);
				createElementMap.Add(typeof(ExclusionContradictsEqualityError), 63);
				createElementMap.Add(typeof(ExclusionContradictsSubsetError), 64);
				createElementMap.Add(typeof(NotWellModeledSubsetAndMandatoryError), 65);
				createElementMap.Add(typeof(PopulationMandatoryError), 66);
				createElementMap.Add(typeof(ObjectifiedInstanceRequiredError), 67);
				createElementMap.Add(typeof(ObjectifyingInstanceRequiredError), 68);
				createElementMap.Add(typeof(ConstraintDuplicateNameError), 69);
				createElementMap.Add(typeof(TooFewReadingRolesError), 70);
				createElementMap.Add(typeof(TooManyReadingRolesError), 71);
				createElementMap.Add(typeof(ExternalConstraintRoleSequenceArityMismatchError), 72);
				createElementMap.Add(typeof(FactTypeRequiresReadingError), 73);
				createElementMap.Add(typeof(FactTypeRequiresInternalUniquenessConstraintError), 74);
				createElementMap.Add(typeof(DataTypeNotSpecifiedError), 75);
				createElementMap.Add(typeof(NMinusOneError), 76);
				createElementMap.Add(typeof(CompatibleRolePlayerTypeError), 77);
				createElementMap.Add(typeof(SupersetRoleOfSubtypeSubsetConstraintNotSubtypeError), 78);
				createElementMap.Add(typeof(JoinPathRequiredError), 79);
				createElementMap.Add(typeof(RolePlayerRequiredError), 80);
				createElementMap.Add(typeof(EntityTypeRequiresReferenceSchemeError), 81);
				createElementMap.Add(typeof(FrequencyConstraintMinMaxError), 82);
				createElementMap.Add(typeof(FrequencyConstraintExactlyOneError), 83);
				createElementMap.Add(typeof(FrequencyConstraintNonRestrictiveRangeError), 84);
				createElementMap.Add(typeof(ReadingRequiresUserModificationError), 85);
				createElementMap.Add(typeof(ReferenceModeKind), 86);
				createElementMap.Add(typeof(IntrinsicReferenceMode), 87);
				createElementMap.Add(typeof(CustomReferenceMode), 88);
				createElementMap.Add(typeof(UnspecifiedDataType), 89);
				createElementMap.Add(typeof(FixedLengthTextDataType), 90);
				createElementMap.Add(typeof(VariableLengthTextDataType), 91);
				createElementMap.Add(typeof(LargeLengthTextDataType), 92);
				createElementMap.Add(typeof(SignedIntegerNumericDataType), 93);
				createElementMap.Add(typeof(SignedSmallIntegerNumericDataType), 94);
				createElementMap.Add(typeof(SignedLargeIntegerNumericDataType), 95);
				createElementMap.Add(typeof(UnsignedIntegerNumericDataType), 96);
				createElementMap.Add(typeof(UnsignedTinyIntegerNumericDataType), 97);
				createElementMap.Add(typeof(UnsignedSmallIntegerNumericDataType), 98);
				createElementMap.Add(typeof(UnsignedLargeIntegerNumericDataType), 99);
				createElementMap.Add(typeof(AutoCounterNumericDataType), 100);
				createElementMap.Add(typeof(FloatingPointNumericDataType), 101);
				createElementMap.Add(typeof(SinglePrecisionFloatingPointNumericDataType), 102);
				createElementMap.Add(typeof(DoublePrecisionFloatingPointNumericDataType), 103);
				createElementMap.Add(typeof(DecimalNumericDataType), 104);
				createElementMap.Add(typeof(MoneyNumericDataType), 105);
				createElementMap.Add(typeof(FixedLengthRawDataDataType), 106);
				createElementMap.Add(typeof(VariableLengthRawDataDataType), 107);
				createElementMap.Add(typeof(LargeLengthRawDataDataType), 108);
				createElementMap.Add(typeof(PictureRawDataDataType), 109);
				createElementMap.Add(typeof(OleObjectRawDataDataType), 110);
				createElementMap.Add(typeof(AutoTimestampTemporalDataType), 111);
				createElementMap.Add(typeof(TimeTemporalDataType), 112);
				createElementMap.Add(typeof(DateTemporalDataType), 113);
				createElementMap.Add(typeof(DateAndTimeTemporalDataType), 114);
				createElementMap.Add(typeof(TrueOrFalseLogicalDataType), 115);
				createElementMap.Add(typeof(YesOrNoLogicalDataType), 116);
				createElementMap.Add(typeof(RowIdOtherDataType), 117);
				createElementMap.Add(typeof(ObjectIdOtherDataType), 118);
				createElementMap.Add(typeof(Reading), 119);
				createElementMap.Add(typeof(ReadingOrder), 120);
				createElementMap.Add(typeof(ObjectTypeCardinalityConstraint), 121);
				createElementMap.Add(typeof(UnaryRoleCardinalityConstraint), 122);
				createElementMap.Add(typeof(CardinalityRange), 123);
				createElementMap.Add(typeof(ValueRange), 124);
				createElementMap.Add(typeof(ValueTypeValueConstraint), 125);
				createElementMap.Add(typeof(RoleValueConstraint), 126);
				createElementMap.Add(typeof(PathConditionRoleValueConstraint), 127);
				createElementMap.Add(typeof(PathConditionRootValueConstraint), 128);
				createElementMap.Add(typeof(MinValueMismatchError), 129);
				createElementMap.Add(typeof(MaxValueMismatchError), 130);
				createElementMap.Add(typeof(ImpliedInternalUniquenessConstraintError), 131);
				createElementMap.Add(typeof(FrequencyConstraintViolatedByUniquenessConstraintError), 132);
				createElementMap.Add(typeof(RingConstraintTypeNotSpecifiedError), 133);
				createElementMap.Add(typeof(ValueComparisonConstraintOperatorNotSpecifiedError), 134);
				createElementMap.Add(typeof(ValueComparisonRolesNotComparableError), 135);
				createElementMap.Add(typeof(SubtypeMetaRole), 136);
				createElementMap.Add(typeof(SupertypeMetaRole), 137);
				createElementMap.Add(typeof(Definition), 138);
				createElementMap.Add(typeof(Note), 139);
				createElementMap.Add(typeof(ModelNote), 140);
				createElementMap.Add(typeof(CompatibleSupertypesError), 141);
				createElementMap.Add(typeof(ImplicationError), 142);
				createElementMap.Add(typeof(EqualityOrSubsetImpliedByMandatoryError), 143);
				createElementMap.Add(typeof(PreferredIdentifierRequiresMandatoryError), 144);
				createElementMap.Add(typeof(ValueRangeOverlapError), 145);
				createElementMap.Add(typeof(ValueConstraintValueTypeDetachedError), 146);
				createElementMap.Add(typeof(CardinalityRangeOverlapError), 147);
				createElementMap.Add(typeof(DerivationNote), 148);
				createElementMap.Add(typeof(FactTypeDerivationExpression), 149);
				createElementMap.Add(typeof(SubtypeDerivationExpression), 150);
				createElementMap.Add(typeof(EntityTypeInstance), 151);
				createElementMap.Add(typeof(EntityTypeSubtypeInstance), 152);
				createElementMap.Add(typeof(ValueTypeInstance), 153);
				createElementMap.Add(typeof(FactTypeInstance), 154);
				createElementMap.Add(typeof(TooFewEntityTypeRoleInstancesError), 155);
				createElementMap.Add(typeof(TooFewFactTypeRoleInstancesError), 156);
				createElementMap.Add(typeof(CompatibleValueTypeInstanceValueError), 157);
			}
			int index;
			if (!createElementMap.TryGetValue(elementType, out index))
			{
				// construct exception error message		
				string exceptionError = string.Format(
								global::System.Globalization.CultureInfo.CurrentCulture,
								global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel.SingletonResourceManager.GetString("UnrecognizedElementType"),
								elementType.Name);
				throw new global::System.ArgumentException(exceptionError, "elementType");
			}
			switch (index)
			{
				case 0: return new NameConsumer(partition, propertyAssignments);
				case 1: return new RecognizedPhrase(partition, propertyAssignments);
				case 2: return new NameGenerator(partition, propertyAssignments);
				case 3: return new GenerationState(partition, propertyAssignments);
				case 4: return new ModelErrorDisplayFilter(partition, propertyAssignments);
				case 5: return new ElementGroupingSet(partition, propertyAssignments);
				case 6: return new ElementGrouping(partition, propertyAssignments);
				case 7: return new ElementGroupingDuplicateNameError(partition, propertyAssignments);
				case 8: return new ElementGroupingMembershipContradictionError(partition, propertyAssignments);
				case 9: return new ORMModel(partition, propertyAssignments);
				case 10: return new ObjectType(partition, propertyAssignments);
				case 11: return new FactType(partition, propertyAssignments);
				case 12: return new SubtypeFact(partition, propertyAssignments);
				case 13: return new RoleProxy(partition, propertyAssignments);
				case 14: return new Role(partition, propertyAssignments);
				case 15: return new ObjectifiedUnaryRole(partition, propertyAssignments);
				case 16: return new NameAlias(partition, propertyAssignments);
				case 17: return new EqualityConstraint(partition, propertyAssignments);
				case 18: return new ExclusionConstraint(partition, propertyAssignments);
				case 19: return new SubsetConstraint(partition, propertyAssignments);
				case 20: return new SetComparisonConstraintRoleSequence(partition, propertyAssignments);
				case 21: return new RingConstraint(partition, propertyAssignments);
				case 22: return new FrequencyConstraint(partition, propertyAssignments);
				case 23: return new UniquenessConstraint(partition, propertyAssignments);
				case 24: return new MandatoryConstraint(partition, propertyAssignments);
				case 25: return new ValueComparisonConstraint(partition, propertyAssignments);
				case 26: return new LeadRolePath(partition, propertyAssignments);
				case 27: return new RoleSubPath(partition, propertyAssignments);
				case 28: return new PathObjectUnifier(partition, propertyAssignments);
				case 29: return new CalculatedPathValue(partition, propertyAssignments);
				case 30: return new PathConstant(partition, propertyAssignments);
				case 31: return new Function(partition, propertyAssignments);
				case 32: return new FunctionParameter(partition, propertyAssignments);
				case 33: return new CalculatedPathValueInput(partition, propertyAssignments);
				case 34: return new QueryParameter(partition, propertyAssignments);
				case 35: return new Subquery(partition, propertyAssignments);
				case 36: return new FactTypeDerivationRule(partition, propertyAssignments);
				case 37: return new QueryDerivationRule(partition, propertyAssignments);
				case 38: return new SubtypeDerivationRule(partition, propertyAssignments);
				case 39: return new ConstraintRoleSequenceJoinPath(partition, propertyAssignments);
				case 40: return new PathRequiresRootObjectTypeError(partition, propertyAssignments);
				case 41: return new PathSameFactTypeRoleFollowsJoinError(partition, propertyAssignments);
				case 42: return new JoinedPathRoleRequiresCompatibleRolePlayerError(partition, propertyAssignments);
				case 43: return new PathObjectUnifierRequiresCompatibleObjectTypesError(partition, propertyAssignments);
				case 44: return new PathOuterJoinRequiresOptionalRoleError(partition, propertyAssignments);
				case 45: return new CalculatedPathValueRequiresFunctionError(partition, propertyAssignments);
				case 46: return new CalculatedPathValueRequiresAggregationContextError(partition, propertyAssignments);
				case 47: return new CalculatedPathValueParameterBindingError(partition, propertyAssignments);
				case 48: return new CalculatedPathValueMustBeConsumedError(partition, propertyAssignments);
				case 49: return new RoleProjectedDerivationRequiresProjectionError(partition, propertyAssignments);
				case 50: return new PartialRoleSetDerivationProjectionError(partition, propertyAssignments);
				case 51: return new DerivedRoleRequiresCompatibleProjectionError(partition, propertyAssignments);
				case 52: return new ConstraintRoleSequenceJoinPathRequiresProjectionError(partition, propertyAssignments);
				case 53: return new PartialConstraintRoleSequenceJoinPathProjectionError(partition, propertyAssignments);
				case 54: return new ConstraintRoleRequiresCompatibleJoinPathProjectionError(partition, propertyAssignments);
				case 55: return new TooFewRoleSequencesError(partition, propertyAssignments);
				case 56: return new TooManyRoleSequencesError(partition, propertyAssignments);
				case 57: return new ObjectTypeDuplicateNameError(partition, propertyAssignments);
				case 58: return new RecognizedPhraseDuplicateNameError(partition, propertyAssignments);
				case 59: return new FunctionDuplicateNameError(partition, propertyAssignments);
				case 60: return new DuplicateReadingSignatureError(partition, propertyAssignments);
				case 61: return new PopulationUniquenessError(partition, propertyAssignments);
				case 62: return new ExclusionContradictsMandatoryError(partition, propertyAssignments);
				case 63: return new ExclusionContradictsEqualityError(partition, propertyAssignments);
				case 64: return new ExclusionContradictsSubsetError(partition, propertyAssignments);
				case 65: return new NotWellModeledSubsetAndMandatoryError(partition, propertyAssignments);
				case 66: return new PopulationMandatoryError(partition, propertyAssignments);
				case 67: return new ObjectifiedInstanceRequiredError(partition, propertyAssignments);
				case 68: return new ObjectifyingInstanceRequiredError(partition, propertyAssignments);
				case 69: return new ConstraintDuplicateNameError(partition, propertyAssignments);
				case 70: return new TooFewReadingRolesError(partition, propertyAssignments);
				case 71: return new TooManyReadingRolesError(partition, propertyAssignments);
				case 72: return new ExternalConstraintRoleSequenceArityMismatchError(partition, propertyAssignments);
				case 73: return new FactTypeRequiresReadingError(partition, propertyAssignments);
				case 74: return new FactTypeRequiresInternalUniquenessConstraintError(partition, propertyAssignments);
				case 75: return new DataTypeNotSpecifiedError(partition, propertyAssignments);
				case 76: return new NMinusOneError(partition, propertyAssignments);
				case 77: return new CompatibleRolePlayerTypeError(partition, propertyAssignments);
				case 78: return new SupersetRoleOfSubtypeSubsetConstraintNotSubtypeError(partition, propertyAssignments);
				case 79: return new JoinPathRequiredError(partition, propertyAssignments);
				case 80: return new RolePlayerRequiredError(partition, propertyAssignments);
				case 81: return new EntityTypeRequiresReferenceSchemeError(partition, propertyAssignments);
				case 82: return new FrequencyConstraintMinMaxError(partition, propertyAssignments);
				case 83: return new FrequencyConstraintExactlyOneError(partition, propertyAssignments);
				case 84: return new FrequencyConstraintNonRestrictiveRangeError(partition, propertyAssignments);
				case 85: return new ReadingRequiresUserModificationError(partition, propertyAssignments);
				case 86: return new ReferenceModeKind(partition, propertyAssignments);
				case 87: return new IntrinsicReferenceMode(partition, propertyAssignments);
				case 88: return new CustomReferenceMode(partition, propertyAssignments);
				case 89: return new UnspecifiedDataType(partition, propertyAssignments);
				case 90: return new FixedLengthTextDataType(partition, propertyAssignments);
				case 91: return new VariableLengthTextDataType(partition, propertyAssignments);
				case 92: return new LargeLengthTextDataType(partition, propertyAssignments);
				case 93: return new SignedIntegerNumericDataType(partition, propertyAssignments);
				case 94: return new SignedSmallIntegerNumericDataType(partition, propertyAssignments);
				case 95: return new SignedLargeIntegerNumericDataType(partition, propertyAssignments);
				case 96: return new UnsignedIntegerNumericDataType(partition, propertyAssignments);
				case 97: return new UnsignedTinyIntegerNumericDataType(partition, propertyAssignments);
				case 98: return new UnsignedSmallIntegerNumericDataType(partition, propertyAssignments);
				case 99: return new UnsignedLargeIntegerNumericDataType(partition, propertyAssignments);
				case 100: return new AutoCounterNumericDataType(partition, propertyAssignments);
				case 101: return new FloatingPointNumericDataType(partition, propertyAssignments);
				case 102: return new SinglePrecisionFloatingPointNumericDataType(partition, propertyAssignments);
				case 103: return new DoublePrecisionFloatingPointNumericDataType(partition, propertyAssignments);
				case 104: return new DecimalNumericDataType(partition, propertyAssignments);
				case 105: return new MoneyNumericDataType(partition, propertyAssignments);
				case 106: return new FixedLengthRawDataDataType(partition, propertyAssignments);
				case 107: return new VariableLengthRawDataDataType(partition, propertyAssignments);
				case 108: return new LargeLengthRawDataDataType(partition, propertyAssignments);
				case 109: return new PictureRawDataDataType(partition, propertyAssignments);
				case 110: return new OleObjectRawDataDataType(partition, propertyAssignments);
				case 111: return new AutoTimestampTemporalDataType(partition, propertyAssignments);
				case 112: return new TimeTemporalDataType(partition, propertyAssignments);
				case 113: return new DateTemporalDataType(partition, propertyAssignments);
				case 114: return new DateAndTimeTemporalDataType(partition, propertyAssignments);
				case 115: return new TrueOrFalseLogicalDataType(partition, propertyAssignments);
				case 116: return new YesOrNoLogicalDataType(partition, propertyAssignments);
				case 117: return new RowIdOtherDataType(partition, propertyAssignments);
				case 118: return new ObjectIdOtherDataType(partition, propertyAssignments);
				case 119: return new Reading(partition, propertyAssignments);
				case 120: return new ReadingOrder(partition, propertyAssignments);
				case 121: return new ObjectTypeCardinalityConstraint(partition, propertyAssignments);
				case 122: return new UnaryRoleCardinalityConstraint(partition, propertyAssignments);
				case 123: return new CardinalityRange(partition, propertyAssignments);
				case 124: return new ValueRange(partition, propertyAssignments);
				case 125: return new ValueTypeValueConstraint(partition, propertyAssignments);
				case 126: return new RoleValueConstraint(partition, propertyAssignments);
				case 127: return new PathConditionRoleValueConstraint(partition, propertyAssignments);
				case 128: return new PathConditionRootValueConstraint(partition, propertyAssignments);
				case 129: return new MinValueMismatchError(partition, propertyAssignments);
				case 130: return new MaxValueMismatchError(partition, propertyAssignments);
				case 131: return new ImpliedInternalUniquenessConstraintError(partition, propertyAssignments);
				case 132: return new FrequencyConstraintViolatedByUniquenessConstraintError(partition, propertyAssignments);
				case 133: return new RingConstraintTypeNotSpecifiedError(partition, propertyAssignments);
				case 134: return new ValueComparisonConstraintOperatorNotSpecifiedError(partition, propertyAssignments);
				case 135: return new ValueComparisonRolesNotComparableError(partition, propertyAssignments);
				case 136: return new SubtypeMetaRole(partition, propertyAssignments);
				case 137: return new SupertypeMetaRole(partition, propertyAssignments);
				case 138: return new Definition(partition, propertyAssignments);
				case 139: return new Note(partition, propertyAssignments);
				case 140: return new ModelNote(partition, propertyAssignments);
				case 141: return new CompatibleSupertypesError(partition, propertyAssignments);
				case 142: return new ImplicationError(partition, propertyAssignments);
				case 143: return new EqualityOrSubsetImpliedByMandatoryError(partition, propertyAssignments);
				case 144: return new PreferredIdentifierRequiresMandatoryError(partition, propertyAssignments);
				case 145: return new ValueRangeOverlapError(partition, propertyAssignments);
				case 146: return new ValueConstraintValueTypeDetachedError(partition, propertyAssignments);
				case 147: return new CardinalityRangeOverlapError(partition, propertyAssignments);
				case 148: return new DerivationNote(partition, propertyAssignments);
				case 149: return new FactTypeDerivationExpression(partition, propertyAssignments);
				case 150: return new SubtypeDerivationExpression(partition, propertyAssignments);
				case 151: return new EntityTypeInstance(partition, propertyAssignments);
				case 152: return new EntityTypeSubtypeInstance(partition, propertyAssignments);
				case 153: return new ValueTypeInstance(partition, propertyAssignments);
				case 154: return new FactTypeInstance(partition, propertyAssignments);
				case 155: return new TooFewEntityTypeRoleInstancesError(partition, propertyAssignments);
				case 156: return new TooFewFactTypeRoleInstancesError(partition, propertyAssignments);
				case 157: return new CompatibleValueTypeInstanceValueError(partition, propertyAssignments);
				default: return null;
			}
		}
	
		private static global::System.Collections.Generic.Dictionary<global::System.Type, int> createElementLinkMap;
	
		/// <summary>
		/// Creates an element link of specified type.
		/// </summary>
		/// <param name="partition">Partition where element is to be created.</param>
		/// <param name="elementLinkType">Element link type which belongs to this domain model.</param>
		/// <param name="roleAssignments">List of relationship role assignments for the new link.</param>
		/// <param name="propertyAssignments">New element property assignments.</param>
		/// <returns>Created element link.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
		public sealed override DslModeling::ElementLink CreateElementLink(DslModeling::Partition partition, global::System.Type elementLinkType, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
		{
			if (elementLinkType == null) throw new global::System.ArgumentNullException("elementLinkType");
			if (roleAssignments == null) throw new global::System.ArgumentNullException("roleAssignments");
	
			if (createElementLinkMap == null)
			{
				createElementLinkMap = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(240);
				createElementLinkMap.Add(typeof(FactSetComparisonConstraint), 0);
				createElementLinkMap.Add(typeof(FactSetConstraint), 1);
				createElementLinkMap.Add(typeof(ORMModelElementHasExtensionElement), 2);
				createElementLinkMap.Add(typeof(ORMModelElementHasExtensionModelError), 3);
				createElementLinkMap.Add(typeof(ValueTypeHasDataType), 4);
				createElementLinkMap.Add(typeof(Objectification), 5);
				createElementLinkMap.Add(typeof(ObjectTypePlaysRole), 6);
				createElementLinkMap.Add(typeof(ModelHasObjectType), 7);
				createElementLinkMap.Add(typeof(ModelHasFactType), 8);
				createElementLinkMap.Add(typeof(ModelHasError), 9);
				createElementLinkMap.Add(typeof(ModelHasReferenceModeKind), 10);
				createElementLinkMap.Add(typeof(ModelHasReferenceMode), 11);
				createElementLinkMap.Add(typeof(ModelHasSetConstraint), 12);
				createElementLinkMap.Add(typeof(ObjectTypeImpliesMandatoryConstraint), 13);
				createElementLinkMap.Add(typeof(MandatoryConstraintIsInherentForObjectType), 14);
				createElementLinkMap.Add(typeof(ModelHasSetComparisonConstraint), 15);
				createElementLinkMap.Add(typeof(ModelHasDataType), 16);
				createElementLinkMap.Add(typeof(GenerationStateHasGenerationSetting), 17);
				createElementLinkMap.Add(typeof(NameGeneratorRefinesNameGenerator), 18);
				createElementLinkMap.Add(typeof(NameAliasRefinesInstance), 19);
				createElementLinkMap.Add(typeof(RecognizedPhraseHasAbbreviation), 20);
				createElementLinkMap.Add(typeof(ObjectTypeHasAbbreviation), 21);
				createElementLinkMap.Add(typeof(ModelContainsRecognizedPhrase), 22);
				createElementLinkMap.Add(typeof(RecognizedPhraseHasDuplicateNameError), 23);
				createElementLinkMap.Add(typeof(FunctionHasDuplicateNameError), 24);
				createElementLinkMap.Add(typeof(ReadingHasDuplicateSignatureError), 25);
				createElementLinkMap.Add(typeof(ExternalRoleConstraint), 26);
				createElementLinkMap.Add(typeof(ExclusiveOrConstraintCoupler), 27);
				createElementLinkMap.Add(typeof(SetComparisonConstraintHasRoleSequence), 28);
				createElementLinkMap.Add(typeof(ConstraintRoleSequenceHasRole), 29);
				createElementLinkMap.Add(typeof(SetComparisonConstraintHasTooFewRoleSequencesError), 30);
				createElementLinkMap.Add(typeof(SetComparisonConstraintHasTooManyRoleSequencesError), 31);
				createElementLinkMap.Add(typeof(ObjectTypeHasDuplicateNameError), 32);
				createElementLinkMap.Add(typeof(EntityTypeRoleInstanceHasPopulationUniquenessError), 33);
				createElementLinkMap.Add(typeof(FactTypeRoleInstanceHasPopulationUniquenessError), 34);
				createElementLinkMap.Add(typeof(SetComparisonConstraintHasExclusionContradictsEqualityError), 35);
				createElementLinkMap.Add(typeof(SetComparisonConstraintHasExclusionContradictsSubsetError), 36);
				createElementLinkMap.Add(typeof(ExclusionConstraintHasExclusionContradictsMandatoryError), 37);
				createElementLinkMap.Add(typeof(MandatoryConstraintHasExclusionContradictsMandatoryError), 38);
				createElementLinkMap.Add(typeof(SubsetConstraintHasNotWellModeledSubsetAndMandatoryError), 39);
				createElementLinkMap.Add(typeof(MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError), 40);
				createElementLinkMap.Add(typeof(MandatoryConstraintHasPopulationMandatoryError), 41);
				createElementLinkMap.Add(typeof(ObjectTypeInstanceHasPopulationMandatoryError), 42);
				createElementLinkMap.Add(typeof(ReadingOrderHasReading), 43);
				createElementLinkMap.Add(typeof(FactTypeHasReadingOrder), 44);
				createElementLinkMap.Add(typeof(ReferenceModeHasReferenceModeKind), 45);
				createElementLinkMap.Add(typeof(SetConstraintHasDuplicateNameError), 46);
				createElementLinkMap.Add(typeof(SetComparisonConstraintHasDuplicateNameError), 47);
				createElementLinkMap.Add(typeof(EntityTypeHasPreferredIdentifier), 48);
				createElementLinkMap.Add(typeof(ReadingHasTooManyRolesError), 49);
				createElementLinkMap.Add(typeof(ReadingHasTooFewRolesError), 50);
				createElementLinkMap.Add(typeof(ReadingHasReadingRequiresUserModificationError), 51);
				createElementLinkMap.Add(typeof(SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError), 52);
				createElementLinkMap.Add(typeof(ElementAssociatedWithModelError), 53);
				createElementLinkMap.Add(typeof(FactTypeHasFactTypeRequiresReadingError), 54);
				createElementLinkMap.Add(typeof(FactTypeHasFactTypeRequiresInternalUniquenessConstraintError), 55);
				createElementLinkMap.Add(typeof(ValueTypeHasValueConstraint), 56);
				createElementLinkMap.Add(typeof(ObjectTypeHasCardinalityConstraint), 57);
				createElementLinkMap.Add(typeof(UnaryRoleHasCardinalityConstraint), 58);
				createElementLinkMap.Add(typeof(RoleHasValueConstraint), 59);
				createElementLinkMap.Add(typeof(PathedRoleHasValueConstraint), 60);
				createElementLinkMap.Add(typeof(RolePathRootHasValueConstraint), 61);
				createElementLinkMap.Add(typeof(ValueConstraintHasValueRange), 62);
				createElementLinkMap.Add(typeof(CardinalityConstraintHasRange), 63);
				createElementLinkMap.Add(typeof(CardinalityConstraintHasRangeOverlapError), 64);
				createElementLinkMap.Add(typeof(ValueTypeHasUnspecifiedDataTypeError), 65);
				createElementLinkMap.Add(typeof(SetComparisonConstraintHasCompatibleRolePlayerTypeError), 66);
				createElementLinkMap.Add(typeof(SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError), 67);
				createElementLinkMap.Add(typeof(SetConstraintHasCompatibleRolePlayerTypeError), 68);
				createElementLinkMap.Add(typeof(ConstraintRoleSequenceHasJoinPathRequiredError), 69);
				createElementLinkMap.Add(typeof(UniquenessConstraintHasNMinusOneError), 70);
				createElementLinkMap.Add(typeof(RoleHasRolePlayerRequiredError), 71);
				createElementLinkMap.Add(typeof(ObjectTypeHasEntityTypeRequiresReferenceSchemeError), 72);
				createElementLinkMap.Add(typeof(FrequencyConstraintHasFrequencyConstraintMinMaxError), 73);
				createElementLinkMap.Add(typeof(FrequencyConstraintHasFrequencyConstraintExactlyOneError), 74);
				createElementLinkMap.Add(typeof(FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError), 75);
				createElementLinkMap.Add(typeof(ObjectificationImpliesFactType), 76);
				createElementLinkMap.Add(typeof(ValueRangeHasMaxValueMismatchError), 77);
				createElementLinkMap.Add(typeof(ValueRangeHasMinValueMismatchError), 78);
				createElementLinkMap.Add(typeof(FactTypeHasImpliedInternalUniquenessConstraintError), 79);
				createElementLinkMap.Add(typeof(SetConstraintHasTooFewRoleSequencesError), 80);
				createElementLinkMap.Add(typeof(SetConstraintHasTooManyRoleSequencesError), 81);
				createElementLinkMap.Add(typeof(FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError), 82);
				createElementLinkMap.Add(typeof(RingConstraintHasRingConstraintTypeNotSpecifiedError), 83);
				createElementLinkMap.Add(typeof(ValueComparisonConstraintHasOperatorNotSpecifiedError), 84);
				createElementLinkMap.Add(typeof(ValueComparisonConstraintHasRolesNotComparableError), 85);
				createElementLinkMap.Add(typeof(ValueConstraintHasDuplicateNameError), 86);
				createElementLinkMap.Add(typeof(CardinalityConstraintHasDuplicateNameError), 87);
				createElementLinkMap.Add(typeof(ModelHasDefinition), 88);
				createElementLinkMap.Add(typeof(ObjectTypeHasDefinition), 89);
				createElementLinkMap.Add(typeof(FactTypeHasDefinition), 90);
				createElementLinkMap.Add(typeof(SetConstraintHasDefinition), 91);
				createElementLinkMap.Add(typeof(SetComparisonConstraintHasDefinition), 92);
				createElementLinkMap.Add(typeof(ValueConstraintHasDefinition), 93);
				createElementLinkMap.Add(typeof(CardinalityConstraintHasDefinition), 94);
				createElementLinkMap.Add(typeof(ElementGroupingHasDefinition), 95);
				createElementLinkMap.Add(typeof(FactTypeHasNote), 96);
				createElementLinkMap.Add(typeof(ObjectTypeHasNote), 97);
				createElementLinkMap.Add(typeof(SetConstraintHasNote), 98);
				createElementLinkMap.Add(typeof(SetComparisonConstraintHasNote), 99);
				createElementLinkMap.Add(typeof(ValueConstraintHasNote), 100);
				createElementLinkMap.Add(typeof(CardinalityConstraintHasNote), 101);
				createElementLinkMap.Add(typeof(ElementGroupingHasNote), 102);
				createElementLinkMap.Add(typeof(ModelHasPrimaryNote), 103);
				createElementLinkMap.Add(typeof(LeadRolePathHasNote), 104);
				createElementLinkMap.Add(typeof(ModelHasModelNote), 105);
				createElementLinkMap.Add(typeof(ModelNoteReferencesFactType), 106);
				createElementLinkMap.Add(typeof(ModelNoteReferencesObjectType), 107);
				createElementLinkMap.Add(typeof(ModelNoteReferencesSetConstraint), 108);
				createElementLinkMap.Add(typeof(ModelNoteReferencesSetComparisonConstraint), 109);
				createElementLinkMap.Add(typeof(ObjectTypeHasCompatibleSupertypesError), 110);
				createElementLinkMap.Add(typeof(SetConstraintHasImplicationError), 111);
				createElementLinkMap.Add(typeof(SetComparisonConstraintHasImplicationError), 112);
				createElementLinkMap.Add(typeof(SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError), 113);
				createElementLinkMap.Add(typeof(ObjectTypeHasPreferredIdentifierRequiresMandatoryError), 114);
				createElementLinkMap.Add(typeof(ValueConstraintHasValueRangeOverlapError), 115);
				createElementLinkMap.Add(typeof(ValueConstraintHasValueTypeDetachedError), 116);
				createElementLinkMap.Add(typeof(FactTypeHasRole), 117);
				createElementLinkMap.Add(typeof(ReadingOrderHasRole), 118);
				createElementLinkMap.Add(typeof(RoleProxyHasRole), 119);
				createElementLinkMap.Add(typeof(ObjectifiedUnaryRoleHasRole), 120);
				createElementLinkMap.Add(typeof(FactTypeHasDerivationExpression), 121);
				createElementLinkMap.Add(typeof(SubtypeHasDerivationExpression), 122);
				createElementLinkMap.Add(typeof(ObjectTypeHasObjectTypeInstance), 123);
				createElementLinkMap.Add(typeof(EntityTypeHasEntityTypeInstance), 124);
				createElementLinkMap.Add(typeof(EntityTypeSubtypeHasEntityTypeSubtypeInstance), 125);
				createElementLinkMap.Add(typeof(ValueTypeHasValueTypeInstance), 126);
				createElementLinkMap.Add(typeof(EntityTypeRoleInstance), 127);
				createElementLinkMap.Add(typeof(FactTypeRoleInstance), 128);
				createElementLinkMap.Add(typeof(EntityTypeInstanceHasRoleInstance), 129);
				createElementLinkMap.Add(typeof(EntityTypeSubtypeInstanceHasSupertypeInstance), 130);
				createElementLinkMap.Add(typeof(FactTypeHasFactTypeInstance), 131);
				createElementLinkMap.Add(typeof(FactTypeInstanceHasRoleInstance), 132);
				createElementLinkMap.Add(typeof(ObjectificationInstance), 133);
				createElementLinkMap.Add(typeof(ObjectifiedInstanceHasObjectifyingInstanceRequiredError), 134);
				createElementLinkMap.Add(typeof(ObjectifyingInstanceHasObjectifiedInstanceRequiredError), 135);
				createElementLinkMap.Add(typeof(EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError), 136);
				createElementLinkMap.Add(typeof(FactTypeInstanceHasTooFewFactTypeRoleInstancesError), 137);
				createElementLinkMap.Add(typeof(ValueTypeInstanceHasCompatibleValueTypeInstanceValueError), 138);
				createElementLinkMap.Add(typeof(ConstraintRoleSequenceHasJoinPath), 139);
				createElementLinkMap.Add(typeof(ConstraintRoleSequenceJoinPathProjection), 140);
				createElementLinkMap.Add(typeof(ConstraintRoleProjection), 141);
				createElementLinkMap.Add(typeof(ConstraintRoleProjectedFromRolePathRoot), 142);
				createElementLinkMap.Add(typeof(ConstraintRoleProjectedFromPathedRole), 143);
				createElementLinkMap.Add(typeof(ConstraintRoleProjectedFromCalculatedPathValue), 144);
				createElementLinkMap.Add(typeof(ConstraintRoleProjectedFromPathConstant), 145);
				createElementLinkMap.Add(typeof(ConstraintRoleProjectedFromPathedRole_Deprecated), 146);
				createElementLinkMap.Add(typeof(ConstraintRoleProjectedFromCalculatedPathValue_Deprecated), 147);
				createElementLinkMap.Add(typeof(ConstraintRoleProjectedFromPathConstant_Deprecated), 148);
				createElementLinkMap.Add(typeof(ModelHasModelErrorDisplayFilter), 149);
				createElementLinkMap.Add(typeof(ElementGroupingSetRelatesToORMModel), 150);
				createElementLinkMap.Add(typeof(ElementGroupingSetContainsElementGrouping), 151);
				createElementLinkMap.Add(typeof(ElementGroupingIsOfElementGroupingType), 152);
				createElementLinkMap.Add(typeof(GroupingElementInclusion), 153);
				createElementLinkMap.Add(typeof(GroupingElementExclusion), 154);
				createElementLinkMap.Add(typeof(ElementGroupingIncludesElementGrouping), 155);
				createElementLinkMap.Add(typeof(ElementGroupingExcludesElementGrouping), 156);
				createElementLinkMap.Add(typeof(ElementGroupingHasDuplicateNameError), 157);
				createElementLinkMap.Add(typeof(ElementGroupingHasMembershipContradictionError), 158);
				createElementLinkMap.Add(typeof(GroupingMembershipContradictionErrorIsForElement), 159);
				createElementLinkMap.Add(typeof(RolePathOwnerHasPathComponent_Deprecated), 160);
				createElementLinkMap.Add(typeof(RolePathOwnerOwnsLeadRolePath), 161);
				createElementLinkMap.Add(typeof(RolePathOwnerUsesSharedLeadRolePath), 162);
				createElementLinkMap.Add(typeof(RolePathOwnerHasSingleLeadRolePath), 163);
				createElementLinkMap.Add(typeof(RolePathOwnerHasSingleOwnedLeadRolePath), 164);
				createElementLinkMap.Add(typeof(RolePathOwnerOwnsSubquery), 165);
				createElementLinkMap.Add(typeof(RolePathOwnerUsesSharedSubquery), 166);
				createElementLinkMap.Add(typeof(RolePathObjectTypeRoot), 167);
				createElementLinkMap.Add(typeof(PathedRole), 168);
				createElementLinkMap.Add(typeof(PathedRoleIsRemotelyCorrelatedWithPathedRole_Deprecated), 169);
				createElementLinkMap.Add(typeof(LeadRolePathHasObjectUnifier), 170);
				createElementLinkMap.Add(typeof(PathObjectUnifierUnifiesPathedRole), 171);
				createElementLinkMap.Add(typeof(PathObjectUnifierUnifiesRolePathRoot), 172);
				createElementLinkMap.Add(typeof(RoleSubPathIsContinuationOfRolePath), 173);
				createElementLinkMap.Add(typeof(ModelDefinesFunction), 174);
				createElementLinkMap.Add(typeof(FunctionOperatesOnParameter), 175);
				createElementLinkMap.Add(typeof(RolePathOwnerCalculatesCalculatedPathValue_Deprecated), 176);
				createElementLinkMap.Add(typeof(LeadRolePathCalculatesCalculatedPathValue), 177);
				createElementLinkMap.Add(typeof(LeadRolePathSatisfiesCalculatedCondition), 178);
				createElementLinkMap.Add(typeof(CalculatedPathValueHasInput), 179);
				createElementLinkMap.Add(typeof(CalculatedPathValueScopedWithPathedRole_Deprecated), 180);
				createElementLinkMap.Add(typeof(CalculatedPathValueAggregationContextIncludesPathedRole), 181);
				createElementLinkMap.Add(typeof(CalculatedPathValueAggregationContextIncludesRolePathRoot), 182);
				createElementLinkMap.Add(typeof(CalculatedPathValueIsCalculatedWithFunction), 183);
				createElementLinkMap.Add(typeof(CalculatedPathValueInputCorrespondsToFunctionParameter), 184);
				createElementLinkMap.Add(typeof(CalculatedPathValueInputBindsToRolePathRoot), 185);
				createElementLinkMap.Add(typeof(CalculatedPathValueInputBindsToPathedRole), 186);
				createElementLinkMap.Add(typeof(CalculatedPathValueInputBindsToCalculatedPathValue), 187);
				createElementLinkMap.Add(typeof(CalculatedPathValueInputBindsToPathConstant), 188);
				createElementLinkMap.Add(typeof(QueryDefinesParameter), 189);
				createElementLinkMap.Add(typeof(QueryParameterHasParameterType), 190);
				createElementLinkMap.Add(typeof(QueryParameterBinding), 191);
				createElementLinkMap.Add(typeof(QueryParameterBoundToRolePathRoot), 192);
				createElementLinkMap.Add(typeof(QueryParameterBoundToPathedRole), 193);
				createElementLinkMap.Add(typeof(SubqueryParameterInputs), 194);
				createElementLinkMap.Add(typeof(SubqueryParameterInput), 195);
				createElementLinkMap.Add(typeof(SubqueryParameterInputFromRolePathRoot), 196);
				createElementLinkMap.Add(typeof(SubqueryParameterInputFromPathedRole), 197);
				createElementLinkMap.Add(typeof(SubqueryParameterInputFromCalculatedPathValue), 198);
				createElementLinkMap.Add(typeof(SubqueryParameterInputFromPathConstant), 199);
				createElementLinkMap.Add(typeof(FactTypeHasDerivationRule), 200);
				createElementLinkMap.Add(typeof(FactTypeDerivationRuleHasDerivationNote), 201);
				createElementLinkMap.Add(typeof(RoleSetDerivationProjection), 202);
				createElementLinkMap.Add(typeof(DerivedRoleProjection), 203);
				createElementLinkMap.Add(typeof(DerivedRoleProjectedFromRolePathRoot), 204);
				createElementLinkMap.Add(typeof(DerivedRoleProjectedFromPathedRole), 205);
				createElementLinkMap.Add(typeof(DerivedRoleProjectedFromCalculatedPathValue), 206);
				createElementLinkMap.Add(typeof(DerivedRoleProjectedFromPathConstant), 207);
				createElementLinkMap.Add(typeof(RoleDerivesFromPathedRole_Deprecated), 208);
				createElementLinkMap.Add(typeof(RoleDerivesFromCalculatedPathValue_Deprecated), 209);
				createElementLinkMap.Add(typeof(RoleDerivesFromPathConstant_Deprecated), 210);
				createElementLinkMap.Add(typeof(SubtypeHasDerivationRule), 211);
				createElementLinkMap.Add(typeof(SubtypeDerivationRuleHasDerivationNote), 212);
				createElementLinkMap.Add(typeof(RolePathHasRootObjectTypeError), 213);
				createElementLinkMap.Add(typeof(PathedRoleHasCompatibleJoinRolePlayerError), 214);
				createElementLinkMap.Add(typeof(PathObjectUnifierHasCompatibleObjectTypesError), 215);
				createElementLinkMap.Add(typeof(PathedRoleHasSameFactTypeFollowsJoinError), 216);
				createElementLinkMap.Add(typeof(PathedRoleHasMandatoryOuterJoinError), 217);
				createElementLinkMap.Add(typeof(CalculatedPathValueHasFunctionRequiredError), 218);
				createElementLinkMap.Add(typeof(CalculatedPathValueHasUnboundParameterError), 219);
				createElementLinkMap.Add(typeof(CalculatedPathValueParameterBindingErrorTargetsFunctionParameter), 220);
				createElementLinkMap.Add(typeof(CalculatedPathValueHasConsumptionRequiredError), 221);
				createElementLinkMap.Add(typeof(CalculatedPathValueHasAggregationContextRequiredError), 222);
				createElementLinkMap.Add(typeof(RoleProjectedDerivationRuleHasProjectionRequiredError), 223);
				createElementLinkMap.Add(typeof(RoleSetDerivationProjectionHasPartialProjectionError), 224);
				createElementLinkMap.Add(typeof(DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError), 225);
				createElementLinkMap.Add(typeof(ConstraintRoleSequenceJoinPathHasProjectionRequiredError), 226);
				createElementLinkMap.Add(typeof(ConstraintRoleSequenceProjectionHasPartialProjectionError), 227);
				createElementLinkMap.Add(typeof(ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError), 228);
			}
			int index;
			if (!createElementLinkMap.TryGetValue(elementLinkType, out index))
			{
				// construct exception error message
				string exceptionError = string.Format(
								global::System.Globalization.CultureInfo.CurrentCulture,
								global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel.SingletonResourceManager.GetString("UnrecognizedElementLinkType"),
								elementLinkType.Name);
				throw new global::System.ArgumentException(exceptionError, "elementLinkType");
			
			}
			switch (index)
			{
				case 0: return new FactSetComparisonConstraint(partition, roleAssignments, propertyAssignments);
				case 1: return new FactSetConstraint(partition, roleAssignments, propertyAssignments);
				case 2: return new ORMModelElementHasExtensionElement(partition, roleAssignments, propertyAssignments);
				case 3: return new ORMModelElementHasExtensionModelError(partition, roleAssignments, propertyAssignments);
				case 4: return new ValueTypeHasDataType(partition, roleAssignments, propertyAssignments);
				case 5: return new Objectification(partition, roleAssignments, propertyAssignments);
				case 6: return new ObjectTypePlaysRole(partition, roleAssignments, propertyAssignments);
				case 7: return new ModelHasObjectType(partition, roleAssignments, propertyAssignments);
				case 8: return new ModelHasFactType(partition, roleAssignments, propertyAssignments);
				case 9: return new ModelHasError(partition, roleAssignments, propertyAssignments);
				case 10: return new ModelHasReferenceModeKind(partition, roleAssignments, propertyAssignments);
				case 11: return new ModelHasReferenceMode(partition, roleAssignments, propertyAssignments);
				case 12: return new ModelHasSetConstraint(partition, roleAssignments, propertyAssignments);
				case 13: return new ObjectTypeImpliesMandatoryConstraint(partition, roleAssignments, propertyAssignments);
				case 14: return new MandatoryConstraintIsInherentForObjectType(partition, roleAssignments, propertyAssignments);
				case 15: return new ModelHasSetComparisonConstraint(partition, roleAssignments, propertyAssignments);
				case 16: return new ModelHasDataType(partition, roleAssignments, propertyAssignments);
				case 17: return new GenerationStateHasGenerationSetting(partition, roleAssignments, propertyAssignments);
				case 18: return new NameGeneratorRefinesNameGenerator(partition, roleAssignments, propertyAssignments);
				case 19: return new NameAliasRefinesInstance(partition, roleAssignments, propertyAssignments);
				case 20: return new RecognizedPhraseHasAbbreviation(partition, roleAssignments, propertyAssignments);
				case 21: return new ObjectTypeHasAbbreviation(partition, roleAssignments, propertyAssignments);
				case 22: return new ModelContainsRecognizedPhrase(partition, roleAssignments, propertyAssignments);
				case 23: return new RecognizedPhraseHasDuplicateNameError(partition, roleAssignments, propertyAssignments);
				case 24: return new FunctionHasDuplicateNameError(partition, roleAssignments, propertyAssignments);
				case 25: return new ReadingHasDuplicateSignatureError(partition, roleAssignments, propertyAssignments);
				case 26: return new ExternalRoleConstraint(partition, roleAssignments, propertyAssignments);
				case 27: return new ExclusiveOrConstraintCoupler(partition, roleAssignments, propertyAssignments);
				case 28: return new SetComparisonConstraintHasRoleSequence(partition, roleAssignments, propertyAssignments);
				case 29: return new ConstraintRoleSequenceHasRole(partition, roleAssignments, propertyAssignments);
				case 30: return new SetComparisonConstraintHasTooFewRoleSequencesError(partition, roleAssignments, propertyAssignments);
				case 31: return new SetComparisonConstraintHasTooManyRoleSequencesError(partition, roleAssignments, propertyAssignments);
				case 32: return new ObjectTypeHasDuplicateNameError(partition, roleAssignments, propertyAssignments);
				case 33: return new EntityTypeRoleInstanceHasPopulationUniquenessError(partition, roleAssignments, propertyAssignments);
				case 34: return new FactTypeRoleInstanceHasPopulationUniquenessError(partition, roleAssignments, propertyAssignments);
				case 35: return new SetComparisonConstraintHasExclusionContradictsEqualityError(partition, roleAssignments, propertyAssignments);
				case 36: return new SetComparisonConstraintHasExclusionContradictsSubsetError(partition, roleAssignments, propertyAssignments);
				case 37: return new ExclusionConstraintHasExclusionContradictsMandatoryError(partition, roleAssignments, propertyAssignments);
				case 38: return new MandatoryConstraintHasExclusionContradictsMandatoryError(partition, roleAssignments, propertyAssignments);
				case 39: return new SubsetConstraintHasNotWellModeledSubsetAndMandatoryError(partition, roleAssignments, propertyAssignments);
				case 40: return new MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError(partition, roleAssignments, propertyAssignments);
				case 41: return new MandatoryConstraintHasPopulationMandatoryError(partition, roleAssignments, propertyAssignments);
				case 42: return new ObjectTypeInstanceHasPopulationMandatoryError(partition, roleAssignments, propertyAssignments);
				case 43: return new ReadingOrderHasReading(partition, roleAssignments, propertyAssignments);
				case 44: return new FactTypeHasReadingOrder(partition, roleAssignments, propertyAssignments);
				case 45: return new ReferenceModeHasReferenceModeKind(partition, roleAssignments, propertyAssignments);
				case 46: return new SetConstraintHasDuplicateNameError(partition, roleAssignments, propertyAssignments);
				case 47: return new SetComparisonConstraintHasDuplicateNameError(partition, roleAssignments, propertyAssignments);
				case 48: return new EntityTypeHasPreferredIdentifier(partition, roleAssignments, propertyAssignments);
				case 49: return new ReadingHasTooManyRolesError(partition, roleAssignments, propertyAssignments);
				case 50: return new ReadingHasTooFewRolesError(partition, roleAssignments, propertyAssignments);
				case 51: return new ReadingHasReadingRequiresUserModificationError(partition, roleAssignments, propertyAssignments);
				case 52: return new SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError(partition, roleAssignments, propertyAssignments);
				case 53: return new ElementAssociatedWithModelError(partition, roleAssignments, propertyAssignments);
				case 54: return new FactTypeHasFactTypeRequiresReadingError(partition, roleAssignments, propertyAssignments);
				case 55: return new FactTypeHasFactTypeRequiresInternalUniquenessConstraintError(partition, roleAssignments, propertyAssignments);
				case 56: return new ValueTypeHasValueConstraint(partition, roleAssignments, propertyAssignments);
				case 57: return new ObjectTypeHasCardinalityConstraint(partition, roleAssignments, propertyAssignments);
				case 58: return new UnaryRoleHasCardinalityConstraint(partition, roleAssignments, propertyAssignments);
				case 59: return new RoleHasValueConstraint(partition, roleAssignments, propertyAssignments);
				case 60: return new PathedRoleHasValueConstraint(partition, roleAssignments, propertyAssignments);
				case 61: return new RolePathRootHasValueConstraint(partition, roleAssignments, propertyAssignments);
				case 62: return new ValueConstraintHasValueRange(partition, roleAssignments, propertyAssignments);
				case 63: return new CardinalityConstraintHasRange(partition, roleAssignments, propertyAssignments);
				case 64: return new CardinalityConstraintHasRangeOverlapError(partition, roleAssignments, propertyAssignments);
				case 65: return new ValueTypeHasUnspecifiedDataTypeError(partition, roleAssignments, propertyAssignments);
				case 66: return new SetComparisonConstraintHasCompatibleRolePlayerTypeError(partition, roleAssignments, propertyAssignments);
				case 67: return new SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError(partition, roleAssignments, propertyAssignments);
				case 68: return new SetConstraintHasCompatibleRolePlayerTypeError(partition, roleAssignments, propertyAssignments);
				case 69: return new ConstraintRoleSequenceHasJoinPathRequiredError(partition, roleAssignments, propertyAssignments);
				case 70: return new UniquenessConstraintHasNMinusOneError(partition, roleAssignments, propertyAssignments);
				case 71: return new RoleHasRolePlayerRequiredError(partition, roleAssignments, propertyAssignments);
				case 72: return new ObjectTypeHasEntityTypeRequiresReferenceSchemeError(partition, roleAssignments, propertyAssignments);
				case 73: return new FrequencyConstraintHasFrequencyConstraintMinMaxError(partition, roleAssignments, propertyAssignments);
				case 74: return new FrequencyConstraintHasFrequencyConstraintExactlyOneError(partition, roleAssignments, propertyAssignments);
				case 75: return new FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError(partition, roleAssignments, propertyAssignments);
				case 76: return new ObjectificationImpliesFactType(partition, roleAssignments, propertyAssignments);
				case 77: return new ValueRangeHasMaxValueMismatchError(partition, roleAssignments, propertyAssignments);
				case 78: return new ValueRangeHasMinValueMismatchError(partition, roleAssignments, propertyAssignments);
				case 79: return new FactTypeHasImpliedInternalUniquenessConstraintError(partition, roleAssignments, propertyAssignments);
				case 80: return new SetConstraintHasTooFewRoleSequencesError(partition, roleAssignments, propertyAssignments);
				case 81: return new SetConstraintHasTooManyRoleSequencesError(partition, roleAssignments, propertyAssignments);
				case 82: return new FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError(partition, roleAssignments, propertyAssignments);
				case 83: return new RingConstraintHasRingConstraintTypeNotSpecifiedError(partition, roleAssignments, propertyAssignments);
				case 84: return new ValueComparisonConstraintHasOperatorNotSpecifiedError(partition, roleAssignments, propertyAssignments);
				case 85: return new ValueComparisonConstraintHasRolesNotComparableError(partition, roleAssignments, propertyAssignments);
				case 86: return new ValueConstraintHasDuplicateNameError(partition, roleAssignments, propertyAssignments);
				case 87: return new CardinalityConstraintHasDuplicateNameError(partition, roleAssignments, propertyAssignments);
				case 88: return new ModelHasDefinition(partition, roleAssignments, propertyAssignments);
				case 89: return new ObjectTypeHasDefinition(partition, roleAssignments, propertyAssignments);
				case 90: return new FactTypeHasDefinition(partition, roleAssignments, propertyAssignments);
				case 91: return new SetConstraintHasDefinition(partition, roleAssignments, propertyAssignments);
				case 92: return new SetComparisonConstraintHasDefinition(partition, roleAssignments, propertyAssignments);
				case 93: return new ValueConstraintHasDefinition(partition, roleAssignments, propertyAssignments);
				case 94: return new CardinalityConstraintHasDefinition(partition, roleAssignments, propertyAssignments);
				case 95: return new ElementGroupingHasDefinition(partition, roleAssignments, propertyAssignments);
				case 96: return new FactTypeHasNote(partition, roleAssignments, propertyAssignments);
				case 97: return new ObjectTypeHasNote(partition, roleAssignments, propertyAssignments);
				case 98: return new SetConstraintHasNote(partition, roleAssignments, propertyAssignments);
				case 99: return new SetComparisonConstraintHasNote(partition, roleAssignments, propertyAssignments);
				case 100: return new ValueConstraintHasNote(partition, roleAssignments, propertyAssignments);
				case 101: return new CardinalityConstraintHasNote(partition, roleAssignments, propertyAssignments);
				case 102: return new ElementGroupingHasNote(partition, roleAssignments, propertyAssignments);
				case 103: return new ModelHasPrimaryNote(partition, roleAssignments, propertyAssignments);
				case 104: return new LeadRolePathHasNote(partition, roleAssignments, propertyAssignments);
				case 105: return new ModelHasModelNote(partition, roleAssignments, propertyAssignments);
				case 106: return new ModelNoteReferencesFactType(partition, roleAssignments, propertyAssignments);
				case 107: return new ModelNoteReferencesObjectType(partition, roleAssignments, propertyAssignments);
				case 108: return new ModelNoteReferencesSetConstraint(partition, roleAssignments, propertyAssignments);
				case 109: return new ModelNoteReferencesSetComparisonConstraint(partition, roleAssignments, propertyAssignments);
				case 110: return new ObjectTypeHasCompatibleSupertypesError(partition, roleAssignments, propertyAssignments);
				case 111: return new SetConstraintHasImplicationError(partition, roleAssignments, propertyAssignments);
				case 112: return new SetComparisonConstraintHasImplicationError(partition, roleAssignments, propertyAssignments);
				case 113: return new SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError(partition, roleAssignments, propertyAssignments);
				case 114: return new ObjectTypeHasPreferredIdentifierRequiresMandatoryError(partition, roleAssignments, propertyAssignments);
				case 115: return new ValueConstraintHasValueRangeOverlapError(partition, roleAssignments, propertyAssignments);
				case 116: return new ValueConstraintHasValueTypeDetachedError(partition, roleAssignments, propertyAssignments);
				case 117: return new FactTypeHasRole(partition, roleAssignments, propertyAssignments);
				case 118: return new ReadingOrderHasRole(partition, roleAssignments, propertyAssignments);
				case 119: return new RoleProxyHasRole(partition, roleAssignments, propertyAssignments);
				case 120: return new ObjectifiedUnaryRoleHasRole(partition, roleAssignments, propertyAssignments);
				case 121: return new FactTypeHasDerivationExpression(partition, roleAssignments, propertyAssignments);
				case 122: return new SubtypeHasDerivationExpression(partition, roleAssignments, propertyAssignments);
				case 123: return new ObjectTypeHasObjectTypeInstance(partition, roleAssignments, propertyAssignments);
				case 124: return new EntityTypeHasEntityTypeInstance(partition, roleAssignments, propertyAssignments);
				case 125: return new EntityTypeSubtypeHasEntityTypeSubtypeInstance(partition, roleAssignments, propertyAssignments);
				case 126: return new ValueTypeHasValueTypeInstance(partition, roleAssignments, propertyAssignments);
				case 127: return new EntityTypeRoleInstance(partition, roleAssignments, propertyAssignments);
				case 128: return new FactTypeRoleInstance(partition, roleAssignments, propertyAssignments);
				case 129: return new EntityTypeInstanceHasRoleInstance(partition, roleAssignments, propertyAssignments);
				case 130: return new EntityTypeSubtypeInstanceHasSupertypeInstance(partition, roleAssignments, propertyAssignments);
				case 131: return new FactTypeHasFactTypeInstance(partition, roleAssignments, propertyAssignments);
				case 132: return new FactTypeInstanceHasRoleInstance(partition, roleAssignments, propertyAssignments);
				case 133: return new ObjectificationInstance(partition, roleAssignments, propertyAssignments);
				case 134: return new ObjectifiedInstanceHasObjectifyingInstanceRequiredError(partition, roleAssignments, propertyAssignments);
				case 135: return new ObjectifyingInstanceHasObjectifiedInstanceRequiredError(partition, roleAssignments, propertyAssignments);
				case 136: return new EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError(partition, roleAssignments, propertyAssignments);
				case 137: return new FactTypeInstanceHasTooFewFactTypeRoleInstancesError(partition, roleAssignments, propertyAssignments);
				case 138: return new ValueTypeInstanceHasCompatibleValueTypeInstanceValueError(partition, roleAssignments, propertyAssignments);
				case 139: return new ConstraintRoleSequenceHasJoinPath(partition, roleAssignments, propertyAssignments);
				case 140: return new ConstraintRoleSequenceJoinPathProjection(partition, roleAssignments, propertyAssignments);
				case 141: return new ConstraintRoleProjection(partition, roleAssignments, propertyAssignments);
				case 142: return new ConstraintRoleProjectedFromRolePathRoot(partition, roleAssignments, propertyAssignments);
				case 143: return new ConstraintRoleProjectedFromPathedRole(partition, roleAssignments, propertyAssignments);
				case 144: return new ConstraintRoleProjectedFromCalculatedPathValue(partition, roleAssignments, propertyAssignments);
				case 145: return new ConstraintRoleProjectedFromPathConstant(partition, roleAssignments, propertyAssignments);
				case 146: return new ConstraintRoleProjectedFromPathedRole_Deprecated(partition, roleAssignments, propertyAssignments);
				case 147: return new ConstraintRoleProjectedFromCalculatedPathValue_Deprecated(partition, roleAssignments, propertyAssignments);
				case 148: return new ConstraintRoleProjectedFromPathConstant_Deprecated(partition, roleAssignments, propertyAssignments);
				case 149: return new ModelHasModelErrorDisplayFilter(partition, roleAssignments, propertyAssignments);
				case 150: return new ElementGroupingSetRelatesToORMModel(partition, roleAssignments, propertyAssignments);
				case 151: return new ElementGroupingSetContainsElementGrouping(partition, roleAssignments, propertyAssignments);
				case 152: return new ElementGroupingIsOfElementGroupingType(partition, roleAssignments, propertyAssignments);
				case 153: return new GroupingElementInclusion(partition, roleAssignments, propertyAssignments);
				case 154: return new GroupingElementExclusion(partition, roleAssignments, propertyAssignments);
				case 155: return new ElementGroupingIncludesElementGrouping(partition, roleAssignments, propertyAssignments);
				case 156: return new ElementGroupingExcludesElementGrouping(partition, roleAssignments, propertyAssignments);
				case 157: return new ElementGroupingHasDuplicateNameError(partition, roleAssignments, propertyAssignments);
				case 158: return new ElementGroupingHasMembershipContradictionError(partition, roleAssignments, propertyAssignments);
				case 159: return new GroupingMembershipContradictionErrorIsForElement(partition, roleAssignments, propertyAssignments);
				case 160: return new RolePathOwnerHasPathComponent_Deprecated(partition, roleAssignments, propertyAssignments);
				case 161: return new RolePathOwnerOwnsLeadRolePath(partition, roleAssignments, propertyAssignments);
				case 162: return new RolePathOwnerUsesSharedLeadRolePath(partition, roleAssignments, propertyAssignments);
				case 163: return new RolePathOwnerHasSingleLeadRolePath(partition, roleAssignments, propertyAssignments);
				case 164: return new RolePathOwnerHasSingleOwnedLeadRolePath(partition, roleAssignments, propertyAssignments);
				case 165: return new RolePathOwnerOwnsSubquery(partition, roleAssignments, propertyAssignments);
				case 166: return new RolePathOwnerUsesSharedSubquery(partition, roleAssignments, propertyAssignments);
				case 167: return new RolePathObjectTypeRoot(partition, roleAssignments, propertyAssignments);
				case 168: return new PathedRole(partition, roleAssignments, propertyAssignments);
				case 169: return new PathedRoleIsRemotelyCorrelatedWithPathedRole_Deprecated(partition, roleAssignments, propertyAssignments);
				case 170: return new LeadRolePathHasObjectUnifier(partition, roleAssignments, propertyAssignments);
				case 171: return new PathObjectUnifierUnifiesPathedRole(partition, roleAssignments, propertyAssignments);
				case 172: return new PathObjectUnifierUnifiesRolePathRoot(partition, roleAssignments, propertyAssignments);
				case 173: return new RoleSubPathIsContinuationOfRolePath(partition, roleAssignments, propertyAssignments);
				case 174: return new ModelDefinesFunction(partition, roleAssignments, propertyAssignments);
				case 175: return new FunctionOperatesOnParameter(partition, roleAssignments, propertyAssignments);
				case 176: return new RolePathOwnerCalculatesCalculatedPathValue_Deprecated(partition, roleAssignments, propertyAssignments);
				case 177: return new LeadRolePathCalculatesCalculatedPathValue(partition, roleAssignments, propertyAssignments);
				case 178: return new LeadRolePathSatisfiesCalculatedCondition(partition, roleAssignments, propertyAssignments);
				case 179: return new CalculatedPathValueHasInput(partition, roleAssignments, propertyAssignments);
				case 180: return new CalculatedPathValueScopedWithPathedRole_Deprecated(partition, roleAssignments, propertyAssignments);
				case 181: return new CalculatedPathValueAggregationContextIncludesPathedRole(partition, roleAssignments, propertyAssignments);
				case 182: return new CalculatedPathValueAggregationContextIncludesRolePathRoot(partition, roleAssignments, propertyAssignments);
				case 183: return new CalculatedPathValueIsCalculatedWithFunction(partition, roleAssignments, propertyAssignments);
				case 184: return new CalculatedPathValueInputCorrespondsToFunctionParameter(partition, roleAssignments, propertyAssignments);
				case 185: return new CalculatedPathValueInputBindsToRolePathRoot(partition, roleAssignments, propertyAssignments);
				case 186: return new CalculatedPathValueInputBindsToPathedRole(partition, roleAssignments, propertyAssignments);
				case 187: return new CalculatedPathValueInputBindsToCalculatedPathValue(partition, roleAssignments, propertyAssignments);
				case 188: return new CalculatedPathValueInputBindsToPathConstant(partition, roleAssignments, propertyAssignments);
				case 189: return new QueryDefinesParameter(partition, roleAssignments, propertyAssignments);
				case 190: return new QueryParameterHasParameterType(partition, roleAssignments, propertyAssignments);
				case 191: return new QueryParameterBinding(partition, roleAssignments, propertyAssignments);
				case 192: return new QueryParameterBoundToRolePathRoot(partition, roleAssignments, propertyAssignments);
				case 193: return new QueryParameterBoundToPathedRole(partition, roleAssignments, propertyAssignments);
				case 194: return new SubqueryParameterInputs(partition, roleAssignments, propertyAssignments);
				case 195: return new SubqueryParameterInput(partition, roleAssignments, propertyAssignments);
				case 196: return new SubqueryParameterInputFromRolePathRoot(partition, roleAssignments, propertyAssignments);
				case 197: return new SubqueryParameterInputFromPathedRole(partition, roleAssignments, propertyAssignments);
				case 198: return new SubqueryParameterInputFromCalculatedPathValue(partition, roleAssignments, propertyAssignments);
				case 199: return new SubqueryParameterInputFromPathConstant(partition, roleAssignments, propertyAssignments);
				case 200: return new FactTypeHasDerivationRule(partition, roleAssignments, propertyAssignments);
				case 201: return new FactTypeDerivationRuleHasDerivationNote(partition, roleAssignments, propertyAssignments);
				case 202: return new RoleSetDerivationProjection(partition, roleAssignments, propertyAssignments);
				case 203: return new DerivedRoleProjection(partition, roleAssignments, propertyAssignments);
				case 204: return new DerivedRoleProjectedFromRolePathRoot(partition, roleAssignments, propertyAssignments);
				case 205: return new DerivedRoleProjectedFromPathedRole(partition, roleAssignments, propertyAssignments);
				case 206: return new DerivedRoleProjectedFromCalculatedPathValue(partition, roleAssignments, propertyAssignments);
				case 207: return new DerivedRoleProjectedFromPathConstant(partition, roleAssignments, propertyAssignments);
				case 208: return new RoleDerivesFromPathedRole_Deprecated(partition, roleAssignments, propertyAssignments);
				case 209: return new RoleDerivesFromCalculatedPathValue_Deprecated(partition, roleAssignments, propertyAssignments);
				case 210: return new RoleDerivesFromPathConstant_Deprecated(partition, roleAssignments, propertyAssignments);
				case 211: return new SubtypeHasDerivationRule(partition, roleAssignments, propertyAssignments);
				case 212: return new SubtypeDerivationRuleHasDerivationNote(partition, roleAssignments, propertyAssignments);
				case 213: return new RolePathHasRootObjectTypeError(partition, roleAssignments, propertyAssignments);
				case 214: return new PathedRoleHasCompatibleJoinRolePlayerError(partition, roleAssignments, propertyAssignments);
				case 215: return new PathObjectUnifierHasCompatibleObjectTypesError(partition, roleAssignments, propertyAssignments);
				case 216: return new PathedRoleHasSameFactTypeFollowsJoinError(partition, roleAssignments, propertyAssignments);
				case 217: return new PathedRoleHasMandatoryOuterJoinError(partition, roleAssignments, propertyAssignments);
				case 218: return new CalculatedPathValueHasFunctionRequiredError(partition, roleAssignments, propertyAssignments);
				case 219: return new CalculatedPathValueHasUnboundParameterError(partition, roleAssignments, propertyAssignments);
				case 220: return new CalculatedPathValueParameterBindingErrorTargetsFunctionParameter(partition, roleAssignments, propertyAssignments);
				case 221: return new CalculatedPathValueHasConsumptionRequiredError(partition, roleAssignments, propertyAssignments);
				case 222: return new CalculatedPathValueHasAggregationContextRequiredError(partition, roleAssignments, propertyAssignments);
				case 223: return new RoleProjectedDerivationRuleHasProjectionRequiredError(partition, roleAssignments, propertyAssignments);
				case 224: return new RoleSetDerivationProjectionHasPartialProjectionError(partition, roleAssignments, propertyAssignments);
				case 225: return new DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError(partition, roleAssignments, propertyAssignments);
				case 226: return new ConstraintRoleSequenceJoinPathHasProjectionRequiredError(partition, roleAssignments, propertyAssignments);
				case 227: return new ConstraintRoleSequenceProjectionHasPartialProjectionError(partition, roleAssignments, propertyAssignments);
				case 228: return new ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError(partition, roleAssignments, propertyAssignments);
				default: return null;
			}
		}
		#endregion
		#region Resource manager
		
		private static global::System.Resources.ResourceManager resourceManager;
		
		/// <summary>
		/// The base name of this model's resources.
		/// </summary>
		public const string ResourceBaseName = "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx";
		
		/// <summary>
		/// Gets the DomainModel's ResourceManager. If the ResourceManager does not already exist, then it is created.
		/// </summary>
		public override global::System.Resources.ResourceManager ResourceManager
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return ORMCoreDomainModel.SingletonResourceManager;
			}
		}
	
		/// <summary>
		/// Gets the Singleton ResourceManager for this domain model.
		/// </summary>
		public static global::System.Resources.ResourceManager SingletonResourceManager
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				if (ORMCoreDomainModel.resourceManager == null)
				{
					ORMCoreDomainModel.resourceManager = new global::System.Resources.ResourceManager(ResourceBaseName, typeof(ORMCoreDomainModel).Assembly);
				}
				return ORMCoreDomainModel.resourceManager;
			}
		}
		#endregion
		#region Copy/Remove closures
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter copyClosure;
		/// <summary>
		/// DeleteClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter removeClosure;
		/// <summary>
		/// Returns an IElementVisitorFilter that corresponds to the ClosureType.
		/// </summary>
		/// <param name="type">closure type</param>
		/// <param name="rootElements">collection of root elements</param>
		/// <returns>IElementVisitorFilter or null</returns>
		public override DslModeling::IElementVisitorFilter GetClosureFilter(DslModeling::ClosureType type, global::System.Collections.Generic.ICollection<DslModeling::ModelElement> rootElements)
		{
			switch (type)
			{
				case DslModeling::ClosureType.CopyClosure:
					return ORMCoreDomainModel.CopyClosure;
				case DslModeling::ClosureType.DeleteClosure:
					return ORMCoreDomainModel.DeleteClosure;
			}
			return base.GetClosureFilter(type, rootElements);
		}
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter CopyClosure
		{
			get
			{
				// Incorporate all of the closures from the models we extend
				if (ORMCoreDomainModel.copyClosure == null)
				{
					DslModeling::ChainingElementVisitorFilter copyFilter = new DslModeling::ChainingElementVisitorFilter();
					copyFilter.AddFilter(new ORMCoreCopyClosure());
					copyFilter.AddFilter(new DslModeling::CoreCopyClosure());
					
					ORMCoreDomainModel.copyClosure = copyFilter;
				}
				return ORMCoreDomainModel.copyClosure;
			}
		}
		/// <summary>
		/// DeleteClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter DeleteClosure
		{
			get
			{
				// Incorporate all of the closures from the models we extend
				if (ORMCoreDomainModel.removeClosure == null)
				{
					DslModeling::ChainingElementVisitorFilter removeFilter = new DslModeling::ChainingElementVisitorFilter();
					removeFilter.AddFilter(new ORMCoreDeleteClosure());
					removeFilter.AddFilter(new DslModeling::CoreDeleteClosure());
		
					ORMCoreDomainModel.removeClosure = removeFilter;
				}
				return ORMCoreDomainModel.removeClosure;
			}
		}
		#endregion
	}
		
	#region Copy/Remove closure classes
	/// <summary>
	/// Remove closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class ORMCoreDeleteClosure : ORMCoreDeleteClosureBase, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ORMCoreDeleteClosure() : base()
		{
		}
	}
	
	/// <summary>
	/// Base class for remove closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class ORMCoreDeleteClosureBase : DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Specialized.HybridDictionary domainRoles;
		/// <summary>
		/// Constructor
		/// </summary>
		public ORMCoreDeleteClosureBase()
		{
			#region Initialize DomainData Table
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionElement.ExtensionDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModelElementHasExtensionModelError.ExtensionModelErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasObjectType.ObjectTypeDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasFactType.FactTypeDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasError.ErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceModeKind.ReferenceModeKindDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasReferenceMode.ReferenceModeDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetConstraint.SetConstraintDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeImpliesMandatoryConstraint.MandatoryConstraintDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasSetComparisonConstraint.SetComparisonConstraintDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDataType.DataTypeDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesNameGenerator.RefinementDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementHasAlias.AliasDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameAliasRefinesInstance.AliasDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorRefinesInstance.NameGeneratorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.RecognizedPhraseHasAbbreviation.AbbreviationDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasAbbreviation.AbbreviationDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelContainsRecognizedPhrase.RecognizedPhraseDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasRoleSequence.RoleSequenceDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasNotWellModeledSubsetAndMandatoryError.NotWellModeledSubsetAndMandatoryErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasNotWellModeledSubsetAndMandatoryError.NotWellModeledSubsetAndMandatoryErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.MandatoryConstraintHasPopulationMandatoryError.PopulationMandatoryErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeInstanceHasPopulationMandatoryError.PopulationMandatoryErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingOrderHasReading.ReadingDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasReadingOrder.ReadingOrderDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeHasReferenceModeKind.ReferenceModeDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooManyRolesError.TooManyRolesErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasTooFewRolesError.TooFewRolesErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ReadingHasReadingRequiresUserModificationError.RequiresUserModificationErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasExternalConstraintRoleSequenceArityMismatchError.ArityMismatchErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresReadingError.ReadingRequiredErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeRequiresInternalUniquenessConstraintError.InternalUniquenessConstraintRequiredErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueConstraint.ValueConstraintDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCardinalityConstraint.CardinalityConstraintDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.UnaryRoleHasCardinalityConstraint.CardinalityConstraintDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasValueConstraint.ValueConstraintDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasValueConstraint.ValueConstraintDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathRootHasValueConstraint.ValueConstraintDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRange.ValueRangeDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRange.RangeDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasRangeOverlapError.CardinalityRangeOverlapErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasUnspecifiedDataTypeError.DataTypeNotSpecifiedErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubsetConstraintHasSupersetRoleOfSubtypeSubsetConstraintNotSubtypeError.SupersetRoleOfSubtypeSubsetConstraintNotSubtypeErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasCompatibleRolePlayerTypeError.CompatibleRolePlayerTypeErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPathRequiredError.JoinPathRequiredErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.UniquenessConstraintHasNMinusOneError.NMinusOneErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleHasRolePlayerRequiredError.RolePlayerRequiredErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasEntityTypeRequiresReferenceSchemeError.ReferenceSchemeErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintMinMaxError.FrequencyConstraintMinMaxErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintExactlyOneError.FrequencyConstraintExactlyOneErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintNonRestrictiveRangeError.FrequencyConstraintNonRestrictiveRangeErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectificationImpliesFactType.ImpliedFactTypeDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMaxValueMismatchError.MaxValueMismatchErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueRangeHasMinValueMismatchError.MinValueMismatchErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasImpliedInternalUniquenessConstraintError.ImpliedInternalUniquenessConstraintErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooFewRoleSequencesError.TooFewRoleSequencesErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasTooManyRoleSequencesError.TooManyRoleSequencesErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.FrequencyConstraintHasFrequencyConstraintViolatedByUniquenessConstraintError.FrequencyConstraintViolatedByUniquenessConstraintErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintHasRingConstraintTypeNotSpecifiedError.RingConstraintTypeNotSpecifiedErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasOperatorNotSpecifiedError.OperatorNotSpecifiedErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonConstraintHasRolesNotComparableError.RolesNotComparableErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasDefinition.DefinitionDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasDefinition.DefinitionDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDefinition.DefinitionDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasDefinition.DefinitionDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasDefinition.DefinitionDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasDefinition.DefinitionDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasDefinition.DefinitionDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasDefinition.DefinitionDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasNote.NoteDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasNote.NoteDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasNote.NoteDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasNote.NoteDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasNote.NoteDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.CardinalityConstraintHasNote.NoteDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasNote.NoteDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasPrimaryNote.NoteDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasNote.NoteDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelNote.NoteDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasCompatibleSupertypesError.CompatibleSupertypesErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetConstraintHasImplicationError.ImplicationErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasImplicationError.ImplicationErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.SetComparisonConstraintHasEqualityOrSubsetImpliedByMandatoryError.EqualityOrSubsetImpliedByMandatoryErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasPreferredIdentifierRequiresMandatoryError.PreferredIdentifierRequiresMandatoryErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueRangeOverlapError.ValueRangeOverlapErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueConstraintHasValueTypeDetachedError.ValueTypeDetachedErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasRole.RoleDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationExpression.DerivationRuleDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationExpression.DerivationRuleDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectTypeHasObjectTypeInstance.ObjectTypeInstanceDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeHasEntityTypeInstance.EntityTypeInstanceDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeHasEntityTypeSubtypeInstance.EntityTypeSubtypeInstanceDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeHasValueTypeInstance.ValueTypeInstanceDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasRoleInstance.RoleInstanceDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeSubtypeInstanceHasSupertypeInstance.EntityTypeSubtypeInstanceDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasFactTypeInstance.FactTypeInstanceDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasRoleInstance.RoleInstanceDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifiedInstanceHasObjectifyingInstanceRequiredError.ObjectifyingInstanceRequiredErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectifyingInstanceHasObjectifiedInstanceRequiredError.ObjectifiedInstanceRequiredErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.EntityTypeInstanceHasTooFewEntityTypeRoleInstancesError.TooFewEntityTypeRoleInstancesErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeInstanceHasTooFewFactTypeRoleInstancesError.TooFewFactTypeRoleInstancesErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ValueTypeInstanceHasCompatibleValueTypeInstanceValueError.CompatibleValueTypeInstanceValueErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceHasJoinPath.JoinPathDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectedFromPathConstant.SourceDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelHasModelErrorDisplayFilter.ModelErrorDisplayFilterDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetRelatesToORMModel.GroupingSetDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingSetContainsElementGrouping.GroupingDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingIsOfElementGroupingType.GroupingTypeDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ElementGroupingHasMembershipContradictionError.MembershipContradictionErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingMembershipContradictionErrorIsForElement.GroupingMembershipContradictionErrorRelationshipDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasLeadRolePath.RolePathDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathOwnerHasSubquery.SubqueryDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathHasObjectUnifier.ObjectUnifierDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSubPathIsContinuationOfRolePath.SubPathDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ModelDefinesFunction.FunctionDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.FunctionOperatesOnParameter.ParameterDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.LeadRolePathCalculatesCalculatedPathValue.CalculatedValueDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasInput.InputDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueInputBindsToPathConstant.SourceDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.QueryDefinesParameter.ParameterDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubqueryParameterInputFromPathConstant.SourceDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeHasDerivationRule.DerivationRuleDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.FactTypeDerivationRuleHasDerivationNote.DerivationNoteDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectedFromPathConstant.SourceDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeHasDerivationRule.DerivationRuleDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.SubtypeDerivationRuleHasDerivationNote.DerivationNoteDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.RolePathHasRootObjectTypeError.RootObjectTypeRequiredErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasCompatibleJoinRolePlayerError.JoinCompatibilityErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathObjectUnifierHasCompatibleObjectTypesError.CompatibilityErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasSameFactTypeFollowsJoinError.SameFactTypeRoleFollowsJoinErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRoleHasMandatoryOuterJoinError.MandatoryOuterJoinErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasFunctionRequiredError.FunctionRequiredErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasUnboundParameterError.ParameterBindingErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueParameterBindingErrorTargetsFunctionParameter.ParameterBindingErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasConsumptionRequiredError.ConsumptionRequiredErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.CalculatedPathValueHasAggregationContextRequiredError.AggregationContextRequiredErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleProjectedDerivationRuleHasProjectionRequiredError.ProjectionRequiredErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.RoleSetDerivationProjectionHasPartialProjectionError.PartialProjectionErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.DerivedRoleProjectionHasDerivedRoleRequiresCompatibleProjectionError.IncompatibleProjectionErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceJoinPathHasProjectionRequiredError.ProjectionRequiredErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleSequenceProjectionHasPartialProjectionError.PartialProjectionErrorDomainRoleId, true);
			DomainRoles.Add(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintRoleProjectionHasConstraintRoleRequiresCompatibleJoinPathProjectionError.IncompatibleProjectionErrorDomainRoleId, true);
			#endregion
		}
		/// <summary>
		/// Called to ask the filter if a particular relationship from a source element should be included in the traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="sourceRoleInfo">DomainRoleInfo of the role that the source element is playing in the relationship</param>
		/// <param name="domainRelationshipInfo">DomainRelationshipInfo for the ElementLink in question</param>
		/// <param name="targetRelationship">Relationship in question</param>
		/// <returns>Yes if the relationship should be traversed</returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRelationship(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::DomainRoleInfo sourceRoleInfo, DslModeling::DomainRelationshipInfo domainRelationshipInfo, DslModeling::ElementLink targetRelationship)
		{
			return DslModeling::VisitorFilterResult.Yes;
		}
		/// <summary>
		/// Called to ask the filter if a particular role player should be Visited during traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="elementLink">Element Link that forms the relationship to the role player in question</param>
		/// <param name="targetDomainRole">DomainRoleInfo of the target role</param>
		/// <param name="targetRolePlayer">Model Element that plays the target role in the relationship</param>
		/// <returns></returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRolePlayer(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::ElementLink elementLink, DslModeling::DomainRoleInfo targetDomainRole, DslModeling::ModelElement targetRolePlayer)
		{
			if (targetDomainRole == null) throw new global::System.ArgumentNullException("targetDomainRole");
			return this.DomainRoles.Contains(targetDomainRole.Id) ? DslModeling::VisitorFilterResult.Yes : DslModeling::VisitorFilterResult.DoNotCare;
		}
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Specialized.HybridDictionary DomainRoles
		{
			get
			{
				if (this.domainRoles == null)
				{
					this.domainRoles = new global::System.Collections.Specialized.HybridDictionary();
				}
				return this.domainRoles;
			}
		}
	
	}
	/// <summary>
	/// Copy closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class ORMCoreCopyClosure : ORMCoreCopyClosureBase, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ORMCoreCopyClosure() : base()
		{
		}
	}
	/// <summary>
	/// Base class for copy closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class ORMCoreCopyClosureBase : DslModeling::CopyClosureFilter, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ORMCoreCopyClosureBase():base()
		{
		}
	}
	#endregion
		
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainEnumeration: DerivationExpressionStorageType
	/// Specify how/whether the contents of the fact should be stored by generated
	/// systems.
	/// </summary>
	[global::System.ComponentModel.TypeConverter(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.EnumConverter<DerivationExpressionStorageType, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel>))]
	[global::System.CLSCompliant(true)]
	public enum DerivationExpressionStorageType
	{
		/// <summary>
		/// Derived
		/// The fact instance population is calculated on demand.
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DerivationExpressionStorageType/Derived.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		Derived = 0,
		/// <summary>
		/// DerivedAndStored
		/// The fact instance population is calculated immediately and stored.
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DerivationExpressionStorageType/DerivedAndStored.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		DerivedAndStored = 1,
		/// <summary>
		/// PartiallyDerived
		/// The fact instance population can be asserted as well as calculated on demand.
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DerivationExpressionStorageType/PartiallyDerived.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		PartiallyDerived = 2,
		/// <summary>
		/// PartiallyDerivedAndStored
		/// The fact instance population can be asserted as well as calculated immediately
		/// and stored.
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DerivationExpressionStorageType/PartiallyDerivedAndStored.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		PartiallyDerivedAndStored = 3,
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainEnumeration: DerivationCompleteness
	/// Specify if instances of a derived fact can also be directly asserted.
	/// </summary>
	[global::System.ComponentModel.TypeConverter(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.EnumConverter<DerivationCompleteness, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel>))]
	[global::System.CLSCompliant(true)]
	public enum DerivationCompleteness
	{
		/// <summary>
		/// FullyDerived
		/// The fact instance population is calculated on demand.
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DerivationCompleteness/FullyDerived.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		FullyDerived = 0,
		/// <summary>
		/// PartiallyDerived
		/// The fact instance population can be both calculated and asserted.
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DerivationCompleteness/PartiallyDerived.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		PartiallyDerived = 1,
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainEnumeration: DerivationStorage
	/// Specify if derived fact instances should be recalculated on demand or calculated
	/// on change and stored.
	/// </summary>
	[global::System.ComponentModel.TypeConverter(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.EnumConverter<DerivationStorage, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel>))]
	[global::System.CLSCompliant(true)]
	public enum DerivationStorage
	{
		/// <summary>
		/// NotStored
		/// Fact instances are recalculated on demand.
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DerivationStorage/NotStored.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		NotStored = 0,
		/// <summary>
		/// Stored
		/// Fact instances are calculated on change and stored.
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.DerivationStorage/Stored.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		Stored = 1,
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainEnumeration: ConstraintModality
	/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintModality
	/// </summary>
	[global::System.ComponentModel.TypeConverter(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.EnumConverter<ConstraintModality, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel>))]
	[global::System.CLSCompliant(true)]
	public enum ConstraintModality
	{
		/// <summary>
		/// Alethic
		/// The constraint must hold.
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintModality/Alethic.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		Alethic = 0,
		/// <summary>
		/// Deontic
		/// The constraint should hold.
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ConstraintModality/Deontic.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		Deontic = 1,
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainEnumeration: RoleMultiplicity
	/// Defines the multiplicity for the roles. The role multiplicity is currently
	/// displayed only on roles associated with binary fact types and is calculated
	/// based on the existing mandatory and internal uniqueness constraints associated
	/// with the fact.
	/// </summary>
	[global::System.ComponentModel.TypeConverter(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.EnumConverter<RoleMultiplicity, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel>))]
	[global::System.CLSCompliant(true)]
	public enum RoleMultiplicity
	{
		/// <summary>
		/// Unspecified
		/// Insufficient constraints are present to determine the user intention.
		/// </summary>
		[global::System.ComponentModel.Browsable(false)]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleMultiplicity/Unspecified.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		Unspecified = 0,
		/// <summary>
		/// Indeterminate
		/// Too many constraints are present to determine the user intention.
		/// </summary>
		[global::System.ComponentModel.Browsable(false)]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleMultiplicity/Indeterminate.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		Indeterminate = 1,
		/// <summary>
		/// ZeroToOne
		/// 0..1
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleMultiplicity/ZeroToOne.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		ZeroToOne = 2,
		/// <summary>
		/// ZeroToMany
		/// 0..*
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleMultiplicity/ZeroToMany.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		ZeroToMany = 3,
		/// <summary>
		/// ExactlyOne
		/// 1
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleMultiplicity/ExactlyOne.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		ExactlyOne = 4,
		/// <summary>
		/// OneToMany
		/// 1..*
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RoleMultiplicity/OneToMany.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		OneToMany = 5,
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainEnumeration: RingConstraintType
	/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintType
	/// </summary>
	[global::System.ComponentModel.TypeConverter(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.EnumConverter<RingConstraintType, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel>))]
	[global::System.ComponentModel.Editor(typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.Design.RingConstraintTypePicker), typeof(global::System.Drawing.Design.UITypeEditor))]
	[global::System.CLSCompliant(true)]
	public enum RingConstraintType
	{
		/// <summary>
		/// Undefined
		/// </summary>
		[global::System.ComponentModel.Browsable(false)]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintType/Undefined.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		Undefined = 0,
		/// <summary>
		/// Reflexive
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintType/Reflexive.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		Reflexive = 1,
		/// <summary>
		/// Irreflexive
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintType/Irreflexive.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		Irreflexive = 2,
		/// <summary>
		/// PurelyReflexive
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintType/PurelyReflexive.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		PurelyReflexive = 3,
		/// <summary>
		/// Symmetric
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintType/Symmetric.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		Symmetric = 4,
		/// <summary>
		/// Antisymmetric
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintType/Antisymmetric.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		Antisymmetric = 5,
		/// <summary>
		/// Asymmetric
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintType/Asymmetric.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		Asymmetric = 6,
		/// <summary>
		/// Transitive
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintType/Transitive.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		Transitive = 7,
		/// <summary>
		/// Intransitive
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintType/Intransitive.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		Intransitive = 8,
		/// <summary>
		/// StronglyIntransitive
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintType/StronglyIntransitive.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		StronglyIntransitive = 9,
		/// <summary>
		/// Acyclic
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintType/Acyclic.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		Acyclic = 10,
		/// <summary>
		/// AcyclicTransitive
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintType/AcyclicTransitive.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		AcyclicTransitive = 11,
		/// <summary>
		/// AcyclicIntransitive
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintType/AcyclicIntransitive.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		AcyclicIntransitive = 12,
		/// <summary>
		/// AcyclicStronglyIntransitive
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintType/AcyclicStronglyIntransitive.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		AcyclicStronglyIntransitive = 13,
		/// <summary>
		/// ReflexiveSymmetric
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintType/ReflexiveSymmetric.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		ReflexiveSymmetric = 14,
		/// <summary>
		/// ReflexiveAntisymmetric
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintType/ReflexiveAntisymmetric.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		ReflexiveAntisymmetric = 15,
		/// <summary>
		/// ReflexiveTransitive
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintType/ReflexiveTransitive.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		ReflexiveTransitive = 16,
		/// <summary>
		/// ReflexiveTransitiveAntisymmetric
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintType/ReflexiveTransitiveAntisymmetric.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		ReflexiveTransitiveAntisymmetric = 17,
		/// <summary>
		/// SymmetricTransitive
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintType/SymmetricTransitive.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		SymmetricTransitive = 18,
		/// <summary>
		/// SymmetricIrreflexive
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintType/SymmetricIrreflexive.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		SymmetricIrreflexive = 19,
		/// <summary>
		/// SymmetricIntransitive
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintType/SymmetricIntransitive.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		SymmetricIntransitive = 20,
		/// <summary>
		/// SymmetricStronglyIntransitive
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintType/SymmetricStronglyIntransitive.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		SymmetricStronglyIntransitive = 21,
		/// <summary>
		/// AsymmetricIntransitive
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintType/AsymmetricIntransitive.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		AsymmetricIntransitive = 22,
		/// <summary>
		/// AsymmetricStronglyIntransitive
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintType/AsymmetricStronglyIntransitive.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		AsymmetricStronglyIntransitive = 23,
		/// <summary>
		/// TransitiveIrreflexive
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintType/TransitiveIrreflexive.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		TransitiveIrreflexive = 24,
		/// <summary>
		/// TransitiveAntisymmetric
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintType/TransitiveAntisymmetric.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		TransitiveAntisymmetric = 25,
		/// <summary>
		/// TransitiveAsymmetric
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RingConstraintType/TransitiveAsymmetric.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		TransitiveAsymmetric = 26,
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainEnumeration: ValueComparisonOperator
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonOperator
	/// </summary>
	[global::System.ComponentModel.TypeConverter(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.EnumConverter<ValueComparisonOperator, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel>))]
	[global::System.CLSCompliant(true)]
	public enum ValueComparisonOperator
	{
		/// <summary>
		/// Undefined
		/// </summary>
		[global::System.ComponentModel.Browsable(false)]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonOperator/Undefined.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		Undefined = 0,
		/// <summary>
		/// LessThan
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonOperator/LessThan.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		LessThan = 1,
		/// <summary>
		/// GreaterThan
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonOperator/GreaterThan.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		GreaterThan = 2,
		/// <summary>
		/// LessThanOrEqual
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonOperator/LessThanOrEqual.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		LessThanOrEqual = 3,
		/// <summary>
		/// GreaterThanOrEqual
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonOperator/GreaterThanOrEqual.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		GreaterThanOrEqual = 4,
		/// <summary>
		/// Equal
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonOperator/Equal.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		Equal = 5,
		/// <summary>
		/// NotEqual
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ValueComparisonOperator/NotEqual.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		NotEqual = 6,
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainEnumeration: ReferenceModeType
	/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeType
	/// </summary>
	[global::System.ComponentModel.TypeConverter(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.EnumConverter<ReferenceModeType, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel>))]
	[global::System.CLSCompliant(true)]
	public enum ReferenceModeType
	{
		/// <summary>
		/// General
		/// That other reference mode type.
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeType/General.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		General = 0,
		/// <summary>
		/// Popular
		/// The 'in' and 'fashionable' reference mode type.
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeType/Popular.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		Popular = 1,
		/// <summary>
		/// UnitBased
		/// The reference mode type based on units.
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeType/UnitBased.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		UnitBased = 2,
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainEnumeration: RangeInclusion
	/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.RangeInclusion
	/// </summary>
	[global::System.ComponentModel.TypeConverter(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.EnumConverter<RangeInclusion, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel>))]
	[global::System.CLSCompliant(true)]
	public enum RangeInclusion
	{
		/// <summary>
		/// NotSet
		/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.RangeInclusion.NotSet
		/// </summary>
		[global::System.ComponentModel.Browsable(false)]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RangeInclusion/NotSet.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		NotSet = 0,
		/// <summary>
		/// Open
		/// Indicates the specific value is not included in the range.
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RangeInclusion/Open.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		Open = 1,
		/// <summary>
		/// Closed
		/// Indicates the specific value is included in the range.
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.RangeInclusion/Closed.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		Closed = 2,
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainEnumeration: LogicalCombinationOperator
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.LogicalCombinationOperator
	/// </summary>
	[global::System.ComponentModel.TypeConverter(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.EnumConverter<LogicalCombinationOperator, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel>))]
	[global::System.CLSCompliant(true)]
	public enum LogicalCombinationOperator
	{
		/// <summary>
		/// And
		/// The logical and operator
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.LogicalCombinationOperator/And.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		And = 0,
		/// <summary>
		/// Or
		/// The logical inclusive-or operator
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.LogicalCombinationOperator/Or.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		Or = 1,
		/// <summary>
		/// Xor
		/// The logical exclusive-or operator
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.LogicalCombinationOperator/Xor.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		Xor = 2,
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainEnumeration: PathedRolePurpose
	/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRolePurpose
	/// </summary>
	[global::System.ComponentModel.TypeConverter(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.EnumConverter<PathedRolePurpose, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel>))]
	[global::System.CLSCompliant(true)]
	public enum PathedRolePurpose
	{
		/// <summary>
		/// SameFactType
		/// The role is the same fact type as the previous join or start role.
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRolePurpose/SameFactType.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		SameFactType = 0,
		/// <summary>
		/// PostInnerJoin
		/// The role represents an inner over a role player shared with the previous role in
		/// the path.
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRolePurpose/PostInnerJoin.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		PostInnerJoin = 1,
		/// <summary>
		/// PostOuterJoin
		/// The role represents an outer join over a role player shared with the previous
		/// role in the path.
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRolePurpose/PostOuterJoin.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		PostOuterJoin = 2,
		/// <summary>
		/// StartRole
		/// The role is the beginning of a path and directly attached to the root object
		/// type.
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[System.Obsolete("Replaced by root projection and function input support and the PostInnerJoin value.")]
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.PathedRolePurpose/StartRole.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		StartRole = -2,
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainEnumeration: NameGeneratorCasingOption
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorCasingOption
	/// </summary>
	[global::System.ComponentModel.TypeConverter(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.EnumConverter<NameGeneratorCasingOption, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel>))]
	[global::System.CLSCompliant(true)]
	public enum NameGeneratorCasingOption
	{
		/// <summary>
		/// None
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorCasingOption.None
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorCasingOption/None.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		None = 0,
		/// <summary>
		/// Camel
		/// Indicates the casing of the string is Camel
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorCasingOption/Camel.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		Camel = 1,
		/// <summary>
		/// Pascal
		/// Indicates the casing of the string is Pascal.
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorCasingOption/Pascal.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		Pascal = 2,
		/// <summary>
		/// Upper
		/// Indicates the casing of the string is Upper.
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorCasingOption/Upper.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		Upper = 3,
		/// <summary>
		/// Lower
		/// Indicates the casing of the string is Lower.
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorCasingOption/Lower.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		Lower = 4,
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainEnumeration: NameGeneratorSpacingFormat
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorSpacingFormat
	/// </summary>
	[global::System.ComponentModel.TypeConverter(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.EnumConverter<NameGeneratorSpacingFormat, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel>))]
	[global::System.CLSCompliant(true)]
	public enum NameGeneratorSpacingFormat
	{
		/// <summary>
		/// Retain
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorSpacingFormat.Retain
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorSpacingFormat/Retain.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		Retain = 0,
		/// <summary>
		/// Remove
		/// Indicates that spaces are Removed
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorSpacingFormat/Remove.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		Remove = 1,
		/// <summary>
		/// ReplaceWith
		/// Indicates that spaces are ReplacedWith a different string.
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorSpacingFormat/ReplaceWith.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		ReplaceWith = 2,
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainEnumeration: NameGeneratorSubjectArea
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorSubjectArea
	/// </summary>
	[global::System.ComponentModel.TypeConverter(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.EnumConverter<NameGeneratorSubjectArea, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel>))]
	[global::System.CLSCompliant(true)]
	public enum NameGeneratorSubjectArea
	{
		/// <summary>
		/// None
		/// Description for
		/// ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorSubjectArea.None
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorSubjectArea/None.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		None = 0,
		/// <summary>
		/// Prefix
		/// Indicates that the chosen subject will be prepended to the generated name.
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorSubjectArea/Prefix.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		Prefix = 1,
		/// <summary>
		/// Suffix
		/// Indicates that the chosen subject will be appended to the generated name.
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.NameGeneratorSubjectArea/Suffix.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		Suffix = 2,
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainEnumeration: GroupingMembershipTypeCompliance
	/// Description for
	/// ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingMembershipTypeCompliance
	/// </summary>
	[global::System.ComponentModel.TypeConverter(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.EnumConverter<GroupingMembershipTypeCompliance, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel>))]
	[global::System.CLSCompliant(true)]
	public enum GroupingMembershipTypeCompliance
	{
		/// <summary>
		/// NotExcluded
		/// Allow all elements that are not explicitly excluded by a GroupType.
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingMembershipTypeCompliance/NotExcluded.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		NotExcluded = 0,
		/// <summary>
		/// PartiallyApproved
		/// Allow all elements that are explicitly approved by at least one GroupType.
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingMembershipTypeCompliance/PartiallyApproved.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		PartiallyApproved = 1,
		/// <summary>
		/// FullyApproved
		/// Allow elements that are explicitly approved by all GroupTypes.
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.GroupingMembershipTypeCompliance/FullyApproved.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		FullyApproved = 2,
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainEnumeration: ModelErrorState
	/// Description for ORMSolutions.ORMArchitect.Core.ObjectModel.ModelErrorState
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum ModelErrorState
	{
		/// <summary>
		/// Error
		/// Error is fully enabled.
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelErrorState/Error.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		Error = 0,
		/// <summary>
		/// Ignored
		/// Error state is tracked, but ignored.
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ModelErrorState/Ignored.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		Ignored = 1,
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainEnumeration: ReferenceModeNamingChoice
	/// Specify how reference mode names are used in generated names for an &lt;see
	/// cref="ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType"/&gt;, including an
	/// option for deferring to the model.
	/// </summary>
	[global::System.ComponentModel.TypeConverter(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.EnumConverter<ReferenceModeNamingChoice, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel>))]
	[global::System.CLSCompliant(true)]
	public enum ReferenceModeNamingChoice
	{
		/// <summary>
		/// ValueTypeName
		/// Use the name of the identifying value type as the item name.
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeNamingChoice/ValueTypeName.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		ValueTypeName = 0,
		/// <summary>
		/// EntityTypeName
		/// Use the name of the entity type as the item name.
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeNamingChoice/EntityTypeName.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		EntityTypeName = 1,
		/// <summary>
		/// ReferenceModeName
		/// Use the name of the reference mode as the item name.
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeNamingChoice/ReferenceModeName.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		ReferenceModeName = 2,
		/// <summary>
		/// CustomFormat
		/// Use a custom format string using the other three values as replacement fields.
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeNamingChoice/CustomFormat.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		CustomFormat = 3,
		/// <summary>
		/// ModelDefault
		/// Use the default setting from the model.
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.ReferenceModeNamingChoice/ModelDefault.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		ModelDefault = 4,
	}
}
namespace ORMSolutions.ORMArchitect.Core.ObjectModel
{
	/// <summary>
	/// DomainEnumeration: EffectiveReferenceModeNamingChoice
	/// Specify how reference mode names are used in generated names for an &lt;see
	/// cref="ORMSolutions.ORMArchitect.Core.ObjectModel.ObjectType"/&gt;.
	/// </summary>
	[global::System.ComponentModel.TypeConverter(typeof(global::ORMSolutions.ORMArchitect.Framework.Design.EnumConverter<EffectiveReferenceModeNamingChoice, global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMModel>))]
	[global::System.CLSCompliant(true)]
	public enum EffectiveReferenceModeNamingChoice
	{
		/// <summary>
		/// ValueTypeName
		/// Use the name of the identifying value type as the item name.
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EffectiveReferenceModeNamingChoice/ValueTypeName.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		ValueTypeName = 0,
		/// <summary>
		/// EntityTypeName
		/// Use the name of the entity type as the item name.
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EffectiveReferenceModeNamingChoice/EntityTypeName.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		EntityTypeName = 1,
		/// <summary>
		/// ReferenceModeName
		/// Use a custom format string using the other three values as replacement fields.
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EffectiveReferenceModeNamingChoice/ReferenceModeName.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		ReferenceModeName = 2,
		/// <summary>
		/// CustomFormat
		/// Use a custom format with the other three values as replacement fields.
		/// </summary>
		[DslDesign::DescriptionResource("ORMSolutions.ORMArchitect.Core.ObjectModel.EffectiveReferenceModeNamingChoice/CustomFormat.Description", typeof(global::ORMSolutions.ORMArchitect.Core.ObjectModel.ORMCoreDomainModel), "ORMSolutions.ORMArchitect.Core.GeneratedCode.CoreDomainModelResx")]
		CustomFormat = 3,
	}
}

