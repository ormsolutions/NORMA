<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="XSDtoHTML.xslt"?>
<xs:schema
	id="SerializationExtensions"
	targetNamespace="http://schemas.neumont.edu/ORM/SDK/SerializationExtensions"
	elementFormDefault="qualified"
	attributeFormDefault="unqualified"
	xmlns="http://schemas.neumont.edu/ORM/SDK/SerializationExtensions"
	xmlns:se="http://schemas.neumont.edu/ORM/SDK/SerializationExtensions"
	xmlns:plx="http://schemas.neumont.edu/CodeGeneration/PLiX" 
	xmlns:xs="http://www.w3.org/2001/XMLSchema">
	<xs:annotation>
		<xs:appinfo source="Common Public License Copyright Notice">
			Natural Object-Role Modeling Architect for Visual Studio

			Copyright © Neumont University. All rights reserved.
			Copyright © ORM Solutions, LLC. All rights reserved.

			The use and distribution terms for this software are covered by the
			Common Public License 1.0 (http://opensource.org/licenses/cpl) which
			can be found in the file CPL.txt at the root of this distribution.
			By using this software in any fashion, you are agreeing to be bound by
			the terms of this license.

			You must not remove this notice, or any other, from this software.
		</xs:appinfo>
	</xs:annotation>

	<xs:import namespace="http://schemas.neumont.edu/CodeGeneration/PLiX"/>
	<xs:simpleType name="ElementWriteStyle">
		<xs:annotation>
			<xs:documentation>How to write and element.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="NotWritten">
				<xs:annotation>
					<xs:documentation>Do not write.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="Element">
				<xs:annotation>
					<xs:documentation>Write as an element. [Default]</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="PrimaryLinkElement">
				<xs:annotation>
					<xs:documentation>Write as the primary definition for a link. A link that has attributes or serialized links that reference it must have exactly one primary link element.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="EmbeddingLinkElement">
				<xs:annotation>
					<xs:documentation>Write as the primary definition for the link that embeds the parent element. Allows attributes and links to embedding relationships.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="DoubleTaggedElement">
				<xs:annotation>
					<xs:documentation>Write as a double tagged element.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="AttributeWriteStyle">
		<xs:restriction base="xs:string">
			<xs:enumeration value="NotWritten">
				<xs:annotation>
					<xs:documentation>Do not write.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="Attribute">
				<xs:annotation>
					<xs:documentation>Write as an attribute. [Default]</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="Element">
				<xs:annotation>
					<xs:documentation>Write as an element.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="DoubleTaggedElement">
				<xs:annotation>
					<xs:documentation>Write as a double tagged element.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>
	<xs:attributeGroup name="ElementAttributes">
		<xs:attribute name="Prefix" type="xs:string">
			<xs:annotation>
				<xs:documentation>A prefix chosen from the list of supported Namespace prefixes. The default prefix is used if Prefix is not specified, except for attributes, where unqualified attributes are the default.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="Name" type="xs:string">
			<xs:annotation>
				<xs:documentation>The name of the element or attribute</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="WriteStyle" type="ElementWriteStyle"/>
		<xs:attribute name="DoubleTagName" type="xs:string">
			<xs:annotation>
				<xs:documentation>The name of the double tag. [WriteStyle=DoubleTaggedElement]</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="LinkOnly" type="xs:boolean" default="false">
			<xs:annotation>
				<xs:documentation>The class is never used as an element name in a situation where the containing relationship information cannot uniquely identify the type of the opposite role player. Should be true for most relationship classes, unless those relationships are referenced in a ChildElement that contains more than one relationship type.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:attributeGroup name="AttributeAttributes">
		<xs:attribute name="Prefix" type="xs:string">
			<xs:annotation>
				<xs:documentation>The new prefix.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="Name" type="xs:string">
			<xs:annotation>
				<xs:documentation>The new name.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="WriteCustomStorage" type="canonicalBoolean">
			<xs:annotation>
				<xs:documentation>true to write attributes that are custom storage.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="WriteStyle" type="AttributeWriteStyle">
			<xs:annotation>
				<xs:documentation>How to write.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="ReadOnly" type="xs:boolean" default="false">
			<xs:annotation>
				<xs:documentation>Use in place of writeStyle="NotWritten" to allow an attribute to be read but not written. Used in upgrade scenarios.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="NotSorted" type="canonicalBoolean" default="false">
			<xs:annotation>
				<xs:documentation>Set to true to ignore this element when Element.SortChildElements is true. Applies only if the WriteStyle is Element.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="DoubleTagName" type="xs:string">
			<xs:annotation>
				<xs:documentation>The name of the double tag. [WriteStyle=DoubleTaggedElement]</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:attributeGroup name="EmbedAttributes">
		<xs:attribute name="RelationshipName" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation>The relationship name.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="RoleName" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation>The role name.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:attributeGroup name="LinkAttributes">
		<xs:attributeGroup ref="EmbedAttributes"/>
		<!-- The default here has positive length default instead of an optional use so that it can participate in a key-->
		<xs:attribute name="CreateAsRelationshipName" type="xs:string" default=" ">
			<xs:annotation>
				<xs:documentation>The name a relationship derived from the one defining the roles.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:element name="ConditionalName">
		<xs:annotation>
			<xs:documentation>Renames an element based on a PLIX condition. The last PLiX element is assumed to be condition, other elements are preliminary code.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:any namespace="http://schemas.neumont.edu/CodeGeneration/PLiX" processContents="lax" minOccurs="1"  maxOccurs="unbounded"/>
			</xs:sequence>
			<xs:attribute name="Name" type="xs:string" use="required">
				<xs:annotation>
					<xs:documentation>The new name of the element.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="WriteStyle" type="ElementWriteStyle"/>
			<xs:attribute name="DoubleTagName" type="xs:string">
				<xs:annotation>
					<xs:documentation>The name of the double tag. [WriteStyle=DoubleTaggedElement]</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="ConditionalSerialization">
		<xs:annotation>
			<xs:documentation>The body of a PLIX function to determine if an element should be serialized. Must include a PLIX return statement.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:any namespace="http://schemas.neumont.edu/CodeGeneration/PLiX" processContents="lax" minOccurs="1"  maxOccurs="unbounded"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="CustomSerializedElements">
		<xs:annotation>
			<xs:documentation>The root element.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="Copyright" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Copyright notice which applies to both the source document and anything generated from it.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:element name="CopyrightLine" type="xs:string" maxOccurs="unbounded"/>
						</xs:sequence>
						<xs:attribute name="name" type="xs:string" use="required"/>
					</xs:complexType>
				</xs:element>
				<xs:choice maxOccurs="unbounded">
					<xs:element name="DomainModel" type="DomainModelType">
						<xs:annotation>
							<xs:documentation>Add model-level custom serialization settings.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Element" type="ElementType">
						<xs:annotation>
							<xs:documentation>Customizes an element.</xs:documentation>
						</xs:annotation>
						<xs:key name="ElementLinkKey">
							<xs:selector xpath="se:Link | se:StandaloneLink"/>
							<xs:field xpath="@RelationshipName"/>
							<xs:field xpath="@RoleName"/>
							<xs:field xpath="@CreateAsRelationshipName"/>
						</xs:key>
						<xs:keyref refer="ElementLinkKey" name="ContainedElementLinkKeyRef">
							<xs:selector xpath="se:Container/se:Link" />
							<xs:field xpath="@RelationshipName" />
							<xs:field xpath="@RoleName" />
							<xs:field xpath="@CreateAsRelationshipName" />
						</xs:keyref>
						<xs:keyref refer="ElementLinkKey" name="DoubleContainedElementLinkKeyRef">
							<xs:selector xpath="se:Container/se:Container/se:Link" />
							<xs:field xpath="@RelationshipName" />
							<xs:field xpath="@RoleName" />
							<xs:field xpath="@CreateAsRelationshipName" />
						</xs:keyref>
						<xs:unique name="UniqueLinkEmbed">
							<xs:selector xpath="se:StandaloneLink | se:Link | se:Container/se:Embed | se:Container/se:Container/se:Embed"/>
							<xs:field xpath="@RelationshipName"/>
							<xs:field xpath="@RoleName"/>
							<xs:field xpath="@CreateAsRelationshipName"/>
						</xs:unique>
					</xs:element>
				</xs:choice>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:complexType name="DomainModelType">
		<xs:sequence>
			<xs:element name="Namespaces">
				<xs:annotation>
					<xs:documentation>Add namespaces to the XML document.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="Namespace" minOccurs="1" maxOccurs="unbounded">
							<xs:annotation>
								<xs:documentation>Defines a namespace.</xs:documentation>
							</xs:annotation>
							<xs:complexType>
								<xs:attribute name="Prefix" type="xs:string" use="required">
									<xs:annotation>
										<xs:documentation>The namespace prefix.</xs:documentation>
									</xs:annotation>
								</xs:attribute>
								<xs:attribute name="URI" type="xs:string" use="required">
									<xs:annotation>
										<xs:documentation>The URI of the schema.</xs:documentation>
									</xs:annotation>
								</xs:attribute>
								<xs:attribute name="SchemaFile" type="xs:string">
									<xs:annotation>
										<xs:documentation>A schema file name with no path. The file must be built into the model's assembly as an embedded resource with the same namespace as the DomainModel. This is most easily done by placing the schema file in the same directory as the model file, and making the namespace for the model file correspond to the default namespace for the directory (the project default namespace with the directory path appended)</xs:documentation>
									</xs:annotation>
								</xs:attribute>
								<xs:attribute name="DefaultPrefix" type="canonicalBoolean" default="false">
									<xs:annotation>
										<xs:documentation>The default prefix for all elements in this DomainModel</xs:documentation>
									</xs:annotation>
								</xs:attribute>
							</xs:complexType>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="RootElements" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Elements that appear as top-level xml nodes inside the ORM2 tag.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence minOccurs="0" maxOccurs="unbounded">
						<xs:element name="RootElement">
							<xs:complexType>
								<xs:sequence>
									<xs:element ref="ConditionalSerialization" minOccurs="0"/>
								</xs:sequence>
								<xs:attribute name="Class" type="xs:string" use="required">
									<xs:annotation>
										<xs:documentation>The name of a class that corresponds to an xml root element for this DomainModel</xs:documentation>
									</xs:annotation>
								</xs:attribute>
								<xs:attribute name="Name" type="xs:string" use="optional">
									<xs:annotation>
										<xs:documentation>The tag name representing the class. The value of the Class attribute is assumed if Name is not specified.</xs:documentation>
									</xs:annotation>
								</xs:attribute>
								<xs:attribute name="Prefix" type="xs:string" use="optional">
									<xs:annotation>
										<xs:documentation>A prefix chosen from the list of supported Namespace prefixes. The default prefix is used if Prefix is not specified.</xs:documentation>
									</xs:annotation>
								</xs:attribute>
							</xs:complexType>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="RootLinks" minOccurs="0">
				<xs:complexType>
					<xs:sequence minOccurs="0" maxOccurs="unbounded">
						<xs:element name="Container">
							<xs:complexType>
								<xs:sequence minOccurs="1" maxOccurs="unbounded">
									<xs:element name="RootLink">
										<xs:complexType>
											<xs:sequence>
												<xs:element ref="ConditionalSerialization" minOccurs="0"/>
												<xs:group ref="StandaloneLinkRoleGroup"/>
											</xs:sequence>
											<xs:attributeGroup ref="StandaloneLinkAttributeGroup"/>
										</xs:complexType>
									</xs:element>
								</xs:sequence>
								<xs:attribute name="Name" type="xs:string" use="required"/>
								<xs:attribute name="Prefix" type="xs:string" use="optional"/>
							</xs:complexType>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="OmittedDomainElements" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Block elements and links from serializating at the domain level.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:choice minOccurs="0" maxOccurs="unbounded">
						<xs:element name="OmitClass">
							<xs:annotation>
								<xs:documentation>Stop all classes of this type from being serialized in the model.</xs:documentation>
							</xs:annotation>
							<xs:complexType>
								<xs:attribute name="Class" type="xs:string" use="required">
									<xs:annotation>
										<xs:documentation>The class name to block.</xs:documentation>
									</xs:annotation>
								</xs:attribute>
								<xs:attribute name="Namespace" type="xs:string" use="optional">
									<xs:annotation>
										<xs:documentation>An alternate namespace for the class. If this is not specified, the class is assumed to be in the namespace specified by the containing Using element.</xs:documentation>
									</xs:annotation>
								</xs:attribute>
							</xs:complexType>
						</xs:element>
						<xs:element name="OmitRelationship">
							<xs:annotation>
								<xs:documentation>Stop all relationships of this type from being serialized in the model.</xs:documentation>
							</xs:annotation>
							<xs:complexType>
								<xs:attribute name="Class" type="xs:string" use="required">
									<xs:annotation>
										<xs:documentation>The relationship name to block.</xs:documentation>
									</xs:annotation>
								</xs:attribute>
								<xs:attribute name="Namespace" type="xs:string" use="optional">
									<xs:annotation>
										<xs:documentation>An alternate namespace for the relationship. If this is not specified, the relationship is assumed to be in the namespace specified by the containing Using element.</xs:documentation>
									</xs:annotation>
								</xs:attribute>
							</xs:complexType>
						</xs:element>
					</xs:choice>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="Class" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation>The class to add the namespaces to.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="Sealed" type="canonicalBoolean" default="false">
			<xs:annotation>
				<xs:documentation>Set to true if this DomainModel class is sealed (cannot be inherited from).</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="StandaloneLinkType">
		<xs:annotation>
			<xs:documentation>Represents a link that is created directly without being in the parent context of one of its role players.</xs:documentation>
		</xs:annotation>
		<xs:group ref="StandaloneLinkRoleGroup"/>
		<xs:attributeGroup ref="StandaloneLinkAttributeGroup"/>
	</xs:complexType>
	<xs:group name="StandaloneLinkRoleGroup">
		<xs:sequence>
			<xs:element name="Role" minOccurs="2" maxOccurs="2">
				<xs:complexType>
					<xs:attribute name="RoleName" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The name of the role to serialize.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="Name" type="xs:string" use="optional">
						<xs:annotation>
							<xs:documentation>The attribute name written for the role name. The RoleName is used directly if this is not specified.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
	</xs:group>
	<xs:attributeGroup name="StandaloneLinkAttributeGroup">
		<xs:attribute name="Class" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation>The name of the link class.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="Prefix" type="xs:string">
			<xs:annotation>
				<xs:documentation>A prefix chosen from the list of supported Namespace prefixes. The default prefix is used if Prefix is not specified, except for attributes, where unqualified attributes are the default.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="Name" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>The name to write for the element. The Class name is used if the Name is not specified. This is only used if we are not the PrimaryLinkElement. For PrimaryLinkElement links all serialization information except for the source and target role players comes from the class itself.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="PrimaryLinkElement" type="xs:boolean" default="false">
			<xs:annotation>
				<xs:documentation>If true, then an id attribute will be written out for this link and serialization will defer to the link treated as a class after the source and target role player elements are written.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:complexType name="ElementType">
		<xs:sequence>
			<xs:sequence>
				<xs:element ref="ConditionalSerialization" minOccurs="0"/>
				<xs:element ref="ConditionalName" minOccurs="0" maxOccurs="unbounded"/>
			</xs:sequence>
			<xs:choice minOccurs="0" maxOccurs="unbounded">
				<xs:element name="SharedAttributeCode">
					<xs:annotation>
						<xs:documentation>Define code to define variables that can be shared by any following attributes</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:any namespace="http://schemas.neumont.edu/CodeGeneration/PLiX" processContents="lax" minOccurs="1"  maxOccurs="unbounded"/>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element name="Attribute" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation>
						<xs:documentation>Customizes an attribute on the current element.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:element name="Condition" minOccurs="0" maxOccurs="unbounded">
								<xs:annotation>
									<xs:documentation>Use different attribute properties based on a PLIX condition. The last PLiX element is assumed to be condition, other elements are preliminary code. If the condition is plx:falseKeyword then this attribute can be read but will not be written, allowing an attribute name to be easily deprecated and replaced.</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:sequence>
										<xs:any namespace="http://schemas.neumont.edu/CodeGeneration/PLiX" processContents="lax" minOccurs="1"  maxOccurs="unbounded"/>
									</xs:sequence>
									<xs:attributeGroup ref="AttributeAttributes"/>
								</xs:complexType>
							</xs:element>
							<xs:element name="RolePlayed" minOccurs="0" maxOccurs="unbounded">
								<xs:annotation>
									<xs:documentation>Matches the role played.</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:attribute name="ID" type="xs:string" use="required">
										<xs:annotation>
											<xs:documentation>The ID to match.</xs:documentation>
										</xs:annotation>
									</xs:attribute>
									<xs:attributeGroup ref="AttributeAttributes"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
						<xs:attribute name="ID" type="xs:string" use="required">
							<xs:annotation>
								<xs:documentation>The ID to match.</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attributeGroup ref="AttributeAttributes"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="Container" type="ContainerType">
					<xs:annotation>
						<xs:documentation>Creates a container. Containers are required for all embedded relationships.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="Link">
					<xs:annotation>
						<xs:documentation>Customizes a link.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:element ref="ConditionalName" minOccurs="0" maxOccurs="unbounded"/>
						</xs:sequence>
						<xs:attribute name="NotSorted" type="canonicalBoolean" default="false">
							<xs:annotation>
								<xs:documentation>Set to true to ignore this element when Element.SortChildElements is true.</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attributeGroup ref="LinkAttributes"/>
						<xs:attributeGroup ref="ElementAttributes"/>
						<xs:attribute name="RelationshipTypeQualifier" type="plx:qualifierNameType">
							<xs:annotation>
								<xs:documentation>(optional) The type qualifier for the relationship. Generally, this is an external namespace.</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="AllowDuplicates" type="canonicalBoolean">
							<xs:annotation>
								<xs:documentation>Allow duplicate links of this type between the parent and referenced element. Use with caution: you should only specify one end of this. The other end should be marked as NotWritten.</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="ForwardReferenceRolePlayerType" type="plx:simpleNameType" use="optional">
							<xs:annotation>
								<xs:documentation>(optional) For a relationship with an opposite role player that is a base type and may be stored as a top level element, the standard behavior of creating a forward reference as an arbitrary derived type that satisfies the role player type. With top-level elements, creating these dummy elements during load can effect the final order of the loaded collection, which results in radical changes in the resaved file.</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="ForwardReferenceRolePlayerTypeQualifier" type="plx:qualifierNameType" use="optional">
							<xs:annotation>
								<xs:documentation>(optional) The type qualifier for the forward reference role player type.</xs:documentation>
							</xs:annotation>
						</xs:attribute>
					</xs:complexType>
				</xs:element>
				<xs:element name="StandaloneLink">
					<xs:annotation>
						<xs:documentation>An embedding link to a directly created link element. The RelationshipName, RoleName, and CreateAsRelationshipName attributes on this element determine the relationship from the context element to the link, which is created separately based on additional attributes. A writestyle of PrimaryLinkElement in this case corresponds to the directly created link class, not the link to the element from this context. Any information about the link from the context element can be written with an EmbeddingLinkElement contained in the element itself.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:complexContent>
							<xs:extension base="StandaloneLinkType">
								<xs:attributeGroup ref="LinkAttributes"/>
								<xs:attribute name="NotSorted" type="canonicalBoolean" default="false">
									<xs:annotation>
										<xs:documentation>Set to true to ignore this element when Element.SortChildElements is true.</xs:documentation>
									</xs:annotation>
								</xs:attribute>
							</xs:extension>
						</xs:complexContent>
					</xs:complexType>
				</xs:element>
			</xs:choice>
		</xs:sequence>
		<xs:attribute name="Class" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation>The class to add the element extensions to.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="SortChildElements" type="canonicalBoolean" default="false">
			<xs:annotation>
				<xs:documentation>All link and container elements should be explicitly sorted to force them to write out in a fixed order.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="UnsortedElementsFirst" type="canonicalBoolean" default="false">
			<xs:annotation>
				<xs:documentation>If SortChildElements is true and elements in a base class are unsorted, or child elements in this class are marked as unsorted, then all unsorted elements are placed after all sorted elements. However, this makes it very difficult to establish the element as the head of an XSD substitution group. Set UnsortedElementsFirst to true to place unsorted elements before sorted elements instead of after.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attributeGroup ref="ElementAttributes"/>
		<xs:attribute name="Override" type="canonicalBoolean" default="false">
			<xs:annotation>
				<xs:documentation>Set to true if this element class is derived from another custom serialized element. The assumption is made that the base class' custom serialization implementation is compatible with the current standard generated code.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="Sealed" type="canonicalBoolean" default="false">
			<xs:annotation>
				<xs:documentation>Set to true if this element class is sealed (cannot be inherited from).</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="ContainerType">
		<xs:sequence>
			<xs:element ref="ConditionalName" minOccurs="0" maxOccurs="unbounded"/>
			<xs:choice minOccurs="1" maxOccurs="unbounded">
				<xs:group ref="containerElements"/>
				<xs:element name="Container">
					<xs:annotation>
						<xs:documentation>A nested container. Nested containers must be sorted, so a NotSorted attribute is not provided.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:choice minOccurs="1" maxOccurs="unbounded">
							<xs:group ref="containerElements"/>
						</xs:choice>
						<xs:attributeGroup ref="ElementAttributes"/>
						<xs:attribute name="SortChildElements" type="canonicalBoolean" default="false">
							<xs:annotation>
								<xs:documentation>If this is set, order the roles within the container element along with the position of the container element itself.</xs:documentation>
							</xs:annotation>
						</xs:attribute>
					</xs:complexType>
				</xs:element>
			</xs:choice>
		</xs:sequence>
		<xs:attribute name="SortChildElements" type="canonicalBoolean" default="false">
			<xs:annotation>
				<xs:documentation>If this is set, order the roles within the container element along with the position of the container element itself. Works with SortChildElements on the parent Element tag, which must be set for this to have any effect.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="NotSorted" type="canonicalBoolean" default="false">
			<xs:annotation>
				<xs:documentation>Set to true to ignore this element when Element.SortChildElements is true.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attributeGroup ref="ElementAttributes"/>
	</xs:complexType>
	<xs:group name="containerElements">
		<xs:choice>
			<xs:element name="Embed">
				<xs:annotation>
					<xs:documentation>An embedded child element. Embedded elements get all custom xml information from their corresponding Element definitions.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attributeGroup ref="EmbedAttributes"/>
				</xs:complexType>
			</xs:element>
			<xs:element name="Link">
				<xs:annotation>
					<xs:documentation>A link element grouped inside a container element. The attributes specified here must match a corresponding Link element directly inside an Element node.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attributeGroup ref="LinkAttributes"/>
				</xs:complexType>
			</xs:element>
		</xs:choice>
	</xs:group>
	<xs:simpleType name="canonicalBoolean">
		<xs:restriction base="xs:boolean">
			<xs:pattern value="true|false"/>
		</xs:restriction>
	</xs:simpleType>
</xs:schema>
